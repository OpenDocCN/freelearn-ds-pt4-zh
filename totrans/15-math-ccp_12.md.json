["```py\n ATGGTGCATCTGACTCCTGAGGAGAAGACTGCTGTC\n```", "```py\n import numpy as np\n# Set the seed for the numpy random number generator. # This ensures that we get reproducible results\nnp.random.seed(17335)\n### Define our states\n# Our states are \"Susceptible\" = index 0,\n# \"Infected\" = index 1\n# \"Recovered\" = index 2\nstate_map = {0:'S', 1:'I', 2:'R'}\n### Define our rate matrix\nrate_matrix = np.array([\n    [0.9, 0.1, 0.0],[0.0, 0.8, 0.2],[0.05, 0.0, 0.95]])\n### We'll start in the susceptible state and then sample\n### our next state and repeat for 10 iterations\nn_iter=10\n# Set initial state and its label\ncurrent_state = 0\nstates_sequence = [state_map[current_state]]\n# Do 10 iterations\nfor i in range(n_iter):\n    # Get transition probabilities when starting from\n    # our current state\n    next_state_probs = rate_matrix[current_state,:]\n    # Use numpy function to sample an integer from [0,1,2]\n    # with the specified transition probabilities\n    next_state = np.random.choice(3, p=next_state_probs)\n    # Update our current state to this new state\n    # and get its label\n    current_state = next_state\n    states_sequence.extend(state_map[current_state])\n```", "```py\n print(states_sequence)\n```", "```py\n ['S', 'S', 'S', 'S', 'S', 'I', 'R', 'R', 'R', 'R', 'R']\n```", "```py\n # Compute the right-eigenvectors and eigenvalues of our rate matrix\nrate_eigen = np.linalg.eig(np.transpose(rate_matrix))\n```", "```py\n # The eigenvalues are held in the first element of the tuple\nrate_eigen[0]\n```", "```py\n array([0.825+0.06614378j, 0.825-0.06614378j, 1.0+0.j])\n```", "```py\n # Extract the last eigenvector (we can drop the zero imaginary part)\npi_stable = np.real(rate_eigen[1][:,2])\n# Rescale the vector so its elements sum to 1\npi_stable /=np.sum(pi_stable)\n```", "```py\n # Print the stable distribution\npi_stable\n```", "```py\n array([0.28571429, 0.14285714, 0.57142857])\n```", "```py\n # Set the initial state distribution. We'll\n# set it to a distribution representing 100% of people\n# being in the susceptible state\ncurrent_distribution = np.array([1.0, 0.0, 0.0])\nn_iter = 100\nfor i in range(n_iter):\n    # Get the state distribution at the next timepoint by\n    # multiplying by the transition rate matrix\n    next_distribution = np.matmul(current_distribution, rate_matrix)\n    current_distribution = next_distribution\ncurrent_distribution\n```", "```py\n array([0.28571429, 0.14285715, 0.57142856])\n```"]