["```py\n import pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.gaussian_process import GaussianProcessRegressor\nfrom sklearn.gaussian_process.kernels import RBF, WhiteKernel\n# Read in the data\ndf_gp = pd.read_csv('../Data/gp_data.csv')\n```", "```py\n # Look at the data\ndf_gp.head(5)\n```", "```py\n x          Y\n    -3.213717   15.410904\n    -2.583426   22.534045\n    -2.147617   4.547179\n    -1.634624   9.537378\n    -1.50614    8.213919\n```", "```py\n # Plot the training data\nplt.scatter(df_gp['x'], df_gp['y'])\nplt.title('Gaussian Process Regression Training Data')\nplt.xlabel('x')\nplt.ylabel('y')\nplt.show()\n```", "```py\n # Specify our kernel\nkernel = 1*RBF(length_scale=1.0) + WhiteKernel(\n    noise_level_bounds=(1.0, 20.0))\n```", "```py\n # Create GaussianProcessRegressor object which we will use to do our \n# Gaussian Process Regression\ngaussian_process = GaussianProcessRegressor(kernel=kernel)\n```", "```py\n # Optimize the model parameters\ngaussian_process.fit(df_gp['x'].values.reshape(-1,1), df_gp['y'])\n```", "```py\n # Look at the kernel object after we have optimized it\ngaussian_process.kernel_\n```", "```py\n 9.24**2 * RBF(length_scale=0.412) + WhiteKernel(noise_level=8.33)\n```", "```py\n # Create a range of x values for prediction\nx_predict = np.arange(\n    df_gp['x'].min(), df_gp['x'].max(), 0.01).reshape(-1,1)\n# Get the prediction (expectation) and standard deviation. mean_prediction, std_prediction = gaussian_process.predict(x_predict,\n    return_std=True)\n```", "```py\n # Calculate true expectation value\ny_true = [(-3.4 - 2.0*x +(x-1.0)**2 + 5.5*np.sin(5.0*x-4.0))\n          [0] for x in x_predict]\n```", "```py\n # Plot the predictions\nplt.plot(x_predict, y_true, label=\"True value\", linestyle=\"dotted\")\nplt.scatter(df_gp['x'], df_gp['y'], label=\"Observations\")\nplt.plot(x_predict, mean_prediction, label=\"Mean prediction\")\nplt.fill_between(\n     x_predict.ravel(),\n     mean_prediction - 1.96 * std_prediction,\n     mean_prediction + 1.96 * std_prediction,\n     alpha=0.5,\n     label=r\"95% confidence interval\",\n)\nplt.title('Gaussian Process Regression Predictions')\nplt.xlabel('x')\nplt.ylabel('y')\nplt.legend()\nplt.show()\n```"]