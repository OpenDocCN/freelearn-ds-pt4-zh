["```py\nlist_a = [\"John\", 33,\"Toronto\", True]\nprint(list_a) \n```", "```py\n['John', 33, 'Toronto', True] \n```", "```py\n    bin_colors=['Red','Green','Blue','Yellow'] \n    ```", "```py\n    bin_colors[1] \n    ```", "```py\n    'Green' \n    ```", "```py\n    bin_colors[0:2] \n    ```", "```py\n    ['Red', 'Green'] \n    ```", "```py\n    bin_colors=['Red','Green','Blue','Yellow']\n    bin_colors[2:] \n    ```", "```py\n    ['Blue', 'Yellow'] \n    ```", "```py\n    bin_colors[:2] \n    ```", "```py\n    ['Red', 'Green'] \n    ```", "```py\n    bin_colors=['Red','Green','Blue','Yellow']\n    bin_colors[:-1] \n    ```", "```py\n    ['Red', 'Green', 'Blue'] \n    ```", "```py\n    bin_colors[:-2] \n    ```", "```py\n    ['Red', 'Green'] \n    ```", "```py\n    bin_colors[-2:-1] \n    ```", "```py\n    ['Blue'] \n    ```", "```py\n    a = [1,2,[100,200,300],6]\n    max(a[2]) \n    ```", "```py\n    300 \n    ```", "```py\n    a[2][1] \n    ```", "```py\n    200 \n    ```", "```py\n    for color_a in bin_colors:\n        print(color_a + \" Square\") \n    ```", "```py\n    Red Square \n    Green Square \n    Blue Square \n    Yellow Square \n    ```", "```py\nbin_colors = ['Red', 'Green', 'Blue', 'Yellow']\nbin_colors.append('Purple')\nprint(bin_colors) \n```", "```py\n['Red', 'Green', 'Blue', 'Yellow', 'Purple'] \n```", "```py\nbin_colors.pop()\nprint(bin_colors) \n```", "```py\n['Red', 'Green', 'Blue', 'Yellow'] \n```", "```py\nx = range(4)\nfor n in x:\n  print(n) \n```", "```py\n0 1 2 3 \n```", "```py\nodd_num = range(3,30,2)\nfor n in odd_num:\n  print(n) \n```", "```py\n3 5 7 9 11 13 15 17 19 21 23 25 27 29 \n```", "```py\nfor i in odd_num:\n    print(i*100) \n```", "```py\n300 500 700 900 1100 1300 1500 1700 1900 2100 2300 2500 2700 2900 \n```", "```py\nimport random\ndice_output = [random.randint(1, 6) for x in range(10)]     \nprint(dice_output) \n```", "```py\n[6, 6, 6, 6, 2, 4, 6, 5, 1, 4] \n```", "```py\nbin_colors=('Red','Green','Blue','Yellow')\nprint(f\"The second element of the tuple is {bin_colors[1]}\") \n```", "```py\nThe second element of the tuple is Green \n```", "```py\nprint(f\"The elements after third element onwards are {bin_colors[2:]}\") \n```", "```py\nThe elements after third element onwards are ('Blue', 'Yellow') \n```", "```py\n# Nested Tuple Data structure\nnested_tuple = (1,2,(100,200,300),6)\nprint(f\"The maximum value of the inner tuple {max(nested_tuple[2])}\") \n```", "```py\nThe maximum value of the inner tuple 300 \n```", "```py\nbin_colors ={\n  \"manual_color\": \"Yellow\",\n  \"approved_color\": \"Green\",\n  \"refused_color\": \"Red\"\n}\nprint(bin_colors) \n```", "```py\n{'manual_color': 'Yellow', 'approved_color': 'Green', 'refused_color': 'Red'} \n```", "```py\n    bin_colors.get('approved_color') \n    ```", "```py\n    'Green' \n    ```", "```py\n    bin_colors['approved_color'] \n    ```", "```py\n    'Green' \n    ```", "```py\n    bin_colors['approved_color']=\"Purple\"\n    print(bin_colors) \n    ```", "```py\n    {'manual_color': 'Yellow', 'approved_color': 'Purple', 'refused_color': 'Red'} \n    ```", "```py\nfor k,v in bin_colors.items():\n    print(k,'->',v+' color') \n```", "```py\nmanual_color -> Yellow color \napproved_color -> Purple color \nrefused_color -> Red color \n```", "```py\ndel bin_colors['approved_color']\nprint(bin_colors) \n```", "```py\n{'manual_color': 'Yellow', 'refused_color': 'Red'} \n```", "```py\ngreen = {'grass', 'leaves'}\nprint(green) \n```", "```py\n{'leaves', 'grass'} \n```", "```py\ngreen = {'grass', 'leaves','leaves'}\nprint(green) \n```", "```py\n{'leaves', 'grass'} \n```", "```py\nyellow = {'dandelions', 'fire hydrant', 'leaves'}\nred = {'fire hydrant', 'blood', 'rose', 'leaves'} \n```", "```py\nprint(f\"The union of yellow and red sets is {yellow|red}\") \n```", "```py\nThe union of yellow and red sets is {leaves, blood, dandelions, fire hydrant, rose} \n```", "```py\nprint(f\"The intersection of yellow and red is {yellow&red}\") \n```", "```py\nThe intersection of yellow and red is {'fire hydrant', 'leaves'} \n```", "```py\nfor x in yellow:\n    print(x) \n```", "```py\nfire hydrant \nleaves \ndandelions \n```", "```py\nprint(\"leaves\" in yellow) \n```", "```py\nTrue \n```", "```py\nemployees_dict = {\n    \"Ikrema Hamza\": \"555-555-5555\",\n    \"Joyce Doston\" : \"212-555-5555\",\n} \n```", "```py\nemployees_set = {\n    \"Ikrema Hamza\",\n    \"Joyce Doston\"\n} \n```", "```py\nimport pandas as pd\nperson_1 = pd.Series(['John',\"Male\",33,True])\nprint(person_1) \n```", "```py\n0    John \n1    Male \n2    33 \n3    True \ndtype:    object \n```", "```py\nemployees_df = pd.DataFrame([\n    ['1', 'Fares', 32, True],\n    ['2', 'Elena', 23, False],\n    ['3', 'Doug', 40, True]])\nemployees_df.columns = ['id', 'name', 'age', 'decision']\nprint(employees_df) \n```", "```py\n id    name    age    decision\n0    1    Fares    32    True\n1    2    Elena    23    False\n2    3    Doug    40    True \n```", "```py\ndf[['name','age']] \n```", "```py\n name    age\n0    Fares    32\n1    Elena    23\n2    Doug     40 \n```", "```py\ndf.iloc[:,3] \n```", "```py\n0    True \n1    False \n2    True \nName: decision, dtype: bool \n```", "```py\ndf.iloc[1:3,:] \n```", "```py\n id    name    age    decision\n1    2    Elena    23    False \n```", "```py\ndf[df.age>30] \n```", "```py\n id    name    age    decision\n0    1    Fares    32    True\n2    3    Doug     40    True \n```", "```py\ndf[(df.age<35)&(df.decision==True)]    id    name    age    decision \n```", "```py\n id    name    age    decision\n0    1    Fares    32    True \n```", "```py\nimport numpy as np\nmatrix_1 = np.array([[11, 12, 13], [21, 22, 23], [31, 32, 33]])\nprint(matrix_1) \n```", "```py\n[[11 12 13] \n [21 22 23] \n [31 32 33]] \n```", "```py\nprint(type(matrix_1)) \n```", "```py\n<class 'numpy.ndarray'> \n```", "```py\nprint(matrix_1.transpose()) \n```", "```py\narray([[11, 21, 31], \n       [12, 22, 32], \n       [13, 23, 33]]) \n```", "```py\n    vector_1 = [22,33,44,55]\n    print(vector_1) \n    ```", "```py\n    [22, 33, 44, 55] \n    ```", "```py\n    print(type(vector_1)) \n    ```", "```py\n    <class 'list'> \n    ```", "```py\n    vector_2 = np.array([22,33,44,55])\n    print(vector_2) \n    ```", "```py\n    [22 33 44 55] \n    ```", "```py\n    print(type(vector_2)) \n    ```", "```py\n    <class 'numpy.ndarray'> \n    ```", "```py\nlarge_number=1000_000_000\nprint(large_number) \n```", "```py\n1000000000 \n```", "```py\nclass Stack:\n     def __init__(self):\n         self.items = []\n     def isEmpty(self):\n         return self.items == []\n     def push(self, item):\n         self.items.append(item)\n     def pop(self):\n         return self.items.pop()\n     def peek(self):\n         return self.items[len(self.items)-1]\n     def size(self):\n         return len(self.items) \n```", "```py\nPopulate the stack\nstack=Stack()\nstack.push('Red')\nstack.push('Green')\nstack.push(\"Blue\")\nstack.push(\"Yellow\") \n```", "```py\nPop\nstack.pop()\nstack.isEmpty() \n```", "```py\nclass Queue(object):\n   def __init__(self):\n      self.items = []\n   def isEmpty(self):\n      return self.items == []\n   def enqueue(self, item):\n       self.items.insert(0,item)\n   def dequeue(self):\n      return self.items.pop()\n   def size(self):\n      return len(self.items) \n```", "```py\n# Using Queue\nqueue = Queue()\nqueue.enqueue(\"Red\")\nqueue.enqueue('Green')\nqueue.enqueue('Blue')\nqueue.enqueue('Yellow')\nprint(f\"Size of queue is {queue.size()}\") \n```", "```py\nSize of queue is 4 \n```", "```py\nprint(queue.dequeue()) \n```", "```py\nRed \n```"]