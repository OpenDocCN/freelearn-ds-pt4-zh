["```py\nvar_1 = 1\nvar_2 = 2\nvar_1, var_2 = var_2, var_1\nprint(var_1,var_2) \n```", "```py\n2, 1 \n```", "```py\nlist = [25,21,22,24,23,27,26]\nlast_element_index = len(list)-1\nprint(0,list)\nfor idx in range(last_element_index):\n                if list[idx]>list[idx+1]:\n                    list[idx],list[idx+1]=list[idx+1],list[idx]\n                print(idx+1,list) \n```", "```py\n0 [25, 21, 22, 24, 23, 27, 26]\n1 [21, 25, 22, 24, 23, 27, 26]\n2 [21, 22, 25, 24, 23, 27, 26]\n3 [21, 22, 24, 25, 23, 27, 26]\n4 [21, 22, 24, 23, 25, 27, 26]\n5 [21, 22, 24, 23, 25, 27, 26]\n6 [21, 22, 24, 23, 25, 26, 27] \n```", "```py\n[21, 22, 24, 23, 25, 26, 27] \n```", "```py\ndef bubble_sort(list):\n# Exchange the elements to arrange in order\n    last_element_index = len(list)-1\n    for pass_no in range(last_element_index,0,-1):\n        for idx in range(pass_no):\n            if list[idx]>list[idx+1]:\n                list[idx],list[idx+1]=list[idx+1],list[idx]\n    return list\nlist = [25,21,22,24,23,27,26]\nbubble_sort(list) \n```", "```py\n[21, 22, 23, 24, 25, 26, 27] \n```", "```py\ndef optimized_bubble_sort(list):\n    last_element_index = len(list)-1\n    for pass_no in range(last_element_index, 0, -1):\n        swapped = False\n        for idx in range(pass_no):\n            if list[idx] > list[idx+1]:\n                list[idx], list[idx+1] = list[idx+1], list[idx]\n                swapped = True\n        if not swapped:\n            break\n    return list\nlist = [25,21,22,24,23,27,26]\noptimized_bubble_sort(list) \n```", "```py\n[21, 22, 23, 24, 25, 26, 27] \n```", "```py\ndef insertion_sort(elements):\n    for i in range(1, len(elements)):\n        j = i - 1\n        next_element = elements[i]\n        # Iterate backward through the sorted portion, \n        # looking for the appropriate position for 'next_element'\n        while j >= 0 and elements[j] > next_element:\n            elements[j + 1] = elements[j]\n            j -= 1\n        elements[j + 1] = next_element\n    return elements\nlist = [25,21,22,24,23,27,26]\ninsertion_sort(list) \n```", "```py\n[21, 22, 23, 24, 25, 26, 27] \n```", "```py\nmerge_sort (elements, start, end)\n    if(start < end)\n        midPoint = (end - start) / 2 + start\n        merge_sort (elements, start, midPoint)\n        merge_sort (elements, midPoint + 1, end)\n        merge(elements, start, midPoint, end) \n```", "```py\ndef merge_sort(elements):\n    # Base condition to break the recursion\n    if len(elements) <= 1:\n        return elements\n    mid = len(elements) // 2  # Split the list in half\n    left = elements[:mid]\n    right = elements[mid:]\n    merge_sort(left)   # Sort the left half\n    merge_sort(right)  # Sort the right half\n    a, b, c = 0, 0, 0\n    # Merge the two halves\n    while a < len(left) and b < len(right):\n        if left[a] < right[b]:\n            elements[c] = left[a]\n            a += 1\n        else:\n            elements[c] = right[b]\n            b += 1\n        c += 1\n    # If there are remaining elements in the left half\n    while a < len(left):\n        elements[c] = left[a]\n        a += 1\n        c += 1\n    # If there are remaining elements in the right half\n    while b < len(right):\n        elements[c] = right[b]\n        b += 1\n        c += 1\n    return elements\nlist = [21, 22, 23, 24, 25, 26, 27]\nmerge_sort(list) \n```", "```py\n[21, 22, 23, 24, 25, 26, 27] \n```", "```py\ndef shell_sort(elements):\n    distance = len(elements) // 2\n    while distance > 0:\n        for i in range(distance, len(elements)):\n            temp = elements[i]\n            j = i\n# Sort the sub list for this distance\n            while j >= distance and elements[j - distance] > temp:\n                list[j] = elements[j - distance]\n                j = j-distance\n            list[j] = temp\n# Reduce the distance for the next element\n        distance = distance//2\n    return elements\nlist = [21, 22, 23, 24, 25, 26, 27]\nshell_sort(list) \n```", "```py\n[21, 22, 23, 24, 25, 26, 27] \n```", "```py\ndef selection_sort(list):\n    for fill_slot in range(len(list) - 1, 0, -1):\n        max_index = 0\n        for location in range(1, fill_slot + 1):\n            if list[location] > list[max_index]:\n                max_index = location\n        list[fill_slot],list[max_index] = list[max_index],list[fill_slot]\n    return list\nlist = [21, 22, 23, 24, 25, 26, 27]\nselection_sort(list) \n```", "```py\n[21, 22, 23, 24, 25, 26, 27] \n```", "```py\ndef linear_search(elements, item):\n    index = 0\n    found = False\n# Match the value with each data element       \n    while index < len(elements) and found is False:\n        if elements[index] == item:\n            found = True\n        else:\n            index = index + 1\n    return found \n```", "```py\nlist = [12, 33, 11, 99, 22, 55, 90]\nprint(linear_search(list, 12))\nprint(linear_search(list, 91)) \n```", "```py\nTrue\nFalse \n```", "```py\ndef binary_search(elements, item):\n    first = 0\n    last = len(elements) - 1\n    while first<=last:\n        midpoint = (first + last) // 2\n        if elements[midpoint] == item:\n            return True\n        else:\n            if item < elements[midpoint]:\n                last = midpoint - 1\n            else:\n                first = midpoint + 1\n    return False \n```", "```py\nlist = [12, 33, 11, 99, 22, 55, 90]\nsorted_list = bubble_sort(list)\nprint(binary_search(list, 12))\nprint(binary_search(list, 91)) \n```", "```py\nTrue\nFalse \n```", "```py\ndef int_polsearch(list,x ):\n    idx0 = 0\n    idxn = (len(list) - 1)\n    while idx0 <= idxn and x >= list[idx0] and x <= list[idxn]:\n# Find the mid point\n        mid = idx0 +int(((float(idxn - idx0)/(list[idxn] - list[idx0])) * (x - list[idx0])))\n# Compare the value at mid point with search value \n        if list[mid] == x:\n            return True\n        if list[mid] < x:\n            idx0 = mid + 1\n    return False \n```", "```py\nlist = [12, 33, 11, 99, 22, 55, 90]\nsorted_list = bubble_sort(list)\nprint(int_polsearch(list, 12))\nprint(int_polsearch(list, 91)) \n```", "```py\nTrue\nFalse \n```"]