["```py\n    import findspark\n    findspark.init()\n    from pyspark.sql import SparkSession\n    spark = SparkSession.builder.master(\"local[*]\").getOrCreate()\n    sc = spark.sparkContext \n    ```", "```py\n    wordsList = ['python', 'java', 'ottawa', 'ottawa', 'java','news']\n    wordsRDD = sc.parallelize(wordsList, 4)\n    # Print out the type of wordsRDD\n    print (wordsRDD.collect()) \n    ```", "```py\n    ['python', 'java', 'ottawa', 'ottawa', 'java', 'news'] \n    ```", "```py\n    wordPairs = wordsRDD.map(lambda w: (w, 1))\n    print (wordPairs.collect()) \n    ```", "```py\n    [('python', 1), ('java', 1), ('ottawa', 1), ('ottawa', 1), ('java', 1), ('news', 1)] \n    ```", "```py\n    wordCountsCollected = wordPairs.reduceByKey(lambda x,y: x+y)\n    print(wordCountsCollected.collect()) \n    ```", "```py\n    [('python', 1), ('java', 2), ('ottawa', 2), ('news', 1)] \n    ```", "```py\nimport random\nfrom itertools import permutations \n```", "```py\ndef distance_tour(aTour):\n    return sum(distance_points(aTour[i - 1], aTour[i]) \n               for i in range(len(aTour))\n    )\naCity = complex\ndef distance_points(first, second):\n    return abs(first - second)\ndef generate_cities (number_of_cities):\n    seed=111\n    width=500\n    height=300\n    random.seed((number_of_cities, seed))\n    return frozenset(aCity(random.randint(1, width),\n                           random.randint(1, height))\n                     for c in range(number_of_cities)) \n```", "```py\ndef brute_force(cities):\n    return shortest_tour(alltours(cities))\ndef shortest_tour(tours):\n    return min(tours, key=distance_tour) \n```", "```py\nimport matplotlib.pyplot as plt\ndef visualize_tour(tour, style='bo-'): \nif len(tour) > 1000:\n        plt.figure(figsize=(15, 10))\n    start = tour[0:1]\n    visualize_segment(tour + start, style)\n    visualize_segment(start, 'rD') \n\ndef visualize_segment (segment, style='bo-'):\n    plt.plot([X(c) for c in segment], [Y(c) for c in segment], style, clip_on=False)\n    plt.axis('scaled')\n    plt.axis('off')\n\ndef X(city):\n    \"X axis\";\n    return city.real\ndef Y(city):\n    \"Y axis\";\n    return city.imag \n```", "```py\nfrom time import time\nfrom collections import Counter\ndef tsp(algorithm, cities):\n    t0 = time()\n    tour = algorithm(cities)\n    t1 = time()\n    # Every city appears exactly once in tour\n    assert Counter(tour) == Counter(cities) \n    visalize_tour(tour)\n    print(\"{}:{} cities => tour length {;.0f} (in {:.3f} sec\".format(\n        name(algorithm), len(tour), distance_tour(tour), t1-t0))\ndef name(algorithm):\n    return algorithm.__name__.replace('_tsp','')\ntps(brute_force, generate_cities(10)) \n```", "```py\ndef greedy_algorithm(cities, start=None):\n    city_ = start or first(cities)\n    tour = [city_]\n    unvisited = set(cities - {city_})\n    while unvisited:\n        city_ = nearest_neighbor(city_, unvisited)\n        tour.append(city_)\n        unvisited.remove(city_)\n    return tour\ndef first(collection): return next(iter(collection))\ndef nearest_neighbor(city_a, cities):\n    return min(cities, key=lambda city_: distance_points(city_, city_a)) \n```", "```py\ntsp(greedy_algorithm, generate_cities(2000)) \n```", "```py\nimport numpy as np\nimport networkx as nx\nimport matplotlib.pyplot as plt \n```", "```py\nmy_web = nx.DiGraph()\nmy_pages = range(1,6) \n```", "```py\nconnections = [(1,3),(2,1),(2,3),(3,1),(3,2),(3,4),(4,5),(5,1),(5,4)]\nmy_web.add_nodes_from(my_pages)\nmy_web.add_edges_from(connections) \n```", "```py\npos = nx.shell_layout(my_web)\nnx.draw(my_web, pos, arrows=True, with_labels=True)\nplt.show() \n```", "```py\ndef create_page_rank(a_graph):\n    nodes_set = len(a_graph)\n    M = nx.to numpy_matrix(a_graph)\n    outwards = np.squeeze(np.asarray (np. sum (M, axis=1)))\n    prob outwards = np.array([\n        1.0 / count if count>0\n        else 0.0\n        for count in outwards\n    ])\n    G = np.asarray(np.multiply (M.T, prob_outwards))\n    p = np.ones(nodes_set) / float (nodes_set)\n    return G, p \n```", "```py\nG,p = create_page_rank(my_web)\nprint (G) \n```", "```py\nimport pulp \n```", "```py\n# Instantiate our problem class\nmodel = pulp.LpProblem(\"Profit_maximising_problem\", pulp.LpMaximize) \n```", "```py\nA = pulp.LpVariable('A', lowBound=0,  cat='Integer')\nB = pulp.LpVariable('B', lowBound=0, cat='Integer') \n```", "```py\n# Objective function\nmodel += 5000 * A + 2500 * B, \"Profit\"\n# Constraints\nmodel += 3 * A + 2 * B <= 20 \nmodel += 4 * A + 3 * B <= 30\nmodel += 4 * A + 3 * B <= 44 \n```", "```py\n# Solve our problem\nmodel.solve()\npulp.LpStatus[model.status] \n```", "```py\n# Print our decision variable values\nprint (A.varValue)\nprint (B.varValue) \n```", "```py\n6.0\n1.0 \n```", "```py\n# Print our objective function value\nprint (pulp.value(model.objective)) \n```", "```py\n32500.0 \n```"]