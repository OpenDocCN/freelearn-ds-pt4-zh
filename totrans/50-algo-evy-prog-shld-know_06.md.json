["```py\nimport networkx as nx\ngraph = nx.Graph() \n```", "```py\ngraph.add_node(\"Mike\") \n```", "```py\ngraph.add_nodes_from([\"Amine\", \"Wassim\", \"Nick\"]) \n```", "```py\ngraph.add_edge(\"Mike\", \"Amine\") \n```", "```py\nprint(graph.nodes())\nprint(graph.edges()) \n```", "```py\n['Mike', 'Amine', 'Wassim', 'Nick']\n[('Mike', 'Amine')] \n```", "```py\nG.add_edge(\"Amine\", \"Imran\") \n```", "```py\nprint(graph.edges()) \n```", "```py\n[('Mike', 'Amine'), ('Amine', 'Imran')] \n```", "```py\nimport networkx as nx\nimport matplotlib.pyplot as plt \n```", "```py\nvertices = range(1, 10)\nedges = [(7, 2), (2, 3), (7, 4), (4, 5), (7, 3), (7, 5), (1, 6), (1, 7), (2, 8), (2, 9)] \n```", "```py\ngraph = nx.Graph()\ngraph.add_nodes_from(vertices)\ngraph.add_edges_from(edges) \n```", "```py\nnx.draw(graph, with_labels=True, node_color='y', node_size=800)\nplt.show() \n```", "```py\n    print(\"Degree Centrality:\", nx.degree_centrality(graph)) \n    ```", "```py\n    Degree Centrality: {1: 0.25, 2: 0.5, 3: 0.25, 4: 0.25, 5: 0.25, 6: 0.125, 7: 0.625, 8: 0.125, 9: 0.125} \n    ```", "```py\n    print(\"Betweenness Centrality:\", nx.betweenness_centrality(graph)) \n    ```", "```py\n    Betweenness Centrality: {1: 0.25, 2: 0.46428571428571425, 3: 0.0, 4: 0.0, 5: 0.0, 6: 0.0, 7: 0.7142857142857142, 8: 0.0, 9: 0.0} \n    ```", "```py\n    print(\"Closeness Centrality:\", nx.closeness_centrality(graph)) \n    ```", "```py\n    Closeness Centrality: {1: 0.5, 2: 0.6153846153846154, 3: 0.5333333333333333, 4: 0.47058823529411764, 5: 0.47058823529411764, 6: 0.34782608695652173, 7: 0.7272727272727273, 8: 0.4, 9: 0.4} \n    ```", "```py\n    eigenvector_centrality = nx.eigenvector_centrality(graph)\n    sorted_centrality = sorted((vertex, '{:0.2f}'.format(centrality_val)) \n                               for vertex, centrality_val in eigenvector_centrality.items())\n    print(\"Eigenvector Centrality:\", sorted_centrality) \n    ```", "```py\n    Eigenvector Centrality: [(1, '0.24'), (2, '0.45'), (3, '0.36'), (4, '0.32'), (5, '0.32'), (6, '0.08'), (7, '0.59'), (8, '0.16'), (9, '0.16')] \n    ```", "```py\ngraph={ 'Amin'   : {'Wasim', 'Nick', 'Mike'},\n         'Wasim' : {'Imran', 'Amin'},\n         'Imran' : {'Wasim','Faras'},\n         'Faras' : {'Imran'},\n         'Mike'  : {'Amin'},\n         'Nick' :  {'Amin'}} \n```", "```py\n    node = queue.pop(0) \n    ```", "```py\n    if node not in visited:\n        visited.add(node)\n        neighbours = graph[node] \n    ```", "```py\n    for neighbour in neighbours:\n        if neighbour not in visited:\n            queue.append(neighbour) \n    ```", "```py\ndef bfs(graph, start):\n    visited = set()\n    queue = [start]\n    while queue:\n        node = queue.pop(0)\n        if node not in visited:\n            visited.add(node)\n            neighbours = graph[node]\n            unvisited_neighbours = [neighbour for neighbour in neighbours                                     if neighbour not in visited]\n            queue.extend(unvisited_neighbours)\n   return visited \n```", "```py\nstart_node = 'Amin'\nprint(bfs(graph, start_node)) \n```", "```py\n{'Faras', 'Nick', 'Wasim', 'Imran', 'Amin', 'Mike'} \n```", "```py\ndef dfs(graph, start, visited=None):\n    if visited is None:\n        visited = set()\n    visited.add(start)\n    print(start)\n    for next in graph[start] - visited:\n        dfs(graph, next, visited)\n    return visited \n```", "```py\ngraph={ 'Amin' : {'Wasim', 'Nick', 'Mike'},\n         'Wasim' : {'Imran', 'Amin'},\n         'Imran' : {'Wasim','Faras'},\n         'Faras' : {'Imran'},\n         'Mike'  :{'Amin'},\n         'Nick'  :{'Amin'}} \n```", "```py\nAmin\nWasim\nImran\nFaras\nNick\nMike \n```", "```py\n    import networkx as nx\n    import matplotlib.pyplot as plt \n    ```", "```py\n    vertices = range(1,10)\n    edges= [(7,2), (2,3), (7,4), (4,5), (7,3), (7,5), (1,6),(1,7),(2,8),(2,9)] \n    ```", "```py\n    graph = nx.Graph() \n    ```", "```py\n    graph.add_nodes_from(vertices)\n    graph.add_edges_from(edges)\n    positions = nx.spring_layout(graph) \n    ```", "```py\n    nx.draw_networkx_nodes(graph, positions, \n                           nodelist=[1, 4, 3, 8, 9], \n                           with_labels=True, \n                           node_color='g', \n                           node_size=1300) \n    ```", "```py\n    nx.draw_networkx_nodes(graph, positions, \n                           nodelist=[1, 4, 3, 8, 9], \n                           with_labels=True, \n                           node_color='g', \n                           node_size=1300) \n    ```", "```py\n    labels = {1: '1 NF', 2: '2 F', 3: '3 NF', 4: '4 NF', 5: '5 F', 6: '6 F', 7: '7 F', 8: '8 NF', 9: '9 NF'}\n    nx.draw_networkx_labels(graph, positions, labels, font_size=16)\n    nx.draw_networkx_edges(graph, positions, edges, width=3, alpha=0.5, edge_color='b')\n    plt.show() \n    ```"]