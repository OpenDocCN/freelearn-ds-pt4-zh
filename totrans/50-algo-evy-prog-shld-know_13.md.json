["```py\nimport tensorflow as tf \n```", "```py\n# Load dataset\n(x_train, _), (x_test, _) = tf.keras.datasets.mnist.load_data()\n# Normalize data to range [0, 1]\nx_train, x_test = x_train / 255.0, x_test / 255.0 \n```", "```py\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Flatten(input_shape=(28, 28)),\n    tf.keras.layers.Dense(32, activation='relu'),\n    tf.keras.layers.Dense(784, activation='sigmoid'),\n    tf.keras.layers.Reshape((28, 28))\n]) \n```", "```py\nmodel.compile(loss='binary_crossentropy', optimizer='adam') \n```", "```py\nmodel.fit(x_train, x_train, epochs=10, batch_size=128,\n          validation_data=(x_test, x_test)) \n```", "```py\nencoded_data = model.predict(x_test)\ndecoded_data = model.predict(encoded_data) \n```", "```py\nn = 10  # number of images to display\nplt.figure(figsize=(20, 4))\nfor i in range(n):\n    # Original images\n    ax = plt.subplot(2, n, i + 1)\n    plt.imshow(x_test[i].reshape(28, 28) , cmap='gray')\n    ax.get_xaxis().set_visible(False)\n    ax.get_yaxis().set_visible(False)\n    # Reconstructed images\n    ax = plt.subplot(2, n, i + 1 + n)\n    plt.imshow(decoded_data[i].reshape(28, 28) , cmap='gray')\n    ax.get_xaxis().set_visible(False)\n    ax.get_yaxis().set_visible(False)\nplt.show() \n```", "```py\nimport numpy as np\ndef self_attention(Q, K, V):\n    \"\"\"\n    Q: Query matrix\n    K: Key matrix\n    V: Value matrix\n    \"\"\"\n\n    # Calculate the attention weights\n    attention_weights = np.matmul(Q, K.T)\n\n    # Apply the softmax to get probabilities\n    attention_probs = np.exp(attention_weights) / np.sum(np.exp(attention_weights), axis=1, keepdims=True)\n\n    # Multiply the probabilities with the value matrix to get the output\n    output = np.matmul(attention_probs, V)\n\n    return output\n# Example\nQ = np.array([[1, 0, 1], [0, 2, 0], [1, 1, 0]])  # Example Query\nK = np.array([[1, 0, 1], [0, 2, 0], [1, 1, 0]])  # Key matrix\nV = np.array([[0, 2, 0], [1, 0, 1], [0, 1, 2]])  # Value matrix\noutput = self_attention(Q, K, V)\nprint(output) \n```", "```py\n[[0.09003057 1.57521038 0.57948752]\n [0.86681333 0.14906291 1.10143419]\n [0.4223188  0.73304361 1.26695639]] \n```"]