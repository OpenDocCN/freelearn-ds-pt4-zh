["```py\nimport functools\n@functools.total_ordering\nclass Node:\n    def __init__(self, char, freq):\n        self.char = char\n        self.freq = freq\n        self.left = None\n        self.right = None\n    def __lt__(self, other):\n        return self.freq < other.freq\n    def __eq__(self, other):\n        return self.freq == other.freq \n```", "```py\nimport heapq\ndef build_tree(frequencies):\n    heap = [Node(char, freq) for char, freq in frequencies.items()]\n    heapq.heapify(heap)\n    while len(heap) > 1:\n        node1 = heapq.heappop(heap)\n        node2 = heapq.heappop(heap)\n        merged = Node(None, node1.freq + node2.freq)\n        merged.left = node1\n        merged.right = node2\n        heapq.heappush(heap, merged)\n    return heap[0]  # the root node \n```", "```py\ndef generate_codes(node, code='', codes=None):\n    if codes is None:\n        codes = {}\n    if node is None:\n        return {}\n    if node.char is not None:\n        codes[node.char] = code\n        return codes\n    generate_codes(node.left, code + '0', codes)\n    generate_codes(node.right, code + '1', codes)\n    return codes \n```", "```py\ndata = {\n    'L': 0.45,\n    'M': 0.13,\n    'N': 0.12,\n    'X': 0.16,\n    'Y': 0.09,\n    'Z': 0.05\n} \n```", "```py\n# Build the Huffman tree and generate the Huffman codes\nroot = build_tree(data)\ncodes = generate_codes(root)\n# Print the root of the Huffman tree\nprint(f'Root of the Huffman tree: {root}')\n# Print out the Huffman codes\nfor char, code in codes.items():\n    print(f'{char}: {code}') \n```", "```py\nRoot of the Huffman tree: <__main__.Node object at 0x7a537d66d240>\nL: 0\nM: 101\nN: 100\nX: 111\nY: 1101\nZ: 1100 \n```"]