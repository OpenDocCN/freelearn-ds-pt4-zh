["```py\n    import numpy as np\n    ```", "```py\n    import pandas as pd\n    ```", "```py\n    import seaborn as sns\n    ```", "```py\n    import matplotlib.pyplot as plt\n    ```", "```py\n    import statsmodels.api as sm\n    ```", "```py\n    # data: Laptop spec data\n    ```", "```py\n    data = pd.DataFrame([[6000, '4GB', '128GB', 3],\n    ```", "```py\n                         [6000, '8GB', '512GB', 9],\n    ```", "```py\n                         [8000, '4GB', '512GB', 5],\n    ```", "```py\n                         [8000, '8GB', '128GB', 7],\n    ```", "```py\n                         [6000, '4GB', '128GB', 4]],\n    ```", "```py\n                        columns=['price', 'memory', \n    ```", "```py\n                                'storage', 'score'])\n    ```", "```py\n    data.head()\n    ```", "```py\n    X = data[[col for col in data.columns if col != 'score']]\n    ```", "```py\n    y = data['score']\n    ```", "```py\n    X.head()\n    ```", "```py\n    X_dum = pd.get_dummies(X, columns=X.columns)\n    ```", "```py\n    X_dum.head()\n    ```", "```py\nmodel = sm.OLS(y, sm.add_constant(X_dum))\nresult = model.fit()\nresult.summary()\n```", "```py\ndata_res = pd.DataFrame({'name': result.params.keys(),\n                         'weight': result.params.values,\n                         'p_val': result.pvalues})\ndata_res = data_res[1:]\ndata_res\n```", "```py\ndata_res = data_res.sort_values(by='weight')\ndata_res\n```", "```py\nsns.set()\nxbar = np.arange(len(data_res['weight']))\nplt.barh(xbar, data_res['weight'])\nplt.yticks(xbar, labels=data_res['name'])\nplt.xlabel('weight')\nplt.show()\n```", "```py\n    # Load data\n    ```", "```py\n    conjoint_dat = pd.read_csv('/content/conjoint_data.csv')\n    ```", "```py\n    conjoint_dat\n    ```", "```py\n    conjoint_dat_dum = pd.get_dummies(conjoint_dat.iloc[:,:-1], columns = conjoint_dat.iloc[:,:-1].columns)\n    ```", "```py\n    conjoint_dat_dum\n    ```", "```py\n    main_effects_model_fit = sm.OLS(conjoint_dat['ranking'].astype(int), sm.add_constant(conjoint_dat_dum))\n    ```", "```py\n    result = main_effects_model_fit.fit()\n    ```", "```py\n    result.summary()\n    ```", "```py\n    data_res = pd.DataFrame({'name': result.params.keys(),\n    ```", "```py\n                             'weight': result.params.values,\n    ```", "```py\n                             'p_val': result.pvalues})\n    ```", "```py\n    data_res = data_res[1:]\n    ```", "```py\n    data_res\n    ```", "```py\n    xbar = np.arange(len(data_res['weight']))\n    ```", "```py\n    plt.barh(xbar, data_res['weight'])\n    ```", "```py\n    plt.yticks(xbar, labels=data_res['name'])\n    ```", "```py\n    plt.xlabel('weight')\n    ```", "```py\n    plt.show()\n    ```", "```py\n    from sklearn.preprocessing import StandardScaler\n    ```", "```py\n    X = conjoint_dat_dum\n    ```", "```py\n    y = conjoint_dat['ranking'].astype(int)\n    ```", "```py\n    # The target variable will be normalized from a ranking to a 1 to 10 score\n    ```", "```py\n    y = y.apply(lambda x: int(x/len(y)*10))\n    ```", "```py\n    features = X.columns.values\n    ```", "```py\n    scaler = StandardScaler()\n    ```", "```py\n    scaler.fit(X)\n    ```", "```py\n    X = pd.DataFrame(scaler.transform(X))\n    ```", "```py\n    X.columns = features\n    ```", "```py\n    # Logistic Regression\n    ```", "```py\n    from sklearn.model_selection import train_test_split\n    ```", "```py\n    from sklearn.linear_model import LogisticRegression\n    ```", "```py\n    from sklearn import metrics\n    ```", "```py\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.5, random_state=101)\n    ```", "```py\n    # Running logistic regression model\n    ```", "```py\n    model = LogisticRegression()\n    ```", "```py\n    result = model.fit(X_train, y_train)\n    ```", "```py\n    prediction_test = model.predict(X_test)\n    ```", "```py\n    # Print the prediction accuracy\n    ```", "```py\n    print(metrics.mean_squared_error(y_test, prediction_test))\n    ```", "```py\n    # To get the weights of all the variables\n    ```", "```py\n    weights = pd.Series(model.coef_[0],\n    ```", "```py\n                     index=X.columns.values)\n    ```", "```py\n    print(weights.sort_values(ascending = False)[:10].plot(kind='bar'))\n    ```", "```py\n    print(weights.sort_values(ascending = False)[-10:].plot(kind='bar'))\n    ```", "```py\nfrom sklearn.ensemble import RandomForestClassifier\nmodel_rf = RandomForestClassifier(n_estimators=1000 , oob_score = True, n_jobs = -1,random_state =50, max_features = \"auto\",max_leaf_nodes = 30)\nmodel_rf.fit(X_train, y_train)\n# Make predictions\nprediction_test = model_rf.predict(X_test)\nprint(metrics.mean_squared_error(y_test, prediction_test))\n```", "```py\nimportances = model_rf.feature_importances_\nweights = pd.Series(importances, index=X.columns.values)\nweights.sort_values()[-10:].plot(kind = 'barh')\n```", "```py\nfrom xgboost import XGBClassifier\nmodel = XGBClassifier()\nmodel.fit(X_train, y_train)\npreds = model.predict(X_test)\nmetrics.mean_squared_error(y_test, preds)\n```"]