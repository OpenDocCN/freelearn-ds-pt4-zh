["```py\n    import pandas as pd\n    ```", "```py\n    import numpy as np\n    ```", "```py\n    import statsmodels.api as sm\n    ```", "```py\n    from statsmodels.formula.api import ols\n    ```", "```py\n    import matplotlib.pyplot as plt\n    ```", "```py\n    import seaborn as sns; sns.set(style=\"ticks\", \n    ```", "```py\n          color_codes=True)\n    ```", "```py\n    data = pd.read_csv('foodcar_data.csv',\n    ```", "```py\n          parse_dates=['DATE'])\n    ```", "```py\n    data.head()\n    ```", "```py\n    data.drop(['ITEM_ID'],axis=1).describe()\n    ```", "```py\n    d = data[['SELLER','ITEM_ID','ITEM_NAME']].drop_duplicates()\n    ```", "```py\n    print(d)\n    ```", "```py\n    pd.concat([d.SELLER, pd.get_dummies(d.ITEM_NAME)], axis=1).groupby(d.SELLER).sum().reset_index(drop=True)\n    ```", "```py\n    sns.pairplot(data[['PRICE','QUANTITY']],height=5,aspect=1.2)\n    ```", "```py\n    f, ax = plt.subplots(figsize=(10, 6))\n    ```", "```py\n    fig = sns.histplot(x='PRICE',data=data,hue='CAT',\n    ```", "```py\n    palette=['red','blue'])\n    ```", "```py\n    sns.pairplot(data[['PRICE','QUANTITY','ITEM_NAME']], hue = 'ITEM_NAME', plot_kws={'alpha':0.1},height=5,aspect=1.2)\n    ```", "```py\n    f, ax = plt.subplots(figsize=(10, 6))\n    ```", "```py\n    fig = sns.histplot(x='ITEM_NAME',data=data,hue='CAT', palette=['red','blue'])\n    ```", "```py\n    d = data[data['CAT']==2]\n    ```", "```py\n    sns.relplot(x=d['PRICE'],y=d['QUANTITY'],height=7,aspect=1.2)\n    ```", "```py\n    d = data[['DATE','PRICE','QUANTITY']].sort_values( ['DATE'], ascending=True)\n    ```", "```py\n    d['PRICE'] = (d['PRICE'] - d['PRICE'].mean())/((d['PRICE'].max() - d['PRICE'].min()))\n    ```", "```py\n    d['QUANTITY'] = (d['QUANTITY'] - d['QUANTITY'].mean())/((d['QUANTITY'].max() - d['QUANTITY'].min()))\n    ```", "```py\n    d.index = d['DATE']\n    ```", "```py\n    d = d.drop(['DATE'],axis=1)\n    ```", "```py\n    d.rolling(window=60).mean().plot(figsize=(20,8))\n    ```", "```py\n    import numpy as np\n    ```", "```py\n    df_corr = data.drop(['DATE','SELLER','STORE'],axis=1).corr()\n    ```", "```py\n    mask = np.triu(np.ones_like(df_corr, dtype=bool))\n    ```", "```py\n    df_corr = df_corr.mask(mask).round(3)\n    ```", "```py\n    fig, ax = plt.subplots(figsize=(12,12))\n    ```", "```py\n    sns.heatmap(df_corr, annot=True,ax=ax)\n    ```", "```py\n    burger_2752 = data[data['ITEM_ID']==2752].drop(['\n    ```", "```py\n          ITEM_ID','ITEM_NAME'],axis=1)\n    ```", "```py\n    burger_2752.head()\n    ```", "```py\n    model = ols(\"QUANTITY ~ PRICE\", burger_2752).fit()\n    ```", "```py\n    price_elasticity = model.params[1]\n    ```", "```py\n    print(\"Price elasticity of the product: \" + str(\n    ```", "```py\n          price_elasticity))\n    ```", "```py\n    print(model.summary())\n    ```", "```py\n    fig = plt.figure(figsize=(12,8))\n    ```", "```py\n    fig = sm.graphics.plot_partregress_grid(model, fig=fig)\n    ```", "```py\n    def create_model_and_find_elasticity(data):\n    ```", "```py\n        model = ols(\"QUANTITY ~ PRICE\", data).fit()\n    ```", "```py\n        price_elasticity = model.params[1]\n    ```", "```py\n        print(\"Price elasticity of the product: \" + str(price_elasticity))\n    ```", "```py\n        print(model.summary())\n    ```", "```py\n        fig = plt.figure(figsize=(12,8))\n    ```", "```py\n        fig = sm.graphics.plot_partregress_grid(model, fig=fig)\n    ```", "```py\n        return price_elasticity, model\n    ```", "```py\n    elasticities = {}\n    ```", "```py\n    models = {}\n    ```", "```py\n    for item_id in data['ITEM_ID'].unique():\n    ```", "```py\n      print('item_id',item_id)\n    ```", "```py\n      price_elasticity, item_model = \n    ```", "```py\n        create_model_and_find_elasticity(data[data[\n    ```", "```py\n        'ITEM_ID']==item_id])\n    ```", "```py\n      elasticities[item_id] = price_elasticity\n    ```", "```py\n      models[item_id]= item_model\n    ```", "```py\n    start_price = burger_2752.PRICE.min() - 1\n    ```", "```py\n    end_price = burger_2752.PRICE.max() + 10\n    ```", "```py\n    test = pd.DataFrame(columns = [\"PRICE\", \"QUANTITY\"])\n    ```", "```py\n    test['PRICE'] = np.arange(start_price, end_price,0.01)\n    ```", "```py\n    test['QUANTITY'] = models[2752].predict(test['PRICE'])\n    ```", "```py\n    test['REVENUE'] = test[\"PRICE\"]  * test[\"QUANTITY\"]\n    ```", "```py\n    test.head()\n    ```", "```py\n    test['PRICE'] = (test['PRICE']-test['PRICE'].mean())/(test['PRICE'].max()-test['PRICE'].min())\n    ```", "```py\n    test['QUANTITY'] = (test['QUANTITY']-test['QUANTITY'].mean())/(test['QUANTITY'].max()-test['QUANTITY'].min())\n    ```", "```py\n    test['REVENUE'] = (test['REVENUE']-test['REVENUE'].mean())/(test['REVENUE'].max()-test['REVENUE'].min())\n    ```", "```py\n    test.plot(figsize=(12,8),title='Price Elasticity - Item 2752)\n    ```", "```py\n    coffee_3052 = data[data['ITEM_ID']==3052]\n    ```", "```py\n    start_price = coffee_3052.PRICE.min() - 1\n    ```", "```py\n    end_price = coffee_3052.PRICE.max() + 10\n    ```", "```py\n    test = pd.DataFrame(columns = [\"PRICE\", \"QUANTITY\"])\n    ```", "```py\n    test['PRICE'] = np.arange(start_price, end_price,0.01)\n    ```", "```py\n    test['QUANTITY'] = models[3052].predict(test['PRICE'])\n    ```", "```py\n    test['REVENUE'] = test[\"PRICE\"]  * test[\"QUANTITY\"]\n    ```", "```py\n    test['PRICE'] = (test['PRICE']-test['PRICE'].mean())/(test['PRICE'].max()-test['PRICE'].min())\n    ```", "```py\n    test['QUANTITY'] = (test['QUANTITY']-test['QUANTITY'].mean())/(test['QUANTITY'].max()-test['QUANTITY'].min())\n    ```", "```py\n    test['REVENUE'] = (test['REVENUE']-test['REVENUE'].mean())/(test['REVENUE'].max()-test['REVENUE'].min())\n    ```", "```py\n    test.plot(figsize=(12,8),title='Price Elasticity - Item 3052')\n    ```", "```py\ndef find_optimal_price(data, model,item_id):\n  start_price = data.PRICE.min() - 1\n  end_price = data.PRICE.max() + 10\n  test = pd.DataFrame(columns = [\"PRICE\", \"QUANTITY\"])\n  test['PRICE'] = np.arange(start_price, end_price,0.01)\n  test['QUANTITY'] = model.predict(test['PRICE'])\n  test['REVENUE'] = test[\"PRICE\"] * test[\"QUANTITY\"]\n  test['P'] = (test['PRICE']-test['PRICE'].mean())/(test['PRICE'].max()-test['PRICE'].min())\n  test['Q'] = (test['QUANTITY']-test['QUANTITY'].mean())/(test['QUANTITY'].max()-test['QUANTITY'].min())\n  test['R'] = (test['REVENUE']-test['REVENUE'].mean())/(test['REVENUE'].max()-test['REVENUE'].min())\n  test[['P','Q','R']].plot(figsize=(12,8),title='Price Elasticity - Item'+str(item_id))\n  ind = np.where(test['REVENUE'] == test['REVENUE'].max())[0][0]\n  values_at_max_profit = test.drop(['P','Q','R'],axis=1).iloc[[ind]]\n  values_at_max_profit = {'PRICE':values_at_max_profit['PRICE'].values[0],'QUANTITY':values_at_max_profit['QUANTITY'].values[0],'REVENUE':values_at_max_profit['REVENUE'].values[0]}\n  return values_at_max_profit\n```", "```py\n    optimal_price = {}\n    ```", "```py\n    for item_id in data['ITEM_ID'].unique():\n    ```", "```py\n      print('item_id',item_id)\n    ```", "```py\n      optimal_price[item_id] = \n    ```", "```py\n        find_optimal_price(data[data['ITEM_ID']==item_id], \n    ```", "```py\n      models[item_id],item_id)\n    ```", "```py\n    for item_id in optimal_price:\n    ```", "```py\n      print(item_id,optimal_price[item_id])\n    ```"]