["```py\n    !pip install --upgrade openpyxl scikit-surprise\n    ```", "```py\n    import pandas as pd\n    ```", "```py\n    import numpy as np\n    ```", "```py\n    pd.options.display.max_rows = 20\n    ```", "```py\n    pd.options.display.max_columns = 50\n    ```", "```py\n    pd.options.display.precision = 2\n    ```", "```py\n    df = pd.read_csv('/content/distributed_products.csv')\n    ```", "```py\n    df.head()\n    ```", "```py\n    df.columns.tolist()\n    ```", "```py\n    >>> ['period', 'sub_market', 'client_class', 'division', 'brand','cat', 'product', 'client_code', 'client_name', 'kgs_sold']\n    ```", "```py\n    len(df.client_name.unique())\n    ```", "```py\n    >>> 11493\n    ```", "```py\n    kgs_by_period = df[['period','client_name','kgs_sold']]\n    ```", "```py\n    kgs_by_period = kgs_by_period.groupby(['\n    ```", "```py\n          period','client_name']).sum().reset_index()\n    ```", "```py\n    kgs_by_period.head()\n    ```", "```py\n    unique_clients = kgs_by_period.client_name.value_counts().reset_index()\n    ```", "```py\n    unique_clients.columns = ['client_name','purchases']\n    ```", "```py\n    unique_clients.head()\n    ```", "```py\n    unique_clients = unique_clients[unique_clients.purchases>5]\n    ```", "```py\n    unique_clients.shape\n    ```", "```py\n    >>> (7550, 2)\n    ```", "```py\n    kgs_by_client = df[['client_name','kgs_sold']]\n    ```", "```py\n    kgs_by_client = kgs_by_client[kgs_by_client.client_name.isin(unique_clients.client_name)]\n    ```", "```py\n    kgs_by_client = kgs_by_client.groupby(['client_name']).sum().reset_index()\n    ```", "```py\n    kgs_by_client.columns = ['client','total_kgs']\n    ```", "```py\n    kgs_by_client = kgs_by_client.sort_values([\n    ```", "```py\n          'total_kgs'],ascending= False)\n    ```", "```py\n    kgs_by_client = kgs_by_client.head(25)\n    ```", "```py\n    kgs_by_client.head()\n    ```", "```py\n    kgs_by_client.plot(kind='bar',x='client',y='total_kgs',figsize=(14,6),rot=90)\n    ```", "```py\n    mask = kgs_by_period.client_name.isin(kgs_by_client.client)\n    ```", "```py\n    kgs_by_period = kgs_by_period[mask]\n    ```", "```py\n    kgs_by_period = kgs_by_period.sort_values([\n    ```", "```py\n          'kgs_sold'],ascending=False)\n    ```", "```py\n    kgs_by_period\n    ```", "```py\n    dfx = kgs_by_period.pivot(index='period',columns=\n    ```", "```py\n          'client_name',values='kgs_sold').reset_index()\n    ```", "```py\n    dfx.columns.name = ''\n    ```", "```py\n    dfx = dfx.fillna(0)\n    ```", "```py\n    dfx\n    ```", "```py\n    import seaborn as sns\n    ```", "```py\n    import matplotlib.pyplot as plt # visualization\n    ```", "```py\n    f, ax = plt.subplots(figsize=(20, 6))\n    ```", "```py\n    # Load the long-form example gammas dataset\n    ```", "```py\n    g = sns.lineplot(data=dfx.drop(['period'],axis=1))\n    ```", "```py\n    # Put the legend out of the figure\n    ```", "```py\n    g.legend(loc='center left', bbox_to_anchor=(1, 0.5))\n    ```", "```py\n    from scipy import stats\n    ```", "```py\n    results = []\n    ```", "```py\n    for i in range(1,dfx.shape[1]):\n    ```", "```py\n      client = dfx.columns[i]\n    ```", "```py\n      slope, intercept, r_value, p_value, std_err = stats.linregress(dfx.index,dfx.iloc[0:,i])\n    ```", "```py\n      results.append([client,slope,std_err])\n    ```", "```py\n      print('Client Name:',client,'; Buy Tendency (Slope):',round(slope,3),'; Common Standard deviation:',round(std_err,3))\n    ```", "```py\n    results_df = pd.DataFrame(results).dropna()\n    ```", "```py\n    results_df.columns = ['client','slope','std']\n    ```", "```py\n    results_df.index = results_df.client\n    ```", "```py\n    results_df = results_df.drop(['client'],axis=1)\n    ```", "```py\n    results_df.head()\n    ```", "```py\n    f, ax = plt.subplots(figsize=(12, 12))\n    ```", "```py\n    sns.heatmap(results_df, annot=True)\n    ```", "```py\ndfs = df[['client_name','product']].groupby(['client_name','product']).size().reset_index(name='counts')\ndfs =  dfs.sort_values(['counts'],ascending=False)\ndfs.head()\n```", "```py\nfrom sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\ndfs['count_sc'] = scaler.fit_transform(dfs[['counts']])\ndfs = dfs.drop(['counts'],axis=1)\n```", "```py\n    from surprise import SVDpp\n    ```", "```py\n    from surprise.model_selection import cross_validate\n    ```", "```py\n    from surprise import Reader, Dataset\n    ```", "```py\n    reader = Reader(rating_scale=(0,1))\n    ```", "```py\n    data = Dataset.load_from_df(dfs, reader)\n    ```", "```py\n    algo = SVDpp()\n    ```", "```py\n    algo.fit(data.build_full_trainset())\n    ```", "```py\n    usr = 'LA TROYA'\n    ```", "```py\n    # Filter the products that the client is already buying\n    ```", "```py\n    user_prods = dfs[dfs.client_name==usr]['product'].unique().tolist()\n    ```", "```py\n    prods = dfs[dfs.client_name!=usr]['product'].unique().tolist()\n    ```", "```py\n    prods = [p for p in prods if p not in user_prods]\n    ```", "```py\n    my_recs = []\n    ```", "```py\n    for iid in prods:\n    ```", "```py\n        my_recs.append((iid, algo.predict(uid=usr,iid=iid).est))\n    ```", "```py\n    dk = pd.DataFrame(my_recs)\n    ```", "```py\n    dk.columns = ['product', 'rating']\n    ```", "```py\n    dk = dk.sort_values('rating',ascending= False).reset_index(drop=True)\n    ```", "```py\n    dk.head()\n    ```", "```py\n    dki_full = pd.DataFrame()\n    ```", "```py\n    # For top 25 clients\n    ```", "```py\n    users = kgs_by_period.client_name.unique()\n    ```", "```py\n    for usr in users:\n    ```", "```py\n      print(usr)\n    ```", "```py\n      user_prods = dfs[dfs.client_name==usr]['product'].unique().tolist()\n    ```", "```py\n      prods = dfs[dfs.client_name!=usr]['product'].unique().tolist()\n    ```", "```py\n      prods = [p for p in prods if p not in user_prods]\n    ```", "```py\n      my_recs = []\n    ```", "```py\n      for iid in prods:\n    ```", "```py\n          my_recs.append((iid, algo.predict(uid=usr,iid=iid).est))\n    ```", "```py\n      dk = pd.DataFrame(my_recs)\n    ```", "```py\n      dk.columns = ['product', 'rating']\n    ```", "```py\n      dk = dk.sort_values('rating',ascending= False).reset_index(drop=True)\n    ```", "```py\n      dk['client'] = usr\n    ```", "```py\n      dki_full = pd.concat([dki_full, dk.head(20)])\n    ```", "```py\n    from mlxtend.frequent_patterns import apriori, association_rules\n    ```", "```py\n    data = pd.read_csv('/content/Online Retail.csv',encoding='iso-8859-1')\n    ```", "```py\n    data.head()\n    ```", "```py\n    data.columns\n    ```", "```py\n    >>> Index(['InvoiceNo', 'StockCode', 'Description', 'Quantity', 'InvoiceDate','UnitPrice', 'CustomerID', 'Country'],dtype='object')\n    ```", "```py\n    data.describe()\n    ```", "```py\n    data.describe(include='O')\n    ```", "```py\n    data['Country'].value_counts().head(10).plot(kind='bar',figsize=(12,6))\n    ```", "```py\n    data['Description'] = data['Description'].str.strip()\n    ```", "```py\n    data = data[~data['InvoiceNo'].isna()]\n    ```", "```py\n    data['InvoiceNo'] = data['InvoiceNo'].astype('str')\n    ```", "```py\n    data = data[~data['InvoiceNo'].str.contains('C')]\n    ```", "```py\n    data_uk = data[data['Country'] ==\"United Kingdom\"]\n    ```", "```py\n    basket_uk = data_uk.groupby(['InvoiceNo', 'Description'])['Quantity'].sum()\n    ```", "```py\n    basket_uk = basket_uk.unstack().reset_index().fillna(0)\n    ```", "```py\n    basket_uk = basket_uk.set_index('InvoiceNo')\n    ```", "```py\n    basket_uk.head()\n    ```", "```py\n    basket_fr = data[data['Country'] ==\"France\"]\n    ```", "```py\n    basket_fr = basket_fr.groupby(['InvoiceNo', 'Description'])['Quantity'].sum()\n    ```", "```py\n    basket_fr = basket_fr.unstack().reset_index().fillna(0)\n    ```", "```py\n    basket_fr = basket_fr.set_index('InvoiceNo')\n    ```", "```py\n    basket_de = data[data['Country'] ==\"Germany\"]\n    ```", "```py\n    basket_de = basket_de.groupby(['InvoiceNo', 'Description'])['Quantity'].sum()\n    ```", "```py\n    basket_de = basket_de.unstack().reset_index().fillna(0)\n    ```", "```py\n    basket_de = basket_de.set_index('InvoiceNo')\n    ```", "```py\n    basket_uk = (basket_uk>0).astype(int)\n    ```", "```py\n    basket_fr = (basket_fr>0).astype(int)\n    ```", "```py\n    basket_de = (basket_de>0).astype(int)\n    ```", "```py\n    frq_items_uk = apriori(basket_uk, min_support = 0.01, use_colnames = True)\n    ```", "```py\n    # Collecting the inferred rules in a dataframe\n    ```", "```py\n    rules_uk = association_rules(frq_items_uk, metric =\"lift\", min_threshold = 1)\n    ```", "```py\n    # rules_uk = rules_uk.sort_values(['confidence', 'lift'], ascending =[False, False])\n    ```", "```py\n    rules_uk.head()\n    ```", "```py\n    frq_items_fr = apriori(basket_fr, min_support = 0.05, use_colnames = True)\n    ```", "```py\n    # Collecting the inferred rules in a dataframe\n    ```", "```py\n    rules_fr = association_rules(frq_items_fr, metric =\"lift\", min_threshold = 1)\n    ```", "```py\n    rules_fr = rules_fr.sort_values(['confidence', 'lift'], ascending =[False, False])\n    ```", "```py\n    rules_fr.head()\n    ```", "```py\n    frq_items_de = apriori(basket_de, min_support = 0.05, use_colnames = True)\n    ```", "```py\n    # Collecting the inferred rules in a dataframe\n    ```", "```py\n    rules_de = association_rules(frq_items_de, metric =\"lift\", min_threshold = 1)\n    ```", "```py\n    rules_de = rules_de.sort_values(['confidence', 'lift'], ascending =[False, False])\n    ```", "```py\n    rules_de.head()\n    ```"]