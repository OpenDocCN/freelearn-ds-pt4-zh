["```py\n    import numpy as np\n    ```", "```py\n    import pandas as pd\n    ```", "```py\n    import seaborn as sns\n    ```", "```py\n    import matplotlib.pyplot as plt\n    ```", "```py\n    import os\n    ```", "```py\n    pd.options.display.max_rows = 20\n    ```", "```py\n    pd.options.display.max_columns = 50\n    ```", "```py\n    pd.options.display.precision = 2\n    ```", "```py\n    path = 'customer_churn.csv'\n    ```", "```py\n    data = pd.read_csv(path)\n    ```", "```py\n    data.head()\n    ```", "```py\n    data.columns\n    ```", "```py\ndata.info()\n```", "```py\n    data.TotalCharges = pd.to_numeric(data.TotalCharges, errors='coerce')\n    ```", "```py\ndata.info()\n```", "```py\n    object_cols = [c for c in data.drop(['customerID'],axis=1).columns if data[c].dtype=='O']\n    ```", "```py\n    object_cols\n    ```", "```py\n    yn_cols = []\n    ```", "```py\n    # Iterate over the column names\n    ```", "```py\n    For c in object_cols:\n    ```", "```py\n      # count the unique values by accessing the column\n    ```", "```py\n      val_counts = data[c].value_counts()\n    ```", "```py\n      # If the count of unique values is equal to two, we assume that it's a Yes/No column\n    ```", "```py\n      if len(val_counts.index)==2 and all(val_counts.index.isin(['No', 'Yes'])):\n    ```", "```py\n        print(c)\n    ```", "```py\n        print(data[c].value_counts().to_string())\n    ```", "```py\n        yn_cols.append(c)\n    ```", "```py\n    # Iterate over the yes/no column names\n    ```", "```py\n    for c in yn_cols:\n    ```", "```py\n      # Normalize the column values by lowering them and mapping them to new values.\n    ```", "```py\n      data[c] = data[c].str.lower().map({'yes': 1, 'no': 0})\n    ```", "```py\ndata.head()\n```", "```py\ndata.describe()\n```", "```py\n    import seaborn as sns\n    ```", "```py\n    import matplotlib.pyplot as plt\n    ```", "```py\n    f, ax = plt.subplots(figsize=(10, 6))\n    ```", "```py\n    pl = sns.countplot(x=data[\"InternetService\"],hue=data[\"Churn\"])\n    ```", "```py\n    pl.set_title(\"InternetService vs Churn\")\n    ```", "```py\n    pl.set_xlabel(\"InternetService\")\n    ```", "```py\n    pl.set_ylabel(\"Count\")\n    ```", "```py\n    f, ax = plt.subplots(figsize=(10, 6))\n    ```", "```py\n    pl = sns.countplot(x=data[\"MultipleLines\"],hue=data[\"Churn\"])\n    ```", "```py\n    pl.set_title(\"MultipleLines vs Churn\")\n    ```", "```py\n    pl.set_xlabel(\"MultipleLines\")\n    ```", "```py\n    pl.set_ylabel(\"Count\")\n    ```", "```py\n    f, ax = plt.subplots(figsize=(10, 6))\n    ```", "```py\n    pl = sns.countplot(x=data[\"Contract\"],hue=data[\"Churn\"])\n    ```", "```py\n    pl.set_title(\"Contract vs Churn\")\n    ```", "```py\n    pl.set_xlabel(\"Contract\")\n    ```", "```py\n    pl.set_ylabel(\"Count\")\n    ```", "```py\n    f, ax = plt.subplots(figsize=(10, 6))\n    ```", "```py\n    pl = sns.countplot(x=data[\"PaymentMethod\"],hue=data[\"Churn\"])\n    ```", "```py\n    pl.set_title(\"PaymentMethod vs Churn\")\n    ```", "```py\n    pl.set_xlabel(\"PaymentMethod\")\n    ```", "```py\n    pl.set_ylabel(\"Count\")\n    ```", "```py\n    g = sns.pairplot(data[['tenure','MonthlyCharges', 'TotalCharges','Churn']], hue= \"Churn\",palette= ([\"red\",\"blue\"]),height=6)\n    ```", "```py\n    object_cols = [c for c in data.drop(['customerID'],axis=1).columns if data[c].dtype=='O']\n    ```", "```py\n    object_cols\n    ```", "```py\n    df_dummies = pd.get_dummies(data[object_cols])\n    ```", "```py\n    data = pd.concat([data.drop(object_cols+['Churn'],axis=1),df_dummies,data[['Churn']]],axis=1)\n    ```", "```py\n    data.head()\n    ```", "```py\n    import numpy as np\n    ```", "```py\n    from matplotlib import colors\n    ```", "```py\n    df_corr = data.corr()\n    ```", "```py\n    mask = np.triu(np.ones_like(df_corr, dtype=bool))\n    ```", "```py\n    df_corr = df_corr.mask(mask).round(2)\n    ```", "```py\n    fig, ax = plt.subplots(figsize=(25,25))\n    ```", "```py\n    sns.heatmap(df_corr, annot=True,ax=ax)\n    ```", "```py\n    churn_corr = data.corr()['Churn'].sort_values(ascending = False)\n    ```", "```py\n    churn_corr.plot(kind='bar',figsize=(20,8))\n    ```", "```py\n    from sklearn.preprocessing import MinMaxScaler\n    ```", "```py\n    y = data['Churn'].values\n    ```", "```py\n    x = data.drop(columns = ['customerID','Churn']).fillna(0)\n    ```", "```py\n    scaler = MinMaxScaler(feature_range = (0,1))\n    ```", "```py\n    x_scaled = scaler.fit_transform(x)\n    ```", "```py\n    x_scaled = pd.DataFrame(x_scaled,columns=x.columns)\n    ```", "```py\n    x_scaled.head()\n    ```", "```py\n    from sklearn.model_selection import train_test_split\n    ```", "```py\n    from sklearn.linear_model import LogisticRegression\n    ```", "```py\n    from sklearn import metrics\n    ```", "```py\n    x_train, x_test, y_train, y_test = train_test_split(\n    ```", "```py\n          x_scaled, y, test_size=0.3, random_state=101)\n    ```", "```py\n    model = LogisticRegression()\n    ```", "```py\n    result = model.fit(x_train, y_train)\n    ```", "```py\n    preds_lr = model.predict(x_test)\n    ```", "```py\nprint(metrics.accuracy_score(y_test, preds_lr))\n```", "```py\n    weights = pd.Series(model.coef_[0],index=x_scaled.columns)\n    ```", "```py\n    pd.concat([weights.head(10),weights.tail(10)]).sort_values(ascending = False).plot(kind='bar',figsize=(16,6))\n    ```", "```py\n    from sklearn.metrics import classification_report, confusion_matrix\n    ```", "```py\n    print(confusion_matrix(y_test,preds_lr))\n    ```", "```py\nfrom sklearn.ensemble import RandomForestClassifier\nmodel_rf = RandomForestClassifier(n_estimators=750 , oob_score = True, random_state =50, max_features = \"auto\",max_leaf_nodes = 15)\nmodel_rf.fit(x_train, y_train)\n```", "```py\n    preds_rfc = model_rf.predict(x_test)\n    ```", "```py\n    print(metrics.accuracy_score(y_test, preds_rfc))\n    ```", "```py\n    importances = model_rf.feature_importances_\n    ```", "```py\n    weights_rf = pd.Series(importances,index=x_scaled.columns)\n    ```", "```py\n    pd.concat([weights_rf.head(10),weights.tail(10)]).sort_values(ascending = False).plot(kind='bar',figsize=(16,6))\n    ```", "```py\nprint(confusion_matrix(y_test,preds_rfc))\n```", "```py\n    from sklearn.svm import SVC\n    ```", "```py\n    model_svm = SVC(kernel='linear')\n    ```", "```py\n    model_svm.fit(x_train,y_train)\n    ```", "```py\n    preds_svm = model_svm.predict(x_test)\n    ```", "```py\n    metrics.accuracy_score(y_test, preds_svm)\n    ```", "```py\n    pd.Series(abs(model_svm.coef_[0]), index=x_scaled.columns).nlargest(10).plot(kind='barh',figsize=(10,8))\n    ```", "```py\n    print(confusion_matrix(y_test,preds_svm))\n    ```"]