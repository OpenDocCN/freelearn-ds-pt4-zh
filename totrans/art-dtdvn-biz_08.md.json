["```py\n    import numpy as np\n    ```", "```py\n    import pandas as pd\n    ```", "```py\n    import datetime\n    ```", "```py\n    import seaborn as sns\n    ```", "```py\n    import matplotlib.pyplot as plt\n    ```", "```py\n    from matplotlib import colors\n    ```", "```py\n    from matplotlib.colors import ListedColormap\n    ```", "```py\n    from sklearn.preprocessing import LabelEncoder\n    ```", "```py\n    from sklearn.preprocessing import StandardScaler\n    ```", "```py\n    from sklearn.decomposition import PCA\n    ```", "```py\n    from yellowbrick.cluster import KElbowVisualizer\n    ```", "```py\n    from sklearn.cluster import KMeans\n    ```", "```py\n    from mpl_toolkits.mplot3d import Axes3D\n    ```", "```py\n    from sklearn.cluster import AgglomerativeClustering\n    ```", "```py\n    pd.options.display.max_rows = 20\n    ```", "```py\n    pd.options.display.max_columns = 50\n    ```", "```py\n    pd.options.display.precision = 2\n    ```", "```py\n    path = \"data/marketing_campaign.csv\"\n    ```", "```py\n    data = pd.read_csv(path, sep=\"\\t\")\n    ```", "```py\n    print(\"Data Shape\", data.shape)\n    ```", "```py\n    data.head()\n    ```", "```py\n    data.describe()\n    ```", "```py\n    data.info()\n    ```", "```py\n    data = data.dropna()\n    ```", "```py\n    print(\"Data Shape\", data.shape)\n    ```", "```py\n    data[\"Dt_Customer\"] = pd.to_datetime(data[\"Dt_Customer\"])\n    ```", "```py\n    str(data[\"Dt_Customer\"].min()),str(data[\"Dt_Customer\"].max())\n    ```", "```py\n    >>>> ('2012-01-08 00:00:00', '2014-12-06 00:00:00')\n    ```", "```py\n    data[\"Customer_For\"] = data[\"Dt_Customer\"]-data[\"Dt_Customer\"].min()\n    ```", "```py\n    data[\"Customer_For\"] = data[\"Customer_For\"].dt.days\n    ```", "```py\n    data[\"Marital_Status\"].value_counts().plot.bar(figsize=(12,6),title = 'Categories in the feature Marital_Status:')\n    ```", "```py\n    data[\"Education\"].value_counts().plot.bar(figsize=(12,6),title = 'Categories in the feature Education:')\n    ```", "```py\n    data[\"Age\"] = pd.to_datetime('today').year - \n    ```", "```py\n          data[\"Year_Birth\"]\n    ```", "```py\n    prod_cols = [\"MntWines\",\"MntFruits\",\"MntMeatProducts\",\n    ```", "```py\n    \"MntFishProducts\",\"MntSweetProducts\",\"MntGoldProds\"]\n    ```", "```py\n    data[\"Spent\"] = data[prod_cols].sum(axis=1)\n    ```", "```py\n    marital_status_dict= {\"Married\":\"Partner\",\n    ```", "```py\n                          \"Together\":\"Partner\",\n    ```", "```py\n                          \"Absurd\":\"Alone\",\n    ```", "```py\n                          \"Widow\":\"Alone\",\n    ```", "```py\n                          \"YOLO\":\"Alone\",\n    ```", "```py\n                          \"Divorced\":\"Alone\",\n    ```", "```py\n                          \"Single\":\"Alone\",}\n    ```", "```py\n    data[\"Living_With\"] = data[\"Marital_Status\"].replace(marital_status_dict)\n    ```", "```py\n    data[\"Children\"]=data[\"Kidhome\"]+data[\"Teenhome\"]\n    ```", "```py\n    data[\"Family_Size\"] = data[\"Living_With\"].replace({\"Alone\": 1, \"Partner\":2})+ data[\"Children\"]\n    ```", "```py\n    data[\"Is_Parent\"] = (data.Children> 0).astype(int)\n    ```", "```py\n    edu_dict = {\"Basic\":\"Undergraduate\",\"2n Cycle\":\"Undergraduate\", \"Graduation\":\"Graduate\", \"Master\":\"Postgraduate\", \"PhD\":\"Postgraduate\"}\n    ```", "```py\n    data[\"Ed_level\"]=data[\"Education\"].replace(edu_dict)\n    ```", "```py\n    col_rename_dict = {\"MntWines\": \"Wines\",\n    ```", "```py\n                       \"MntFruits\":\"Fruits\",\n    ```", "```py\n                       \"MntMeatProducts\":\"Meat\",\n    ```", "```py\n                       \"MntFishProducts\":\"Fish\",\n    ```", "```py\n                       \"MntSweetProducts\":\"Sweets\",\n    ```", "```py\n                       \"MntGoldProds\":\"Gold\"}\n    ```", "```py\n    data = data.rename(columns=col_rename_dict)\n    ```", "```py\n    to_drop = [\"Marital_Status\", \"Dt_Customer\", \n    ```", "```py\n          \"Z_CostContact\", \"Z_Revenue\", \"Year_Birth\", \"ID\"]\n    ```", "```py\n    data = data.drop(to_drop, axis=1)\n    ```", "```py\n    data.describe()\n    ```", "```py\n    data[\"Age\"].plot.hist(figsize=(12,6))\n    ```", "```py\n    data[\"Income\"].plot.hist(figsize=(12,6))\n    ```", "```py\n    prev_len = len(data)\n    ```", "```py\n    data = data[(data[\"Age\"]<99)]\n    ```", "```py\n    data = data[(data[\"Income\"]<150000)]\n    ```", "```py\n    new_len = prev_len - len(data)\n    ```", "```py\n    print('Removed outliers:',new_len)\n    ```", "```py\n>>> Removed outliers: 11\n```", "```py\n    data[\"Age\"].plot.hist(figsize=(12,6))\n    ```", "```py\ndata[\"Income\"].plot.hist(figsize=(12,6))\n```", "```py\n    sns.pairplot(data[[\"Income\", \"Recency\", \"Customer_For\", \"Age\", \"Spent\", \"Is_Parent\"]], hue= \"Is_Parent\",palette= ([\"red\",\"blue\"]))\n    ```", "```py\n    df_corr = data.corr()\n    ```", "```py\n    mask = np.triu(np.ones_like(df_corr, dtype=bool))\n    ```", "```py\n    df_corr = df_corr.mask(mask).round(3)\n    ```", "```py\n    fig, ax = plt.subplots(figsize=(16,16))\n    ```", "```py\n    cmap = colors.ListedColormap([\"#682F2F\", \"#9E726F\", \"#D6B2B1\", \"#B9C0C9\", \"#9F8A78\", \"#F3AB60\"])\n    ```", "```py\n    sns.heatmap(df_corr, cmap=cmap,annot=True,ax=ax)\n    ```", "```py\n    object_cols = [c for c in data.columns if data[c].dtypes == 'object']\n    ```", "```py\n    print(\"Categorical variables in the dataset:\", object_cols)\n    ```", "```py\n    LE = LabelEncoder()\n    ```", "```py\n    for i in object_cols:\n    ```", "```py\n        data[i]=data[[i]].apply(LE.fit_transform)\n    ```", "```py\n    scaled_ds = data.copy()\n    ```", "```py\n    cols_del = ['AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1','AcceptedCmp2', 'Complain', 'Response']\n    ```", "```py\n    scaled_ds = scaled_ds.drop(cols_del, axis=1)\n    ```", "```py\n    scaler = StandardScaler()\n    ```", "```py\n    scaler.fit(scaled_ds)\n    ```", "```py\n    scaled_ds = pd.DataFrame(scaler.transform(\n    ```", "```py\n          scaled_ds),columns= scaled_ds.columns )\n    ```", "```py\n    pca = PCA(n_components=3)\n    ```", "```py\n    PCA_ds = pca.fit_transform(scaled_ds)\n    ```", "```py\n    PCA_ds = pd.DataFrame(PCA_ds, columns=([\n    ```", "```py\n          \"component_one\",\"component_two\", \"component_three\"]))\n    ```", "```py\n    print(pca.explained_variance_ratio_)\n    ```", "```py\n    >>>>[0.35092717 0.12336458 0.06470715]\n    ```", "```py\nprint('Total explained variance',sum(pca.explained_variance_ratio_))\n>>>> Total explained variance 0.5389989029179605\n```", "```py\n    x,y,z=PCA_ds[\"component_one\"],PCA_ds[\n    ```", "```py\n          \"component_two\"],PCA_ds[\"component_three\"]\n    ```", "```py\n    fig = plt.figure(figsize=(10,8))\n    ```", "```py\n    ax = fig.add_subplot(111, projection=\"3d\")\n    ```", "```py\n    ax.scatter(x,y,z, c=\"maroon\", marker=\"o\" )\n    ```", "```py\n    ax.set_title(\"A 3D Projection Of Data In The Reduced Dimension\")\n    ```", "```py\n    plt.show()\n    ```", "```py\n    fig = plt.figure(figsize=(12,8))\n    ```", "```py\n    elbow = KElbowVisualizer(KMeans(), k=(2,12), metric='distortion') # distortion: mean sum of squared distances to centers\n    ```", "```py\n    elbow.fit(PCA_ds)\n    ```", "```py\n    elbow.show()\n    ```", "```py\n    AC = AgglomerativeClustering(n_clusters=4)\n    ```", "```py\n    # fit model and predict clusters\n    ```", "```py\n    yhat_AC = AC.fit_predict(PCA_ds)\n    ```", "```py\n    PCA_ds[\"Clusters\"] = yhat_AC\n    ```", "```py\n    data[\"Clusters\"]= yhat_AC\n    ```", "```py\n    classes = [0,1,2,3]\n    ```", "```py\n    values = PCA_ds[\"Clusters\"]\n    ```", "```py\n    colors = ListedColormap(['red','blue','green','orange'])\n    ```", "```py\n    fig = plt.figure(figsize=(10,8))\n    ```", "```py\n    ax = plt.subplot(projection='3d')\n    ```", "```py\n    scatter = ax.scatter(x, y,z, c=values, cmap=colors)\n    ```", "```py\n    plt.legend(handles=scatter.legend_elements()[0], labels=classes)\n    ```", "```py\n    cluster_count = PCA_ds[\"Clusters\"].value_counts().reset_index()\n    ```", "```py\n    cluster_count.columns  = ['cluster','count']\n    ```", "```py\n    f, ax = plt.subplots(figsize=(10, 6))\n    ```", "```py\n    fig = sns.barplot(x=\"cluster\", y=\"count\", palette=['red','blue','green','orange'],data=cluster_count)\n    ```", "```py\n    f, ax = plt.subplots(figsize=(12, 8))\n    ```", "```py\n    pl = sns.scatterplot(data = data,x=data[\"Spent\"], y=data[\"Income\"],hue=data[\"Clusters\"], palette= colors)\n    ```", "```py\n    pl.set_title(\"Cluster vs Income And Spending\")\n    ```", "```py\n    plt.legend()\n    ```", "```py\n    plt.show()\n    ```", "```py\n    f, ax = plt.subplots(figsize=(12,6))\n    ```", "```py\n    sample = data.sample(750)\n    ```", "```py\n    pl = sns.swarmplot(x=sample[\"Clusters\"], y=sample[\"Spent\"], color= \"red\", alpha=0.8 ,size=3)\n    ```", "```py\n    f, ax = plt.subplots(figsize=(12, 6))\n    ```", "```py\n    pl = sns.boxenplot(x=data[\"Clusters\"], y=data[\"Spent\"], palette=['red','blue','green','orange'])\n    ```", "```py\n    data[\"TotalProm\"] = data[\"AcceptedCmp1\"]+ data[\"AcceptedCmp2\"]+ data[\"AcceptedCmp3\"]+ data[\"AcceptedCmp4\"]+ data[\"AcceptedCmp5\"]\n    ```", "```py\n    f, ax = plt.subplots(figsize=(10, 6))\n    ```", "```py\n    pl = sns.countplot(x=data[\"TotalProm \"],hue=data[\"Clusters\"], palette= ['red','blue','green','orange'])\n    ```", "```py\n    pl.set_title(\"Total Promotions vs Cluster\")\n    ```", "```py\n    pl.set_xlabel(\"Cluster\")\n    ```", "```py\n    pl.set_ylabel(\"Count\")\n    ```", "```py\n    f, ax = plt.subplots(figsize=(12, 6))\n    ```", "```py\n    pl = sns.boxenplot(y=data[\"NumDealsPurchases\"],x=data[\"Clusters\"], palette= ['red','blue','green','orange'])\n    ```", "```py\n    pl.set_title(\"Purchased Deals\")\n    ```", "```py\n    sns.jointplot(x=data['Education'], y=data[\"Spent\"], hue =data[\"Clusters\"], kind=\"kde\", palette=['red','blue','green','orange'],height=10)\n    ```", "```py\n    sns.jointplot(x=data['Family_Size'], y=data[\"Spent\"], hue =data[\"Clusters\"], kind=\"kde\", palette=['red','blue','green','orange'],height=10)\n    ```", "```py\n    sns.jointplot(x=data['Customer_For'], y=data[\"Spent\"], hue =data[\"Clusters\"], kind=\"kde\", palette=['red','blue','green','orange'],height=10)\n    ```", "```py\nsns.jointplot(x=data['Age'], y=data[\"Spent\"], hue =data[\"Clusters\"], kind=\"kde\", palette=['red','blue','green','orange'],height=10)\n```"]