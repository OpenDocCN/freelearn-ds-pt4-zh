["```py\n    import pandas as pd # data processing\n    ```", "```py\n    import matplotlib.pyplot as plt # visualization\n    ```", "```py\n    import seaborn as sns # visualization\n    ```", "```py\n    train=pd.read_csv(\"/content/train.csv\", \n    ```", "```py\n          parse_dates=[\"Date\"])\n    ```", "```py\n    features=pd.read_csv(\"/content/features.csv\", \n    ```", "```py\n          parse_dates=[\"Date\"])\n    ```", "```py\n    stores=pd.read_csv(\"/content/stores.csv\")\n    ```", "```py\n    train.head()\n    ```", "```py\ntrain['Year']=train['Date'].dt.year\ntrain['Month']=train['Date'].dt.month\ntrain['Week']=train['Date'].dt.week\ntrain['Day']=train['Date'].dt.day\n```", "```py\n    stores.head()\n    ```", "```py\n    data = pd.concat([stores['Type'], stores['Size']], axis=1)\n    ```", "```py\n    f, ax = plt.subplots(figsize=(8, 6))\n    ```", "```py\n    fig = sns.boxplot(x='Type', y='Size', data=data)\n    ```", "```py\n    features.head()\n    ```", "```py\ntrain=train.merge(stores, on='Store', how='left')\ntrain.head()\n```", "```py\ndata = pd.concat([train['Type'], train['Weekly_Sales']], axis=1)\nf, ax = plt.subplots(figsize=(8, 6))\nfig = sns.boxplot(x='Type', y='Weekly_Sales', data=data, showfliers=False)\n```", "```py\n    data = pd.concat([train['Store'], train['Weekly_Sales'], train['Type']], axis=1)\n    ```", "```py\n    f, ax = plt.subplots(figsize=(25, 8))\n    ```", "```py\n    fig = sns.boxplot(x='Store', y='Weekly_Sales', data=data, showfliers=False, hue=\"Type\")\n    ```", "```py\n    data = pd.concat([train['Store'], train['Weekly_Sales'], train['IsHoliday']], axis=1)\n    ```", "```py\n    f, ax = plt.subplots(figsize=(25, 8))\n    ```", "```py\n    fig = sns.boxplot(x='Store', y='Weekly_Sales', data=data, showfliers=False, hue=\"IsHoliday\")\n    ```", "```py\n    data= train[['Dept','Weekly_Sales']].groupby('Dept').mean().reset_index()\n    ```", "```py\n    f, ax = plt.subplots(figsize=(25, 8))\n    ```", "```py\n    fig = sns.barplot(x='Dept', y='Weekly_Sales', data=data)\n    ```", "```py\n    data = pd.concat([train['Month'], train['Weekly_Sales']], axis=1)\n    ```", "```py\n    f, ax = plt.subplots(figsize=(8, 6))\n    ```", "```py\n    fig = sns.boxplot(x='Month', y=\"Weekly_Sales\", data=data, showfliers=False)\n    ```", "```py\ndata = pd.concat([train['Month'], train[\n      'Weekly_Sales'],train['IsHoliday']], axis=1)\nf, ax = plt.subplots(figsize=(8, 6))\nfig = sns.boxplot(x='Month', y=\"Weekly_Sales\", data=data, showfliers=False, hue='IsHoliday')\n```", "```py\ndata = pd.concat([train['Week'], train['Weekly_Sales'],train['Type']], axis=1)\nsns.relplot(x='Week', y=\"Weekly_Sales\", data=data, hue='Type',kind='line',height=8, aspect=2.2)\n```", "```py\n    data = pd.concat([train['Week'], train['Weekly_Sales']], axis=1)\n    ```", "```py\n    f, ax = plt.subplots(figsize=(20, 6))\n    ```", "```py\n    fig = sns.boxplot(x='Week', y=\"Weekly_Sales\", data=data, showfliers=False)\n    ```", "```py\n    data = pd.concat([train['Date'], train[\n    ```", "```py\n          'Weekly_Sales'],train['Type']], axis=1)\n    ```", "```py\n    sns.relplot(x='Date', y=\"Weekly_Sales\", data=data, hue='Type',kind='line',height=8, aspect=2.2)\n    ```", "```py\n    data_store = train[['Week','Weekly_Sales']].groupby(['Week']).mean().reset_index()\n    ```", "```py\n    data_store.shape\n    ```", "```py\n    >>>(52, 2)\n    ```", "```py\ndata_features = features[['Week','MarkDown1','MarkDown2',\n'MarkDown3','MarkDown4','MarkDown5']].groupby(['Week']).mean().reset_index()\ndata_features.shape\n>>>(52, 6)\n```", "```py\n    data_store = data_store.merge(data_features,on=['Week'],how='left').fillna(.0)\n    ```", "```py\n    data_store.index = data_store['Week']\n    ```", "```py\n    data_store = data_store.drop(['Week'],axis=1)\n    ```", "```py\n    data_store.head()\n    ```", "```py\ndata_store.plot(figsize=(20,8))\n```", "```py\n    data_features = features.drop(['Store','Date','MarkDown1',\n    ```", "```py\n    'MarkDown2','MarkDown3','MarkDown4','MarkDown5'],axis=1).groupby(['Week']).mean().reset_index()\n    ```", "```py\n    data_store = train[['Week','Weekly_Sales']].groupby(['Week']).mean().reset_index()\n    ```", "```py\n    data_store = data_store.merge(data_features,on=['Week'],how='left').fillna(.0)\n    ```", "```py\n    data_store.head()\n    ```", "```py\n    sns.pairplot(data_store.drop(['Week','IsHoliday'],axis=1))\n    ```", "```py\ndata = train.drop(['Year','Month','Week'],axis=1).merge(features.drop(['IsHoliday','Week'],axis=1),on=['Store','Date'])\ndata = pd.concat([data.drop(['Type'],axis=1),\n      pd.get_dummies(data['Type'])],axis=1).fillna(0)\ndata['IsHoliday'] = data['IsHoliday'].astype(int)\ndata.head()\n```", "```py\nimport numpy as np\ndf_corr = data.drop(['Date'],axis=1).corr()\nmask = np.triu(np.ones_like(df_corr, dtype=bool))\ndf_corr = df_corr.mask(mask).round(3)\nfig, ax = plt.subplots(figsize=(16,16))\nsns.heatmap(df_corr, annot=True,ax=ax)\n```", "```py\n    f, ax = plt.subplots(figsize=(20, 6))\n    ```", "```py\n    data = df_corr['Weekly_Sales'].dropna().sort_values(ascending=False)\n    ```", "```py\n    sns.barplot(x=data.index,y=data)\n    ```", "```py\n    from fbprophet import Prophet\n    ```", "```py\n    data = train.drop(['Year','Month','Week'],axis=1).merge(features.drop(['IsHoliday','Week'],axis=1),on=['Store','Date'])\n    ```", "```py\n    data = pd.concat([data.drop(['Type'],axis=1),\n    ```", "```py\n          pd.get_dummies(data['Type'])],axis=1).fillna(0)\n    ```", "```py\n    data['IsHoliday'] = data['IsHoliday'].astype(int)\n    ```", "```py\n    data = data[data.Store==1]\n    ```", "```py\n    data['ds']= pd.to_datetime(data['Date'])\n    ```", "```py\n    data =  data.sort_values(['ds'],ascending='True')\n    ```", "```py\n    data['y']=data['Weekly_Sales']\n    ```", "```py\ndata = data.drop(['Date','Weekly_Sales'],axis=1).reset_index(drop=True)\ndata.head()\n```", "```py\nx_train = data[:-1000]\nx_test = data[-1000:]\n```", "```py\n    model = Prophet(changepoint_prior_scale=0.05, \n    ```", "```py\n                interval_width=0.95,\n    ```", "```py\n                growth = 'linear',\n    ```", "```py\n                seasonality_mode = 'multiplicative',\n    ```", "```py\n                weekly_seasonality=True,\n    ```", "```py\n                changepoint_range=0.9)\n    ```", "```py\nfor c in ['Dept','IsHoliday',\n      'CPI','Fuel_Price','MarkDown1',\n'MarkDown2','MarkDown3','MarkDown4','MarkDown5', 'Unemployment']:\n  print(c)\n  model.add_regressor(name=c, prior_scale=None, standardize='auto', mode='additive')\n```", "```py\nmodel.fit(data[['ds','y','Dept','IsHoliday','CPI',\n'Fuel_Price','MarkDown1','MarkDown2','MarkDown3',\n'MarkDown4','MarkDown5', 'Unemployment']])\n```", "```py\n    forecast = model.predict(x_test[['ds','Dept','IsHoliday','\n    ```", "```py\n    CPI','Fuel_Price','MarkDown1','MarkDown2','MarkDown3',\n    ```", "```py\n    'MarkDown4','MarkDown5', 'Unemployment']])\n    ```", "```py\nprint(forecast[['ds', 'yhat', 'yhat_lower', \n      'yhat_upper']].head())\n```", "```py\n    forecast_data = pd.concat([forecast[['yhat', \n    ```", "```py\n    'yhat_lower', 'yhat_upper']],\n    ```", "```py\n    x_test['y'].reset_index(drop=True)],axis=1)\n    ```", "```py\n    forecast_data.rolling(window=7).mean().plot(figsize=(20,8))\n    ```"]