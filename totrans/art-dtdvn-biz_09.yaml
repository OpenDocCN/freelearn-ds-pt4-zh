- en: '9'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using Historical Markdown Data to Predict Sales
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many retailers have no choice but to follow the industry trend of increased
    use of discounts and special marketing to maintain a competitive edge in today’s
    oversaturated market. This is because most of the new customers are more price-sensitive
    and will check prices across websites to discover the bests offers for specific
    products.
  prefs: []
  type: TYPE_NORMAL
- en: Discounting, however, has its drawbacks. While promotions can speed up sales,
    businesses also run the danger of further profit loss when offering discounts
    without conducting adequate research. One challenge of modeling retail data is
    the need to make decisions based on limited history. If Christmas comes but once
    a year, so does the chance to see how strategic decisions impacted the bottom
    line.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we delve deeper into the most recent markdown and discount
    marketing tactics used by industry leaders and show you how to implement them
    while maintaining profit margins. We will use historical sales information from
    45 supermarkets spread across several areas. Although it is well recognized that
    these markdowns have an influence on sales, it can be difficult to foresee which
    departments will be impacted and how much, so our goal will be to forecast the
    sales for each department in each store, which has multiple departments. Selected
    holiday markdown events are included in the dataset to increase the difficulty.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will learn how to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Determine sales performance considering all the factors that impact it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Explore the sales data to determine factors that affect sales
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Study the effect of promotional markdown on sales during holidays
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Predict the sales given specific markdowns applied
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will be using data that reflects actual real data to try to get as close
    as possible to real-life situations.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To be able to follow the steps in this chapter, you will need to meet the next
    requirements:'
  prefs: []
  type: TYPE_NORMAL
- en: A Jupyter notebook instance running Python 3.7 and above. You can use the Google
    Colab notebook to run the steps as well if you have a Google Drive account.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An understanding of basic math and statistical concepts.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating effective markdowns
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A markdown is a devaluation of a product because it cannot be sold at the original
    selling price. An example of a discount would be if you have an item that after
    a month of slow sales you decide to discount by 20%. Even if you just lost revenue,
    it also invites more people to buy it at a lower price. Since the item didn’t
    originally sell well, offering a good discounted price can often lead to sales
    that otherwise wouldn’t have happened. However, you will often find that you need
    to pursue your markdown strategies based on slow sales, moving products from 20%
    to 30%, 40%, and more as needed. Timing is particularly important because you
    want to sell the product while it is still relevant to the season, trends, and
    more.
  prefs: []
  type: TYPE_NORMAL
- en: Markdowns need to be differentiated from discounts. In retail, a discount is
    a reduction in the price of an item or transaction based on the type of customer
    who is buying. The employee discount, senior discount, and frequent shopper discount
    are a few examples. Because of the discounts they receive, many retailers believe
    that this makes the customers more likely to return to their store than to one
    of their competitors.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will use historical sales information from stores located
    in various locations in the US. Each store has a range of departments, and we
    will forecast the department-wide sales. Additionally, the company hosts a number
    of promotional markdown sales all year round, out of which the Super Bowl, Labor
    Day, Thanksgiving, and Christmas are the four biggest holidays.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, Walmart runs several promotional markdown events throughout the
    year. These markdowns precede prominent holidays, the four largest of which are
    the Super Bowl, Labor Day, Thanksgiving, and Christmas. The weeks including these
    holidays are weighted five times higher in the evaluation than non-holiday weeks.
    Part of the challenge presented by this competition is modeling the effects of
    markdowns on these holiday weeks in the absence of complete/ideal historical data.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will analyze the data to understand the variables, its
    distribution, and we will structure it for better visualization and for use in
    machine learning.
  prefs: []
  type: TYPE_NORMAL
- en: Analyzing the data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are provided with 3 files, which contain anonymized information about the
    45 stores, indicating the type and size of the store, historical training data,
    which covers 2010-02-05 to 2012-11-01, and a file that contains additional data
    related to the store, department, and regional activity for the given dates.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next example, the following Python modules were used:'
  prefs: []
  type: TYPE_NORMAL
- en: 'pandas: A Python package for data analysis and data manipulation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'NumPy: This is a library that adds support for large, multi-dimensional arrays
    and matrices, along with an ample collection of high-level mathematical functions
    to operate on these arrays'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Seaborn and Matplotlib: Python packages for effective data visualization'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We will start the analysis by importing the libraries, and we will start to
    analyze the data by reading all the files and parsing the `Date` column using
    the `parse_date` option of the `read_csv` pandas function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now that all the files are loaded, we can start by looking at the first rows
    of the train file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Figure 9.1: Train file with weekly sales for the store, day, and department
    ](img/B19026_09_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.1: Train file with weekly sales for the store, day, and department'
  prefs: []
  type: TYPE_NORMAL
- en: The file contains weekly sales data for each store and department, flagging
    also whether this day is a holiday or not.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will also introduce some date variables to make the analysis easier:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The next file we will look at contains information about each story in terms
    of type and size. We can use this information later to assess if the effects of
    markdown vary depending on the store characteristics:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Figure 9.2: Store type and size data ](img/B19026_09_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.2: Store type and size data'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can start to visualize the data by looking at the distribution of sales
    types and sizes using the boxplot from Seaborn. In the next block of code, we
    create a subset of data concatenating the **Type** and **Size** columns of the
    store’s data. Then, we create a figure, using Matplotlib, of 8x6 inches, which
    will contain the seaborn figure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The code will show us the distribution of the store size.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.3: Store type and size data ](img/B19026_09_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.3: Store type and size data'
  prefs: []
  type: TYPE_NORMAL
- en: Within size, we can see that there are three types of stores, out of which type
    A is the biggest. It is interesting to see the variation between the quantiles
    as well as the outliers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, the next file contains more contextual data about each day and store.
    This information is about temperature, fuel price, and the different markdowns
    applied divided into five types, consumer price index, unemployment, and information
    about whether the day was a holiday or not:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Figure 9.4: Contextual data by store ](img/B19026_09_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.4: Contextual data by store'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will use the `merge` method in the `train` pandas DataFrame to attach information
    about the day, the size of the store, and the type contained in the store’s DataFrame:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The previous code will merge the data and show the first few lines.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.5: Weekly sales data with information about holidays, store type,
    and size ](img/B19026_09_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.5: Weekly sales data with information about holidays, store type,
    and size'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can now visualize the distribution of weekly sales by type of store. We
    will create a subset of data using the **Type** and **Weekly_Sales** column, creating
    a Matplotlib figure of 8x6 inches, which then is filled with a seaborn boxplot:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: This will generate boxplot visualizations by type of store.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.6: Boxplot of weekly sales by type ](img/B19026_09_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.6: Boxplot of weekly sales by type'
  prefs: []
  type: TYPE_NORMAL
- en: In relation to the type of store, we can see that although the A is the smallest
    one, it is the one with the highest median sales.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will now create a boxplot of the distribution of sales data by store ID.
    We create a subset of data with the columns **Store** and **Weekly_Sales** from
    the train data, create a Matplotlib figure of 25x8 inches, and show a seaborn
    boxplot where the x-axis is the store ID and a color differentiation by type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The code will generate boxplots of the weekly sales by store.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.7: Weekly sales data by store ID and type ](img/B19026_09_7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.7: Weekly sales data by store ID and type'
  prefs: []
  type: TYPE_NORMAL
- en: From the boxplot, we can see that store can be the variable giving information
    on sales, as there is a consistent pattern of high upper boundaries sales in all
    types. This is an indication that there are moments in which the demand increases
    in a short amount of time. Also, there are no indications of having moments in
    which the demand falls drastically under the median.
  prefs: []
  type: TYPE_NORMAL
- en: Much intrinsic information on type, size, and department is included in the
    store data. Therefore, we will look at how the holidays impact sales.
  prefs: []
  type: TYPE_NORMAL
- en: 'We repeat the same pattern of creating a subset of data, a Matplotlib figure,
    and a seaborn boxplot, but now the hue variable is set to the **IsHoliday** column:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This code will show us the distribution of sales with even more levels of information.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.8: Weekly sales data by store ID during and excluding holidays ](img/B19026_09_8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.8: Weekly sales data by store ID during and excluding holidays'
  prefs: []
  type: TYPE_NORMAL
- en: We can see from the data that **Holiday** and **Store** do not show significant
    relations except for a small higher sales soaring during the holiday day. This
    may imply that most of the sales are done days before the holiday itself.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let us dive into the difference in sales by type of department. To do
    this, we will create a subset of data as the grouping of the weekly sales per
    department, then apply the mean, and reset the index. We show the data using a
    bar plot because otherwise, it would be impossible to see at glance any difference
    in a boxplot because of the number of departments:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This visualization will give us a perspective of sales by department.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.9: Weekly median sale by department ](img/B19026_09_9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.9: Weekly median sale by department'
  prefs: []
  type: TYPE_NORMAL
- en: We can see that there is variation between the sales of different departments.
    We have a high concentration of revenue in some of them, which could lead us to
    consider excluding the ones with smaller sales. This may not be appropriate as
    these departments may allow customers that just look for those items to go to
    that store and then buy other items. You could study this further using analysis
    such as the Apriori algorithm.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will visualize the weekly sales by month to glimpse at the seasonality
    of the data. We create a subset of data with the columns and visualize the data
    with a boxplot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The following is the distribution of monthly sales.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.10: Weekly sales by month ](img/B19026_09_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.10: Weekly sales by month'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can explore the monthly sales further by visualizing the behavior of the
    holidays in the sales by month. We do this by setting the hue value of the boxplot
    to `IsHoliday`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: The following plot is the distribution of sales by month and holidays.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.11: Weekly sales by month differentiating holidays ](img/B19026_09_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.11: Weekly sales by month differentiating holidays'
  prefs: []
  type: TYPE_NORMAL
- en: For most of the holidays, the sales on the day of the holiday are slightly higher
    than on regular days, apart from Christmas, which is in December.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we can create a seaborn relplot to visualize the data per week:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: This plot shows us the median and the confidence intervals.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.12: Weekly sales through time ](img/B19026_09_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.12: Weekly sales through time'
  prefs: []
  type: TYPE_NORMAL
- en: By looking at the relplot, we can see the sharp increase in sales between weeks
    40 and 50.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can visualize the weekly sales data by using a boxplot with `Week` on the
    x-axis and the `Weekly_Sales` column on the y-axis :'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This plot shows us the median and the confidence intervals by week of the year.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.13: Weekly sales by the week of the year ](img/B19026_09_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.13: Weekly sales by the week of the year'
  prefs: []
  type: TYPE_NORMAL
- en: We can see now that the holiday in the first month of the year produces a minor
    increase, while the ones in the last part of the year have the biggest increase
    in sales, including a sudden drop in the week after.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can plot the data now using a seaborn relplot using the dates and the weekly
    sales as well as making a differentiation by type of store with the hue parameter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code plots the data with a confidence band.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.14: Weekly sales through time ](img/B19026_09_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.14: Weekly sales through time'
  prefs: []
  type: TYPE_NORMAL
- en: We can observe that the same patterns repeat in the two years of data contained,
    which could be further explained if we would look at the seasonality of the data,
    which are the recurring patterns that happen every certain period of time. The
    cycles of buying patterns repeat during the last part of the year, showing a sharp
    increase during the weeks before Christmas.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our next step will be to analyze the mean values of weekly sales, making a
    differentiation by week and markdown applied. To do this, first, we will group
    the weekly sales by week and apply the mean, and we print the shape as a sanity
    test:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we can get the information from the features DataFrame about markdowns
    applied in that specific week and apply the mean as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now merge both DataFrames and obtain information about the median sale
    per week as well as the type of markdown applied:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Figure 9.15: Median weekly sales and markdowns per week ](img/B19026_09_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.15: Median weekly sales and markdowns per week'
  prefs: []
  type: TYPE_NORMAL
- en: 'Using this information, we can now plot the data to see the impact of discounts
    in comparison with the weekly sales:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure 9.16: Median weekly sales and markdowns per week ](img/B19026_09_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.16: Median weekly sales and markdowns per week'
  prefs: []
  type: TYPE_NORMAL
- en: We can see from the data that many markdowns are applied immediately before
    Christmas and then in the weeks that follow it. The answer may be that these markdowns
    are applied to reduce the stock of products that were not bought during the holiday
    period.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we will look at the relationship between sales and the features describing
    the conditions for each day and store. To do this, we group the sales data by
    week and apply the mean. We then do the same for the features data and finally
    merge both DataFrames:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The previous code will show us the merged data.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.17: Median weekly contextual data ](img/B19026_09_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.17: Median weekly contextual data'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can now use the information to construct a seaborn pair plot to visualize
    any relationship. We exclude the `Week` and `IsHoliday` variables, the latter
    because categorical variables are difficult to visualize with this type of plot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The code will create a plot with the relationship between the numerical variables.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.18: Feature pair plot ](img/B19026_09_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.18: Feature pair plot'
  prefs: []
  type: TYPE_NORMAL
- en: We can see that although we would be able to better appreciate the relationships,
    most of the weekly sales have a similar mean per week, making it difficult to
    differentiate meaningful relationships with CPI, unemployment, or fuel price.
    We should repeat the exercise without grouping the data, which would consequently
    give us more information but would take a bit more processing time.
  prefs: []
  type: TYPE_NORMAL
- en: To predict the sales, first, we need to manipulate the data and make some decisions.
    The first is at which level we want to make the predictions in terms of time.
    In our case, we will use `predict` for weekly sales. We will group all the data
    into a single DataFrame in which each data point is enriched with information
    about both the store as well as the conditions of that day.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We also transform the Type column into a one-hot vector representation using
    the `pd.get_dummies` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: We can see the created columns in the DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.19: Dataset with no encoded variable ](img/B19026_09_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.19: Dataset with no encoded variable'
  prefs: []
  type: TYPE_NORMAL
- en: This configuration of data allows us to extend the exploration to the analysis
    of correlations between the variables, which in turn sets the stage to start using
    the data to predict sales.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next block of code will use the `corr()` method of the `pandas` DataFrame
    to analyze the correlation between variables, and we will use the `numpy` package
    to mask the redundant values and finally plot the data using the seaborn `heatmap`
    visualization:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code will create the correlation plot of the variables.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.20: Variables correlation ](img/B19026_09_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.20: Variables correlation'
  prefs: []
  type: TYPE_NORMAL
- en: We can see some interesting correlations, for example, the positive correlation
    between the size of markdown 2 and 3 and the size of the store, and the positive
    correlation between the size of markdown 1 and 4.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we can show the degree of correlation between the variables and the
    weekly sales:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The following barplot will show us the most correlated variables.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.21: Variables correlation sorted ](img/B19026_09_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.21: Variables correlation sorted'
  prefs: []
  type: TYPE_NORMAL
- en: We can see that the weekly sales are highly influenced by the size of the store
    positively, followed by markdowns 5 and 1\. It is negatively correlated with unemployment
    and **Consumer Price Index** (**CPI**), which makes sense.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have a better understanding of the data, we will start the process
    of making predictions on weekly sales.
  prefs: []
  type: TYPE_NORMAL
- en: Predicting sales with Prophet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Forecasting a time series can be a challenging task if there are many different
    methods you can use and many different hyperparameters for each method. The Prophet
    library is an open source library designed to make predictions for univariate
    time series data sets. It is easy to use and designed to automatically find a
    good set of hyperparameters for the model to make competent predictions for data
    with standard trends and seasonal structure. We will learn how to use the Facebook
    Prophet package to predict the weekly sales time series:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we will import the library and create a dataset that contains all the
    features described as either continuous variables or one-hot representations:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Filter results for Store 1, as we will train a model that learns the behavior
    of each specific store:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For the Prophet package, we need to prepare some expected column names with
    a specific data type. In this case, we need to pass `ds` and `y` variables, the
    first being a `datetime` type of column:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now that we have created the columns with the proper data types, we can drop
    the redundant columns and show the first lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure 9.22: Data to be used for model training ](img/B19026_09_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.22: Data to be used for model training'
  prefs: []
  type: TYPE_NORMAL
- en: We can now split the data into train and test data sets.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we can define the model that we will use. In this case, we need to
    establish linear growth with multiplicative seasonality. In this case, we have
    also included weekly seasonality:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Before training the forecaster, we can add regressors that use the additional
    variables.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, the `add_regressor` argument is the column name of the additional variable
    in the training DataFrame:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: Note that here we are adding additional variables as regressors to the model.
    These variables should have values for your future (test) data. One key factor
    is that we are using the same parameters for all of the variables, while fine-tuning
    these parameters for each one of the variables is advised instead of this method.
    Although, the selection of each one of these parameters in consideration of the
    specifics of each variable is beyond the scope of this analysis.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we can fit the model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'After the model has been trained, we can use it to make forecasts on the test
    data to evaluate the performance of the prediction:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE78]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can access the resulting forecast that shows us the predicted values for
    each date, along with the upper and lower boundaries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure 9.23: Forecasted data ](img/B19026_09_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.23: Forecasted data'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we can concatenate these results with the actual values for y in the test
    data to visualize the results. The resulting curves are softened using a rolling
    average with a window of seven lags for visualization purposes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE81]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE82]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE83]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code will generate a visualization where we can see the actual
    sales versus the actual results.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.24: Forecasted data against actual values ](img/B19026_09_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.24: Forecasted data against actual values'
  prefs: []
  type: TYPE_NORMAL
- en: We can see that, apart from certain cases, most of the time the predicted value
    has been close to the actual values, in rare times surpassing the upper boundary
    but never the lower.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have dived into the details of sales analysis and markdown
    applications. As discussed, there is a trade-off between reducing the price of
    items to increase sales and reduce stock-related costs and the amount of revenue
    that is lost due to that decrease in price. In the case of retail, these outcomes
    are impacted by multiple factors, among which are the location of a given store,
    the environmental and economic conditions, and seasonality, as we saw with the
    analysis of sales during different holiday seasons.
  prefs: []
  type: TYPE_NORMAL
- en: The analysis and prediction of sales and markdowns can be applied to fine-tune
    the price reductions applied to maintain the equilibrium between profitability
    and sales, as well as to have a deep understanding of the variables involved and
    their relative impact that can lead to the design of better markdown strategies.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will dive into the specifics of learning the consumer
    behavior at e-commerce retailers, understanding consumer segmentation, predicting
    consumer lifetime value, and predicting which users will eventually buy.
  prefs: []
  type: TYPE_NORMAL
