["```py\n    import pandas as pd\n    ```", "```py\n    pd.options.display.max_rows = 20\n    ```", "```py\n    pd.options.display.max_columns = 50\n    ```", "```py\n    pd.options.display.precision = 2\n    ```", "```py\n    df = pd.read_csv('google_analytics_clean_data.csv')\n    ```", "```py\n    df[\"date\"] = pd.to_datetime(df[\"date\"], format=\"%Y%m%d\") # seting the column as pandas datetime\n    ```", "```py\n    df.head()\n    ```", "```py\n    df.columns\n    ```", "```py\n    df['totals.transactionRevenue'].plot(figsize=(12,4))\n    ```", "```py\nimport seaborn as sns\nsns.relplot(x='date', y='totals.transactionRevenue', data=df,kind='line',height=8, aspect=2.2)\n```", "```py\n    import numpy as np\n    ```", "```py\n    df['totals.transactionRevenue'] = np.log(df['totals.transactionRevenue'])\n    ```", "```py\n    df['totals.transactionRevenue'].plot(figsize=(12,4))\n    ```", "```py\n    sns.relplot(x='date', y='totals.transactionRevenue', data=df,kind='line',height=8, aspect=2.2)\n    ```", "```py\n    import matplotlib.pyplot as plt # visualization\n    ```", "```py\n    data = df.groupby(\"fullVisitorId\")[\"totals.transactionRevenue\"].sum().reset_index()\n    ```", "```py\n    f, ax = plt.subplots(figsize=(12, 6))\n    ```", "```py\n    fig =sns.scatterplot(x='fullVisitorId', y='totals.transactionRevenue',size=4,alpha=.8,color='red', data=data)\n    ```", "```py\n    top_50_customers = data.sort_values(['totals.transactionRevenue'],ascending=False).head(50)\n    ```", "```py\n    top_50_customers['totals.transactionRevenue'].plot.bar(figsize=(15,6))\n    ```", "```py\n    global_countries = df['geoNetwork.country'].value_counts().head(20)\n    ```", "```py\n    global_countries.plot.bar(figsize=(16,6))\n    ```", "```py\n    top_50_data = df[df.fullVisitorId.isin(top_50_customers.fullVisitorId)]\n    ```", "```py\n    top_50_countries = top_50_data['geoNetwork.country'].value_counts()\n    ```", "```py\n    top_50_countries.plot.bar(figsize=(12,6))\n    ```", "```py\n    zero_revenue_users = (data[\"totals.transactionRevenue\"]==0).sum()\n    ```", "```py\n    print(\"Number of unique customers with non-zero revenue: \", len(data)-zero_revenue_users, \"and the ratio is: \", zero_revenue_users / len(data))\n    ```", "```py\n    >>> Number of unique customers with non-zero revenue:  6876 and the ratio is:  0.9264536003080478\n    ```", "```py\n    const_cols = [c for c in df.columns if df[c].nunique(dropna=False)==1 ]\n    ```", "```py\n    Const_cols\n    ```", "```py\n    >>> ['socialEngagementType', 'totals.visits']\n    ```", "```py\n    df = df.drop(const_cols, axis=1)\n    ```", "```py\n    drop_cols = ['sessionId','visitId','visitStartTime',\n    ```", "```py\n    'geoNetwork.continent','geoNetwork.subContinent',\n    ```", "```py\n    'geoNetwork.region','geoNetwork.metro',\n    ```", "```py\n    'geoNetwork.city','geoNetwork.networkDomain']\n    ```", "```py\n    df = df.drop(drop_cols, axis=1)\n    ```", "```py\n    df.columns\n    ```", "```py\n    df['trafficSource.campaign'].value_counts().plot.bar(figsize=(10,6),rot=30)\n    ```", "```py\n    def groupby_mean(x):\n    ```", "```py\n        return x.mean()\n    ```", "```py\n    def groupby_count(x):\n    ```", "```py\n        return x.count()\n    ```", "```py\n    def purchase_duration(x):\n    ```", "```py\n        return (x.max() - x.min()).days\n    ```", "```py\n    def avg_frequency(x):\n    ```", "```py\n        return (x.max() - x.min()).days/x.count()\n    ```", "```py\n    clv_freq = '3M'\n    ```", "```py\n    groupby_mean.__name__ = 'avg'\n    ```", "```py\n    groupby_count.__name__ = 'count'\n    ```", "```py\n    purchase_duration.__name__ = 'purchase_duration'\n    ```", "```py\n    avg_frequency.__name__ = 'purchase_frequency'\n    ```", "```py\n    summary_df = df.reset_index().groupby('fullVisitorId').agg({\n    ```", "```py\n        'totals.transactionRevenue': [min, max, sum, groupby_mean, groupby_count],\n    ```", "```py\n        'date': [min, max, purchase_duration, avg_frequency]\n    ```", "```py\n    })\n    ```", "```py\n    summary_df.columns = ['_'.join(col).lower() for col in summary_df.columns]\n    ```", "```py\nsummary_df.shape\n>>> (93492, 9)\n```", "```py\nsummary_df.describe()\n```", "```py\n    summary_df = summary_df.loc[summary_\n    ```", "```py\n          df['date_purchase_duration'] > 0]\n    ```", "```py\nsummary_df.shape\n>>> (66168, 9)\n```", "```py\n    import matplotlib.pyplot as plt\n    ```", "```py\n    ax = summary_df.groupby('totals.transactionrevenue_count').count()['totals.transactionrevenue_avg'][:20].plot(\n    ```", "```py\n        kind='bar',\n    ```", "```py\n        color='blue',\n    ```", "```py\n        figsize=(12,7),\n    ```", "```py\n        grid=True\n    ```", "```py\n    )\n    ```", "```py\n    ax.set_ylabel('count')\n    ```", "```py\n    plt.show()\n    ```", "```py\nax = summary_df['date_purchase_frequency'].hist(\n    bins=20,\n    color='blue',\n    rwidth=0.7,\n    figsize=(12,7)\n)\nax.set_xlabel('avg. number of days between purchases')\nax.set_ylabel('count')\nplt.show()\n```", "```py\n    from sklearn import model_selection, preprocessing, metrics\n    ```", "```py\n    import lightgbm as lgb\n    ```", "```py\n    # Impute 0 for missing target values\n    ```", "```py\n    df[\"totals.transactionRevenue\"].fillna(0, inplace=True)\n    ```", "```py\n    y = df[\"totals.transactionRevenue\"].values\n    ```", "```py\n    id = df[\"fullVisitorId\"].values\n    ```", "```py\n    cat_cols = ['channelGrouping','device.browser','device.deviceCategory','device.operatingSystem','geoNetwork.country','trafficSource.campaign','trafficSource.keyword','trafficSource.medium','trafficSource.referralPath','trafficSource.source','trafficSource.isTrueDirect']\n    ```", "```py\n    for col in cat_cols:\n    ```", "```py\n        print(col)\n    ```", "```py\n        lbl = preprocessing.LabelEncoder()\n    ```", "```py\n        lbl.fit(list(df[col].values.astype('str')))\n    ```", "```py\n        df[col] = lbl.transform(list(df[col].values.astype('str')))\n    ```", "```py\nnum_cols = ['totals.hits',\n            'totals.pageviews',\n            'visitNumber',\n            'totals.bounces',\n            'totals.newVisits']\n```", "```py\n    for col in num_cols:\n    ```", "```py\n        print(col)\n    ```", "```py\n        df[col] = df[col].astype(float)\n    ```", "```py\n    import datetime\n    ```", "```py\n    dev_df = df[df['date']<='2017-05-31']\n    ```", "```py\n    val_df = df[df['date']>'2017-05-31']\n    ```", "```py\n    dev_y = np.log1p(dev_df[\"totals.transactionRevenue\"].values)\n    ```", "```py\n    val_y = np.log1p(val_df[\"totals.transactionRevenue\"].values)\n    ```", "```py\n    dev_X = dev_df[cat_cols + num_cols]\n    ```", "```py\n    val_X = val_df[cat_cols + num_cols]\n    ```", "```py\ndev_df.shape\n>>> (237158, 20)\n```", "```py\nval_df.shape\n>>> (45820, 20)\n```", "```py\n    def run_lgb(train_X, train_y, val_X, val_y):\n    ```", "```py\n        params = {\n    ```", "```py\n            \"objective\" : \"regression\",\n    ```", "```py\n            \"metric\" : \"rmse\",\n    ```", "```py\n            \"num_leaves\" : 50,\n    ```", "```py\n            \"learning_rate\" : 0.1,\n    ```", "```py\n            \"bagging_fraction\" : 0.7,\n    ```", "```py\n            \"feature_fraction\" : 0.5,\n    ```", "```py\n            \"bagging_frequency\" : 5,\n    ```", "```py\n            \"verbosity\" : -1\n    ```", "```py\n        }\n    ```", "```py\n        lg_train = lgb.Dataset(train_X, label=train_y)\n    ```", "```py\n        lg_val = lgb.Dataset(val_X, label=val_y)\n    ```", "```py\n        model = lgb.train(params, lg_train , 1000, \n    ```", "```py\n        valid_sets=[lg_val ], early_stopping_rounds=100, \n    ```", "```py\n        verbose_eval=100)\n    ```", "```py\n        pred_val_y = model.predict(val_X, \n    ```", "```py\n        num_iteration=model.best_iteration)\n    ```", "```py\n        return model, pred_val_y\n    ```", "```py\n    model, pred_val = run_lgb(dev_X, dev_y, val_X, val_y)\n    ```"]