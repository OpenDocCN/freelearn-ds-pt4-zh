["```py\nfrom azureml.core import Experiment\nfrom azureml.core.experiment import Experiment\n```", "```py\n    # Chapter 07 code snippets\n    This notebook contains all code snippets from chapter 7.\n    ```", "```py\n    print('Hello world')\n    ```", "```py\nsubscription_id = '<Subscription Id>'\nresource_group = 'packt-azureml-rg'\nworkspace_name = 'packt-learning-mlw'\n```", "```py\nfrom azureml.core import Workspace\nws = Workspace(subscription_id, resource_group, workspace_name)\n```", "```py\nfrom azureml.core import Workspace\nws = Workspace.get(name=workspace_name,\n                   subscription_id=subscription_id,\n                   resource_group=resource_group)\n```", "```py\n{\n  \"subscription_id\": \"<Subscription Id>\",\n  \"resource_group\": \"packt-azureml-rg\",\n  \"workspace_name\": \"packt-learning-mlw\"\n}\n```", "```py\nfrom azureml.core import Workspace\nws = Workspace.from_config()\nprint(f\"Connected to workspace {ws.name}\")\n```", "```py\nfrom azureml.core import Workspace\nnew_ws = Workspace.create(\n                   name='packt-azureml-sdk-mlw',\n                   subscription_id=subscription_id,\n                   resource_group='packt-azureml-sdk-rg',\n                   create_resource_group=True,\n                   location='westeurope')\n```", "```py\nContributor role at the resource group level to be able to deploy the AzureML workspace with the SDK.\n```", "```py\nnew_ws.delete(delete_dependent_resources=True)\n```", "```py\nfrom azureml.core.authentication import \\ \n                             InteractiveLoginAuthentication\nInteractiveLoginAuthentication(tenant_id=\"<AAD tenant id>\")\n```", "```py\nfor compute_name in ws.compute_targets:\n    compute = ws.compute_targets[compute_name]\n    print(f\"Compute {compute.name} is a {type(compute)}\")\n```", "```py\nfrom azureml.core import ComputeTarget\nfrom azureml.exceptions import ComputeTargetException\ncompute_name = 'gpu-cluster'\ncompute = None\ntry:\n    compute = ComputeTarget(workspace=ws, name=compute_name)\n    print(f\"Found {compute_name} which is {type(compute)}\")\nexcept ComputeTargetException as e:\n    print(f\"Failed to get compute {compute_name}. Error: {e}\")\n```", "```py\nfrom azureml.core.compute import ComputeTarget, AmlCompute\ncompute_name = 'cpu-sm-cluster'\ncluster = None\nif compute_name in ws.compute_targets:\n    print('Getting reference to compute cluster')\n    cluster = ws.compute_targets[compute_name]\nelse:\n    print('Creating compute cluster')\n    config = AmlCompute.provisioning_configuration(\n                           vm_size='Standard_D1', \n                           max_nodes=2)\n    cluster = ComputeTarget.create(ws, compute_name, config)\n    cluster.wait_for_completion(show_output=True)\nprint(f\"Got reference to cluster {cluster.name}\") \n```", "```py\nfrom azureml.core.compute import AmlCompute\nfor ct_name, ct in ws.compute_targets.items():\n    if (isinstance(ct, AmlCompute)):\n        print(f\"Scalling down cluster {ct.name}\")\n        ct.update(min_nodes=0)\n```", "```py\n    storage_name = 'mydatastg'\n    storage_key = '<storagekey>'\n    storage_container = 'existing-container'\n    ```", "```py\n    from azureml.core import Datastore\n    dstore = Datastore.register_azure_blob_container(\n        workspace=ws,\n        datastore_name=\"my_data_store\",\n        container_name=storage_container,\n        account_name=storage_name,\n        account_key=storage_key,\n        create_if_not_exists=False\n    )\n    ```", "```py\n    from azureml.core import Datastore\n    dstore = Datastore.get(ws,\"my_data_store\")\n    ```", "```py\n    dstore = ws.get_default_datastore()\n    ```", "```py\n    from sklearn.datasets import load_diabetes\n    import pandas as pd\n    features, target = load_diabetes(return_X_y=True)\n    diabetes_df = pd.DataFrame(features)\n    diabetes_df['target']= target\n    diabetes_df.to_csv('rawdata.csv', index=False)\n    dstore = ws.get_default_datastore()\n    dstore.upload_files(\n                files=['rawdata.csv'],\n                target_path=\"/samples/diabetes/v1\", \n                overwrite=True,\n                show_progress=True)\n    ```", "```py\n    from azureml.core import Dataset\n    dstore = ws.get_default_datastore()\n    file_paths = [\n        (dstore, \"/samples/diabetes/v1\")\n    ]\n    file_ds = Dataset.File.from_files(\n        path = file_paths, validate=True\n    )\n    print(\"Files in FileDataset:\")\n    print(file_ds.to_path())\n    ```", "```py\n    file_paths = [\n        (dstore, \"/weather/2021/*/*.csv\")\n    ]\n    ```", "```py\n    file_paths = [\n        (dstore, \"/weather/2021/01/01.csv\"),\n        (dstore, \"/weather/2021/02/01.csv\"),\n        (dstore, \"/weather/2021/03/01.csv\")\n    ]\n    ```", "```py\n    tabular_dataset = Dataset.Tabular.from_delimited_files(\n        path=file_paths, validate=False)\n    df = tabular_dataset.to_pandas_dataframe()\n    print(len(df))\n    ```", "```py\n    tabular_dataset.register(\n        workspace=ws,\n        name=\"diabetes\",\n        description=\"The sklearn diabetes dataset\")\n    ```", "```py\n    Dataset.Tabular.register_pandas_dataframe(\n        dataframe=df,\n        target=(dstore,\"/samples/diabetes\"),\n        name=\"diabetes\",\n        description=\"The sklearn diabetes dataset\")\n    ```", "```py\n    from azureml.core import Dataset\n    diabetes_dataset = Dataset.get_by_name(\n        workspace=ws,\n        name='diabetes')\n    ```", "```py\n    partial_dataset = diabetes_dataset \\\n            .skip(10) \\\n            .take(2) \\\n            .keep_columns(['0','target'])\n    ```", "```py\n    df = partial_dataset.to_pandas_dataframe()\n    df.head()\n    ```", "```py\n    ! az extension add -n azure-cli-ml\n    ```", "```py\n    ! az login\n    ```", "```py\n    ! az account set --subscription \"<subscription id>\"\n    ```", "```py\n    ! az ml computetarget list -g packt-azureml-rg -w packt-learning-mlw -o table\n    ```", "```py\n    ! az ml computetarget update amlcompute --name cpu-sm-cluster --min-nodes 0 -g packt-azureml-rg -w packt-learning-mlw\n    ```", "```py\n    ! az ml datastore show-default -g packt-azureml-rg -w packt-learning-mlw\n    ```", "```py\n    ! az ml dataset list -g packt-azureml-rg -w packt-learning-mlw -o table\n    ```"]