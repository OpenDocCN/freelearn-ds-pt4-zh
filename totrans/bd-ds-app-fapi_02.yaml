- en: '1'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Python Development Environment Setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we can go through our FastAPI journey, we need to configure a Python
    environment following the best practices and conventions Python developers use
    daily to run their projects. By the end of this chapter, you’ll be able to run
    Python projects and install third-party dependencies in a contained environment
    that won’t raise conflicts if you happen to work on another project that uses
    different versions of the Python language or dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing a Python distribution using `pyenv`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a Python virtual environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Python packages with `pip`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing the HTTPie command-line utility
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Throughout this book, we’ll assume you have access to a Unix-based environment,
    such as a Linux distribution or macOS.
  prefs: []
  type: TYPE_NORMAL
- en: If you haven’t done so already, macOS users should install the *Homebrew* package
    ([https://brew.sh](https://brew.sh)), which helps a lot in installing command-line
    tools.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are a Windows user, you should enable **Windows Subsystem for Linux**
    (**WSL**) ([https://docs.microsoft.com/windows/wsl/install-win10](https://docs.microsoft.com/windows/wsl/install-win10))
    and install a Linux distribution (such as Ubuntu) that will run alongside the
    Windows environment, which should give you access to all the required tools. There
    are currently two versions of WSL: WSL and WSL2\. Depending on your Windows version,
    you might not be able to install the newest version. However, we do recommend
    using WSL2 if your Windows installation supports it.'
  prefs: []
  type: TYPE_NORMAL
- en: Installing a Python distribution using pyenv
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Python is already bundled with most Unix environments. To ensure this is the
    case, you can run this command in a command line to show the Python version currently
    installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The output version displayed will vary depending on your system. You may think
    that this is enough to get started, but it poses an important issue: *you can’t
    choose the Python version for your project*. Each Python version introduces new
    features and breaking changes. Thus, it’s important to be able to switch to a
    recent version for new projects to take advantage of the new features but still
    be able to run older projects that may not be compatible. This is why we need
    `pyenv`.'
  prefs: []
  type: TYPE_NORMAL
- en: The **pyenv** tool ([https://github.com/pyenv/pyenv](https://github.com/pyenv/pyenv))
    helps you manage and switch between multiple Python versions on your system. It
    allows you to set a default Python version for your whole system but also per
    project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Beforehand, you need to install several build dependencies on your system to
    allow `pyenv` to compile Python on your system. The official documentation provides
    clear guidance on this ([https://github.com/pyenv/pyenv/wiki#suggested- build-environment](https://github.com/pyenv/pyenv/wiki#suggested-%20build-environment)),
    but here are the commands you should run:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the build dependencies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For macOS users, use the following:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'For Ubuntu users, use the following:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: Package managers
  prefs: []
  type: TYPE_NORMAL
- en: '`brew` `and apt` are what are commonly known as package managers. Their role
    is to automate the installation and management of software on your system. Thus,
    you don’t have to worry about where to download them from and how to install and
    uninstall them. Those commands just tell the package manager to update its internal
    package index and then install the list of required packages.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install `pyenv`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip for macOS users
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are a macOS user, you can also install it with Homebrew: `brew` `install
    pyenv`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'This will download and execute an installation script that will handle everything
    for you. At the end, it’ll prompt you with some instructions to add some lines
    to your shell scripts so that `pyenv` is discovered properly by your shell:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If your shell is `bash` (the default for most Linux distributions and older
    versions of macOS), run the following commands:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: echo 'export PYENV_ROOT="$HOME/.pyenv"' >> ~/.zshrcecho 'command -v pyenv >/dev/null
    || export PATH="$PYENV_ROOT/bin:$PATH"' >> ~/.zshrcecho 'eval "$(pyenv init -)"'
    >> ~/.zshrc
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: What is a shell and how do I know the one I’m using?
  prefs: []
  type: TYPE_NORMAL
- en: The shell is the underlying program running when you start a command line. It’s
    responsible for interpreting and running your commands. Several variants of those
    programs have been developed over time, such as `bash` and `zsh`. Even though
    they have their differences, in particular the names of their configuration files,
    they are mostly inter-compatible. To find out which shell you’re using, you can
    run the `echo $``SHELL` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'Reload your shell configuration to apply those changes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '$ pyenv>>> pyenv 2.3.6>>> Usage: pyenv <command> [<args>]'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can now install the Python distribution of our choice. Even though FastAPI
    is compatible with Python 3.7 and later, we’ll use Python 3.10 throughout this
    book, which has a more mature handling of the asynchronous paradigm and type hinting.
    All the examples in the book were tested with this version but should work flawlessly
    with newer versions. Let’s install Python 3.10:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This may take a few minutes since your system will have to compile Python from
    the source.
  prefs: []
  type: TYPE_NORMAL
- en: What about Python 3.11?
  prefs: []
  type: TYPE_NORMAL
- en: 'You might wonder why we use Python 3.10 here while Python 3.11 is already released
    and is available. At the time of writing, not every library we’ll use throughout
    this book officially supports this newest version. That’s why we prefer to stick
    with a more mature version. Don’t worry, though: what you’ll learn here will still
    be relevant to future versions of Python.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, you can set the default Python version with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will tell your system to always use Python 3.10 by default unless specified
    otherwise in a specific project.
  prefs: []
  type: TYPE_NORMAL
- en: 'To make sure everything is in order, run the following command to check the
    Python version that is invoked by default:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Congratulations! You can now handle any version of Python on your system and
    switch it whenever you like!
  prefs: []
  type: TYPE_NORMAL
- en: Why does it show 3.10.8 instead of just 3.10?
  prefs: []
  type: TYPE_NORMAL
- en: 'The 3.10 version corresponds to a major version of Python. The Python core
    team regularly publishes major versions with new features, depreciations, and
    sometimes breaking changes. However, when a new major version is published, previous
    versions are not forgotten: they continue to receive bug and security fixes. It’s
    the purpose of the third part of the version.'
  prefs: []
  type: TYPE_NORMAL
- en: 'It’s very possible by the time you’re reading this book that you’ve installed
    a more recent version of Python 3.10, such as 3.10.9\. It just means that fixes
    have been published. You can find more information about how the Python life cycle
    works and how long the Python core team plans to support previous versions in
    this official document: [https://devguide.python.org/versions/](https://devguide.python.org/versions/).'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Python virtual environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As for many programming languages of today, the power of Python comes from the
    vast ecosystem of third-party libraries, including FastAPI, of course, that help
    you build complex and high-quality software very quickly. The `pip`.
  prefs: []
  type: TYPE_NORMAL
- en: By default, when you install a third-party package with `pip`, it will install
    it for the *whole system*. This is different from some other languages, such as
    Node.js’ `npm`, which by default creates a local directory for the current project
    to install those dependencies. Obviously, this may cause issues when you work
    on several Python projects with dependencies having conflicting versions. It also
    makes it difficult to retrieve only the dependencies necessary to deploy a project
    properly on a server.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is why Python developers generally use **virtual environments**. Basically,
    a virtual environment is just a directory in your project containing a copy of
    your Python installation and the dependencies of your project. This pattern is
    so common that the tool to create them is bundled with Python:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a directory that will contain your project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip for Windows with WSL users
  prefs: []
  type: TYPE_NORMAL
- en: If you are on Windows with WSL, we recommend that you create your working folder
    on the Windows drive rather than the virtual filesystem of the Linux distribution.
    It’ll allow you to edit your source code files in Windows with your favorite text
    editor or **integrated development environment** (**IDE**) while running them
    in Linux.
  prefs: []
  type: TYPE_NORMAL
- en: To do this, you can access your `C:` drive in the Linux command line through
    `/mnt/c`. You can thus access your personal documents using the usual Windows
    path, for example, `cd /mnt/c/Users/YourUsername/Documents`.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can now create a virtual environment:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Basically, this command tells Python to run the `venv` package of the standard
    library to create a virtual environment in the `venv` directory. The name of this
    directory is a convention, but you can choose another name if you wish.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once this is done, you have to activate this virtual environment. It’ll tell
    your shell session to use the Python interpreter and the dependencies in the local
    directory instead of the global ones. Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After doing this, you may notice the prompt adds the name of the virtual environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Remember that the activation of this virtual environment is only available for
    the *current session*. If you close it or open other command prompts, you’ll have
    to activate it again. This is quite easy to forget, but it will become natural
    after some practice with Python.
  prefs: []
  type: TYPE_NORMAL
- en: You are now ready to install Python packages safely in your project!
  prefs: []
  type: TYPE_NORMAL
- en: Installing Python packages with pip
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we said earlier, `pip` is the built-in Python package manager that will help
    us install third-party libraries.
  prefs: []
  type: TYPE_NORMAL
- en: A word on alternate package managers such as Poetry, Pipenv, and Conda
  prefs: []
  type: TYPE_NORMAL
- en: While exploring the Python community, you may hear about alternate package managers
    such as Poetry, Pipenv, and Conda. These managers were created to solve some issues
    posed by `pip`, especially around sub-dependencies management. While they are
    very good tools, we’ll see in [*Chapter 10*](B19528_10.xhtml#_idTextAnchor694),
    *Deploying a FastAPI Project*, that most cloud hosting platforms expect dependencies
    to be managed with the standard `pip` command. Therefore, they may not be the
    best choice for a FastAPI application.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get started, let’s install FastAPI and Uvicorn:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: We’ll talk about it in later chapters, but Uvicorn is required to run a FastAPI
    project.
  prefs: []
  type: TYPE_NORMAL
- en: What does “standard” stand for after “uvicorn”?
  prefs: []
  type: TYPE_NORMAL
- en: You probably noticed the `standard` word inside square brackets just after `uvicorn`.
    Sometimes, some libraries have sub-dependencies that are not required to make
    the library work. Usually, they are needed for optional features or specific project
    requirements. The square brackets are here to indicate that we want to install
    the standard sub-dependencies of `uvicorn`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To make sure the installation worked, we can open a Python interactive shell
    and try to import the `fastapi` package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: If it passes without any errors, congratulations, FastAPI is installed and ready
    to use!
  prefs: []
  type: TYPE_NORMAL
- en: Installing the HTTPie command-line utility
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before getting to the heart of the topic, there is one last tool that we’ll
    install. FastAPI is, as you probably know, mainly about building **REST APIs**.
    Thus, we need a tool to make HTTP requests to our API. To do so, we have several
    options:'
  prefs: []
  type: TYPE_NORMAL
- en: '**FastAPI** **automatic documentation**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Postman**: A GUI tool to perform HTTP requests'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**cURL**: The well-known and widely used command-line tool to perform network
    requests'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Even if visual tools such as FastAPI automatic documentation and Postman are
    nice and easy to use, they sometimes lack some flexibility and may not be as productive
    as command-line tools. On the other hand, cURL is a very powerful tool with thousands
    of options, but it can be complex and verbose for testing simple REST APIs.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is why we’ll introduce **HTTPie**, a command-line tool aimed at making
    HTTP requests. Compared to cURL, its syntax is much more approachable and easier
    to remember, so you can run complex requests off the top of your head. Besides,
    it comes with built-in JSON support and syntax highlighting. Since it’s a **command-line
    interface** (**CLI**) tool, we keep all the benefits of the command line: for
    example, we can directly pipe a JSON file and send it as the body of an HTTP request.
    It’s available to install from most package managers:'
  prefs: []
  type: TYPE_NORMAL
- en: 'macOS users can use this:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Ubuntu users can use this:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let’s see how to perform simple requests on a dummy API:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let’s retrieve the data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As you can see, you can invoke HTTPie with the `http` command and simply type
    the HTTP method and the URL. It outputs both the HTTP headers and the JSON body
    in a clean and formatted way.
  prefs: []
  type: TYPE_NORMAL
- en: 'HTTPie also supports sending JSON data in a request body very quickly without
    having to format the JSON yourself:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: By simply typing the property name and its value separated by `=`, HTTPie will
    understand that it’s part of the request body in JSON. Notice here that we specified
    the `-v` option, which tells HTTPie to *output the request* before the response,
    which is very useful to check that we properly specified the request.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, let’s see how we can specify *request headers*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: That’s it! Just type your header name and value separated by a colon to tell
    HTTPie it’s a header.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You now have all the tools and setup required to confidently run the examples
    of this book and all your future Python projects. Understanding how to work with
    `pyenv` and virtual environments is a key skill to ensure everything goes smoothly
    when you switch to another project or when you have to work on somebody else’s
    code. You also learned how to install third-party Python libraries using `pip`.
    Finally, you saw how to use HTTPie, a simple and efficient way to run HTTP queries
    that will make you more productive while testing your REST APIs.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we’ll highlight some of Python’s peculiarities as a programming
    language and grasp what it means *to* *be Pythonic*.
  prefs: []
  type: TYPE_NORMAL
