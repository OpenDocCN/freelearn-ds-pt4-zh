["```py\n\n$ pythonPython 3.10.8 (main, Nov    8 2022, 08:55:03) [Clang 14.0.0 (clang-1400.0.29.202)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>>\n```", "```py\n\n>>> 1 + 12\n>>> x = 100\n>>> x * 2\n200\n```", "```py\n\nprint(\"Hello world!\")x = 100\nprint(f\"Double of {x} is {x * 2}\")\n```", "```py\n\n$ python chapter2_basics_01.pyHello world!\nDouble of 100 is 200\n```", "```py\n\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]even = []\nfor number in numbers:\n        if number % 2 == 0:\n                even.append(number)\nprint(even)    # [2, 4, 6, 8, 10]\n```", "```py\n\n$ python chapter02_basics_02.py[2, 4, 6, 8, 10]\n```", "```py\n\n>>> 1 + \"abc\"Traceback (most recent call last):\n    File \"<stdin>\", line 1, in <module>\nTypeError: unsupported operand type(s) for +: 'int' and 'str'\n```", "```py\n\n>>> 1 + 1.52.5\n```", "```py\n\n>>> l = [1, 2, 3, 4, 5]\n```", "```py\n\n>>> l[0]1\n>>> l[2]\n3\n```", "```py\n\n>>> l[-1]5\n>>> l[-4]\n2\n```", "```py\n\n>>> l[1:3][2, 3]\n```", "```py\n\n>>> l[:3][1, 2, 3]\n```", "```py\n\n>>> l[1:][2, 3, 4, 5]\n```", "```py\n\n>>> l[::2][1, 3, 5]\n```", "```py\n\n>>> l[::-1][5, 4, 3, 2, 1]\n```", "```py\n\n>>> l[1] = 10>>> l\n[1, 10, 3, 4, 5]\n>>> l.append(6)\n[1, 10, 3, 4, 5, 6]\n```", "```py\n\n>>> t = (1, 2, 3, 4, 5)\n```", "```py\n\n>>> t[2]3\n>>> t[1:3]\n(2, 3)\n>>> t[::-1]\n(5, 4, 3, 2, 1)\n```", "```py\n\n>>> t[1] = 10Traceback (most recent call last):\n    File \"<stdin>\", line 1, in <module>\nTypeError: 'tuple' object does not support item assignment\n>>> t.append(6)\nTraceback (most recent call last):\n    File \"<stdin>\", line 1, in <module>\nAttributeError: 'tuple' object has no attribute 'append'\n```", "```py\n\ndef euclidean_division(dividend, divisor):        quotient = dividend // divisor\n        remainder = dividend % divisor\n        return (quotient, remainder)\n```", "```py\n\nt = euclidean_division(3, 2)print(t[0])    # 1\nprint(t[1])    # 1\n```", "```py\n\nq, r = euclidean_division(42, 4)print(q)    # 10\nprint(r)    # 2\n```", "```py\n\n>>> d = {\"a\": 1, \"b\": 2, \"c\": 3}\n```", "```py\n\n>>> d[\"a\"]1\n```", "```py\n\n>>> d[\"a\"] = 10>>> d\n{'a': 10, 'b': 2, 'c': 3}\n>>> d[\"d\"] = 4\n>>> d\n{'a': 10, 'b': 2, 'c': 3, 'd': 4}\n```", "```py\n\n>>> s = {1, 2, 3, 4, 5}\n```", "```py\n\n>>> s.add(1)>>> s\n{1, 2, 3, 4, 5}\n>>> s.add(6)\n{1, 2, 3, 4, 5, 6}\n```", "```py\n\n>>> s.union({4, 5, 6}){1, 2, 3, 4, 5, 6}\n>>> s.intersection({4, 5, 6})\n{4, 5}\n```", "```py\n\n>>> x = 10>>> x > 0 and x < 100\nTrue\n>>> x > 0 or (x % 2 == 0)\nTrue\n>>> not (x > 0)\nFalse\n```", "```py\n\n>>> a = [1, 2, 3]>>> b = [1, 2, 3]\n>>> a is b\nFalse\n```", "```py\n\n>>> a = [1, 2, 3]>>> b = a\n>>> a is b\nTrue\n```", "```py\n\n>>> l = [1, 2, 3]>>> 2 in l\nTrue\n>>> 5 not in l\nTrue\n```", "```py\n\n>>> t = (1, 2, 3)>>> 2 in t\nTrue\n>>> s = {1, 2, 3}\n>>> 2 in s\nTrue\n```", "```py\n\n>>> d = {\"a\": 1, \"b\": 2, \"c\": 3}>>> \"b\" in d\nTrue\n>>> 3 in d\nFalse\n```", "```py\n\ndef forward_order_status(order):        if order[\"status\"] == \"NEW\":\n                order[\"status\"] = \"IN_PROGRESS\"\n        elif order[\"status\"] == \"IN_PROGRESS\":\n                order[\"status\"] = \"SHIPPED\"\n        else:\n                order[\"status\"] = \"DONE\"\n        return order\n```", "```py\n\n>>> for i in [1,2,3]:...         print(i)\n...\n1\n2\n3\n>>> for k in {\"a\": 1, \"b\": 2, \"c\": 3}:\n...         print(k)\n...\na\nb\nc\n```", "```py\n\n>>> for i in range(3):...         print(i)\n...\n0\n1\n2\n```", "```py\n\n>>> for i in range(1, 3):...         print(i)\n...\n1\n2\n```", "```py\n\n>>> for i in range(0, 5, 2):...         print(i)\n...\n0\n2\n4\n```", "```py\n\ndef retrieve_page(page):        if page > 3:\n                return {\"next_page\": None, \"items\": []}\n        return {\"next_page\": page + 1, \"items\": [\"A\", \"B\", \"C\"]}\nitems = []\npage = 1\nwhile page is not None:\n        page_result = retrieve_page(page)\n        items += page_result[\"items\"]\n        page = page_result[\"next_page\"]\nprint(items)    # [\"A\", \"B\", \"C\", \"A\", \"B\", \"C\", \"A\", \"B\", \"C\"]\n```", "```py\n\n>>> def f(a):...         return a\n...\n>>> f(2)\n2\n```", "```py\n\n>>> def f(a, b = 1):...         return a, b\n...\n>>> f(2)\n(2, 1)\n>>> f(2, 3)\n(2, 3)\n```", "```py\n\n>>> f(a=2, b=3)(2, 3)\n```", "```py\n\n>>> def f(a = 1, b = 2, c = 3):...         return a, b, c\n...\n>>> f(c=1)\n(1, 2, 1)\n```", "```py\n\n>>> def f(*args, **kwargs):...         print(\"args\", args)\n...         print(\"kwargs\", kwargs)\n...\n>>> f(1, 2, 3, a=4, b=5)\nargs (1, 2, 3)\nkwargs {'a': 4, 'b': 5}\n```", "```py\n\n>>> def f(a, *args):...         print(\"a\", a)\n...         print(\"arg\", args)\n...\n>>> f(1, 2, 3)\na 1\narg (2, 3)\n```", "```py\n\n>>> import datetime>>> datetime.date.today()\ndatetime.date(2022, 12, 1)\n```", "```py\n\n>>> from datetime import date>>> date.today()\ndatetime.date(2022, 12, 1)\n```", "```py\n\ndef module_function():        return \"Hello world\"\nprint(\"Module is loaded\")\n```", "```py\n\n>>> import moduleModule is loaded\n```", "```py\n\n>>> module.module_function()'Hello world'\n```", "```py\n\n>>> import package.subpackage.moduleModule is loaded\n```", "```py\n\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]even = []\nfor number in numbers:\n        if number % 2 == 0:\n                even.append(number)\nprint(even)    # [2, 4, 6, 8, 10]\n```", "```py\n\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]even = [number for number in numbers if number % 2 == 0]\nprint(even)    # [2, 4, 6, 8, 10]\n```", "```py\n\nfrom random import randint, seedseed(10)    # Set random seed to make examples reproducible\nrandom_elements = [randint(1, 10) for I in range(5)]\nprint(random_elements)    # [10, 1, 7, 8, 10]\n```", "```py\n\nfrom random import randint, seedseed(10)    # Set random seed to make examples reproducible\nrandom_unique_elements = {randint(1, 10) for i in range(5)}\nprint(random_unique_elements)    # {8, 1, 10, 7}\n```", "```py\n\nfrom random import randint, seedseed(10)    # Set random seed to make examples reproducible\nrandom_dictionary = {i: randint(1, 10) for i in range(5)}\nprint(random_dictionary)    # {0: 10, 1: 1, 2: 7, 3: 8, 4: 10}\n```", "```py\n\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]even_generator = (number for number in numbers if number % 2 == 0)\neven = list(even_generator)\neven_bis = list(even_generator)\nprint(even)    # [2, 4, 6, 8, 10]\nprint(even_bis)    # []\n```", "```py\n\ndef even_numbers(max):        for i in range(2, max + 1):\n                if i % 2 == 0:\n                        yield i\neven = list(even_numbers(10))\nprint(even)    # [2, 4, 6, 8, 10]\n```", "```py\n\ndef even_numbers(max):        for i in range(2, max + 1):\n                if i % 2 == 0:\n                        yield i\n        print(\"Generator exhausted\")\neven = list(even_numbers(10))\nprint(even)\n```", "```py\n\n$ python chapter02_list_comprehensions_07.pyGenerator exhausted\n[2, 4, 6, 8, 10]\n```", "```py\n\nclass Greetings:        def greet(self, name):\n                return f\"Hello, {name}\"\nc = Greetings()\nprint(c.greet(\"John\"))    # \"Hello, John\"\n```", "```py\n\nclass Greetings:        def __init__(self, default_name):\n                self.default_name = default_name\n        def greet(self, name=None):\n                return f\"Hello, {name if name else self.default_name}\"\nc = Greetings(\"Alan\")\nprint(c.default_name)    # \"Alan\"\nprint(c.greet())    # \"Hello, Alan\"\nprint(c.greet(\"John\"))    # \"Hello, John\"\n```", "```py\n\nclass Temperature:        def __init__(self, value, scale):\n                self.value = value\n                self.scale = scale\n        def __repr__(self):\n                return f\"Temperature({self.value}, {self.scale!r})\"\n        def __str__(self):\n                return f\"Temperature is {self.value} °{self.scale}\"\nt = Temperature(25, \"C\")\nprint(repr(t))    # \"Temperature(25, 'C')\"\nprint(str(t))    # \"Temperature is 25 °C\"\nprint(t)\n```", "```py\n\nclass Temperature:        def __init__(self, value, scale):\n                self.value = value\n                self.scale = scale\n                if scale == \"C\":\n                        self.value_kelvin = value + 273.15\n                elif scale == \"F\":\n                        self.value_kelvin = (value–- 32) * 5 / 9 + 273.15\n```", "```py\n\n        def __eq__(self, other):                return self.value_kelvin == other.value_kelvin\n        def __lt__(self, other):\n                return self.value_kelvin < other.value_kelvin\n```", "```py\n\ntc = Temperature(25, \"C\")tf = Temperature(77, \"F\")\ntf2 = Temperature(100, \"F\")\nprint(tc == tf)    # True\nprint(tc < tf2)    # True\n```", "```py\n\nclass Counter:        def __init__(self):\n                self.counter = 0\n        def __call__(self, inc=1):\n                self.counter += inc\nc = Counter()\nprint(c.counter)    # 0\nc()\nprint(c.counter)    # 1\nc(10)\nprint(c.counter)    # 11\n```", "```py\n\nclass A:        def f(self):\n                return \"A\"\nclass Child(A):\n        pass\n```", "```py\n\nclass A:        def f(self):\n                return \"A\"\nclass Child(A):\n        def f(self):\n                parent_result = super().f()\n                return f\"Child {parent_result}\"\n```", "```py\n\nclass A:        def f(self):\n                return \"A\"\nclass B:\n        def g(self):\n                return \"B\"\nclass Child(A, B):\n        pass\n```", "```py\n\nclass A:        def f(self):\n                return \"A\"\nclass B:\n        def f(self):\n                return \"B\"\nclass Child(A, B):\n        pass\n```", "```py\n\n>>> Child.mro()[<class 'chapter2_classes_objects_09.Child'>, <class 'chapter2_classes_objects_09.A'>, <class 'chapter2_classes_objects_09.B'>, <class 'object'>]\n```", "```py\n\ndef greeting(name: str) -> str:        return f\"Hello, {name}\"\n```", "```py\n\n$ pip install mypy\n```", "```py\n\n$ mypy chapter02_type_hints_01.pySuccess: no issues found in 1 source file\n```", "```py\n\ndef greeting(name: str) -> int:        return f\"Hello, {name}\"\n```", "```py\n\n$ mypy chapter02_type_hints_01.pychapter02_type_hints_01.py:2: error: Incompatible return value type (got \"str\", expected \"int\")    [return-value]\nFound 1 error in 1 file (checked 1 source file)\n```", "```py\n\nl: list[int] = [1, 2, 3, 4, 5]t: tuple[int, str, float] = (1, \"hello\", 3.14)\ns: set[int] = {1, 2, 3, 4, 5}\nd: dict[str, int] = {\"a\": 1, \"b\": 2, \"c\": 3}\n```", "```py\n\nl: list[int | float] = [1, 2.5, 3.14, 5]\n```", "```py\n\ndef greeting(name: str | None = None) -> str:        return f\"Hello, {name if name else 'Anonymous'}\"\n```", "```py\n\nIntStringFloatTuple = tuple[int, str, float]t: IntStringFloatTuple = (1, \"hello\", 3.14)\n```", "```py\n\nclass Post:        def __init__(self, title: str) -> None:\n                self.title = title\n        def __str__(self) -> str:\n                return self.title\nposts: list[Post] = [Post(\"Post A\"), Post(\"Post B\")]\n```", "```py\n\nfrom collections.abc import CallableConditionFunction = Callable[[int], bool]\ndef filter_list(l: list[int], condition: ConditionFunction) -> list[int]:\n        return [i for i in l if condition(i)]\n```", "```py\n\ndef is_even(i: int) -> bool:        return i % 2 == 0\nfilter_list([1, 2, 3, 4, 5], is_even)\n```", "```py\n\nfrom typing import Anydef f(x: Any) -> Any:\n        return x\nf(\"a\")\nf(10)\nf([1, 2, 3])\n```", "```py\n\nfrom typing import Any, castdef f(x: Any) -> Any:\n        return x\na = f(\"a\")    # inferred type is \"Any\"\na = cast(str, f(\"a\"))    # forced type to be \"str\"\n```", "```py\n\nwith open(__file__) as f:        data = f.read()\n# The program will block here until the data has been read\nprint(data)\n```", "```py\n\nimport asyncioasync def main():\n        print(\"Hello ...\")\n        await asyncio.sleep(1)\n        print(\"... World!\")\nasyncio.run(main())\n```", "```py\n\nimport asyncioasync def printer(name: str, times: int) -> None:\n        for i in range(times):\n                print(name)\n                await asyncio.sleep(1)\nasync def main():\n        await asyncio.gather(\n                printer(\"A\", 3),\n                printer(\"B\", 3),\n        )\nasyncio.run(main())\n```", "```py\n\n$ python chapter02_asyncio_03.pyA\nB\nA\nB\nA\nB\n```", "```py\n\nAA\nA\nB\nB\nB\n```"]