["```py\n\n$ docker run -d --name fastapi-redis -p 6379:6379 redis\n```", "```py\n\nfrom fastapi import FastAPI, WebSocketfrom starlette.websockets import WebSocketDisconnect\napp = FastAPI()\n@app.websocket(\"/ws\")\nasync def websocket_endpoint(websocket: WebSocket):\n    await websocket.accept()\n    try:\n        while True:\n            data = await websocket.receive_text()\n            await websocket.send_text(f\"Message text was: {data}\")\n    except WebSocketDisconnect:\n        pass\n```", "```py\n\n(venv) $ uvicorn chapter08.echo.app:app\n```", "```py\n\n(venv) $ python -m http.server --directory chapter08/echo 9000\n```", "```py\n\n  const socket = new WebSocket('ws://localhost:8000/ws');  // Connection opened\n  socket.addEventListener('open', function (event) {\n    // Send message on form submission\n    document.getElementById('form').addEventListener('submit', (event) => {\n      event.preventDefault();\n      const message = document.getElementById('message').value;\n      addMessage(message, 'client');\n      socket.send(message);\n      event.target.reset();\n    });\n  });\n  // Listen for messages\n  socket.addEventListener('message', function (event) {\n    addMessage(event.data, 'server');\n  });\n```", "```py\n\nasync def echo_message(websocket: WebSocket):    data = await websocket.receive_text()\n    await websocket.send_text(f\"Message text was: {data}\")\nasync def send_time(websocket: WebSocket):\n    await asyncio.sleep(10)\n    await websocket.send_text(f\"It is: {datetime.utcnow().isoformat()}\")\n@app.websocket(\"/ws\")\nasync def websocket_endpoint(websocket: WebSocket):\n    await websocket.accept()\n    try:\n        while True:\n            echo_message_task = asyncio.create_task(echo_message(websocket))\n            send_time_task = asyncio.create_task(send_time(websocket))\n            done, pending = await asyncio.wait(\n                {echo_message_task, send_time_task},\n                return_when=asyncio.FIRST_COMPLETED,\n            )\n            for task in pending:\n                task.cancel()\n            for task in done:\n                task.result()\n    except WebSocketDisconnect:\n        await websocket.close()\n```", "```py\n\n@app.websocket(\"/ws\")async def websocket_endpoint(\n    websocket: WebSocket, username: str = \"Anonymous\", token: str = Cookie(...)\n):\n    if token != API_TOKEN:\n        raise WebSocketException(status.WS_1008_POLICY_VIOLATION)\n    await websocket.accept()\n    await websocket.send_text(f\"Hello, {username}!\")\n    try:\n        while True:\n            data = await websocket.receive_text()\n            await websocket.send_text(f\"Message text was: {data}\")\n    except WebSocketDisconnect:\n        pass\n```", "```py\n\n(venv) $ pip install \"broadcaster[redis]\"\n```", "```py\n\nbroadcast = Broadcast(\"redis://localhost:6379\")CHANNEL = \"CHAT\"\n```", "```py\n\nclass MessageEvent(BaseModel):    username: str\n    message: str\nasync def receive_message(websocket: WebSocket, username: str):\n    async with broadcast.subscribe(channel=CHANNEL) as subscriber:\n        async for event in subscriber:\n            message_event = MessageEvent.parse_raw(event.message)\n            # Discard user's own messages\n            if message_event.username != username:\n                await websocket.send_json(message_event.dict())\nasync def send_message(websocket: WebSocket, username: str):\n    data = await websocket.receive_text()\n    event = MessageEvent(username=username, message=data)\n    await broadcast.publish(channel=CHANNEL, message=event.json())\n```", "```py\n\n@app.websocket(\"/ws\")async def websocket_endpoint(websocket: WebSocket, username: str = \"Anonymous\"):\n    await websocket.accept()\n    try:\n        while True:\n            receive_message_task = asyncio.create_task(\n                receive_message(websocket, username)\n            )\n            send_message_task = asyncio.create_task(send_message(websocket, username))\n            done, pending = await asyncio.wait(\n                {receive_message_task, send_message_task},\n                return_when=asyncio.FIRST_COMPLETED,\n            )\n            for task in pending:\n                task.cancel()\n            for task in done:\n                task.result()\n    except WebSocketDisconnect:\n        pass\n```", "```py\n\n@contextlib.asynccontextmanagerasync def lifespan(app: FastAPI):\n    await broadcast.connect()\n    yield\n    await broadcast.disconnect()\napp = FastAPI(lifespan=lifespan)\n```", "```py\n\n(venv) $ uvicorn chapter08.broadcast.app:app\n```", "```py\n\n(venv) $ python -m http.server --directory chapter08/broadcast 9000\n```"]