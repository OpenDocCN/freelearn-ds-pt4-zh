["```py\n\n$ docker run -d --name fastapi-mongo -p 27017:27017 mongo:6.0\n```", "```py\n\n(venv) $ pip install pytest\n```", "```py\n\ndef add(a: int, b: int) -> int:    return a + b\n```", "```py\n\nimport unittestfrom chapter09.chapter09_introduction import add\nclass TestChapter09Introduction(unittest.TestCase):\n    def test_add(self):\n        self.assertEqual(add(2, 3), 5)\n```", "```py\n\n(venv) $ python -m unittest chapter09.chapter09_introduction_unittest.\n----------------------------------------------------------------------\nRan 1 test in 0.000s\nOK\n```", "```py\n\nfrom chapter09.chapter09_introduction import adddef test_add():\n    assert add(2, 3) == 5\n```", "```py\n\n(venv) $ pytest chapter09/chapter09_introduction_pytest.py=============== test session starts ===============\nplatform darwin -- Python 3.10.8, pytest-7.2.0, pluggy-1.0.0\nrootdir: /Users/fvoron/Development/Building-Data-Science-Applications-with-FastAPI-Second-Edition, configfile: pyproject.toml\nplugins: asyncio-0.20.2, cov-4.0.0, anyio-3.6.2\nasyncio: mode=strict\ncollected 1 item\nchapter09/chapter09_introduction_pytest.py .                      [100%]\n================ 1 passed in 0.01s ===============\n```", "```py\n\ndef test_add():    assert add(2, 3) == 5\n    assert add(0, 0) == 0\n    assert add(100, 0) == 100\n    assert add(1, 1) == 2\n```", "```py\n\nimport pytestfrom chapter09.chapter09_introduction import add\n@pytest.mark.parametrize(\"a,b,result\", [(2, 3, 5), (0, 0, 0), (100, 0, 100), (1, 1, 2)])\ndef test_add(a, b, result):\n    assert add(a, b) == result\n```", "```py\n\n(venv) $ pytest chapter09/chapter09_introduction_pytest_parametrize.py================ test session starts ================\nplatform darwin -- Python 3.10.8, pytest-7.2.0, pluggy-1.0.0\nrootdir: /Users/fvoron/Development/Building-Data-Science-Applications-with-FastAPI-Second-Edition, configfile: pyproject.toml\nplugins: asyncio-0.20.2, cov-4.0.0, anyio-3.6.2\nasyncio: mode=strict\ncollected 4 items\nchapter09/chapter09_introduction_pytest_parametrize.py ....   [100%]\n================ 4 passed in 0.01s ================\n```", "```py\n\nfrom datetime import datefrom enum import Enum\nfrom pydantic import BaseModel\nclass Gender(str, Enum):\n    MALE = \"MALE\"\n    FEMALE = \"FEMALE\"\n    NON_BINARY = \"NON_BINARY\"\nclass Address(BaseModel):\n    street_address: str\n    postal_code: str\n    city: str\n    country: str\nclass Person(BaseModel):\n    first_name: str\n    last_name: str\n    gender: Gender\n    birthdate: date\n    interests: list[str]\n    address: Address\n```", "```py\n\nimport pytestfrom chapter09.chapter09_introduction_fixtures import Address, Gender, Person\n@pytest.fixture\ndef address():\n    return Address(\n        street_address=\"12 Squirell Street\",\n        postal_code=\"424242\",\n        city=\"Woodtown\",\n        country=\"US\",\n    )\n@pytest.fixture\ndef person(address):\n    return Person(\n        first_name=\"John\",\n        last_name=\"Doe\",\n        gender=Gender.MALE,\n        birthdate=\"1991-01-01\",\n        interests=[\"travel\", \"sports\"],\n        address=address,\n    )\ndef test_address_country(address):\n    assert address.country == \"US\"\ndef test_person_first_name(person):\n    assert person.first_name == \"John\"\ndef test_person_address_city(person):\n    assert person.address.city == \"Woodtown\"\n```", "```py\n\n(venv) $ pip install httpx asgi-lifespan pytest-asyncio\n```", "```py\n\nimport contextlibfrom fastapi import FastAPI\n@contextlib.asynccontextmanager\nasync def lifespan(app: FastAPI):\n    print(\"Startup\")\n    yield\n    print(\"Shutdown\")\napp = FastAPI(lifespan=lifespan)\n@app.get(\"/\")\nasync def hello_world():\n    return {\"hello\": \"world\"}\n```", "```py\n\n@pytest.fixture(scope=\"session\")def event_loop():\n    loop = asyncio.new_event_loop()\n    yield loop\n    loop.close()\n```", "```py\n\n@pytest_asyncio.fixtureasync def test_client():\n    async with LifespanManager(app):\n        async with httpx.AsyncClient(app=app, base_url=\"http://app.io\") as test_client:\n            yield test_client\n```", "```py\n\n@pytest.mark.asyncioasync def test_hello_world(test_client: httpx.AsyncClient):\n    response = await test_client.get(\"/\")\n    assert response.status_code == status.HTTP_200_OK\n    json = response.json()\n    assert json == {\"hello\": \"world\"}\n```", "```py\n\nclass Person(BaseModel):    first_name: str\n    last_name: str\n    age: int\n@app.post(\"/persons\", status_code=status.HTTP_201_CREATED)\nasync def create_person(person: Person):\n    return person\n```", "```py\n\n@pytest.mark.asyncioclass TestCreatePerson:\n    async def test_invalid(self, test_client: httpx.AsyncClient):\n        payload = {\"first_name\": \"John\", \"last_name\": \"Doe\"}\n        response = await test_client.post(\"/persons\", json=payload)\n        assert response.status_code == status.HTTP_422_UNPROCESSABLE_ENTITY\n    async def test_valid(self, test_client: httpx.AsyncClient):\n        payload = {\"first_name\": \"John\", \"last_name\": \"Doe\", \"age\": 30}\n        response = await test_client.post(\"/persons\", json=payload)\n        assert response.status_code == status.HTTP_201_CREATED\n        json = response.json()\n        assert json == payload\n```", "```py\n\nfrom motor.motor_asyncio import AsyncIOMotorClient, AsyncIOMotorDatabase# Connection to the whole server\nmotor_client = AsyncIOMotorClient(\"mongodb://localhost:27017\")\n# Single database instance\ndatabase = motor_client[\"chapter6_mongo\"]\ndef get_database() -> AsyncIOMotorDatabase:\n    return database\n```", "```py\n\nmotor_client = AsyncIOMotorClient(    os.getenv(\"MONGODB_CONNECTION_STRING\", \"mongodb://localhost:27017\")\n)\ndatabase_test = motor_client[\"chapter09_db_test\"]\ndef get_test_database():\n    return database_test\n```", "```py\n\n@pytest_asyncio.fixtureasync def test_client():\n    app.dependency_overrides[get_database] = get_test_database\n    async with LifespanManager(app):\n        async with httpx.AsyncClient(app=app, base_url=\"http://app.io\") as test_client:\n            yield test_client\n```", "```py\n\n@pytest_asyncio.fixture(autouse=True, scope=\"module\")async def initial_posts():\n    initial_posts = [\n        Post(title=\"Post 1\", content=\"Content 1\"),\n        Post(title=\"Post 2\", content=\"Content 2\"),\n        Post(title=\"Post 3\", content=\"Content 3\"),\n    ]\n    await database_test[\"posts\"].insert_many(\n        [post.dict(by_alias=True) for post in initial_posts]\n    )\n    yield initial_posts\n    await motor_client.drop_database(\"chapter09_db_test\")\n```", "```py\n\n@pytest.mark.asyncioclass TestGetPost:\n    async def test_not_existing(self, test_client: httpx.AsyncClient):\n        response = await test_client.get(\"/posts/abc\")\n        assert response.status_code == status.HTTP_404_NOT_FOUND\n    async def test_existing(\n        self, test_client: httpx.AsyncClient, initial_posts: list[Post]\n    ):\n        response = await test_client.get(f\"/posts/{initial_posts[0].id}\")\n        assert response.status_code == status.HTTP_200_OK\n        json = response.json()\n        assert json[\"_id\"] == str(initial_posts[0].id)\n```", "```py\n\n@pytest.mark.asyncioclass TestCreatePost:\n    async def test_invalid_payload(self, test_client: httpx.AsyncClient):\n        payload = {\"title\": \"New post\"}\n        response = await test_client.post(\"/posts\", json=payload)\n        assert response.status_code == status.HTTP_422_UNPROCESSABLE_ENTITY\n    async def test_valid_payload(self, test_client: httpx.AsyncClient):\n        payload = {\"title\": \"New post\", \"content\": \"New post content\"}\n        response = await test_client.post(\"/posts\", json=payload)\n        assert response.status_code == status.HTTP_201_CREATED\n        json = response.json()\n        post_id = ObjectId(json[\"_id\"])\n        post_db = await database_test[\"posts\"].find_one({\"_id\": post_id})\n        assert post_db is not None\n```", "```py\n\nclass ExternalAPI:    def __init__(self) -> None:\n        self.client = httpx.AsyncClient(base_url=\"https://dummyjson.com\")\n    async def __call__(self) -> dict[str, Any]:\n        async with self.client as client:\n            response = await client.get(\"/products\")\n            return response.json()\nexternal_api = ExternalAPI()\n@app.get(\"/products\")\nasync def external_products(products: dict[str, Any] = Depends(external_api)):\n    return products\n```", "```py\n\nclass MockExternalAPI:    mock_data = {\n        \"products\": [\n            {\n                \"id\": 1,\n                \"title\": \"iPhone 9\",\n                \"description\": \"An apple mobile which is nothing like apple\",\n                \"thumbnail\": \"https://i.dummyjson.com/data/products/1/thumbnail.jpg\",\n            },\n        ],\n        \"total\": 1,\n        \"skip\": 0,\n        \"limit\": 30,\n    }\n    async def __call__(self) -> dict[str, Any]:\n        return MockExternalAPI.mock_data\n@pytest_asyncio.fixture\nasync def test_client():\n    app.dependency_overrides[external_api] = MockExternalAPI()\n    async with LifespanManager(app):\n        async with httpx.AsyncClient(app=app, base_url=\"http://app.io\") as test_client:\n            yield test_client\n```", "```py\n\n(venv) $ pip install httpx-ws\n```", "```py\n\nfrom httpx_ws.transport import ASGIWebSocketTransport@pytest_asyncio.fixture\nasync def test_client():\n    async with LifespanManager(app):\n        async with httpx.AsyncClient(\n            transport=ASGIWebSocketTransport(app), base_url=\"http://app.io\"\n        ) as test_client:\n            yield test_client\n```", "```py\n\n@app.websocket(\"/ws\")async def websocket_endpoint(websocket: WebSocket):\n    await websocket.accept()\n    try:\n        while True:\n            data = await websocket.receive_text()\n            await websocket.send_text(f\"Message text was: {data}\")\n    except WebSocketDisconnect:\n        await websocket.close()\n```", "```py\n\nfrom httpx_ws import aconnect_ws@pytest.mark.asyncio\nasync def test_websocket_echo(test_client: httpx.AsyncClient):\n    async with aconnect_ws(\"/ws\", test_client) as websocket:\n        await websocket.send_text(\"Hello\")\n        message = await websocket.receive_text()\n        assert message == \"Message text was: Hello\"\n```"]