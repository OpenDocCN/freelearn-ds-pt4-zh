["```py\n\n$ python>>> x = 1\n>>> type(x)\n<class 'int'>\n>>> x = \"hello\"\n>>> type(x)\n<class 'str'>\n```", "```py\n\n$ python>>> l = [1, 2, 3, 4, 5]\n```", "```py\n\n(venv) $ pip install numpy\n```", "```py\n\n(venv) $ python>>> import numpy as np\n```", "```py\n\n>>> np.array([1, 2, 3, 4, 5])array([1, 2, 3, 4, 5])\n```", "```py\n\n>>> np.array([1, 2, 3, 4, 5], dtype=np.float64)array([1., 2., 3., 4., 5.])\n```", "```py\n\n>>> l = np.array([1, 2, 3, 4, 5])>>> l[0] = 13.37\n>>> l\narray([13,  2,  3,  4,  5])\n```", "```py\n\n>>> l[0] = \"a\"Traceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nValueError: invalid literal for int() with base 10: 'a'\n```", "```py\n\n>>> np.zeros(5)array([0., 0., 0., 0., 0.])\n>>> np.ones(5)\narray([1., 1., 1., 1., 1.])\n>>> np.empty(5)\narray([1., 1., 1., 1., 1.])\n>>> np.arange(5)\narray([0, 1, 2, 3, 4])\n```", "```py\n\n>>> np.ones(5, dtype=np.int32)array([1, 1, 1, 1, 1], dtype=int32)\n```", "```py\n\n>>> np.random.seed(0)  # Set the random seed to make examples reproducible>>> np.random.randint(10, size=5)\narray([5, 0, 3, 3, 7])\n```", "```py\n\n>>> m = np.ones((3,4))>>> m\narray([[1., 1., 1., 1.],\n       [1., 1., 1., 1.],\n       [1., 1., 1., 1.]])\n```", "```py\n\n>>> m.ndim2\n>>> m.shape\n(3, 4)\n>>> m.size\n12\n```", "```py\n\n>>> l = np.arange(5)>>> l[2]\n2\n```", "```py\n\n>>> np.random.seed(0)>>> m = np.random.randint(10, size=(3,4))\n>>> m\narray([[5, 0, 3, 3],\n       [7, 9, 3, 5],\n       [2, 4, 7, 6]])\n>>> m[1][2]\n3\n```", "```py\n\n>>> m[1][2] = 42>>> m\narray([[ 5,  0,  3,  3],\n       [ 7,  9, 42,  5],\n       [ 2,  4,  7,  6]])\n```", "```py\n\n>>> l = np.arange(5)>>> l\narray([0, 1, 2, 3, 4])\n>>> l[1:4]  # From index 1 (inclusive) to 4 (exclusive)\narray([1, 2, 3])\n>>> l[::2]  # Every second element\narray([0, 2, 4])\n```", "```py\n\n>>> np.random.seed(0)>>> m = np.random.randint(10, size=(3,4))\n>>> m\narray([[5, 0, 3, 3],\n       [7, 9, 3, 5],\n       [2, 4, 7, 6]])\n>>> m[1:, 0:2]  # From row 1 to end and column 0 to 2\narray([[7, 9],\n       [2, 4]])\n>>> m[::, 3:]  # Every row, only last column\narray([[3],\n       [5],\n       [6]])\n```", "```py\n\n>>> v = m[::, 3:]>>> v[0][0] = 42\n>>> v\narray([[42],\n       [ 5],\n       [ 6]])\n>>> m\narray([[ 5,  0,  3, 42],\n       [ 7,  9,  3,  5],\n       [ 2,  4,  7,  6]])\n```", "```py\n\n>>> m2 = m[::, 3:].copy()\n```", "```py\n\nimport numpy as npnp.random.seed(0)  # Set the random seed to make examples reproducible\nm = np.random.randint(10, size=1000000)  # An array with a million of elements\ndef standard_double(array):\n    output = np.empty(array.size)\n    for i in range(array.size):\n        output[i] = array[i] * 2\n    return output\n```", "```py\n\npython -m timeit \"from chapter11.chapter11_compare_operations import m, standard_double; standard_double(m)\"1 loop, best of 5: 146 msec per loop\n```", "```py\n\ndef numpy_double(array):     return array * 2\n```", "```py\n\npython -m timeit \"from chapter11.chapter11_compare_operations import m, numpy_double; numpy_double(m)\"500 loops, best of 5: 611 usec per loop\n```", "```py\n\n>>> np.array([1, 2, 3]) + np.array([4, 5, 6])array([5, 7, 9])\n```", "```py\n\n>>> np.array([1, 2, 3]) * 2array([2, 4, 6])\n```", "```py\n\n>>> np.array([1, 2, 3]) * np.array([2, 2, 2])array([2, 4, 6])\n```", "```py\n\n>>> a1 = np.ones((4, 3))>>> a1\narray([[1., 1., 1.],\n       [1., 1., 1.],\n       [1., 1., 1.],\n       [1., 1., 1.]])\n>>> a2 = np.ones((1, 3))\n>>> a2\narray([[1., 1., 1.]])\n>>> a1 + a2\narray([[2., 2., 2.],\n       [2., 2., 2.],\n       [2., 2., 2.],\n       [2., 2., 2.]])\n```", "```py\n\n>>> a3 = np.ones((1, 4))>>> a3\narray([[1., 1., 1., 1.]])\n>>> a1 + a3\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nValueError: operands could not be broadcast together with shapes (4,3) (1,4)\n```", "```py\n\n>>> np.arange(10).mean()4.5\n>>> np.ones((4,4)).sum()\n16.0\n```", "```py\n\n>>> l = np.array([1, 2, 3, 4])>>> l < 3\narray([ True,  True, False, False])\n```", "```py\n\n>>> m = np.array(    [[1., 5., 9., 13.],\n    [2., 6., 10., 14.],\n    [3., 7., 11., 15.],\n    [4., 8., 12., 16.]]\n)\n>>> m <= np.array([1, 5, 9, 13])\narray([[ True,  True,  True,  True],\n       [False, False, False, False],\n       [False, False, False, False],\n       [False, False, False, False]])\n```", "```py\n\n(venv) $ pip install pandas\n```", "```py\n\n(venv) $ python>>> import pandas as pd\n```", "```py\n\n>>> s = pd.Series([1, 2, 3, 4, 5])>>> s\n0    1\n1    2\n2    3\n3    4\n4    5\ndtype: int64\n```", "```py\n\n>>> type(s.values)<class 'numpy.ndarray'>\n```", "```py\n\n>>> s[0]1\n>>> s[1:3]\n1    2\n2    3\ndtype: int64\n```", "```py\n\n>>> s.indexRangeIndex(start=0, stop=5, step=1)\n```", "```py\n\n>>> s = pd.Series([1, 2, 3, 4, 5], index=[\"a\", \"b\", \"c\", \"d\", \"e\"])>>> s\na    1\nb    2\nc    3\nd    4\ne    5\n```", "```py\n\n>>> s[\"c\"]3\n```", "```py\n\n>>> s[\"b\":\"d\"]b    2\nc    3\nd    4\ndtype: int64\n```", "```py\n\n>>> s[1:3]b    2\nc    3\ndtype: int64\n```", "```py\n\n>>> s = pd.Series({\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5})>>> s\na    1\nb    2\nc    3\nd    4\ne    5\ndtype: int64\n```", "```py\n\n>>> paid = {\"Louvre Museum\": 5988065, \"Orsay Museum\": 1850092, \"Pompidou Centre\": 2620481, \"National Natural History Museum\": 404497}>>> free = {\"Louvre Museum\": 4117897, \"Orsay Museum\": 1436132, \"Pompidou Centre\": 1070337, \"National Natural History Museum\": 344572}\n```", "```py\n\n>>> museums = pd.DataFrame({\"paid\": paid, \"free\": free})>>> museums\n                                    paid     free\nLouvre Museum                    5988065  4117897\nOrsay Museum                     1850092  1436132\nPompidou Centre                  2620481  1070337\nNational Natural History Museum   404497   344572\n```", "```py\n\n>>> museums.indexIndex(['Louvre Museum', 'Orsay Museum', 'Pompidou Centre',\n       'National Natural History Museum'],\n      dtype='object')\n>>> museums.columns\nIndex(['paid', 'free'], dtype='object')\n```", "```py\n\n>>> museums[\"free\"]Louvre Museum                      4117897\nOrsay Museum                       1436132\nPompidou Centre                    1070337\nNational Natural History Museum     344572\nName: free, dtype: int64\n>>> museums[\"Louvre Museum\":\"Orsay Museum\"]\n                  paid     free\nLouvre Museum  5988065  4117897\nOrsay Museum   1850092  1436132\n>>> museums[\"Louvre Museum\":\"Orsay Museum\"][\"paid\"]\nLouvre Museum    5988065\nOrsay Museum     1850092\nName: paid, dtype: int64\n```", "```py\n\n>>> museums[museums[\"paid\"] > 2000000]                    paid     free\nLouvre Museum    5988065  4117897\nPompidou Centre  2620481  1070337\n```", "```py\n\n>>> museums[\"total\"] = museums[\"paid\"] + museums[\"free\"]>>> museums\n                                    paid     free     total\nLouvre Museum                    5988065  4117897  10105962\nOrsay Museum                     1850092  1436132   3286224\nPompidou Centre                  2620481  1070337   3690818\nNational Natural History Museum   404497   344572    749069\n```", "```py\n\n>>> museums[\"total\"].sum()17832073\n>>> museums[\"total\"].mean()\n4458018.25\n```", "```py\n\nname,paid,freeLouvre Museum,5988065,4117897\nOrsay Museum,1850092,1436132\nPompidou Centre,2620481,1070337\nNational Natural History Museum,404497,344572\n```", "```py\n\n>>> museums = pd.read_csv(\"./chapter11/museums.csv\", index_col=0)>>> museums\n                                    paid     free\nname\nLouvre Museum                    5988065  4117897\nOrsay Museum                     1850092  1436132\nPompidou Centre                  2620481  1070337\nNational Natural History Museum   404497   344572\n```", "```py\n\n>>> museums[\"total\"] = museums[\"paid\"] + museums[\"free\"]>>> museums.to_csv(\"museums_with_total.csv\")\n```", "```py\n\n(venv) $ pip install scikit-learn\n```", "```py\n\nfrom sklearn.datasets import load_digitsdigits = load_digits()\ndata = digits.data\ntargets = digits.target\nprint(data[0].reshape((8, 8)))  # First handwritten digit 8 x 8 matrix\nprint(targets[0])  # Label of first handwritten digit\n```", "```py\n\n[[ 0.  0.  5\\. 13.  9.  1.  0.  0.] [ 0.  0\\. 13\\. 15\\. 10\\. 15.  5.  0.]\n [ 0.  3\\. 15.  2.  0\\. 11.  8.  0.]\n [ 0.  4\\. 12.  0.  0.  8.  8.  0.]\n [ 0.  5.  8.  0.  0.  9.  8.  0.]\n [ 0.  4\\. 11.  0.  1\\. 12.  7.  0.]\n [ 0.  2\\. 14.  5\\. 10\\. 12.  0.  0.]\n [ 0.  0.  6\\. 13\\. 10.  0.  0.  0.]]\n0\n```", "```py\n\nfrom sklearn.datasets import load_digitsfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import GaussianNB\ndigits = load_digits()\ndata = digits.data\ntargets = digits.target\n# Split into training and testing sets\ntraining_data, testing_data, training_targets, testing_targets = train_test_split(\n     data, targets, random_state=0\n)\n# Train the model\nmodel = GaussianNB()\nmodel.fit(training_data, training_targets)\n# Run prediction with the testing set\npredicted_targets = model.predict(testing_data)\n# Compute the accuracy\naccuracy = accuracy_score(testing_targets, predicted_targets)\nprint(accuracy)\n```", "```py\n\nimport pandas as pdfrom sklearn.datasets import fetch_20newsgroups\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.metrics import accuracy_score, confusion_matrix\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.pipeline import make_pipeline\n# Load some categories of newsgroups dataset\ncategories = [\n     \"soc.religion.christian\",\n     \"talk.religion.misc\",\n     \"comp.sys.mac.hardware\",\n     \"sci.crypt\",\n]\nnewsgroups_training = fetch_20newsgroups(\n     subset=\"train\", categories=categories, random_state=0\n)\nnewsgroups_testing = fetch_20newsgroups(\n     subset=\"test\", categories=categories, random_state=0\n)\n```", "```py\n\n>>> newsgroups_training.data[0]\"From: sandvik@newton.apple.com (Kent Sandvik)\\nSubject: Re: Ignorance is BLISS, was Is it good that Jesus died?\\nOrganization: Cookamunga Tourist Bureau\\nLines: 17\\n\\nIn article <f1682Ap@quack.kfu.com>, pharvey@quack.kfu.com (Paul Harvey)\\nwrote:\\n> In article <sandvik-170493104859@sandvik-kent.apple.com> \\n> sandvik@newton.apple.com (Kent Sandvik) writes:\\n> >Ignorance is not bliss!\\n \\n> Ignorance is STRENGTH!\\n> Help spread the TRUTH of IGNORANCE!\\n\\nHuh, if ignorance is strength, then I won't distribute this piece\\nof information if I want to follow your advice (contradiction above).\\n\\n\\nCheers,\\nKent\\n---\\nsandvik@newton.apple.com. ALink: KSAND -- Private activities on the net.\\n\"\n```", "```py\n\n# Make the pipelinemodel = make_pipeline(\n     TfidfVectorizer(),\n     MultinomialNB(),\n)\n```", "```py\n\n# Train the modelmodel.fit(newsgroups_training.data, newsgroups_training.target)\n# Run prediction with the testing set\npredicted_targets = model.predict(newsgroups_testing.data)\n# Compute the accuracy\naccuracy = accuracy_score(newsgroups_testing.target, predicted_targets)\nprint(accuracy)\n# Show the confusion matrix\nconfusion = confusion_matrix(newsgroups_testing.target, predicted_targets)\nconfusion_df = pd.DataFrame(\n     confusion,\n     index=pd.Index(newsgroups_testing.target_names, name=\"True\"),\n     columns=pd.Index(newsgroups_testing.target_names, name=\"Predicted\"),\n)\nprint(confusion_df)\n```", "```py\n\nfrom sklearn.datasets import load_digitsfrom sklearn.model_selection import cross_val_score\nfrom sklearn.naive_bayes import GaussianNB\ndigits = load_digits()\ndata = digits.data\ntargets = digits.target\n# Create the model\nmodel = GaussianNB()\n# Run cross-validation\nscore = cross_val_score(model, data, targets)\nprint(score)\nprint(score.mean())\n```", "```py\n\npython chapter11/chapter11_cross_validation.py[0.78055556 0.78333333 0.79387187 0.8718663  0.80501393]\n0.8069281956050759\n```"]