["```py\n\n$ docker run -d --name worker-redis -p 6379:6379 redis\n```", "```py\n\n(venv) $ pip install accelerate diffusers\n```", "```py\n\nclass TextToImage:Â Â Â Â pipe: StableDiffusionPipeline | None = None\nÂ Â Â Â def load_model(self) -> None:\nÂ Â Â Â Â Â Â Â # Enable CUDA GPU\nÂ Â Â Â Â Â Â Â if torch.cuda.is_available():\nÂ Â Â Â Â Â Â Â Â Â Â Â device = \"cuda\"\nÂ Â Â Â Â Â Â Â # Enable Apple Silicon (M1) GPU\nÂ Â Â Â Â Â Â Â elif torch.backends.mps.is_available():\nÂ Â Â Â Â Â Â Â Â Â Â Â device = \"mps\"\nÂ Â Â Â Â Â Â Â # Fallback to CPU\nÂ Â Â Â Â Â Â Â else:\nÂ Â Â Â Â Â Â Â Â Â Â Â device = \"cpu\"\nÂ Â Â Â Â Â Â Â pipe = StableDiffusionPipeline.from_pretrained(\"runwayml/stable-diffusion-v1-5\")\nÂ Â Â Â Â Â Â Â pipe.to(device)\nÂ Â Â Â Â Â Â Â self.pipe = pipe\n```", "```py\n\nÂ Â Â Â def generate(Â Â Â Â Â Â Â Â self,\nÂ Â Â Â Â Â Â Â prompt: str,\nÂ Â Â Â Â Â Â Â *,\nÂ Â Â Â Â Â Â Â negative_prompt: str | None = None,\nÂ Â Â Â Â Â Â Â num_steps: int = 50,\nÂ Â Â Â Â Â Â Â callback: Callable[[int, int, torch.FloatTensor], None] | None = None,\nÂ Â Â Â )Â Â Â Â Image.Image:\nÂ Â Â Â Â Â Â Â if not self.pipe:\nÂ Â Â Â Â Â Â Â Â Â Â Â raise RuntimeError(\"Pipeline is not loaded\")\nÂ Â Â Â Â Â Â Â return self.pipe(\nÂ Â Â Â Â Â Â Â Â Â Â Â prompt,\nÂ Â Â Â Â Â Â Â Â Â Â Â negative_prompt=negative_prompt,\nÂ Â Â Â Â Â Â Â Â Â Â Â num_inference_steps=num_steps,\nÂ Â Â Â Â Â Â Â Â Â Â Â guidance_scale=9.0,\nÂ Â Â Â Â Â Â Â Â Â Â Â callback=callback,\nÂ Â Â Â Â Â Â Â ).images[0]\n```", "```py\n\nif __name__ == \"__main__\":Â Â Â Â text_to_image = TextToImage()\nÂ Â Â Â text_to_image.load_model()\nÂ Â Â Â def callback(step: int, _timestep, _tensor):\nÂ Â Â Â Â Â Â Â print(f\"ðŸš€ Step {step}\")\nÂ Â Â Â image = text_to_image.generate(\nÂ Â Â Â Â Â Â Â \"A Renaissance castle in the Loire Valley\",\nÂ Â Â Â Â Â Â Â negative_prompt=\"low quality, ugly\",\nÂ Â Â Â Â Â Â Â callback=callback,\nÂ Â Â Â )\nÂ Â Â Â image.save(\"output.png\")\n```", "```py\n\n(venv) $ pip install \"dramatiq[redis]\"\n```", "```py\n\nclass TextToImageMiddleware(Middleware):Â Â Â Â def __init__(self) -> None:\nÂ Â Â Â Â Â Â Â super().__init__()\nÂ Â Â Â Â Â Â Â self.text_to_image = TextToImage()\nÂ Â Â Â def after_process_boot(self, broker):\nÂ Â Â Â Â Â Â Â self.text_to_image.load_model()\nÂ Â Â Â Â Â Â Â return super().after_process_boot(broker)\ntext_to_image_middleware = TextToImageMiddleware()\nredis_broker = RedisBroker(host=\"localhost\")\nredis_broker.add_middleware(text_to_image_middleware)\ndramatiq.set_broker(redis_broker)\n```", "```py\n\n@dramatiq.actor()def text_to_image_task(\nÂ Â Â Â prompt: str, *, negative_prompt: str | None = None, num_steps: int = 50\n):\nÂ Â Â Â image = text_to_image_middleware.text_to_image.generate(\nÂ Â Â Â Â Â Â Â prompt, negative_prompt=negative_prompt, num_steps=num_steps\nÂ Â Â Â )\nÂ Â Â Â image.save(f\"{uuid.uuid4()}.png\")\n```", "```py\n\n(venv) $ dramatiq -p 1 -t 1 chapter14.basic.worker\n```", "```py\n\n[2023-02-02 08:52:11,479] [PID 44348] [MainThread] [dramatiq.MainProcess] [INFO] Dramatiq '1.13.0' is booting up.Fetching 19 files:Â Â Â 0%|Â Â Â Â Â Â Â Â Â Â | 0/19 [00:00<?, ?it/s]\nFetching 19 files: 100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 19/19 [00:00<00:00, 13990.83it/s]\n[2023-02-02 08:52:11,477] [PID 44350] [MainThread] [dramatiq.WorkerProcess(0)] [INFO] Worker process is ready for action.\n[2023-02-02 08:52:11,578] [PID 44355] [MainThread] [dramatiq.ForkProcess(0)] [INFO] Fork process 'dramatiq.middleware.prometheus:_run_exposition_server' is ready for action.\n```", "```py\n\n(venv) $ python>>> from chapter14.basic.worker import text_to_image_task\n>>> text_to_image_task.send(\"A Renaissance castle in the Loire Valley\")\nMessage(queue_name='default', actor_name='text_to_image_task', args=('A Renaissance castle in the Loire Valley',), kwargs={}, options={'redis_message_id': '663df44a-cfc1-4f13-8457-05d8181290c1'}, message_id='bf57d112-6c20-49bc-a926-682ca43ea7ea', message_timestamp=1675324585644)\n```", "```py\n\nclass ImageGenerationInput(BaseModel):Â Â Â Â prompt: str\nÂ Â Â Â negative_prompt: str | None\nÂ Â Â Â num_steps: int = Field(50, gt=0, le=50)\nclass ImageGenerationOutput(BaseModel):\nÂ Â Â Â task_id: UUID4\napp = FastAPI()\n@app.post(\nÂ Â Â Â \"/image-generation\",\nÂ Â Â Â response_model=ImageGenerationOutput,\nÂ Â Â Â status_code=status.HTTP_202_ACCEPTED,\n)\nasync def post_image_generation(input: ImageGenerationInput) -> ImageGenerationOutput:\nÂ Â Â Â task: Message = text_to_image_task.send(\nÂ Â Â Â Â Â Â Â input.prompt, negative_prompt=input.negative_prompt, num_steps=input.num_steps\nÂ Â Â Â )\nÂ Â Â Â return ImageGenerationOutput(task_id=task.message_id)\n```", "```py\n\nclass GeneratedImage(Base):Â Â Â Â __tablename__ = \"generated_images\"\nÂ Â Â Â id: Mapped[int] = mapped_column(Integer, primary_key=True, autoincrement=True)\nÂ Â Â Â created_at: Mapped[datetime] = mapped_column(\nÂ Â Â Â Â Â Â Â DateTime, nullable=False, default=datetime.now\nÂ Â Â Â )\nÂ Â Â Â progress: Mapped[int] = mapped_column(Integer, nullable=False, default=0)\nÂ Â Â Â prompt: Mapped[str] = mapped_column(Text, nullable=False)\nÂ Â Â Â negative_prompt: Mapped[str | None] = mapped_column(Text, nullable=True)\nÂ Â Â Â num_steps: Mapped[int] = mapped_column(Integer, nullable=False)\nÂ Â Â Â file_name: Mapped[str | None] = mapped_column(String(255), nullable=True)\n```", "```py\n\n@app.post(Â Â Â Â \"/generated-images\",\nÂ Â Â Â response_model=schemas.GeneratedImageRead,\nÂ Â Â Â status_code=status.HTTP_201_CREATED,\n)\nasync def create_generated_image(\nÂ Â Â Â generated_image_create: schemas.GeneratedImageCreate,\nÂ Â Â Â session: AsyncSession = Depends(get_async_session),\n)Â Â Â Â GeneratedImage:\nÂ Â Â Â image = GeneratedImage(**generated_image_create.dict())\nÂ Â Â Â session.add(image)\nÂ Â Â Â await session.commit()\nÂ Â Â Â text_to_image_task.send(image.id)\nÂ Â Â Â return image\n```", "```py\n\n{Â Â Â Â \"created_at\": \"2023-02-07T10:17:50.992822\",\nÂ Â Â Â \"file_name\": null,\nÂ Â Â Â \"id\": 6,\nÂ Â Â Â \"negative_prompt\": null,\nÂ Â Â Â \"num_steps\": 50,\nÂ Â Â Â \"progress\": 0,\nÂ Â Â Â \"prompt\": \"a sunset over a beach\"\n}\n```", "```py\n\n@dramatiq.actor()def text_to_image_task(image_id: int):\nÂ Â Â Â image = get_image(image_id)\n```", "```py\n\ndef get_image(id: int) -> GeneratedImage:Â Â Â Â async def _get_image(id: int) -> GeneratedImage:\nÂ Â Â Â Â Â Â Â async with async_session_maker() as session:\nÂ Â Â Â Â Â Â Â Â Â Â Â select_query = select(GeneratedImage).where(GeneratedImage.id == id)\nÂ Â Â Â Â Â Â Â Â Â Â Â result = await session.execute(select_query)\nÂ Â Â Â Â Â Â Â Â Â Â Â image = result.scalar_one_or_none()\nÂ Â Â Â Â Â Â Â Â Â Â Â if image is None:\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â raise Exception(\"Image does not exist\")\nÂ Â Â Â Â Â Â Â Â Â Â Â return image\nÂ Â Â Â return asyncio.run(_get_image(id))\n```", "```py\n\n@dramatiq.actor()def text_to_image_task(image_id: int):\nÂ Â Â Â image = get_image(image_id)\nÂ Â Â Â def callback(step: int, _timestep, _tensor):\nÂ Â Â Â Â Â Â Â update_progress(image, step)\n```", "```py\n\ndef update_progress(image: GeneratedImage, step: int):Â Â Â Â async def _update_progress(image: GeneratedImage, step: int):\nÂ Â Â Â Â Â Â Â async with async_session_maker() as session:\nÂ Â Â Â Â Â Â Â Â Â Â Â image.progress = int((step / image.num_steps) * 100)\nÂ Â Â Â Â Â Â Â Â Â Â Â session.add(image)\nÂ Â Â Â Â Â Â Â Â Â Â Â await session.commit()\nÂ Â Â Â asyncio.run(_update_progress(image, step))\n```", "```py\n\nÂ Â Â Â image_output = text_to_image_middleware.text_to_image.generate(Â Â Â Â Â Â Â Â image.prompt,\nÂ Â Â Â Â Â Â Â negative_prompt=image.negative_prompt,\nÂ Â Â Â Â Â Â Â num_steps=image.num_steps,\nÂ Â Â Â Â Â Â Â callback=callback,\nÂ Â Â Â )\nÂ Â Â Â file_name = f\"{uuid.uuid4()}.png\"\n```", "```py\n\nÂ Â Â Â storage = Storage()Â Â Â Â storage.upload_image(image_output, file_name, settings.storage_bucket)\n```", "```py\n\nÂ Â Â Â update_file_name(image, file_name)\n```", "```py\n\n(venv) $ pip install minio\n```", "```py\n\nclass Storage:Â Â Â Â def __init__(self) -> None:\nÂ Â Â Â Â Â Â Â self.client = Minio(\nÂ Â Â Â Â Â Â Â Â Â Â Â settings.storage_endpoint,\nÂ Â Â Â Â Â Â Â Â Â Â Â access_key=settings.storage_access_key,\nÂ Â Â Â Â Â Â Â Â Â Â Â secret_key=settings.storage_secret_key,\nÂ Â Â Â Â Â Â Â )\n```", "```py\n\nÂ Â Â Â def ensure_bucket(self, bucket_name: str):Â Â Â Â Â Â Â Â bucket_exists = self.client.bucket_exists(bucket_name)\nÂ Â Â Â Â Â Â Â if not bucket_exists:\nÂ Â Â Â Â Â Â Â Â Â Â Â self.client.make_bucket(bucket_name)\n```", "```py\n\nÂ Â Â Â def upload_image(self, image: Image, object_name: str, bucket_name: str):Â Â Â Â Â Â Â Â self.ensure_bucket(bucket_name)\nÂ Â Â Â Â Â Â Â image_data = io.BytesIO()\nÂ Â Â Â Â Â Â Â image.save(image_data, format=\"PNG\")\nÂ Â Â Â Â Â Â Â image_data.seek(0)\nÂ Â Â Â Â Â Â Â image_data_length = len(image_data.getvalue())\nÂ Â Â Â Â Â Â Â self.client.put_object(\nÂ Â Â Â Â Â Â Â Â Â Â Â bucket_name,\nÂ Â Â Â Â Â Â Â Â Â Â Â object_name,\nÂ Â Â Â Â Â Â Â Â Â Â Â image_data,\nÂ Â Â Â Â Â Â Â Â Â Â Â length=image_data_length,\nÂ Â Â Â Â Â Â Â Â Â Â Â content_type=\"image/png\",\nÂ Â Â Â Â Â Â Â )\n```", "```py\n\nÂ Â Â Â def get_presigned_url(Â Â Â Â Â Â Â Â self,\nÂ Â Â Â Â Â Â Â object_name: str,\nÂ Â Â Â Â Â Â Â bucket_name: str,\nÂ Â Â Â Â Â Â Â *,\nÂ Â Â Â Â Â Â Â expires: timedelta = timedelta(days=7)\nÂ Â Â Â )Â Â Â Â str:\nÂ Â Â Â Â Â Â Â return self.client.presigned_get_object(\nÂ Â Â Â Â Â Â Â Â Â Â Â bucket_name, object_name, expires=expires\nÂ Â Â Â Â Â Â Â )\n```", "```py\n\nÂ Â Â Â storage = Storage()Â Â Â Â storage.upload_image(image_output, file_name, settings.storage_bucket)\n```", "```py\n\n@app.get(\"/generated-images/{id}/url\")async def get_generated_image_url(\nÂ Â Â Â image: GeneratedImage = Depends(get_generated_image_or_404),\nÂ Â Â Â storage: Storage = Depends(get_storage),\n)Â Â Â Â schemas.GeneratedImageURL:\nÂ Â Â Â if image.file_name is None:\nÂ Â Â Â Â Â Â Â raise HTTPException(\nÂ Â Â Â Â Â Â Â Â Â Â Â status_code=status.HTTP_400_BAD_REQUEST,\nÂ Â Â Â Â Â Â Â Â Â Â Â detail=\"Image is not available yet. Please try again later.\",\nÂ Â Â Â Â Â Â Â )\nÂ Â Â Â url = storage.get_presigned_url(image.file_name, settings.storage_bucket)\nÂ Â Â Â return schemas.GeneratedImageURL(url=url)\n```", "```py\n\nDATABASE_URL=sqlite+aiosqlite:///chapter14.dbSTORAGE_ENDPOINT=play.min.io\nSTORAGE_ACCESS_KEY=Q3AM3UQ867SPQQA43P2F\nSTORAGE_SECRET_KEY=zuf+tfteSlswRu7BJ86wekitnifILbZam1KYY3TG\nSTORAGE_BUCKET=fastapi-book-text-to-image\n```", "```py\n\n(venv) $ uvicorn chapter14.complete.api:app\n```", "```py\n\n(venv) $ dramatiq -p 1 -t 1 chapter14.complete.worker\n```", "```py\n\n$ http POST http://localhost:8000/generated-images prompt=\"a sunset over a beach\"HTTP/1.1 201 Created\ncontent-length: 151\ncontent-type: application/json\ndate: Mon, 13 Feb 2023 07:24:44 GMT\nserver: uvicorn\n{\nÂ Â Â Â \"created_at\": \"2023-02-13T08:24:45.954240\",\nÂ Â Â Â \"file_name\": null,\nÂ Â Â Â \"id\": 1,\nÂ Â Â Â \"negative_prompt\": null,\nÂ Â Â Â \"num_steps\": 50,\nÂ Â Â Â \"progress\": 0,\nÂ Â Â Â \"prompt\": \"a sunset over a beach\"\n}\n```", "```py\n\nhttp GET http://localhost:8000/generated-images/1HTTP/1.1 200 OK\ncontent-length: 152\ncontent-type: application/json\ndate: Mon, 13 Feb 2023 07:25:04 GMT\nserver: uvicorn\n{\nÂ Â Â Â \"created_at\": \"2023-02-13T08:24:45.954240\",\nÂ Â Â Â \"file_name\": null,\nÂ Â Â Â \"id\": 1,\nÂ Â Â Â \"negative_prompt\": null,\nÂ Â Â Â \"num_steps\": 50,\nÂ Â Â Â \"progress\": 36,\nÂ Â Â Â \"prompt\": \"a sunset over a beach\"\n}\n```", "```py\n\n$ http GET http://localhost:8000/generated-images/1HTTP/1.1 200 OK\ncontent-length: 191\ncontent-type: application/json\ndate: Mon, 13 Feb 2023 07:25:34 GMT\nserver: uvicorn\n{\nÂ Â Â Â \"created_at\": \"2023-02-13T08:24:45.954240\",\nÂ Â Â Â \"file_name\": \"affeec65-5d9b-480e-ac08-000c74e22dc9.png\",\nÂ Â Â Â \"id\": 1,\nÂ Â Â Â \"negative_prompt\": null,\nÂ Â Â Â \"num_steps\": 50,\nÂ Â Â Â \"progress\": 100,\nÂ Â Â Â \"prompt\": \"a sunset over a beach\"\n}\n```", "```py\n\n$ http GET http://localhost:8000/generated-images/1/urlHTTP/1.1 200 OK\ncontent-length: 366\ncontent-type: application/json\ndate: Mon, 13 Feb 2023 07:29:53 GMT\nserver: uvicorn\n{\nÂ Â Â Â \"url\": \"https://play.min.io/fastapi-book-text-to-image/affeec65-5d9b-480e-ac08-000c74e22dc9.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=Q3AM3UQ867SPQQA43P2F%2F20230213%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20230213T072954Z&X-Amz-Expires=604800&X-Amz-SignedHeaders=host&X-Amz-Signature=6ffddb81702bed6aac50786578eb75af3c1f6a3db28e4990467c973cb3b457a9\"\n}\n```"]