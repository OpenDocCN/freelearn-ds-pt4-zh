["```py\nCREATE VIEW my_pipeline_event_log_vw AS\nSELECT\n  *\nFROM\n  event_log('<my_dlt_pipeline_id>');\n```", "```py\nCREATE VIEW my_gold_table_event_log_vw AS\nSELECT\n  *\nFROM\n  event_log(table(my_catalog.my_schema.my_gold_table));\n```", "```py\nCREATE OR REPLACE TEMPORARY VIEW taxi_trip_pipeline_data_quality_vw AS\nSELECT\n  timestamp,\n  event_type,\n  message,\n  data_quality.dataset,\n  data_quality.name AS expectation_name,\n  data_quality.passed_records AS num_passed_records,\n  data_quality.failed_records AS num_failed_records\nFROM\n  (\n    SELECT\n      event_type,\n      message,\n      timestamp,\n      explode(\n        from_json(\n          details :flow_progress.data_quality.expectations,\n          \"ARRAY<\n            STRUCT<\n              name: STRING,\n              dataset: STRING,\n              passed_records: INT,\n              failed_records: INT\n            >\n          >\"\n        )\n      ) AS data_quality\n    FROM\n      my_table_event_log_vw\n  );\n```", "```py\nSELECT\n  timestamp,\n  dataset,\n  sum(num_passed_records + num_failed_records)\n    AS total_expectations_evaluated,\n  avg(\n    num_passed_records /\n    (num_passed_records + num_failed_records)\n  ) * 100 AS avg_pass_rate,\n  avg(\n    num_failed_records /\n    (num_passed_records + num_failed_records)\n  ) * 100 AS avg_fail_rate\nFROM\n  taxi_trip_pipeline_data_quality_vw\nGROUP BY\n  timestamp,\n  dataset;\n```", "```py\n%pip install dbldatagen==0.4.0\n```", "```py\nimport dbldatagen as dg\nfrom pyspark.sql.types import IntegerType, FloatType, TimestampType\ndef generate_smart_thermostat_readings():\n    \"\"\"Generates synthetics thermostat readings\"\"\"\n    ds = (\n        dg.DataGenerator(\n            spark,\n            name=\"smart_thermostat_dataset\",\n            rows=10000,\n            partitions=4)\n        .withColumn(\"device_id\", IntegerType(),\n                    minValue=1000000, maxValue=2000000)\n        .withColumn(\"temperature\", FloatType(),\n                    minValue=10.0, maxValue=1000.0)\n        .withColumn(\"humidity\", FloatType(),\n                    minValue=0.1, maxValue=1000.0)\n        .withColumn(\"battery_level\", FloatType(),\n                    minValue=-50.0, maxValue=150.0)\n        .withColumn(\"reading_ts\", TimestampType(), random=False)\n    )\n    return ds.build()\n# Generate the data using dbldatagen\ndf = generate_smart_thermostat_readings()\ndf.display()\n```", "```py\n(df.write\n    .format(\"delta\")\n    .mode(\"overwrite\")\n    .saveAsTable(FULLY_QUALIFIED_TABLE_NAME))\n```"]