- en: '6'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Getting Started with Power BI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Visualizing data to understand "what is going on" in the business: this is
    the first and ever-present need that organizations have when leveraging data.
    Unsurprisingly, business intelligence applications are the earliest to be adopted
    in a company and precede by months (or even years) the arrival of their "sexier"
    advanced analytics counterparts. However excited and impatient we can—understandably—be
    about the wonders of predictive and prescriptive capabilities powered by machine
    learning algorithms, a simple online dashboard showing the evolution of key business
    metrics can easily dominate in short-term potential. Making data accessible to
    a broad community of employees will multiply the probability of identifying business
    opportunities and promoting more conscious and effective data-based decisions
    by business managers. This scenario is too appealing to be left by the wayside,
    and the time has come to equip our data analytics toolbox with a tool that can
    unleash the power of descriptive analytics at scale: Power BI.'
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will provide answers to the following questions:'
  prefs: []
  type: TYPE_NORMAL
- en: What is Power BI, and how do I get started?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How do I load, transform, and organize data?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How do I create data visualizations that can interact with each other?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What does a Power BI dashboard look like, and how can I create one?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'After getting acquainted with the Power BI Desktop user interface, we will
    build a complete dashboard step by step. The ultimate objective is to equip you
    with all you need to create your own dashboards as soon as you finish reading
    the last page. The focus of this chapter is on Power BI and on what you strictly
    need to start benefitting from it. We will then use the following two chapters
    to sharpen your data visualization and storytelling skills to make you great at
    building data charts that can effectively persuade others. One thing at a time:
    let''s now meet our new hero in the quest for data analytics.'
  prefs: []
  type: TYPE_NORMAL
- en: Power BI in a nutshell
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Power BI** is a business intelligence service offered by Microsoft that enables
    the creation of online data dashboards. Let''s go through its most essential features:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Power BI comes with a traditional application software called **Power BI Desktop**,
    which you can download and install, for free, on your computer. Power BI Desktop
    offers the full design functionalities of Power BI: you can use this software
    to create your dashboards, save them in local files (with the `.pbix` extension),
    and then share them with other users, who can, in turn, view and edit your dashboards.
    To complete this chapter, you will only need to use the Power BI Desktop application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It's important to know that Power BI is primarily offered as a cloud-based service.
    If you decide you want to use Power BI at scale in your company to leverage corporate
    data sources and make dashboards available online via browsers or mobile apps
    (without the need for all users to install Power BI Desktop and open files shared
    via email), then you can do so by acquiring Pro or Premium licenses. In this way,
    your dashboards will rely on the Microsoft cloud platform, called **Azure**, for
    hosting, processing, and making data available to end users.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If your company uses Microsoft 365 cloud services, you might already have a
    Power BI Pro license: it''s worth checking this out.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Power BI leverages a user-friendly **visual interface** that lets you design
    dashboards without the need to write any code. Still, if you want to specify advanced
    queries, you can use the programming language called **DAX**, which is short for
    **Data Analysis eXpressions**. We will not cover DAX in this book, but it's good
    to know that you can extend Power BI functionalities by leveraging it if you need
    it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Power BI offers **more than plain data visualizations**. It lets you pull data
    from different sources, transform and harmonize tables, apply some logic and algorithms,
    and make data accessible through interactive charts or other non-traditional ways.
    For example, a remarkable functionality of Power BI is to give users the possibility
    to obtain data by typing questions in plain English like *what is the evolution
    of profit for brand X over the last two years?* In this case, your role as a designer
    will be to "teach" Power BI how to interpret your colleagues' questions by deciding,
    for instance, what words are used as synonyms to describe the same entities (for
    example, *articles*, *SKUs*, and *products*).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Power BI can be **extended** with additional features and visuals. You can check
    the Microsoft App store called **AppSource** ([appsource.microsoft.com](http://appsource.microsoft.com)),
    from where you can download additional custom visualizations for free. Another
    way to extend Power BI functionalities is to add Python or R code snippets as
    a way to implement specialized charts or add machine learning functionalities.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'All in all, Power BI promises to be a powerful and well-rounded tool for democratizing
    data in a company through accessible dashboards: this is exactly what we need
    to complete our data analytics toolbox and unlock substantial value for our business.
    Before exploring its user interface and getting acquainted with its naming conventions,
    let''s get Power BI Desktop up and running on your computer. You can either retrieve
    it from its download page ([powerbi.microsoft.com/en-us/downloads](http://powerbi.microsoft.com/en-us/downloads))
    and then install it or look it up on the Microsoft Store app in Windows. Although
    it is not required for the sake of the chapter, you can also register for a free
    Power BI license. This would let you access the cloud-based services and save
    your reports, for your own use, on the cloud (sharing them with others would require
    buying a paid license).'
  prefs: []
  type: TYPE_NORMAL
- en: Walking through Power BI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Building a working dashboard in Power BI requires a series of four essential
    steps, namely, loading your data, transforming it, defining a data model, and
    creating data visuals leveraging the data model. As you can see in *Figure 6.1*,
    the four steps alternate as a cycle—your dashboard might require a few iterations
    before being ready for prime time:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Diagram'
  prefs: []
  type: TYPE_NORMAL
- en: Description automatically generated](img/B17125_06_01.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 6.1: Typical Power BI design process: load the data and transform data,
    define a model, build visuals, and iterate'
  prefs: []
  type: TYPE_NORMAL
- en: 'Every step of the process relies on some specific views or dialogs in the application.
    By using only a handful of views, you will be able to access all the functionalities
    you need to build a dashboard from scratch. *Figure 6.2*shows a simple "map" of
    where to find the most helpful Power BI views and windows so that you don''t get
    lost along the way:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17125_06_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.2: Feeling lost? This is where you find the most valuable views you
    will ever need in Power BI'
  prefs: []
  type: TYPE_NORMAL
- en: In the following few pages, we will walk through the complete process of creating
    a dashboard and discover the critical Power BI functionalities that will help
    us along the way.
  prefs: []
  type: TYPE_NORMAL
- en: Loading data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Unsurprisingly, the very first thing you need to do in Power BI is load some
    data into it. If you click on **Get Data** right from the welcome screen you see
    as soon as you open Power BI or from the icon in the **Home** ribbon on top, you
    will get to the **Get Data** window, shown in *Figure 6.3*. This window boasts
    a wide range of possible data connectors, organized by the categories you see
    on the left (**File**, **Database**, **Online services**, and so on). The first
    and most used category is **File**: from here, you can import not only Excel or
    CSV single files but also entire folders, and you can extract the data stored
    in PDF reports. From the **Database** category, you can connect to many types
    of databases and specify SQL queries to retrieve the data you need. From here,
    you can also connect to cloud-based platforms such as Amazon Web Services (Redshift),
    Google Cloud Platform (BigQuery), and, of course, Microsoft Azure. The **Online
    Services** category lets you connect to other external services like Google Analytics,
    Salesforce reports, and Sharepoint lists. Have a look at the **Other** category
    as well: the source called **Web** will let you scrape data from web pages and
    download tables or other web elements of interest:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17125_06_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.3: The Get Data window in Power BI: define how to retrieve the data
    you need'
  prefs: []
  type: TYPE_NORMAL
- en: 'By setting up a data connector, you define the first step of a repeatable routine
    for retrieving and transforming your data of interest: such a routine in Power
    BI is called a **query**. Defining queries is a powerful way to ensure that your
    dashboards can be sustainably updated over time. Every time you refresh your reports,
    the queries will connect to the various sources and pull the most up-to-date version
    of the available data.'
  prefs: []
  type: TYPE_NORMAL
- en: Transforming data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For every query, you can then associate a series of data transformation steps
    that are applied every time new data comes in. In Power BI, you can do so visually,
    without writing any code, by using a tool called **Power Query Editor**, which
    you can see in *Figure 6.4*. On the left of the query editor, you find a panel
    called **Queries** from which you can select the query you are setting transformation
    steps for: just click on the name of the query you wish to work on.'
  prefs: []
  type: TYPE_NORMAL
- en: 'You will see an Excel-like spreadsheet view in the middle of the window, which
    displays a *preview* of your transformed query. The values of the cells are read-only:
    you cannot change them one by one, and indeed your purpose here is to define repeatable
    transformation steps for the whole table more than applying cell-level changes.
    You can use the header of the spreadsheet to apply some transformations, like
    filters and sorting, similar to what you would do in Excel. On the right, you
    find a panel called **Applied steps**, where you can find an ordered list of the
    transformation steps applied so far. The very first step is likely to be **Source**,
    as it indicates the original definition of the source of data you loaded. Some
    of the transformation steps will have a cog icon on the right: by clicking on
    it, you can edit the parameters of the transformation steps. For instance, if
    the query pulls data from an Excel file, you can edit the file''s path to open
    by clicking on the cog icon beside the **Source** step.'
  prefs: []
  type: TYPE_NORMAL
- en: 'When you select a specific step, the spreadsheet view will update accordingly,
    showing you a preview of the query after executing that specific step you selected:
    this is handy when you want to check *what is going on* in your transformation
    routine at every step:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17125_06_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.4: The Power Query Editor window in Power BI: design the transformation
    steps applied to each query'
  prefs: []
  type: TYPE_NORMAL
- en: By going through the first three ribbon tabs on top of the **Power Query Editor**
    window, namely **Home**, **Transform**, and **Add Column**, you can find a *menu*
    of the many transformation steps available to you. Many of these transformation
    steps are the same as the ones we learned how to apply with KNIME using the nodes
    introduced in *chapters 2* and *3*. Let's have a look at the most popular ones
    in there.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17125_06_05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.5: The Home ribbon tab in the Power Query Editor window'
  prefs: []
  type: TYPE_NORMAL
- en: Starting from the **Home** tab (*Figure 6.5*), you can find the **Choose Columns**
    and **Remove Columns** icons, which let you filter columns and keep only the ones
    you really need.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Similarly, **Keep Rows** and **Remove Rows** enable you to reduce the number
    of rows: for instance, you can keep only the top 10 rows or remove the duplicate
    ones.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Instead, if you want to filter rows depending on their values, you need to click
    on the arrow that appears on the right of the header of each column within the
    preview spreadsheet. From there, you can also sort rows using your preferred order.
  prefs: []
  type: TYPE_NORMAL
- en: The **Split Column** icon will let you divide strings into multiple columns
    by either using delimiters (you can split `JUN-22` into `JUN` and `22` by setting
    `-` as a delimiter) or counting a given number of characters.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Group By** will aggregate all rows according to a given group definition
    and a summarization logic (like sum, average, or count). If you use this transformation
    step, you will not be able to use the disaggregated version of the table anywhere
    in your dashboard, so use this function sparingly. You can always aggregate tables
    *on the fly* by defining the aggregation directly as you build the visuals, which
    we do most of the time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Merge Queries** lets you combine queries by applying a one-off join operation.
    We will find here the same join types that we have met in *Chapter 3*, *Transforming
    Data*, such as *inner*, *left outer*, *right outer*, and *full outer*, plus some
    more like *left anti* (which means keeping only the rows from the left table that
    are not matched on the right). You can either create a new query containing the
    result of the join or substitute the current query with it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It's important to notice that the **Merge Queries function** is not the only
    way to *connect* two tables with matching keys in Power BI. As we will learn in
    the next few pages, when we build data models, we can specify relationships across
    tables without statically joining them once and for all. This means that you should
    use **Merge Queries** only if you want to run a definitive merge of two tables
    and accept the need to utilize some extra space required to keep the static, joined
    version of the table.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: With the **Append Queries** icon, you can concatenate two tables with the same
    columns by adding the rows of one table at the bottom of the rows of the other
    table.![](img/B17125_06_06.png)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Figure 6.6: The Transform tab in the Power Query Editor window'
  prefs: []
  type: TYPE_NORMAL
- en: Moving to the **Transform** tab (*Figure 6.6*), we find the **Data Type** drop-down
    menu, which lets us select the type associated with a column and attempt a conversion.
    We can use this one, for instance, to convert a string containing a date into
    a Date & Time field.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With **Replace Values**, you can substitute all cells having a certain value
    with a specified new value. You can use it also for applying a fixed value to
    all empty cells in a column. To do so, just use the `null` string to specify you
    want to target empty cells.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Fill** icon lets you replace all empty cells with the values found above
    or below within the table. This is handy when you have some values sorted by time
    and you want to *fill the gaps* with the most recent available values.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As the name suggests, by using **Pivot Column**, you can create pivot tables
    where values within a column are aggregated across as separate columns. You might
    also find useful its reverse functionality, **Unpivot** **Columns**, which makes
    columns of the table appear as multiple rows.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The **Format** icon lets you manipulate the strings: you can, for instance,
    capitalize strings (making `tessa` become `Tessa`) or move them to an all-uppercase
    format (`TESSA`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With the **Rounding** functionality, you can specify the rounding logic for
    decimal numbers, fixing the decimal digits to your liking.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Within the **Data & Time Column** section, you can extract specific Date & Time
    fields, such as years, months, hours, and seconds. If you want to extract more
    than one field, you can first duplicate the column (right-click on the column
    header and then **Duplicate Column**) and create as many copies as you need before
    replacing them with the field you need.![](img/B17125_06_07.png)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Figure 6.7: The Add Column tab in the Power Query Editor window'
  prefs: []
  type: TYPE_NORMAL
- en: Within the **Add Column** tab (*Figure 6.7*), you can create calculated columns
    by applying some logic. For instance, using the **Custom Column** icon, you can
    apply math formulas, such as `[Price]*[Discount_rate]`, leveraging as variables
    the values found in other columns.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Conditional Column** lets you generate a new column based on evaluating some
    logical conditions on other columns, similar to what we did in KNIME using the
    **Rule Engine** node. For example, you can create a new column with the value
    `Expensive` for all rows where the *Price* column is higher than 2.5 and `Cheap`
    for all others.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As you finish applying all the required transformation steps, your queries
    will produce tables having precisely the shape and format you need. Once you have
    done so, you can save the queries (the **Close & Apply** icon in the **Home**
    tab) and move on to the next step of our process: the definition of the data model.'
  prefs: []
  type: TYPE_NORMAL
- en: Defining the data model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'At this point of the process, you need to define how the tables resulting from
    your queries are logically interrelated. To do so, it will be enough to declare
    the relationship between the **matching columns** across tables, meaning the ones
    that can be used for combining tables when needed. By completing this simple exercise,
    you will have defined a single data model that you will then be able to leverage
    freely in your dashboard visualizations. We do this for a straightforward and
    important reason: by connecting the matching keys, you can use data stored in
    different tables within the same visual: it''s like having all tables joined and
    continuously available to you, which is pretty handy. A consequence of having
    a clear data model defined is that you can enable interactions across charts through
    filtering or selections. For example, let''s imagine that a visual shows the total
    amount of sales generated by category: by clicking on a category name, you can
    get another visual to show the names of the most active customers within that
    category, an information that is stored in a different table. By knowing the matching
    columns between categories, sales, and customers, Power BI will be able to show
    the data the user is after and enable drill-downs and other forms of interaction.'
  prefs: []
  type: TYPE_NORMAL
- en: It is effortless to build a data model in Power BI. Do you remember the **Entity-Relationship
    (ER) diagram** we introduced in *Chapter 3*, *Transforming Data* (see *Figure
    3.10* to get a refresher)? Power BI lets you build a model visually by drawing
    ER diagrams using the available tables.
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see in *Figure 6.8*, the **Model** view shows tables (each resulting
    from the full transformation steps declared in a query) as boxes: the table name
    appears in bold at the top of the box while columns are listed within the box.
    The tables are connected through lines, which represent their relationships:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17125_06_08.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.8: The Model view in Power BI: connect the tables and build your ER
    diagram'
  prefs: []
  type: TYPE_NORMAL
- en: 'By using the **Model** view, you can easily declare relationships across matching
    columns. For example, to draw a relationship across matching columns in two different
    tables, it will be enough to *drag and drop* one column on top of its match. For
    instance, in *Figure 6.8*, you can see how the highlighted relationship (between
    the ProductMD and Transactions tables) is made using the common column, *StockCode*.
    The arrows appearing on the connections indicate the **cross-filter directions**:
    in this case, a filter applied on a ProductMD item will also filter rows in Transactions,
    while the opposite will not happen. The **1** and ***** symbols appearing at the
    ends of the connectors clarify the expected **cardinality** of the relationship:
    the ones displayed in the picture are both **one-to-many** (**1-to-***) relationships,
    meaning that we expect one single row in ProductMD to refer to many rows in Transactions.
    The other possible types of relationship cardinality are **one-to-one** (**1-to-1**)
    and **many-to-many** (***-to-***).'
  prefs: []
  type: TYPE_NORMAL
- en: The role of the data model will become even more apparent when we go through
    the full tutorial. For now, the takeaway is that by defining relationships together
    with their cardinality and cross-filter directions (all visually displayed in
    the **Model** view), we can be sure that the behavior of Power BI is not ambiguous,
    even when we use multiple tables at the same time within our dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: 'Having built the data model, we can now move to the last and most exciting
    part of dashboard creation: designing data visualizations.'
  prefs: []
  type: TYPE_NORMAL
- en: Building visuals
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Dashboards in Power BI are organized as a set of pages, each containing many
    interconnected visual elements such as tables, line charts, scatter plots, text
    labels, and buttons. As you perform this step, you will have to think like a designer
    by enforcing structure and visual appeal while mixing together business understanding
    and creativity. This activity can be as enjoyable as it is time-consuming: for
    sure, it can pay its dividends as you end up with a functional and valuable dashboard
    that people can leverage to unveil business opportunities and make superior decisions.
    When you open the **Report view**(shown in *Figure 6.9*), you will have at your
    fingertips all you need to compose the visual elements together and link them
    with the tables sitting in the underlying data model:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17125_06_09.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.9: The Report view in Power BI: connect the tables and build your
    ER diagram'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go through each component of the **Report** view and learn what they
    are there for:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Report page**: This will look at first like a blank piece of paper upon which
    you can draw your beautiful dashboard. By using your mouse, you can place, resize,
    and reposition visuals as needed. Underneath the report page, you will find a
    set of tabs, each referring to a separate page of your dashboard.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'According to the official naming convention of Power BI, what we are building
    in this chapter is a report, not a dashboard: the latter is, instead, a one-page
    summary aggregation of selected visuals, a feature available in the Power BI service
    only. For simplicity, I will keep using the words dashboard and report to refer
    to our end result here: a set of connected visuals for end users to interact with.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Filters**: In this section, you decide the scope of the data to be shown
    in each visual element by setting filters. For example, you can set up a filter
    on the column *Category* by dragging and dropping it from the Fields panel onto
    one of the boxes lying on the **Filters** panel. You can use filters to show only
    the portion of data you select or implement some logic, like *show only the five
    most selling products of the list*. The **Filters** section has three different
    panels, corresponding to the levels at which you want your filters to operate:
    some filters will limit what is shown in a specific visual only, while others
    will apply instead to all the visuals in a page or, even, on every visual appearing
    anywhere in all dashboards.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Visuals**: This section is the most interesting one as it features a complete
    list of visualization types you can add to your dashboard. As you can see from
    *Figure 6.10*, more than 30 different visualization types are available for you
    to use as soon as you install Power BI:![Graphical user interface, diagram'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Description automatically generated](img/B17125_06_10.png)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 6.10: Available visualization types in Power BI: which chart makes your
    data speak best?'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You can also add supplementary visualization types by either enabling the preview
    of some beta-version features (go to **File** | **Options and settings** | **Options**
    | **Preview features** to activate) or downloading them from AppSource by clicking
    on the last visualization **...** icon (you need to sign in to Power BI, even
    with a free account, to access AppSource). You can see in *Figure 6.11* a preview
    of the extra available visuals you can grab from there:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Graphical user interface, application'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Description automatically generated](img/B17125_06_11.png)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 6.11: Run out of creative ideas? You can check AppSource for additional
    visual types and add them to your Power BI'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Properties**: From this section, you can configure how your visual should
    behave and look. As you can see in *Figure 6.12*, you have three available tabs
    within this section, namely **Fields**, **Format,** and **Analytics**. The **Fields**
    tab is the first to be looked after: by dragging and dropping the columns available
    in the data model into the various elements in this tab, you decide what data
    should be visualized. Depending on the type of visualization you are using, you
    will have different elements to configure. For instance, the example in *Figure
    6.12* refers to a line chart where the column *Invoice_time* controls what should
    be in the horizontal axis, while the values visualized by the line are controlled
    by the column *Quantity*. In the Format tab, you have multiple selectors that
    let you control the "look and feel" of the visual. You can tune several visual
    properties, from the title to be displayed on top to the color and thickness of
    the line in the chart. Lastly, in the **Analytics** tab, you can activate some
    basic modeling features, such as trend lines (basically, the result of a simple
    linear regression model or a time series forecast):![](img/B17125_06_12.png)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 6.12: Visual properties section: connect data columns to your chart
    and decide how it should look'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Fields**: This section, which you can find on the right side of the **Report**
    view, does a simple but fundamental job. It carries a list of all the columns
    available in the different tables of the data model so that you can easily drag
    and drop the columns onto the filters or the properties section. When you click
    on any column, the **Column tools** ribbon will appear at the top of the window.
    You can use it to change the data type of a column or set its default aggregation
    method (like *Sum*, *Count*, or *Average*): this is helpful when you want to fine-tune
    the behavior of some columns before using them in your visuals.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We made it! We have gone through the four fundamental steps required to build
    a dashboard in Power BI and used this as an opportunity to have a short tour of
    the main functionalities of the software.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s summarize what we have just seen: everything started with loading some
    raw data into Power BI, by selecting and configuring the right connectors available
    in the **Get Data** window. Leveraging the rich set of functionalities of **Power
    Query Editor**, we took our raw data to the next level and applied an ordered
    series of transformation steps, which brought us to a number of tables with the
    right shape and format (which can be previewed at any point using the spreadsheet-like
    **Data** **view**). At this point, we used the **Model view** to connect all these
    tables together, defining the relationships across matching columns and building
    a single data model. Finally, we opened the **Report view**, where we found all
    the ingredients (tables and visuals) to build our dashboard. It''s time to see
    this process in action as we build a full Power BI dashboard from scratch in the
    following tutorial.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Tutorial: Sales Dashboard'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This tutorial will take us back to a familiar business, which we have by now
    grown fond of: the UK-based online retailer selling all-occasions gifts. Automating
    the weekly Excel reports using KNIME (something we did back in *Chapter 3*, *Transforming
    Data*) has granted us quite a reputation that is now pulling us back into the
    spotlight. As the business keeps growing, the hunger to make descriptive analytics
    available to a greater number of employees expands. Updating some Excel reports
    that answer a static list of given questions is not sufficient anymore. We would
    like to offer the opportunity to deep-dive into quarter-by-quarter and country-
    and product-level details so that our colleagues can "explore" data by themselves
    and find interesting insights.'
  prefs: []
  type: TYPE_NORMAL
- en: 'With the help of the financial analyst (who is still full of gratitude for
    us) and after interviewing a few managers about their most recurrent needs, we
    are ready to synthesize the requirements expected by each group of users as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: All managers should be able to see at a glance the relative weight of categories
    and subcategories out of total revenues and see the evolution of sales over time
    within each product group
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Marketing managers should be able to look at domestic (generated in UK) and
    international sales separately, having the opportunity to deep-dive by country
    and category and plan for country-specific digital marketing campaigns accordingly
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Category managers should be given the opportunity to deep-dive by category and
    spot the articles generating the most sales for each quarter and country
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The data follows the same model we encountered in *Figure 3.10* and is made
    available to us in three separate files: `SalesDashboard-CustomerMD.csv` and `SalesDashboard-ProductMD.csv`
    include, respectively, the customer and the product master data tables, while
    `SalesDashboard-Transactions.xlsx` contains the latest transactions (this time,
    all included in one single file).'
  prefs: []
  type: TYPE_NORMAL
- en: 'It''s time to get Power BI Desktop up and running on our computer and start
    with the first phase of any dashboard creation: loading the required data:'
  prefs: []
  type: TYPE_NORMAL
- en: 'As a first step, we load the Customer Master Data stored in a text, comma-separated
    value file. To do so, click on the **Get Data** icon, available on the **Home**
    ribbon tab, then select **Text/CSV** as a source type, and click on **Connect**.
    You will be prompted with a dialog from which you can choose the file to use as
    a source, in our case, `SalesDashboard-CustomerMD.csv`. At this point, you will
    see a preview of the table recorded in the file (*Figure 6.13*). Power BI has
    correctly recognized its format: there are two columns, with the header shown
    on top in bold. This is looking good, and there is no need to change any setting
    (you can see, for example, that the comma is rightly used as a column delimiter),
    so we can click on **Load** to complete the step:![](img/B17125_06_13.png)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 6.13: Preview of the Customer Master Data source. You can revise the
    import settings from the menus in the window'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We can repeat the same procedure (**Get Data** and then **Text/CSV**) to load
    the Product Master Data table. This time, the preview window (*Figure 6.14*) shows
    that the column names have not been recognized correctly and have been assigned
    instead with some default identifiers (*Column1*, *Column2*, and so on). This
    triggers the need for some minor transformation before using this table in our
    data model. Hence, this time we click on the second button at the bottom, **Transform
    Data**:![Graphical user interface, text
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Description automatically generated](img/B17125_06_14.png)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 6.14: Preview of the Product Master Data table: column headers were
    not recognized'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'By clicking on **Transform Data**, we ask Power BI to add some transformation
    steps to the query that injects the Product Master Data table: this is a job for
    **Power Query Editor**, whose window will now appear. In this specific case, the
    only necessary change is to promote the first row read in the CSV file to be used
    as headers of the table. To do so, click on the **Use First Row as Headers** button,
    which you can find on the **Home** ribbon menu (see the arrow in *Figure 6.15*
    as a guide). Once done, the list of the **Applied Steps** on the right is enriched
    with a **Promoted Headers** step: this means that every time new data gets loaded,
    Power BI will execute this step as part of the query. We can click on the **Close
    & Apply** icon on the top left and move on:![](img/B17125_06_15.png)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 6.15: Power Query Editor for the Product Master Data table. We need
    to use the first row as headers'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The table containing the transactions is stored in an Excel file. To load it,
    you can either click on the usual **Get Data** and then select **Excel** or click
    straight away on the **Excel** icon appearing in the **Home** ribbon menu. You
    will be presented with a dialog that lets you preview the tables contained in
    the various worksheets of the Excel file (*Figure 6.16*):![](img/B17125_06_16.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 6.16: Excel preview dialog: select the tables you want to import from
    the Excel file'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Also, in this case, we need to add some transformations to the query, so tick
    the `Transactions` box on the left and then click on **Transform Data**, which
    will open **Power Query Editor**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: As we look at the preview of the Transactions table, we notice that at least
    two transformations are required to make it usable. Firstly, the *Invoice_time*
    column does not look right, as it has not been recognized as a Date & Time field.
    Secondly, since most of our business needs require the analysis of revenues and
    we only have unit *Price* and *Quantity* for each transaction, we need to implement
    a simple mathematical formula to obtain the revenues by multiplying the two columns.
    Let's see how **Power Query Editor** can help us with both.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If you look at the headers of the spreadsheet view, you will notice that beside
    every column title, on the left, you can find an icon representing its data type.
    For example, the **ABC** icon near *StockCode* tells us that it is a text string,
    while the **1.2** near *Price* indicates it is a decimal number. If you click
    on any of these icons, you will see a pop-up menu (*Figure 6.17*) from where you
    can force a different data type. Power BI will attempt the conversion to the type
    you wish. Let''s do this with the *Invoice_time* column: click on its type icon
    on the left and select **Date/Time** (if prompted with a window asking whether
    to replace the current query step or add a new one, select the first option).
    You will notice that the spreadsheet view now shows dates and times, which is
    exactly what we wanted:![Graphical user interface, application, table'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Description automatically generated](img/B17125_06_17.png)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 6.17: Column type selection from Power Query Editor: convert columns
    by making the right selection'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The next step is to add a new column that hosts the revenues generated by each
    transaction. To do so, go to the **Add Column** ribbon menu and then click on
    the **Custom Column** icon. You will obtain the window shown in *Figure 6.18*
    from where you can define your expression, similar to what we did using the **Math
    Formula** node in KNIME. The available columns are displayed on the right: double-click
    on *Quantity* to make it appear in the **Custom column formula** box, then just
    type `*` with your keyboard, and—finally—double-click on the *Price* column on
    the right. By doing so, you will obtain the expression `[Quantity]*[Price]`, which
    is what we needed to calculate value sales. You can now specify its header by
    typing `Sales` in the **New column name** box on the top, then click on the **OK**
    button:![](img/B17125_06_18.png)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 6.18: Add a custom column in Power BI: define your math formula using
    columns as variables'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You will notice with pride that the newly calculated column *Sales* appears
    on the right of the spreadsheet view. However, its data type is still undefined,
    as you will find displayed on the left of the title an ambiguous **ABC123** icon.
    You can quickly fix this by clicking on the icon and selecting **Decimal Number**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Always declare the data types of your columns. By doing so, columns can be used
    as optimally as possible in your dashboard visualizations, and, also, they will
    get appropriately aggregated. Numeric columns are, by default, aggregated in Power BI
    by summing values across, but you can change the aggregation function for each
    column at any time. To do so, go to the **Data**view (see *Figure 6.2* to find
    it), select a column, and use the **Summarization** drop-down menu you find in
    the **Column tools** ribbon menu (for numeric columns, you can go for **Sum**,
    **Average**, **Minimum**, **Maximum**, **Count**, and **Distinct Count**).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Once you have completed this step, you will see that with the help of Power
    Query Editor, you created a table with seven columns, as displayed in *Figure 6.19*.
    In the **Applied Steps** panel on the right, you find a sorted list of all the
    transformations that need to happen (like sourcing the data stored in Excel, adding
    columns, changing their types, and so on) to produce the table you want to use
    within your dashboard. You can click on each step to "*go back*" to that phase
    of your transformation routine. You can also remove any step (click on the **X**
    icon on the left that appears when you select the specific step) or edit it: for
    instance, you can change the definition of the custom formula we added by clicking
    on the cog icon on the right of the step called **Added Custom**:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Table'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Description automatically generated](img/B17125_06_19.png)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 6.19: The full query definition for your Transactions table: Power Query
    Editor is your ally for repeatable data transformations in Power BI'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Although most of the transformations are typically defined when adding new data
    sources, you can edit your queries later by reopening the Power Query Editor view
    (click on the **Transform Data** icon from the **Home** ribbon menu).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To proceed further, click on the **Close & Apply** icon in the top left, and
    we are ready to go to the next phase of our dashboard creation process: the definition
    of the data model.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If you go to the **Model** view (click on the third icon in the bar to the
    left of your Power BI main window), you will find a familiar picture: the ER model
    of the database made of our three tables (go back a few pages and check *Figure
    6.8* to see a screenshot of the data **Model** view). Power BI has automatically
    recognized the relationships across the tables and built the connections without
    our intervention. Of course, in this case, it was rather simple since the matching
    columns had precisely the same name and type. In any case, we can manually declare
    or edit any relationship across tables by using the **Model** view. We can "drag
    and drop" one column in a table to another column on a different table to create
    a new relationship. To edit an existing connection, you can double-click on the
    line linking two tables. Click on the relationship between ProductMD and Transactions:
    you will obtain the **Edit relationship** view displayed in *Figure 6.20*. The
    drop-down menus let you select the two tables to be connected, while you can specify
    the matching columns by clicking on the preview tables displayed in the middle.
    In our case, we notice that the *StockCode* column is highlighted in both tables,
    which is what we wanted. The **Cardinality** drop-down menus at the bottom left
    let you select the type of relationship (**Many to one**, **One to one**, **One
    to many**, or **Many to many**): by doing so, you are telling Power BI how many
    rows in the first table should match with how many rows in the second table. In
    this case, we go for **Many to one** since multiple transactions (first table)
    can correspond to the same product, and so to one single row in the Product Master
    Data table (the second table). You can keep the **Cross filter direction** drop-down
    menu to its default value (**Single**, which is recommended, for performance reasons,
    in the large majority of cases). We did not have to make any changes as all the
    default options worked well in this case: click on **OK** and move on:![](img/B17125_06_20.png)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 6.20: Manage a relationship across tables in a data model: which columns
    should be matching?'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In Power BI, the active relationship between two tables can only be defined
    through one pair of matching columns. If you want to match multiple columns across
    two tables, you need to go through this simple workaround: go to **Power Query
    Editor** (click on the usual **Transform Data** icon), select the two or multiple
    columns you want to use collectively as a single key, and click on **Merge Columns**
    from the **Transform** menu. Do this on the other table as well, and you will
    then be able to create a relationship across the merged columns.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Check the other relationship between Transactions and the Customer Master Data
    table by double-clicking on the line linking the two tables. Make sure that the
    matching columns are *Customer_ID*, that **Cardinality** is **Many to one**, and
    that **Cross filter direction** is **Single**. Then click on **OK,** and your
    data model is ready to go!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At this point, we are ready to move to the last and, for some, most exciting
    part: designing your dashboard by building its visuals one by one. One mistake
    many people tend to make the first time they create any data dashboard is to jump
    into crafting colorful charts without having a reasonably clear idea of what they
    are after. My advice is to always take some time to take a step back, think about
    the specific business needs you have, and put together a simple *sketch* of what
    the dashboard should look like. Think about your end users'' questions and how
    to effectively guide them through the answers they are looking for. If you have
    the opportunity, show your sketch (or a digital *mock-up* built with any software
    you feel comfortable with) to some of the end users to get their first reaction.
    You will find that the time you invest early on in planning for your dashboard
    (no need for details at this stage, just a high-level view of its content will
    suffice) always pays its dividends as you avoid some expensive (and frustrating)
    rework later.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When you work on large descriptive analytics initiatives (like building from
    scratch the business intelligence application layer of a company), the planning
    phase becomes even more crucial. The advice, in this case, is to keep an *agile*
    mindset and work in small (but always well-planned) iterations where you add functionalities
    progressively at every step. In this case, the other advice is to make sure you
    engage your business partners (representing the end users of the dashboard) early
    on and *co-design* the capability together with them instead of presenting the
    end product when it is done.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the case of our sales dashboard, we will need to pull together an overview
    page that will have to contain sales split by category and subcategory. A bar
    chart and a treemap can give a good indication of the relative size of each product
    element (don''t worry about the visualization types at this point; we will learn
    how to pick the best ones in the next chapter). A line chart will be useful to
    show evolution over time, and it will be nice to visualize the distribution of
    sales on the world map to hint at any regional patterns. Lastly, our users will
    need to be able to select specific year ranges and whether to see the domestic
    sales only (generated in the UK), or the international ones, or both: some slicers
    will have to be added to give a simple way to filter the data of interest. By
    keeping the end users'' needs in mind, we put together the sketch design that
    you see in *Figure 6.21*: we are, by choice, far from perfection at this stage,
    but at least we can confidently move on to build visuals knowing what we are aiming
    for:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/B17125_06_21.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 6.21: A rough sketch of the Sales Overview dashboard page: it''s better
    to decide what data you need to visualize to meet your business needs before creating
    any chart'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Go to the **Report**view (first icon on the vertical bar at the left of the
    main window). In the **Visualization** panel on the right (the ones with all the
    icons showing the different chart types), click on the icon with the horizontal
    bar chart (its tooltip label, obtained when you leave the mouse for a second,
    reads **Stacked Bar Chart**). An empty box pops us on the report page: this is
    a placeholder for our bar chart. We now need to tell Power BI what data we want
    this bar chart to show. As shown by the arrows in *Figure 6.22*, we need to drag
    the columns available in the data model (listed in the **Fields** panel on the
    right) and drop them to the properties panel of the visualization. More specifically,
    the column *Category* (open the Product Master Data group to find it) should end
    up in the **Axis** box on the properties panel, while *Sales* (in the Transactions
    table) should be dropped to the **Values** box. As soon as you do that, the bar
    will magically appear on the left, and your first Power BI visual is alive! We
    could change the *look and feel* of the newly created visual (changing colors,
    titles, fonts, labels, and so on) by using the **Format** panel (with the paint
    roller icon), but, for now, we focus on building the rest of the dashboard, and
    we move on to the following chart:![](img/B17125_06_22.png)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 6.22: Building a bar chart in Power BI: pick the columns to be used
    for the axis categories and the height of the bars'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'As we follow through with our sketch, we add now a treemap: this will show
    the relative size of each category/subcategory combination in terms of sales.
    Click on an empty space in the report page and then on the **Treemap** visualization
    icon. To build the visual, drag and drop the fields of interest to the right property
    boxes (*Figure 6.23*): *Category* should go to **Group**, *Subcategory* to **Details**,
    and *Sales* to **Values**. By now, you should have the essence of building charts
    in Power BI: we decide what type of visual we need, and then we connect the data
    columns with the different property fields available for that type of chart:![Chart,
    treemap chart'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Description automatically generated](img/B17125_06_23.png)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 6.23: Treemap visualization: show the relative size of each group and
    subgroup'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You will notice that every chart has got some gray handles at its edges and
    corners. Use them to resize it and move the chart as needed to fit it to the position
    you like. Considering the sketch in mind, start putting the visuals in the place
    where they belong.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The next visual to add is a line chart that shows the sales evolution over
    time. Click on an empty space in the report space and then on the **Line chart**
    icon. You can use *Invoice_time* as the column to control the chart **Axis** while
    *Sales* will determine the **Values** to be visualized. Power BI uses by default
    only the top level of the time hierarchy: this means that, at first, the visual
    will show the aggregate sales by year, displaying only three values, one for each
    year in the 2017-2019 range. Since we would like to show the evolution by month,
    we need to expand to the levels below in the hierarchy by clicking on the bifurcation
    arrow on the top right of the visual (follow *Figure 6.24* as a guide). The next
    level shows the split by year/quarters, but this is not enough as we want to move
    to years/months, so you will need to click on the icon once again: at this point,
    the title of the chart will become **Sales by Year, Quarter and Month**, indicating
    that we obtained what we were after:![](img/B17125_06_24.png)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 6.24: Building a line chart to show the evolution over time: you can
    click on the arrow icons at the top right of the chart to navigate through your
    year/quarter/month/day hierarchy as needed'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The next chart in our Sales Overview page is the world map, showing sales by
    country. The good news is that Power BI automatically recognizes geographical
    names in tables, making it very simple to create map charts. Click on an empty
    space in the report and then on the **Map** visualization (the icon looks like
    a globe; don''t get confused with **Filled map,** which shows a sketched map of
    the United States instead). As done in *Figure 6.25*, drag the column *Country*
    (in the Customer Master Data table) to the **Location** box and then use *Sales*
    to control the **Size** of the bubbles. You now have a world map showing where
    revenues originate from: not surprisingly, the biggest bubble is in the United
    Kingdom, given the prevalence of domestic customers:![Chart, treemap chart'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Description automatically generated](img/B17125_06_25.png)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 6.25: A map chart in its full glory: Power BI recognizes locations like
    countries, states, and city names, making it simple to build maps enriched with
    data'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the map visualization (as in any other chart in Power BI), when you keep
    the mouse on a visual element (in this case, a bubble on the map), you get a tooltip
    label that gives you, by default, the precise value referring to that specific
    element (like the total sales originated in a particular country). Many chart
    types allow you to control what to show in a tooltip by adding fields to the **Tooltips**
    box.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'It is time to add a couple of slicers to let the user select what to visualize
    on the page. The first one will control the time dimension: we want to let the
    users limit all the visuals on our Sales Overview page to a specific time frame
    so that they can assess sales by category, subcategory, or country in a given
    time period. To do so, it will be enough to add a **Slicer** visualization and
    drag the *Invoice_time* column to the **Field** box, as shown in *Figure 6.26*.
    Slicers are very popular in Power BI: you can add as many as you need and mix
    multiple fields into one single slicer to allow multi-level selection. For instance,
    we could combine *Category* and *Subcategory* together so that users could navigate
    the entire product hierarchy as they decide what to focus on:![Graphical user
    interface, chart, line chart'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Description automatically generated](img/B17125_06_26.png)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 6.26: Slicers in Power BI: visually filter your data so you can focus
    on what matters most.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'According to our sketch, our second slicer should discriminate between domestic
    and international sales. Since we do not have a column that specifies which group
    a customer belongs to, we need to add a new column that fulfills the need. Power
    BI provides for **Conditional Columns**: these are calculated columns that apply
    a given list of logical rules (like a set of *if-then* clauses) to determine the
    value for each row. You will notice that this is similar to what we used to do
    with the **Rule Engine** node in KNIME. To add conditional columns in Power BI,
    we need to go back to the Power Query Editor window by clicking on the **Transform
    Data** icon on the **Home** ribbon menu. After selecting the Customer Master Data
    query from the list on the left, we can add our column by going to the **Add Column**
    ribbon and clicking on **Conditional Column**. You will be prompted with a window
    like the one shown in *Figure 6.27*: after choosing the name of the new column
    using the textbox on top, you can define one or more *if-then* clauses, leveraging
    operators such as *equals*, *is greater than*, *includes*, and so on. You can
    append alternative conditions by clicking on the **Add Clause** button and also
    specify the default value to use if none of the conditions is met (the **Else**
    box, at the bottom). In our case, we just want the new column (which we can call
    *Type*) to show `Domestic` if *Country* is `United Kingdom` and `International`
    in any other case:![Graphical user interface, text'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Description automatically generated](img/B17125_06_27.png)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 6.27: Adding a conditional column: define a set of logic clauses to
    control the column''s values'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now that we have the new column *Type* available, we can add a new slicer following
    precisely the same procedure we saw for the time slicer and dropping the new conditional
    column in the **Field** box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's equip our page with a title by going to the **Insert** ribbon menu and
    clicking on the **Text box** icon. We can write any text we like (in this case,
    we enter the page title, which is `Sales Overview`) and play with the font size
    and type to make it look good. By dragging all visuals around and rearranging
    them according to our original sketch, we obtain the page shown in *Figure 6.28*:![](img/B17125_06_28.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 6.28: Sales Overview page: not bad at all for being our first Power
    BI creation!'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'This page is already compelling in its simplicity: it includes several visuals
    showing the key dimensions of interest within our online retail business. The
    slicers enable the users to filter their analysis within a specific time frame
    or country scope. Very importantly, these visuals are all connected with each
    other: the users can interact with a visual element, causing the other visuals
    to rearrange their scope. For example, try to click on any bar in the first category
    bar chart: the line chart will show the sales evolution for that specific category,
    and the world map will rearrange the size of the bubbles considering only the
    revenues generated within that particular country. If we select a subcategory
    from the treemap on the top right, the same will happen, and all other visuals
    will show the details for that subcategory. This is pretty powerful as we are
    letting the users discover the data autonomously, customize the views as they
    like, and, in a way, cook their own data exploration experience versus feeding
    them with a ready-made meal.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In Power BI, you can select multiple elements at once by keeping the *CTRL*
    key pressed. Try keeping the *CTRL* key pressed and click on two different categories
    in the bar chart: the sales of those two categories will be aggregated together
    in the line chart. You can also use this feature to slice the data across visuals.
    For example, click on a bubble in the map chart and, while keeping the *CTRL*
    key pressed, click on a subcategory from the treemap: the line chart will now
    show the time evolution of sales for that subcategory in the specific country
    you selected from the world map.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Since the charts interact with each other, we might need to fine-tune and modify
    their dynamic behavior. For instance, if you click on any category on the bar
    chart, the treemap will *highlight* your selection, meaning that all other categories
    will have their color faded. What if, instead, we want the treemap to react differently
    and, instead of highlighting the category selected in the bar chart, we want it
    to show only that category and filter out all others? Let's take this challenge
    as an opportunity to see how to change the interactions behaviors across visuals
    in Power BI.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Go to the **Format** ribbon menu (it appears when you select any chart) and
    click on the **Edit interactions** icon on the left. Select the visual that *controls*
    others (we can call it **antecedent**) by clicking on it. In our case, let''s
    click on the bar chart showing sales by category. As we do so, three icons will
    appear in the top right of the treemap icon (make sure you resize it accordingly
    to be able to see the three icons popping up). By clicking on these icons (see
    *Figure 6.29*), you will decide how you want the treemap to respond when a selection
    on its antecedent occurs: the **Filter** icon will make that visual filter out
    any other data and "focus" on the selection; the **Highlight** icon (which is
    the default behavior) will cause the visual to emphasize the selection applied
    on the antecedent by coloring it differently; the **None** icon will break the
    connection and make the treemap completely "independent" from any selection on
    the bar chart. In our case, we click on the **Filter** icon (this is the behavior
    we are after) and then click again on the **Edit interactions** icon to get back
    to the normal editing mode:![](img/B17125_06_29.png)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 6.29: Three steps for changing the interaction behaviors across visuals:
    click on Edit interactions, select the antecedent visual, and then click on the
    resulting behavior icon (filter, highlight, or do nothing) on all subsequent visuals'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Not all visual types allow the three types of interactions we have seen in this
    example. For instance, line charts only allow for **Filter** and **None** interactions.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: By looking at the original set of requirements, we realize that we would need
    a few more visuals to complete our endeavor. Both marketing and category managers
    need to go beyond the existing visual overview and access some more detailed tabular
    exhibits. We decide to complete our dashboard by adding a page, called Sales Details,
    equipped with a handful of tables that match our remaining needs.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click on the **+** sign at the bottom of the **Report** view: this will add
    a blank new page to your dashboard. You can rename every page by right-clicking
    on its tab and selecting **Rename Page**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s add a **Matrix** visualization to the new page (don''t get confused
    with the **Table** visualization, which we will use later). Now, add the following
    fields to the various boxes: put *Category* first and then, underneath, *Subcategory*
    in the **Rows** box. After that, drag *Invoice_time* to the **Columns** box, and,
    finally, put *Sales* as **Values**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At this point, the table shows only the top level of the product and the time
    hierarchy (like in *Figure 6.30*), as this is its default behavior. To make it
    useful for our business users, we need to expand those hierarchies by clicking
    on the bifurcation arrow at the top right of the visual (see step 2 in *Figure
    6.30*). Once you have done it for rows, use the **Drill on** drop-down menus to
    select columns (step 3 in *Figure 6.30*) and click again on the bifurcation arrow
    (like we did earlier for rows). You have now obtained quite a rich table, showing
    quarterly sales by category and subcategory:![](img/B17125_06_30.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 6.30: Building a matrix visualization: select the fields to use and
    decide the aggregation levels for both rows and columns'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To make the matrix chart more accessible, we can fine-tune a couple of settings
    to remove some unneeded numbers. Go to the **Format** panel (the one having a
    paint roller icon), scroll down in the list of options, open the **Subtotals**
    view, and switch off **Column subtotals** as we don''t need the yearly sums (see
    step 1 in *Figure* *6.31*). Then scroll down and open the **Field formatting**
    view: from here, set **Value decimal places** to `0`, so we remove all those unneeded
    decimal values, which only create clutter (step 2 in *Figure 6.31*):![Graphical
    user interface, application'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Description automatically generated](img/B17125_06_31.png)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 6.31: Removing the clutter from the matrix visual: deactivate columns
    subtotals and remove decimal digits'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Let''s add a new visual to give users the ability to focus on domestic or international
    sales if needs be. This time, add a **Donut chart** and set its fields as follows
    (we don''t need to look at any screenshots as this procedure has hopefully become
    pretty familiar by now): let''s use the column *Type* as **Legend** and *Sales*
    as **Values**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To complete our detailed view, we shall show aggregated sales by country and
    by article. Let''s start with the country: add a **Table** visual and drag and
    drop the columns **Country** and **Sales** directly into it (just make sure you
    follow the specified order, first **Country** and then **Sales**). By clicking
    on the header of *Sales* in the new table visual, the sales by country are sorted
    by decreasing revenues, which is what we were looking for.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To add the article details, let''s implement another **Table** visual and then
    drag and drop the following columns into it, following this order: *Description*,
    *Quantity*, and *Sales*. Similarly, as done before, click on the *Sales* header
    in the table visual to put the best-selling articles at the top of the list. To
    avoid clutter, remove the decimal digits both here and in the previous table,
    using the **Field formatting** | **Value decimal places** selectors, as we did
    for the matrix view.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We should add a title to this page as well. Go to the **Insert** ribbon menu,
    click on the **Text box** icon and write `Sales Details` into it. For coherence,
    try to put the same font size and type you used for the first page:![](img/B17125_06_32.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 6.32: Sales Details page: our Power BI dashboard is now complete with
    the possibility to get to the granular country and product details'
  prefs: []
  type: TYPE_NORMAL
- en: 'We are finally done: the second page you''ve just pulled together (see *Figure
    6.32*) has nicely provided what we were missing. Users can now dive into subcategory/quarterly/country
    combinations (it will be enough to click on the headers of the tables to filter
    down to the combination they need, keeping *CTRL* pressed) and retrieve the top-selling
    articles within every segmentation of the business.'
  prefs: []
  type: TYPE_NORMAL
- en: 'When you publish your new, shiny, two-page dashboard on the Power BI service
    (if you have an account, even a free one, go to the **Home** ribbon menu and click
    on the **Publish** icon to give it a try) and share its URL with your colleagues,
    you will suddenly become their hero! They can now access the data they need from
    any browser (see *Figure 6.33*) and autonomously deep-dive to the parts of the
    business they are most interested in:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, application'
  prefs: []
  type: TYPE_NORMAL
- en: Description automatically generated](img/B17125_06_33.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 6.33: Browser view of the Sales Overview page once published on the
    Power BI service: our dashboard looks great from the cloud'
  prefs: []
  type: TYPE_NORMAL
- en: 'When traveling, our colleagues can even check sales results while *on the go*:
    you can see in *Figure 6.34* how our dashboard looks in the Power BI app on a
    smartphone:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A picture containing text, electronics, screenshot'
  prefs: []
  type: TYPE_NORMAL
- en: Description automatically generated](img/B17125_06_34.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 6.34: The Sales Details page accessed through the Power BI app for iPhone:
    you can access your data from virtually anywhere'
  prefs: []
  type: TYPE_NORMAL
- en: The maintenance of the dashboard is relatively lightweight as the updating of
    all visuals can now happen even daily without much effort. The various queries
    we have defined know where to pull the data from and what transformation steps
    are required. When new data pops up, it will be enough to refresh the dashboard
    by just clicking on the **Refresh** icon on the **Home** ribbon menu, and the
    whole dashboard will be nicely up to date.
  prefs: []
  type: TYPE_NORMAL
- en: Not only have you finally democratized access to sales data in the company through
    a sustainable process that can now be repeated effortlessly, but you have also
    saved the financial analyst a lot of her precious time. She will not need to answer
    all the many "ad hoc" questions that she frequently used to receive and that forced
    her to set up painful manual extractions every time. As the data is now readily
    available, it is faster and more convenient for people to go and get what they
    need by themselves, giving back to our financial analyst the precious time she
    can use for more advanced analytics. It's a real *win-win*, and you should feel
    very proud of having enabled all this.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'By completing this chapter, you have added another precious instrument to your
    data analytics practitioners'' backpack: Power BI. You have learned how to load
    data and set up a routine of transformation steps required for cleaning that data
    and making it useful. You have seen how to define the relationships that connect
    all tables into a single and coherent data model. You have also seen what it means
    to build interconnected visuals that allow for human interaction. You have created
    a dashboard that will enable business users to explore the data they need when
    they need it, *fishing* for insights and unveiling business opportunities in complete
    autonomy.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, think about the amount of data that lies largely unutilized and inaccessible
    in company databases (or even in Excel files stored on individuals'' laptops).
    The business opportunities that wait to be unlocked by making this data visually
    accessible through a simple dashboard are vast and, in many cases, reasonably
    at hand with tools like Power BI: what you have learned in this chapter can make
    you a hero to many.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next chapter, we will learn about some practical guidelines to sharpen
    our data visualization skills: the objective is to make the best out of every
    single chart we produce from now on.'
  prefs: []
  type: TYPE_NORMAL
