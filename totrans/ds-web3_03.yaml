- en: '3'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Working with Off-Chain Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we learned that on-chain data serves as the primary
    source of Web3 data analysis. It is open, distributed, and trustworthy. While
    on-chain data will be key to answering most business data science questions, it
    is essential to complement it with relevant information from off-chain data sources,
    which is the focus of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Consider a scenario where we receive a request to assess the economic relevance
    of a smart contract. We can query the number of tokens locked in it, but to finalize
    the analysis, we need to determine the monetary value of those tokens. To accomplish
    this, we must integrate on-chain data with prices, often derived from off-chain
    sources.
  prefs: []
  type: TYPE_NORMAL
- en: Prices, news, and opinions are not stored on-chain and must be retrieved from
    external sources. In this chapter, we will delve into those sources and acquire
    data from selected APIs. Specifically, we will discuss alternatives for fetching
    prices, analyze a crypto news aggregator, and explore the significance of social
    media, particularly X (formerly Twitter).
  prefs: []
  type: TYPE_NORMAL
- en: Off-chain data differs in nature from on-chain data, and it is crucial to exercise
    caution regarding reliability when dealing with these sources. The sources discussed
    in this chapter are typically centralized, meaning the entities have complete
    control over their data. This directly affects the datasets we will utilize, as
    data points may be subject to deletion, missing entries, or manipulation. In contrast,
    on-chain data transactions, as a rule, cannot be modified.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter specifically covers the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Integrating prices into our dataset
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Incorporating news into our dataset
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding social network data to our dataset
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will be using **Tweepy**, a Python library that allows us to easily interact
    with X. With Tweepy, we can fetch, post, and retrieve information about tweets,
    users, and much more. To start using Tweepy, we first need to register for a developer
    account on the Twitter developer website and obtain a set of API keys, as explained
    in *Appendix 2*. The documentation for Tweepy is available at [https://docs.tweepy.org/en/stable/](https://docs.tweepy.org/en/stable/).
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have not worked with Tweepy before, it can be installed with the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Additionally, we’ll be utilizing Plotly **graph objects** and Plotly **Express**,
    two visualization libraries that empower us to create interactive visualizations
    with Python. Plotly Express is a high-level library that allows us to plot common
    types of graphs—such as scatter plots, line charts, maps, pie charts, and more—with
    minimal lines of code. The documentation for Plotly Express can be found at [https://plotly.com/python/plotly-express/](https://plotly.com/python/plotly-express/).
  prefs: []
  type: TYPE_NORMAL
- en: Plotly graph objects offer more flexibility and control over visualizations,
    allowing the creation of complex plots with a high degree of customization. The
    documentation for Plotly graph objects is available at [https://plotly.com/python/graph-objects/](https://plotly.com/python/graph-objects/).
  prefs: []
  type: TYPE_NORMAL
- en: 'To use both libraries, we need to have the Plotly library installed. If you
    have not worked with Plotly before, it can be installed with the following code
    snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: You can find Jupyter notebooks containing examples discussed in this chapter
    in the book’s GitHub repository at [https://github.com/PacktPublishing/Data-Science-for-Web3/tree/main/Chapter03](https://github.com/PacktPublishing/Data-Science-for-Web3/tree/main/Chapter03).
    We recommend reading through the code files in the `Chapter03` folder to follow
    along.
  prefs: []
  type: TYPE_NORMAL
- en: Introductory example – listing data sources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let’s examine this headline:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Dogecoin gains 25% after Elon Musk confirms Tesla will accept DOGE** **for
    merchandise**'
  prefs: []
  type: TYPE_NORMAL
- en: '(Source – Cointelegraph: [https://cointelegraph.com/news/dogecoin-gains-25-after-elon-musk-confirms-tesla-will-accept-doge-for-merchandise](https://cointelegraph.com/news/dogecoin-gains-25-after-elon-musk-confirms-tesla-will-accept-doge-for-merchandise).)'
  prefs: []
  type: TYPE_NORMAL
- en: 'This headline references three data sources:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Headline (news)**: An online newspaper specializing in the Web3 industry
    generates this headline. Blockchain news is gradually entering mainstream platforms,
    and similar information can also be found in traditional financial news indexes
    such as Reuters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Prices**: The headline refers to the price variation of a particular cryptocurrency.
    Price data is not typically fetched from the on-chain sources; rather, it is a
    piece of information data scientists find useful to integrate from a third-party
    data source.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**X (formerly Twitter)/social networks**: Numerous market-impact events unfold
    on social networks, where key figures in the Web3 ecosystem have established significant
    online reputations. A single tweet from these influential individuals can alter
    prices or bring attention to a scam or failed negotiation. Most Web3 companies
    maintain a presence on X, often before creating a LinkedIn page. In this case,
    the impact on Dogecoin, as mentioned in the headline, originated from Elon Musk’s
    tweet: “*Tesla will make some merch buyable with Doge and see how it goes*” (source:
    [https://twitter.com/elonmusk/status/1470703708677840896](https://twitter.com/elonmusk/status/1470703708677840896)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We described three off-chain data sources that will be relevant for our business
    data science projects and that we must learn how to consume in a data scientist-friendly
    format to integrate them effectively. We will discuss each of them in the subsequent
    sections.
  prefs: []
  type: TYPE_NORMAL
- en: Adding prices to our dataset
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Price information is typically stored off-chain, and various sources provide
    access to this data. Some of the most popular APIs include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: CoinGecko
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CoinMarketCap
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Binance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chainlink
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'OHLC data: Kraken'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each API comes with its own limitations, which we need to consider when deciding
    whether to integrate them into our projects. Specific details can be found in
    their respective documentation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Regarding price data, it is important to understand how it is calculated, as
    in these examples:'
  prefs: []
  type: TYPE_NORMAL
- en: CoinMarketCap calculates an asset’s price by considering the volume-weighted
    average of all markets where the asset is traded. This approach is based on the
    notion that more liquid markets are less susceptible to price fluctuations or
    manipulation and, therefore, more reliable.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Binance reports prices based on transactions conducted on their platform. Depending
    on the pair, it provides the price of the last trade executed in their market.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s briefly analyze each of them.
  prefs: []
  type: TYPE_NORMAL
- en: CoinGecko
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **CoinGecko** ([https://www.coingecko.com/](https://www.coingecko.com/))
    documentation is straightforward and easy to understand, and they offer a free
    tier that does not require any registration. With their URL engine, which can
    build the endpoint URL based on what the user needs, making the requests more
    efficient.
  prefs: []
  type: TYPE_NORMAL
- en: We can find their documentation at [https://www.coingecko.com/api/documentation](https://www.coingecko.com/es/api/documentation).
    Let’s test the `simple/price` endpoint, which is accessible through this link,
    too.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.1 – CoinGecko API view](img/B19446_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.1 – CoinGecko API view
  prefs: []
  type: TYPE_NORMAL
- en: 'As shown in *Figure 3**.2*, the *required* parameters for this endpoint are
    `ids` and `vs_currencies`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.2 – Partial view of the simple/price query parameters](img/B19446_03_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.2 – Partial view of the simple/price query parameters
  prefs: []
  type: TYPE_NORMAL
- en: 'There are also several optional parameters, such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`include_market_cap`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`include_24hr_vol`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`include_24hr_change`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`include_last_updated_at`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`precision`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To obtain the *ID* for a specific asset, we go to CoinGecko’s main page and
    search for the asset by name. If, for example, we want to fetch the current price
    of Bitcoin, we would need to add Bitcoin''s ID in our query. To look for it, we
    go to CoinGecko''s main page and type `Bitcoin` in the search bar, as shown in
    *Figure 3**.3*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.3 – CoinGecko search bar](img/B19446_03_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.3 – CoinGecko search bar
  prefs: []
  type: TYPE_NORMAL
- en: 'This will lead us to the Bitcoin information page on CoinGecko ([https://www.coingecko.com/en/coins/bitcoin](https://www.coingecko.com/en/coins/bitcoin))
    where, as shown in *Figure 3**.4*, we can find the API ID that we will source
    as a parameter in the query:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.4 – CoinGecko Bitcoin (BTC) page view](img/B19446_03_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.4 – CoinGecko Bitcoin (BTC) page view
  prefs: []
  type: TYPE_NORMAL
- en: For our `simple/price` request, we also need to input the `vs_currencies` parameter,
    which determines the currency of the price. In this case, we will use `usd`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we have filled in the mandatory requirements on the API page, we can press
    the blue **Execute** button, which will return the URL we can use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Let’s see how this works in `prices.ipynb`.
  prefs: []
  type: TYPE_NORMAL
- en: CoinMarketCap
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'CoinMarketCap ([https://coinmarketcap.com/](https://coinmarketcap.com/)) provides
    extensive documentation, available at the following link: [https://coinmarketcap.com/api/documentation/v1/](https://coinmarketcap.com/api/documentation/v1/).
    Although this documentation may seem overwhelming, for our purposes, locate the
    **CRYPTOCURRENCY** category on the left-hand side of the page, accessible through
    a drop-down menu containing several endpoints related to prices:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.5 – CoinMarketCap left bar view](img/B19446_03_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.5 – CoinMarketCap left bar view
  prefs: []
  type: TYPE_NORMAL
- en: 'For our purposes, we will utilize the endpoint documented at this link: [https://coinmarketcap.com/api/documentation/v1/#operation/getV2CryptocurrencyQuotesLatest](https://coinmarketcap.com/api/documentation/v1/#operation/getV2CryptocurrencyQuotesLatest).'
  prefs: []
  type: TYPE_NORMAL
- en: CoinMarketCap offers multiple tiers of services with varying API limits and
    endpoints. For this introductory explanation, we will rely on the free tier.
  prefs: []
  type: TYPE_NORMAL
- en: 'We extract the latest Bitcoin price using CoinMarketCap’s API in the `prices.ipynb`
    notebook. To identify the ID of a specific coin, we can execute the map ID endpoint,
    which shows all cryptocurrencies listed on the CoinMarketCap website with their
    unique ID. Additional details about this endpoint can be accessed in the documentation:
    [https://coinmarketcap.com/api/documentation/v1/#operation/getV1CryptocurrencyMap](https://coinmarketcap.com/api/documentation/v1/#operation/getV1CryptocurrencyMap).
    The ID for Bitcoin is `slug` parameter, which consists of the string name of the
    cryptocurrency – in our case, simply `bitcoin`.'
  prefs: []
  type: TYPE_NORMAL
- en: A note on links and scams
  prefs: []
  type: TYPE_NORMAL
- en: Highly sophisticated scams can deceive victims through search engines. Accessing
    a project, especially smaller or less-known ones that we have not visited before,
    by clicking from a search engine where scammers can manipulate web pages into
    top suggestions elevates the risks. CoinGecko and CoinMarketCap have proven to
    be reliable for having authentic links to official websites. A more in-depth exploration
    of security will be provided in [*Chapter 10*](B19446_10.xhtml#_idTextAnchor294).
  prefs: []
  type: TYPE_NORMAL
- en: Binance
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is one of the most important centralized exchanges currently active. The
    exchange offers a basic data plan that does not require registration. The documentation
    is organized based on the products available on the exchange.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.6 – Binance main menu](img/B19446_03_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.6 – Binance main menu
  prefs: []
  type: TYPE_NORMAL
- en: To extract the spot price of Bitcoin, navigate to the **Spot/Margin/Savings/Mining**
    tab, as illustrated in *Figure 3**.6*. The documentation and available endpoints
    are listed in a drop-down menu on the left-hand side of the page.
  prefs: []
  type: TYPE_NORMAL
- en: 'The URL for the endpoint is composed of two parts – a general base endpoint
    and the query part:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The base endpoint is located in the **General Info** section, accessible at
    this link: [https://binance-docs.github.io/apidocs/spot/en/#general-info](https://binance-docs.github.io/apidocs/spot/en/#general-info)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 3.7 – Binance General Info view](img/B19446_03_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.7 – Binance General Info view
  prefs: []
  type: TYPE_NORMAL
- en: 'The query part we will use is as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The documentation for this code is in the *Market Data Endpoints* section available
    at this link: [https://binance-docs.github.io/apidocs/spot/en/#symbol-price-ticker](https://binance-docs.github.io/apidocs/spot/en/#symbol-price-ticker).'
  prefs: []
  type: TYPE_NORMAL
- en: In `prices.ipynb`, we extract the latest Bitcoin price from this source. The
    endpoint requires a `symbol` parameter, expressed in a trading pair format, and
    we use `BTCUSDT`.
  prefs: []
  type: TYPE_NORMAL
- en: To obtain the list of available trading pairs, there are two options. The first
    is on the Binance platform, and the second is on TradingView, where an account
    can be created at [https://es.tradingview.com/](https://es.tradingview.com/).
  prefs: []
  type: TYPE_NORMAL
- en: 'On TradingView’s main page, go to **Symbol Search**, as shown in *Figure 3**.8*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.8 – TradingView Symbol Search bar](img/B19446_03_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.8 – TradingView Symbol Search bar
  prefs: []
  type: TYPE_NORMAL
- en: 'This opens a dropdown displaying the complete list of trading pairs. To filter
    by exchange, modify the **All sources** parameter, as shown in *Figure 3**.9*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.9 – TradingView sources](img/B19446_03_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.9 – TradingView sources
  prefs: []
  type: TYPE_NORMAL
- en: 'When the search box opens on `Binance` and press *Enter*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.10 – TradingView source selection](img/B19446_03_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.10 – TradingView source selection
  prefs: []
  type: TYPE_NORMAL
- en: This will display all the trading pairs for the specific exchange under the
    **SYMBOL** column. This symbol is the string we will pass as a parameter to our
    query.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.11 – Binance pairs/symbols as shown on TradingView](img/B19446_03_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.11 – Binance pairs/symbols as shown on TradingView
  prefs: []
  type: TYPE_NORMAL
- en: Binance’s API provides comprehensive data beyond price information, making it
    a valuable resource for exploration.
  prefs: []
  type: TYPE_NORMAL
- en: Oracles – Chainlink
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Oracles** serve as bridges connecting a smart contract to real-world data.
    Consider an insurance smart contract designed to provide coverage against specific
    climate-related events, such as rain. In the closed environment of its blockchain,
    how can the smart contract ascertain whether it is currently raining or not? The
    solution lies in oracles, which establish the link between the smart contract
    and external information, ensuring that the necessary data is reflected within
    the blockchain.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Chainlink** stands out as one of the most widely used sets of oracles. This
    chapter focuses on price feeds for smart contracts, though there are others such
    as proof of reserve feeds or NFT price feeds (explored in [*Chapter 4*](B19446_04.xhtml#_idTextAnchor145)).
    Documentation for the steps discussed is available at [https://docs.chain.link/data-feeds/api-reference](https://docs.chain.link/data-feeds/api-reference).'
  prefs: []
  type: TYPE_NORMAL
- en: Most price consensus occurs off-chain, and when it is necessary to update the
    blockchain, the agreed-upon price is recorded on-chain by price feed oracles.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, the Bitcoin price is continuously updated and can be seen at [https://data.chain.link/ethereum/mainnet/crypto-usd/btc-usd](https://data.chain.link/ethereum/mainnet/crypto-usd/btc-usd).
    Prices are updated on-chain based on *trigger parameters*, as shown in *Figure
    3**.13*:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Deviation threshold**: Triggered when off-chain data deviates by more than
    0.5% from the last updated price.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Heartbeat**: Activated after a specified time since the last update has elapsed.
    Each price feed has its specific time heartbeat. For the Bitcoin price feed, this
    interval is set to one hour. Consequently, the feed will be refreshed once an
    hour has passed, provided the previous trigger has not occurred before that.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If we want to source data from these smart contracts, we need to be aware of
    the heartbeat and check its timestamp to ensure that the latest answer is recent
    enough for our dataset to add it.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.12 – Chainlink price feed information view](img/B19446_03_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.12 – Chainlink price feed information view
  prefs: []
  type: TYPE_NORMAL
- en: To extract the latest price or the **latest round** price, we will need the
    contract address, as indicated in the second red square of the preceding figure.
  prefs: []
  type: TYPE_NORMAL
- en: The contract `prices.ipynb`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Available `read` functions for the price feed smart contract include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`decimals()`: Returns the number of decimals in the response. In the `prices.ipynb`
    example, this value is `8`, retrieved with the following code snippet:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'getRoundData(uint80): Returns the data in a specific round.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`latestRoundData()`: Returns the latest round data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`version()`: Returns the contract version.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To get the price, we need to execute the `latestRoundData` function, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is a list composed of the following elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `roundId` | Each time the oracle is updated, it is known as a `roundId` value.
    To retrieve the answer of a historical round, we need to call the `getRoundData(uint80)`
    function and provide this number as a parameter. |'
  prefs: []
  type: TYPE_TB
- en: '| `answer` | This returns the price of the asset, the desired data point. |'
  prefs: []
  type: TYPE_TB
- en: '| `startedAt` | This is the timestamp when the round started. |'
  prefs: []
  type: TYPE_TB
- en: '| `updatedAt` | This is the timestamp when the round was updated. |'
  prefs: []
  type: TYPE_TB
- en: Table 3.1 – Oracle response
  prefs: []
  type: TYPE_NORMAL
- en: There is one last element in the response (`answeredInRound`), which is a legacy
    variable and is no longer used.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the `answer` is retrieved, translate it to traditional decimal format
    by moving the comma as many places as indicated by the `decimals()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.13 – Bitcoin price as fed by Chainlink](img/B19446_03_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.13 – Bitcoin price as fed by Chainlink
  prefs: []
  type: TYPE_NORMAL
- en: OHLC – Kraken
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Open, High, Low, Close** (**OHLC**) data is a specific dataset where each
    row includes a timestamp and four columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Open price** (**O**): This is the asset’s price at the beginning of the analyzed
    period'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**High price** (**H**): This is the highest price of the asset during the analyzed
    period'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Low price** (**L**): This is the lowest price of the asset during the analyzed
    period'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Closing price** (**C**): This is the last asset’s price at the end of the
    analyzed period'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'An example can be seen in *Table 3.2*:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Timestamp** | **Open** | **High** | **Low** | **Close** |'
  prefs: []
  type: TYPE_TB
- en: '| `2022-12-06 00:00:00` | `16965.7` | `17089.1` | `16965.7` | `17011.0` |'
  prefs: []
  type: TYPE_TB
- en: Table 3.2 – An example of OHLC data
  prefs: []
  type: TYPE_NORMAL
- en: The OHLC columns provide information about the price variations of an asset
    over a specific period of time. *Figure 3**.14* shows an example of a candlestick
    chart that can be created using OHLC data.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.14 – Candlestick design](img/B19446_03_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.14 – Candlestick design
  prefs: []
  type: TYPE_NORMAL
- en: Each row of the dataset can be used to plot one candlestick. The *Close* and
    *Open* prices inform us whether, during a given period of time, the asset’s price
    decreased (*Close* is lower than *Open*) or increased (*Close* is higher than
    *Open*). This information is used to color the body of the bar.
  prefs: []
  type: TYPE_NORMAL
- en: The OHLC data can include additional columns such as traded volume or the number
    of trades. See the example in `prices.ipynb`.
  prefs: []
  type: TYPE_NORMAL
- en: Technical indicators such as moving averages or Bollinger bands, which are popular
    in trading, can also be plotted using OHLC data.
  prefs: []
  type: TYPE_NORMAL
- en: The **Kraken** centralized exchange provides OHLC data in its open API, which
    is very well documented. As we learned with Binance, when using exchanges, every
    price search has to be expressed as a trading pair.
  prefs: []
  type: TYPE_NORMAL
- en: The documentation can be found at [https://docs.kraken.com/rest/#section/General-Usage](https://docs.kraken.com/rest/#section/General-Usage).
    The endpoint we will use is explained at [https://docs.kraken.com/rest/#tag/Market-Data/operation/getOHLCData](https://docs.kraken.com/rest/#tag/Market-Data/operation/getOHLCData).
  prefs: []
  type: TYPE_NORMAL
- en: 'When working with OHLC data, it is important to consider the time intervals
    or granularity of the data. Prices that may appear high or low in a short time
    frame may be insignificant when analyzed over a longer period. Time granularity
    will depend on the API. Usually, it is possible to extract seconds, minutes, hours,
    and days and a combination of those. In Kraken, it is possible to extract with
    the following parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.15 – Interval parameter expressed in seconds](img/B19446_03_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.15 – Interval parameter expressed in seconds
  prefs: []
  type: TYPE_NORMAL
- en: To plot a candlestick chart, we can use the `plotly.graph_objects` library.
    In `prices.ipynb`, we fetch the OHLC dataset of the Bitcoin price with a four-hour
    period from April 01 to April 05, 2023, and use the library to plot the corresponding
    candlesticks.
  prefs: []
  type: TYPE_NORMAL
- en: Final thoughts on prices
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'After our thorough discussion on prices, here are a few key points to remember:'
  prefs: []
  type: TYPE_NORMAL
- en: Not all fiat currencies are supported by these APIs. For currencies that are
    not the US dollar or Euro, the API may reflect the central bank’s official exchange
    rate with the US dollar, which can differ significantly from the real market price.
    This is especially true for countries with regulated economies or high inflation.
    It is necessary to understand where the APIs are sourcing their data from before
    adding those prices to our dataset.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prices of tokens or coins are not the sole products that we may have to track.
    We could also receive a request to track floor prices of an NFT collection.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At the time of this writing, Web3 assets still exhibit significant price variations
    in short periods of time. When calculating averages, we have to be mindful of
    outliers that may affect them. Data sourced from low liquidity markets, such as
    small exchanges are more prone to outliers. Read the description of how those
    prices are calculated and compare them regularly with other sources or create
    a volume-weighted average as CoinMarketCap does.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: News often triggers price fluctuations, so let’s now explore a dedicated news
    aggregator that keeps track of relevant information in the Web3 world.
  prefs: []
  type: TYPE_NORMAL
- en: Adding news to our dataset
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A professor once mentioned that in the crypto world, news takes only five minutes
    to impact the price of an asset.
  prefs: []
  type: TYPE_NORMAL
- en: News is not only important for its effect on prices but marketing teams may
    also request analysis of the social impact of a brand, a campaign, or a product,
    or it may be necessary to source an algorithm, among other applications. For that
    purpose, data scientists need news formatted for analysis.
  prefs: []
  type: TYPE_NORMAL
- en: As of today, there is a dedicated source named **CryptoPanic**, a data aggregator
    that specifically indexes news relevant to the Web3 ecosystem. The link to the
    website is https://cryptopanic.com/.
  prefs: []
  type: TYPE_NORMAL
- en: Its data can be consumed through an API and the API key is available upon registration.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the main page, go to the **Sign In** tab on the left menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.16 – An overview of the CryptoPanic main view](img/B19446_03_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.16 – An overview of the CryptoPanic main view
  prefs: []
  type: TYPE_NORMAL
- en: 'If it is your first time signing up, you will need to confirm your email. After
    that, you are registered. Click on the **Develop** tab located on the home page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.17 – The Develop tab](img/B19446_03_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.17 – The Develop tab
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on either of the **API** tabs on the new page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.18 – API documentation](img/B19446_03_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.18 – API documentation
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on **API Keys** and it will open a new page with the credentials:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.19 – API keys](img/B19446_03_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.19 – API keys
  prefs: []
  type: TYPE_NORMAL
- en: 'The documentation is available at this link: [https://cryptopanic.com/developers/api/](https://cryptopanic.com/developers/api/).'
  prefs: []
  type: TYPE_NORMAL
- en: We will query with the traditional `requests` library, adding our API key to
    the endpoints listed in the documentation. A step-by-step guide to fetching a
    list of news can be seen on `news.ipynb`.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are filters that can be applied to our requests to limit the amount of
    information received. The filters include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Currency: The asset referred to in the indexed news'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Region: The language'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'UI: This included the following categories – rising, hot, bullish, bearish,
    important, saved, and lol'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Kind: This is either media or news'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The filters can be combined, and each can accept multiple parameters. For example,
    it is possible to fetch news in English and Spanish by adding the following string
    to the URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'In `news.ipynb`, we apply two filters, currency and kind:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The API also offers professional paid options (named “pro” on their website)
    that enable access to extra metadata or to get links to the original sources.
  prefs: []
  type: TYPE_NORMAL
- en: 'What is also very interesting about this API is that the request returns the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: The community’s opinion on the sentiment of the headline. This can be particularly
    useful for sourcing a sentiment analysis algorithm, such as the one we will build
    in [*Chapter 8*](B19446_08.xhtml#_idTextAnchor250).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The timestamp of the published news. This enables us to join the headlines with
    prices, allowing us to compare the historical impact of the news on prices.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As seen in the introductory example at the beginning of the chapter, what happens
    on social networks can heavily impact prices even before any journalist writes
    about it. Therefore, it is important to add their input to our dataset.
  prefs: []
  type: TYPE_NORMAL
- en: Adding social networks to our dataset
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Web3 is an online industry so everything that happens online, from opinions
    to interactions, holds significant influence.
  prefs: []
  type: TYPE_NORMAL
- en: '**Sentiment analysis**, gauging reactions to products or tokens, plays a crucial
    role for marketing teams, analysts, and traders alike. A noteworthy example illustrating
    the importance of such metrics is the CoinStats Fear and Greed indicator. This
    index, available at [https://coinstats.app/fear-and-greed/](https://coinstats.app/fear-and-greed/),
    incorporates social media posts, among other factors, to measure market sentiment.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.20 – Crypto Fear and Greed Indicator](img/B19446_03_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.20 – Crypto Fear and Greed Indicator
  prefs: []
  type: TYPE_NORMAL
- en: According to CoinStats’ explanation, the index combines data from various sources.
    To capture psychological momentum, they also draw insights from social media interactions
    on X, focusing on specific hashtags that carry both fear and greed components,
    which contribute to the overall calculation. The social media component holds
    a 15% weight in the final index, as per the documentation.
  prefs: []
  type: TYPE_NORMAL
- en: X (formerly Twitter)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: X is probably the most important social media platform regarding Web3 conversations
    as of the day of this writing, and the service needs no presentation.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: We will use *X* and *Twitter* interchangeably. Although the platform’s user
    interface now bears the name X, on the developer tools side and in all URLs, it
    retains its former name, Twitter.
  prefs: []
  type: TYPE_NORMAL
- en: 'A paradigmatic example of how what happens on X impacts the industry is the
    majority opinion that the FTX exchange speedily crashed after Binance announced
    on their official X page, “*As a result of corporate due diligence, as well as
    the latest news reports regarding mishandled customer funds and alleged US agency
    investigations, we have decided that we will not pursue the potential acquisition
    of FTX.com*” (source: [https://twitter.com/binance/status/1590449161069268992](https://twitter.com/binance/status/1590449161069268992)).'
  prefs: []
  type: TYPE_NORMAL
- en: Access to X data became a paid service in February 2023, with subscription details
    available through the developer portal at [https://developer.twitter.com/](https://developer.twitter.com/).
    The exercises in this section leverage the Basic subscription and API v2.
  prefs: []
  type: TYPE_NORMAL
- en: To obtain API keys with reading privileges, we need to create a project and
    connect an app, as detailed in *Appendix 2*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Most user tweets are public, and a tailored query allows us to fetch tweets
    based on diverse criteria such as user, topic, language, or location. In `social.ipynb`,
    we extract the latest 100 tweets containing the words *Bitcoin* and *BTC*, excluding
    retweets and limited to the English language, using the following query:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Additional instructions for constructing effective queries can be found at [https://developer.twitter.com/en/docs/twitter-api/tweets/search/integrate/build-a-query](https://developer.twitter.com/en/docs/twitter-api/tweets/search/integrate/build-a-query).
  prefs: []
  type: TYPE_NORMAL
- en: Checkpoint
  prefs: []
  type: TYPE_NORMAL
- en: A step-by-step version of the tweet extraction pipeline is detailed in `social.ipynb`.
    Alternatively, the resulting CSV file has been uploaded to the book’s GitHub and
    is accessible at `tweets_100.csv`.
  prefs: []
  type: TYPE_NORMAL
- en: 'With v2 endpoints, it is possible to request `annotations`, adding contextual
    information to tweets. This feature is valuable for data analysis as it normalizes
    content within a limited taxonomy. For instance, consider the tweet shown in *Figure
    3**.21*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.21 – Example tweet (ID: 1731806102101033329)](img/B19446_03_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.21 – Example tweet (ID: 1731806102101033329)'
  prefs: []
  type: TYPE_NORMAL
- en: X offers entity recognition and context annotations for this tweet. `Person`,
    `Place`, `Product`, `Organization`, and `Other`.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three entities recognized in the body of the tweet. Two are organizations
    –`Blackrock` and `SEC` – and the third is of the `Other` category, when referring
    to `Bitcoin`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The complete dictionary of entities for this tweet can be seen in `social.ipynb.`
  prefs: []
  type: TYPE_NORMAL
- en: X further enriches tweet information through **context annotations**, which
    are inferred from the semantics of the text, keywords, and hashtags. A comprehensive
    list of keywords, hashtags, and handles has been developed, and tagged to specific
    contexts. If any of these elements appear in a tweet, they are appropriately tagged.
    As of June 2022, there are more than 80 context domains. The link to the relevant
    documentation can be found in the *Further* *reading* section.
  prefs: []
  type: TYPE_NORMAL
- en: 'One example follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: This information is valuable for categorization and NLP machine learning algorithms.
  prefs: []
  type: TYPE_NORMAL
- en: The complete list of context annotations for this tweet is available in `social.ipynb`.
  prefs: []
  type: TYPE_NORMAL
- en: A commonly employed method by marketing and product teams seeking insights into
    words associated with products or brands involves analyzing customer reviews,
    feedback, or social media comments. This approach provides a deeper understanding
    of the audience and their perceptions. One graphical way to achieve this is by
    creating word clouds, which highlight the most frequently mentioned words. This
    aids in identifying customer sentiments, preferences, and pain points at a glance.
  prefs: []
  type: TYPE_NORMAL
- en: 'To reproduce a word cloud, we utilize tweets as the data source, specifically
    extracting 1,000 tweets targeting a protocol in the NFT space introduced in [*Chapter
    4*](B19446_04.xhtml#_idTextAnchor145) – namely, OpenSea. To perform this extraction,
    we used the following query:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Checkpoint
  prefs: []
  type: TYPE_NORMAL
- en: A step-by-step version of the tweet extraction pipeline is detailed in `social.ipynb`.
    Alternatively, the resulting CSV file has been uploaded to the book’s GitHub and
    is accessible at `tweets_df.csv`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the notebook, we will find libraries and methods to clean the tweets to
    normalize them before counting the frequency of appearance of the words. These
    are traditional NLP steps that we will describe in more detail in [*Chapter 8*](B19446_08.xhtml#_idTextAnchor250).
    The resulting word cloud for OpenSea is shown in *Figure 3**.22*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.22 – OpenSea word cloud](img/B19446_03_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.22 – OpenSea word cloud
  prefs: []
  type: TYPE_NORMAL
- en: Once we learn to extract social off-chain data, we can combine it with on-chain
    data to expand our analysis. Tweets, Discord conversations, Telegram interactions,
    and other community forums have timestamps and geo-location tags that can be used
    to merge off-chain activity with transactions occurring on-chain. This helps analysts
    infer the active hours of a chain or a protocol, deduce the geographic location
    of customers, and more. These types of analyses are typically requested by marketing
    teams to improve the direction of their campaigns.
  prefs: []
  type: TYPE_NORMAL
- en: An example of a company leveraging this connection between the two worlds is
    Spindl, which is working on merging Web2 marketing data sources with on-chain
    data to build the first marketing funnel tool for the Web3 space.
  prefs: []
  type: TYPE_NORMAL
- en: A note on Twitter profiles to follow
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some interesting profiles to follow for Web3 data analysis/content,
    among many others:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@``0xGembus`: [https://twitter.com/0xGembus](https://twitter.com/0xGembus)'
  prefs: []
  type: TYPE_NORMAL
- en: '`@``0xAtomist`: [https://twitter.com/0xAtomist](https://twitter.com/0xAtomist)'
  prefs: []
  type: TYPE_NORMAL
- en: '`@``hildobby_`: [https://twitter.com/hildobby_](https://twitter.com/hildobby_)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Other social media data sources to explore are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Reddit**: This platform hosts numerous Web3-related conversations in the
    form of Subreddits. The posts and comments within these Subreddits offer valuable
    information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**BitcoinTalk.org forum**: The public posts on this forum also serve as an
    interesting source of information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we examined various off-chain sources of data relevant to the
    Web3 economy, categorizing the analysis into three main areas. For prices, we
    explored multiple APIs from traditional sources to exchanges, as well as an oracle.
    With news, we learned how to extract real-time headlines from the best dedicated
    news indexer as of the time of writing – namely, CryptoPanic. For X (formerly
    Twitter), we utilized its API to gauge the sentiment around an NFT protocol. This
    list of resources is not exhaustive, and we have only scratched the surface of
    the uses we can give to all this data.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will delve into NFTs and their applications in the gaming,
    art, and name service industries.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To complement this chapter, the following links may help:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Prices:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Support CoinMarketCap. (2020). Security check. How are prices calculated on
    CoinMarketCap? [https://support.coinmarketcap.com/hc/en-us/articles/360015968632-How-are-prices-calculated-on-CoinMarketCap-](https://support.coinmarketcap.com/hc/en-us/articles/360015968632-How-are-prices-calculated-on-CoinMarketCap-)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Crypto API documentation. (n.d.). CoinGecko. [https://www.coingecko.com/api/documentation](https://www.coingecko.com/es/api/documentation)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Account. (n.d.). Cryptocurrency Prices, Charts And Market Capitalizations |
    CoinMarketCap. [https://coinmarketcap.com/api/documentation/v1/](https://coinmarketcap.com/api/documentation/v1/)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: CoinMarketCap. (n.d.). Most trusted cryptocurrency market data API | CoinMarketCap.
    coinmarketcap.com. [https://coinmarketcap.com/api/faq](https://coinmarketcap.com/api/faq)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Useful Chainlink tutorials. Chainlink. (2022). Learning resources. Chainlink
    documentation: [https://docs.chain.link/getting-started/other-tutorials/](https://docs.chain.link/getting-started/other-tutorials/)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To further expand on oracles. Chainlink, *What is an Oracle in blockchain?
    » explained*. Blockchain Oracles for Hybrid Smart Contracts | Chainlink: [https://chain.link/education/blockchain-oracles](https://chain.link/education/blockchain-oracles)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Data feeds API reference. (n.d.). Chainlink documentation. [https://docs.chain.link/data-feeds/api-reference](https://docs.chain.link/data-feeds/api-reference)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Price feed contract addresses. (n.d.). Chainlink Documentation. [https://docs.chain.link/data-feeds/price-feeds/addresses/](https://docs.chain.link/data-feeds/price-feeds/addresses/)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'News:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For a step-by-step process to download a website. Furneaux, Nick. “Investigating
    Cryptocurrencies. Understanding, Extracting, and Analyzing Blockchain Evidence”
    Wiley, 2018\. [*Chapter 8*](B19446_08.xhtml#_idTextAnchor250).- Pages 125 to 130.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Social networks:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installation — Tweepy 4.13.0 documentation. (n.d.). Tweepy Documentation — tweepy
    4.13.0 documentation. [https://docs.tweepy.org/en/stable/install.xhtml](https://docs.tweepy.org/en/stable/install.xhtml)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting-started-with-the-twitter-api-v2-for-academic-research/5-how-to-write-search-queries.md
    at main · twitterdev/getting-started-with-the-twitter-api-v2-for-academic-research.
    (n.d.). GitHub. [https://github.com/twitterdev/getting-started-with-the-twitter-api-v2-for-academic-research/blob/main/modules/5-how-to-write-search-queries.md](https://github.com/twitterdev/getting-started-with-the-twitter-api-v2-for-academic-research/blob/main/modules/5-how-to-write-search-queries.md)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Overview. (n.d.). Use Cases, Tutorials, and Documentation | Twitter Developer
    Platform. [https://developer.twitter.com/en/docs/twitter-api/annotations/overview](https://developer.twitter.com/en/docs/twitter-api/annotations/overview)
    and [https://developer.twitter.com/en/docs/twitter-api/annotations/faq](https://developer.twitter.com/en/docs/twitter-api/annotations/faq)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
