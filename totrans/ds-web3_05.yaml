- en: '5'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Exploring Analytics on DeFi
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are two groups of products that drive the most transactions in the current
    state of Web3: NFTs, as we discussed in [*Chapter 4*](B19446_04.xhtml#_idTextAnchor145),
    and **decentralized finance** (**DeFi**), which we will explore in this chapter.'
  prefs: []
  type: TYPE_NORMAL
- en: 'DeFi takes its name in opposition to the centralized characteristic of the
    current financial system. According to the book *How to DeFi: Beginner*, by CoinGecko,
    “*Decentralized Finance or DeFi is a movement that allows users to utilize financial
    services such as borrowing, lending, and trading without the need to rely on centralized
    entities.*” DeFi is not a single product but a series of projects trying to address
    financial demand in the Web3 space.'
  prefs: []
  type: TYPE_NORMAL
- en: These projects make use of the concept of **composability**, which involves
    building upon parts created by other parties. It is often illustrated as building
    with Lego blocks, where developers combine various components to construct new
    infrastructures.
  prefs: []
  type: TYPE_NORMAL
- en: DeFi has introduced products that were once exclusive to central banks, such
    as the minting of new coins. Currently, some protocols enable the lending and
    borrowing of funds for a fee purely dependent on the liquidity of the pool and
    not external factors. These projects offer varying degrees of decentralization.
    For example, in the minting offer explained previously, we can encounter a stablecoin
    issued by a centralized entity named Tether or a decentralized option such as
    DAI, a protocol composed of a set of smart contracts with no central authority.
  prefs: []
  type: TYPE_NORMAL
- en: 'DeFi has also expanded its offerings to other native Web3 businesses, such
    as bridges between chains and flash loans. We will explain these in more detail
    in the subsequent sections:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.1 – Bank services and blockchain services](img/B19446_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.1 – Bank services and blockchain services
  prefs: []
  type: TYPE_NORMAL
- en: The disparities in financial services across the population are nothing new,
    and many of these DeFi projects aim to expand the reach of financial services
    wherever there is internet access. As Web3 analysts, we can leverage one of the
    main characteristics of Web3 – **transparency** – to unlock more value and help
    make these projects sustainable. Financial data that was traditionally limited
    to VIP analysts or released to the market at different times is now open for us
    to read, combine, and extract valuable insights to work on. Blockchain has democratized
    access; it is on us to learn how to read it and extract actionable insights.
  prefs: []
  type: TYPE_NORMAL
- en: To generate value with our work, it is essential to understand not only the
    data generated but also the DeFi business flow. As we did in [*Chapter 4*](B19446_04.xhtml#_idTextAnchor145),
    we will delve into fundamental protocol metrics, offering quick insights into
    each protocol’s structure and user composition, but also those metrics that explain
    how a project generates revenue, reaches customers, deals with potential threats,
    and other relevant aspects.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will explore the data structure and the business rationale
    of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: ERC-20 tokens and stablecoins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DEXs and aggregators
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lending and borrowing (with a comment on flash loans)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bridges
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This list of products is not exhaustive of the DeFi space. There are many other
    offers, such as decentralized derivatives, insurance, governance, lotteries, and
    more.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The technical requirements listed in [*Chapter 4*](B19446_04.xhtml#_idTextAnchor145)
    also apply to this chapter. We will be using indexed data available in SQL table
    services like **Dune Analytics**, **Increment**, and **Flipside**. To follow along,
    please open an account on any of these platforms by following the links provided
    in [*Chapter 2*](B19446_02.xhtml#_idTextAnchor073). Transactional data is queried
    with SQL services, and the syntax varies, depending on the query engines.
  prefs: []
  type: TYPE_NORMAL
- en: You can find Jupyter notebooks containing the examples discussed in this chapter
    in this book’s GitHub repository at [https://github.com/PacktPublishing/Data-Science-for-Web3/tree/main/Chapter05](https://github.com/PacktPublishing/Data-Science-for-Web3/tree/main/Chapter05).
    We recommend reading through the code files in the `Chapter05` folder to follow
    along.
  prefs: []
  type: TYPE_NORMAL
- en: Stablecoins and other tokens
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'According to Coinbase, “*A stablecoin is a digital currency that is pegged
    to a “stable” reserve asset such as the US dollar or gold.*” Given that unpegged
    cryptocurrencies such as Bitcoin or Ethereum are so volatile, stablecoins have
    become a reliable medium of exchange. The main stablecoins, according to their
    market cap at the time of writing, are listed in *Figure 5**.2*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.2 – Crypto panic stablecoins ranking](img/B19446_05_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.2 – Crypto panic stablecoins ranking
  prefs: []
  type: TYPE_NORMAL
- en: Stablecoins are a specific category of tokens that are linked to the value of
    external assets, providing price stability. There are various types of stablecoins,
    including those whose value follows the value of a government-issued currency
    such as the US dollar (named fiat currencies), cryptocurrencies, and commodities
    such as gold. To maintain the “peg,” stablecoin teams have explored many paths.
    This can be seen in the “Mechanism” column in *Figure 5**.2*.
  prefs: []
  type: TYPE_NORMAL
- en: The main stablecoins are pegged to fiat (“fiat-backed”), meaning that the companies
    issuing such tokens only do so if they have the backup money deposited in financial
    institutions. Examples of such stablecoins are USDT and USDC.
  prefs: []
  type: TYPE_NORMAL
- en: Crypto-backed stablecoins rely on smart contract protocols that issue stablecoins
    backed by a basket of other cryptocurrencies. These protocols balance offer and
    demand to ensure price stability by controlling interest loan rates to influence
    buyers’ and borrowers’ behavior. The system is overcollateralized to ensure price
    stability when there is high volatility and mainly works as a lender system. The
    main example of this mechanism is the token named DAI. It is issued by MakerDAO
    and is currently backed by a mixture of centralized and decentralized assets,
    such as USDC, Ethereum, Wrapped Bitcoin, and others.
  prefs: []
  type: TYPE_NORMAL
- en: Stablecoins can be created to mirror the value of the cryptocurrencies supporting
    them or to mimic the value of a fiat currency. An example of the former is the
    **wrapped** version of an asset, often referred to as a “wrapped token,” which
    is a representation of an underlying asset, typically a cryptocurrency or digital
    asset, that has been tokenized and made compatible with a specific blockchain
    or network. The process of “wrapping” involves locking the original asset (for
    example, Bitcoin) on its native blockchain and then issuing the corresponding
    equivalent token on another blockchain, such as Ethereum. This is what happens
    with **Wrapped Bitcoin** (**WBTC**), which represents Bitcoin on the Ethereum
    blockchain, allowing Bitcoin to be used within the Ethereum ecosystem for decentralized
    applications, DeFi platforms, and other purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Even though non-stable tokens emerged historically before stablecoins, it is
    easier to understand the concept of a token by learning about stablecoins. A **token**
    is simply a representation of value on the blockchain and such value can be derived
    from any rationale. For instance, some tokens represent ownership in a particular
    project, access to services, or even serve as part of a meme or cultural movement.
    Notably, some tokens, such as Dogecoin, which started as a meme, have achieved
    significant market capitalization, demonstrating the diversity of tokens in the
    cryptocurrency space. Today, such a meme coin is the eighth cryptocurrency in
    the market cap.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we know the business case, let's delve into the data structure.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding tokens, native assets, and the ERC-20 data structure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Cryptocurrency serves as the native asset of a blockchain, such as BTC in the
    Bitcoin chain, ETH in the Ethereum chain, and RBTC on the Rootstock chain. Its
    primary function is often to pay transaction fees on the network (gas fees) and
    incentivize validators/nodes to maintain the security of the cryptocurrency’s
    network.
  prefs: []
  type: TYPE_NORMAL
- en: In contrast, tokens are created over an existing blockchain and are not native
    to the blockchain itself. Stablecoins, pool tokens, and all ERC-20 tokens in the
    Ethereum ecosystem are examples of tokens.
  prefs: []
  type: TYPE_NORMAL
- en: To build tokens, developers utilize the ERC-20 standard and its subsequent evolutions,
    which introduces a standard for functional tokens and ensures their fungibility.
    Recall that fungible refers to assets or tokens that are identical in value and
    can be exchanged on a one-to-one basis, with no distinction between individual
    units of the same type. The ERC-20 standard was initially introduced in 2015 and
    gained official recognition through an **Ethereum Improvement Proposal** (**EIP**)
    authored by Ethereum founder Vitalik Buterin and Ethereum developer Fabian Vogelsteller
    in 2017.
  prefs: []
  type: TYPE_NORMAL
- en: The smart contract that follows those methods and events is called ERC-20-compliant
    and is the contract that will maintain the registry of the tokens emitted, which
    is why it is very relevant for the analyst to learn about its basic characteristics.
  prefs: []
  type: TYPE_NORMAL
- en: 'The function methods we will encounter are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`totalSupply()`: To return the total supply of tokens in the contract.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`balanceOf()`: To read the address balance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`transfer()`: To transfer tokens from the sender’s account to another.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`transferFrom()`: To spend an allowance. This is a function that’s called by
    the spender that implies two operations – that is, transferring the amount being
    spent and reducing the allowance by such an amount.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`approve()`: To allow the spender to withdraw from the token owner''s account
    multiple times, up to the approved value amount.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`allowance()`: To return the amount allowed for withdrawal from the token owner’s
    account.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It is possible to find the `mint` and `burn` functions, which modify the total
    supply of tokens according to a specific business logic. Here are some optional
    functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '`name()`: Returns the name of the token'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`symbol()`: Returns the symbol of the token'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`decimals()`: Returns the number of decimals the token uses'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here are some important events:'
  prefs: []
  type: TYPE_NORMAL
- en: '`transfer`: This event is triggered by the `transfer()`function. The same considerations
    explained in [*Chapter 4*](B19446_04.xhtml#_idTextAnchor145) regarding minting
    and burning apply, if a transfer originates “from” an address such as `0x0000,`
    we can interpret this as a minting event. If this address or `0x000dEad` is found
    in the `to` part of the transaction, it can be considered a burning transfer.
    Minting signifies their creation while burning means they are sent to an unrecoverable
    address, removing them from circulation. The function’s hash is `0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df5``23b3ef`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`approval`: This event is triggered by the `approve()` function with the allowance
    value and the spender address.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hands-on example
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we know the basics, let’s go to the Jupyter notebook (`Chapter05/Stablecoins.ipynb`)
    where we will connect to the DAI contract (`0x6B175474E89094C44Da98b954EedeAC495271d0F`)
    and extract the public view information.
  prefs: []
  type: TYPE_NORMAL
- en: A **view** function means that it does not change the state data, so it can
    be executed on a single node instead of having every node in the blockchain run
    it. This kind of function does not generate a transaction and does not cost gas.
  prefs: []
  type: TYPE_NORMAL
- en: 'To inspect the DAI contract, we will use DAI’s ABI, which can be found in this
    book’s repository. Let’s start by extracting the balance of a certain address
    with the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The relevant ERC-20 events are stored in the transaction logs. Let’s analyze
    the `0x2a9317882853dc5e0193a76dab76b29e4dc8045718af7925d8d166cdb0eec637` transaction,
    which involves a transfer of 120 DAIs between two addresses:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.3 – DAI transfer transaction (source: https://etherscan.io/tx/0x2a9317882853dc5e0193a76dab76b29e4dc8045718af7925d8d166cdb0eec637)](img/B19446_05_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.3 – DAI transfer transaction (source: https://etherscan.io/tx/0x2a9317882853dc5e0193a76dab76b29e4dc8045718af7925d8d166cdb0eec637)'
  prefs: []
  type: TYPE_NORMAL
- en: 'If we search for the transaction logs, we’ll receive the following information:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.4 – DAI transfer transaction logs (source: https://etherscan.io/tx/0x2a9317882853dc5e0193a76dab76b29e4dc8045718af7925d8d166cdb0eec637)](img/B19446_05_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.4 – DAI transfer transaction logs (source: https://etherscan.io/tx/0x2a9317882853dc5e0193a76dab76b29e4dc8045718af7925d8d166cdb0eec637)'
  prefs: []
  type: TYPE_NORMAL
- en: The data we can see here is within the Ethereum `0x6b175474e89094c44da98b954eedeac495271d0f`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The raw log structure looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Event name or Topic [0] | Transfer (or `0xddf252ad1be2c89b69c2b068fc 378daa952ba7f163c4a11628f55a``4df523b3ef`)
    |'
  prefs: []
  type: TYPE_TB
- en: '| From - Topic [1] | `0xc6DA6f76a389Df871fffad8bb5049cbcF6b7015F` |'
  prefs: []
  type: TYPE_TB
- en: '| To - Topic [2] | `0x762EcaaF67097b3eb66a9a6904f42b835b52DC15` |'
  prefs: []
  type: TYPE_TB
- en: '| wad - Topic [3] | `0x0000000000000000000000000000000000000000000000068155a43676e00000`
    (or `120000000000000000000`) |'
  prefs: []
  type: TYPE_TB
- en: Table 5.1 – The raw log structure
  prefs: []
  type: TYPE_NORMAL
- en: A **wad** is a decimal number with 18 digits of precision that is represented
    as an integer. In this transaction, it represents the number of tokens transacted,
    which is 120\. If we paste the wad value in a hexadecimal-to-decimal converter
    such as the one at [https://www.rapidtables.com/convert/number/hex-to-decimal.xhtml](https://www.rapidtables.com/convert/number/hex-to-decimal.xhtml),
    it will show the decimal representation with 18 digits.
  prefs: []
  type: TYPE_NORMAL
- en: All the data suppliers we studied in [*Chapter 2*](B19446_02.xhtml#_idTextAnchor073)
    have special tables that store transaction logs with varying levels of preprocessing.
    The most basic versions are the raw logs to more filtered versions, which display
    only ERC 20 token transfers and the prices of the tokens at the time of the transfer.
    One example is Flipside, which has a specific table named `core__fact_token_transfers`
    that contains all the events on the Ethereum blockchain with the name `'Transfer'`;
    that refers to a token address. Similarly, Dune Analytics spells enable a similar
    table named `erc20_ethereum.evt_Transfer`, and Increment has a model named `token
    balance`.
  prefs: []
  type: TYPE_NORMAL
- en: 'By aggregating this data, we can derive a wide variety of metrics. Let’s see
    the calculation of the DAI current supply by leveraging the `erc20_ethereum.evt_Transfer`
    table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'In this query, we calculate the DAI current supply by aggregating the transfers
    within the DAI contract address. Here, we do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The query uses a `current_supply` to structure the data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The first part of the CTE calculates the total supply increase by summing the
    transferred amounts (converted from wei to DAI), where DAI is transferred *from*
    the zero address (`0x0000000000000000000000000000000000000000`). This represents
    the creation of new DAI tokens.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second part of the CTE calculates the total supply decrease by summing the
    transferred amounts (also converted from wei to DAI), where DAI is transferred
    *to* the zero address. This represents the burning or removal of DAI tokens from
    circulation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The main query then calculates the final total supply by subtracting the total
    supply decrease from the total supply increase (that is, supply increase – supply
    decrease).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The result is divided by 1,000,000,000 to convert it into a billion DAI.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In summary, this query finds the net change in the total supply of DAI tokens
    by taking into account both minting and burning transactions and then converting
    the result to a billion DAI.
  prefs: []
  type: TYPE_NORMAL
- en: 'We propose an additional metrics logic in the following dashboard: [https://dune.com/gabriela/dai-cockpit](https://dune.com/gabriela/dai-cockpit).
    Additionally, there is a great open source stablecoin dashboard available at https://dune.com/hagaetc/stablecoins.'
  prefs: []
  type: TYPE_NORMAL
- en: This same analysis can be applied to any ERC-20 token; it’s not necessarily
    limited to stablecoins. For instance, if we take the MKR token as an example,
    an excellent open source dashboard can be found at [https://dune.com/livethelife/mkr](https://dune.com/livethelife/mkr).
  prefs: []
  type: TYPE_NORMAL
- en: A pivotal aspect of ERC-20 tokens is their seamless interchangeability within
    the Ethereum network. This characteristic of ERC-20 tokens plays a crucial role
    in the operation of **decentralized exchanges** (**DEXs**). DEXs leverage the
    ERC-20 standard to provide users with the ability to trade a myriad of tokens
    directly from their wallets, without the need for intermediaries. This connection
    between ERC-20 tokens and DEXs forms the cornerstone of the DeFi space, empowering
    users to trade, invest, and participate in financial activities.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding DEX
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Cryptocurrencies can be exchanged through various methods, including **peer-to-peer**
    (**P2P**) trading, **centralized exchanges** (**CEXs**), and DEXs. Each method
    has its advantages and characteristics:'
  prefs: []
  type: TYPE_NORMAL
- en: '**P2P**: In this method, two parties directly buy and sell cryptocurrencies
    among themselves without intermediaries. It prioritizes privacy and enables a
    wide range of payment options, making it accessible to users worldwide. However,
    to ensure the completion of the transfer, certain players have appeared that may
    act as intermediaries for a small fee, such as escrow services, rating platforms,
    or dispute resolution services.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CEX**: This method offers cryptocurrency exchange services to users who have
    an account on their platform. It primarily matches buyers with sellers using an
    order book, where market makers and takers place their orders. The CEX’s revenue
    is generated through transaction fees on each facilitated trade. Major CEXs include
    Binance, OKX, Coinbase, and Crypto.com. The CEX also verifies the identity of
    each person opening an account, following the regulations of the relevant country.
    These exchanges are user-friendly and offer liquidity and a wide range of trading
    pairs. They generally act as the entry point for many users starting in crypto.
    The term “centralized” refers to the exchange’s control over the funds exchanged
    within it. This has several implications: as users are not in custody of their
    assets, if the CEX is attacked or becomes insolvent for any reason (such as a
    bank run), there is a risk of losing funds.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**DEX**: A DEX operates through smart contracts without the involvement of
    third-party entities and prioritizes user control, privacy, and security. It allows
    users to exchange assets while keeping control of their funds in their wallets
    until the trade is completed. DEXs have gained popularity and, during the 2021
    bull run, surpassed the amount of money traded in CEXs. However, liquidity on
    DEXs is often lower compared to CEXs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, let’s analyze some characteristics of DEXs further:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Custody of funds**: Users do not delegate the custody of their funds to a
    third party.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**No identification required**: Users can freely interact with a DEX without
    the need for any form of identification. All that is required is an address to
    connect to the DEX.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**High gas fees**: DEX transactions often incur higher gas fees on the blockchain
    compared to CEX trades.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Liquidity problems and slippage**: Slippage refers to the difference between
    the expected price of an asset and the actual price at which the trade is executed.
    As liquidity is provided by users rather than a centralized entity, the size of
    a trade can impact the asset’s price. When a large trade is executed, it may cause
    the price to move unfavorably, resulting in slippage. This means the trader ends
    up paying a slightly higher price when buying or receiving a slightly lower price
    when selling than what they anticipated. Slippage is a reality in DeFi trading,
    especially in less liquid markets.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Impermanent loss**: This is a potential risk that’s faced by liquidity providers
    in **automated market maker** (**AMM**) platforms. When a liquidity provider adds
    funds to a liquidity pool, they contribute assets to be traded on the platform.
    As trades occur, the relative value of the assets in the pool can change due to
    market fluctuations. If the price of one asset in the pool moves significantly
    compared to the other asset, the liquidity provider may experience an impermanent
    loss. This loss is “impermanent” because it only materializes if the liquidity
    provider decides to withdraw their funds from the pool.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Complex user experience and learning curve**: Interacting with DEX protocols
    can still be challenging for DeFi users, and the overall user experience may require
    improvement. Concepts such as slippage or impermanent loss still affect the trading
    experience.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Bugs and exploits**: Like any smart contract-based system, DEXs may be susceptible
    to bugs and security exploits.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To analyze the analytics of a DEX, we need to understand where the liquidity
    is locked, how trading pairs are organized, and how the smart contract generates
    revenue. This way, we will be able to approach the relevant smart contract swiftly.
  prefs: []
  type: TYPE_NORMAL
- en: Hands-on example – pools and AMM
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To understand DEXs, two important concepts need to be introduced: liquidity
    pools and AMM. DEXs use liquidity pools and AMM to facilitate trading activity,
    also known as **swaps**.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Liquidity pools** are token reserves that enable the user to exchange tokens
    with it. Anyone can open a pool by providing the necessary funds and without the
    need to seek permission from any central authority. The liquidity is allocated
    within a curve price and an algorithm places the bids and asks to execute the
    swaps. Chainlink defines **AMMs** as “*algorithmic “money robots” to make it easy
    for individual traders to buy and sell crypto assets. Instead of trading directly
    with other people as with a traditional order book, users trade directly through*
    *the AMM.*”'
  prefs: []
  type: TYPE_NORMAL
- en: 'One prominent DEX is **Uniswap**, which uses liquidity pools and AMM. The landing
    page looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.5 – The home page of Uniswap (source: https://app.uniswap.org/#/swap)](img/B19446_05_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.5 – The home page of Uniswap (source: https://app.uniswap.org/#/swap)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Uniswap has a pool dashboard at [https://info.uniswap.org/#/pools](https://info.uniswap.org/#/pools)
    that contains some basic analytics of the active liquidity pools. At the time
    of writing, the first pool in **TVL** and **Volume** is the USDC/ETH pair (https://info.uniswap.org/#/pools/0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.6 – The All Pools dashboard](img/B19446_05_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.6 – The All Pools dashboard
  prefs: []
  type: TYPE_NORMAL
- en: The smart contract address of the pool is [https://etherscan.io/address/0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640](https://etherscan.io/address/0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640).
  prefs: []
  type: TYPE_NORMAL
- en: 'By programmatically exploring the pool’s state data on `Chapter05/Liquidity_pool.ipynb`,
    we can identify the tokens that compose the pool by using the Pool ABI and reading
    the smart contract data with the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Token 0: `0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48` or USDC'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Token 1: `0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2` or wETH'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Both are stablecoins, with one following the US dollar and the other representing
    the native Ethereum asset in wrapped form.
  prefs: []
  type: TYPE_NORMAL
- en: 'To obtain the balance locked of each token, we can use `erc_20.abi`, which
    is available in this book’s GitHub repository, and query the pool with the following
    code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'More on the available view functions can be found in the documentation: [https://docs.uniswap.org/contracts/v3/reference/core/interfaces/pool/IUniswapV3PoolState](https://docs.uniswap.org/contracts/v3/reference/core/interfaces/pool/IUniswapV3PoolState).'
  prefs: []
  type: TYPE_NORMAL
- en: To extract information from transactional data, we need to dig deeper into logs.
    Let’s review a swap transaction and try to understand how the information we need
    is logged. The swap transaction to analyze is `0x78490143b8a80b23752bd305b51c7796add5373af089059beb3920c8e431ae78`
    and is executed in the `0x3041cbd36888becc7bbcbc0045e3b1f144466f5f` pool, which
    swaps between USDC and USDT.
  prefs: []
  type: TYPE_NORMAL
- en: 'On Etherscan (https://etherscan.io/tx/0x78490143b8a80b23752bd305b51c7796add5373af089059beb3920c8e431ae78/),
    we can see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'From or sender: `0xaDAf0dA2F42bf54E2Ccf455F795A04ECD744138B`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To: `0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD` (Uniswap: Universal Router)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nowadays, most swaps do not directly impact the pool smart contract. Instead,
    they interact with a Router smart contract, such as a Uniswap Universal smart
    contract. The router’s mission is to take user-defined parameters (such as maximum
    slippage or swap recipient) and execute the necessary swaps to reach the trader’s
    goal. The router can combine multiple pools and even NFT marketplaces and is optimized
    to find the lowest prices and lowest gas cost.
  prefs: []
  type: TYPE_NORMAL
- en: 'The transaction summary is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.7 – Transaction swaps](img/B19446_05_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.7 – Transaction swaps
  prefs: []
  type: TYPE_NORMAL
- en: From *Figure 5**.7*, we can interpret that the user, in one transaction, carried
    out a swap of XPR for USDT and later interacted with the pool under analysis to
    swap USDT for USDC.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 5**.8* shows a partial snapshot of the transaction logs page. The last
    log in particular contains valuable information:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.8 – Swap log](img/B19446_05_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.8 – Swap log
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 5**.8* shows that the relevant information for the swap is located
    in the logs of the pool address. As you may recall from [*Chapter 2*](B19446_02.xhtml#_idTextAnchor073),
    `topic_0` is the function signature. In this case, `0xd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d822`
    is the **swap** function.'
  prefs: []
  type: TYPE_NORMAL
- en: Additional relevant functions are the mint or add liquidity function, which
    has a signature of `0x4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f`,
    and the burn or remove liquidity function, which has a signature of `0xdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496`.
  prefs: []
  type: TYPE_NORMAL
- en: When liquidity is added or removed, the **liquidity providers** (**LPs**) receive
    LP tokens that represent their stake in the pool. These LP tokens can be traded
    in a secondary market, accrue interest, and sent to the pool when you’re looking
    to extract the liquidity back to the LP.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we interact with the `ethereum.logs` table in Dune, we can extract the number
    of swaps carried out by the pool, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Another important piece of information to compare a pool with another that
    may offer the same token exchange is the strength of the pool for high liquidity
    trades. When large trades impact the reserves of the pool, there is a problem
    of slippage that, as we saw, can impact the final paid price. Here, it is important
    to study metrics related to the TVL, the liquidity of the pool, and so on. These
    metrics are typically calculated from aggregated transaction data. We propose
    some metrics logic in the following dashboard: [https://dune.com/gabriela/pool-basic-metrics](https://dune.com/gabriela/pool-basic-metrics).'
  prefs: []
  type: TYPE_NORMAL
- en: As we have been mentioning, in [*Chapter 2*](B19446_02.xhtml#_idTextAnchor073),
    we studied special tables that store transaction logs, with varying levels of
    preprocessing that adapt to the needs of the analyst. Some on-chain data providers
    even offer models that allow us to query the blockchain without writing code.
    Examples of such decoding services include the `dex.trades` tables on Dune or
    the Increment platform on Covalent, which has a drag-and-drop analytics service.
    Both Dune and Footprint are developing natural language queries to simplify the
    basic analysis of transaction data.
  prefs: []
  type: TYPE_NORMAL
- en: These tables and decoded data can vary between providers but what matters most
    is understanding the logic behind each query and familiarizing ourselves with
    the structure of log data. This will allow us to extract information or adapt
    queries to different table formats if needed, even controlling that the results
    returned by an NLP model are correct no matter the platform with which we are
    working. If we know the logic of the business and how the data is logged on the
    blockchain, we can solve the data questions using every platform.
  prefs: []
  type: TYPE_NORMAL
- en: 'Leveraging what we’ve already learned and the Dune Analytics tables listed
    here, we can create metrics that track the activity and revenue of the USDC/USDT
    pool under analysis. The tables are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: A raw data table named `ethereum.logs`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An intermediate processed table named `erc20_ethereum.evt_Transfer` that includes
    logs signed as transfers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An advanced decoded table named `dex.trades`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here is a brief explanation of the logic behind the metrics displayed in the
    dashboard at https://dune.com/gabriela/pool-basic-metrics:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Name in** **the Dashboard** | **Logic** |'
  prefs: []
  type: TYPE_TB
- en: '| Number of trades | Count the number of swaps with the specified signature
    within the pool smart contract logs. |'
  prefs: []
  type: TYPE_TB
- en: '| Traders logs 24 hs | Count the distinct addresses that appear in topic 2
    of the Pool smart contract log with a “swap” as topic 0. |'
  prefs: []
  type: TYPE_TB
- en: '| Average swap volume 24 hs | Using the `dex.trades` table, sum the amount
    in USD within the Pool smart contract and divide it by the number of transactions
    executed within 24 hours. |'
  prefs: []
  type: TYPE_TB
- en: '| Pool TVL | Sum all the transfers where the pool was the recipient of the
    deposit and subtract all the transfers where funds left the pool. |'
  prefs: []
  type: TYPE_TB
- en: '| Pool revenue | The revenue of a pool is generated by fees. The fee is deducted
    from the volume of the pair swap. |'
  prefs: []
  type: TYPE_TB
- en: Table 5.2 – Dune dashboard query logic
  prefs: []
  type: TYPE_NORMAL
- en: Historically, DEXs incentivized the inflow of funds with higher yields, which
    led to the creation of professional funds that look for those advantages. Additionally,
    to avoid high slippage, big trades may need to be routed through different pools
    to be more cost-efficient. Routing multiple liquidity pools in a single transaction
    enables gas savings and minimizes slippage. In conclusion, aggregators were built
    as routers for liquidity and swappers.
  prefs: []
  type: TYPE_NORMAL
- en: DEX aggregators
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: DEX aggregators source liquidity from different DEXs, providing users with better
    token swap rates compared to any single DEX. These aggregators can optimize costs
    derived from slippage, swap fees, and token prices, resulting in more favorable
    rates for users when executed effectively. DEXs are generally interested in integrating
    with DEX aggregators as it helps attract more users and volume. One prominent
    example of a DEX aggregator is **1Inch**.
  prefs: []
  type: TYPE_NORMAL
- en: A map of the smart contracts that constitute the protocol and are maintained
    by the 1Inch team is available at [https://dune.com/queries/2238512](https://dune.com/queries/2238512).
    There is a great dashboard that contains aggregated metrics at [https://dune.com/1inch/token](https://dune.com/1inch/token).
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, **Increment**, a no-code product built by Covalent, has a model
    named Dex, which includes all 1Inch smart contracts across different chains, making
    the analysis easier. One valuable feature of this product is the “normalization”
    event, which consists of translating event signatures into human-readable words
    and their standardization. Each smart contract may have different names for similar
    events, and knowing the exact name is necessary for querying them. However, Increment
    standardizes the names, making querying more straightforward and cross-platform.
    Another noteworthy feature is that it opens up the query generated by the models,
    allowing customization and easier explanation to third parties of the logic taking
    place in the model.
  prefs: []
  type: TYPE_NORMAL
- en: In traditional finance, access to credit, loans, and collateral-based financial
    services has long been a cornerstone of the industry. DeFi also has a chapter
    on credit and collateralization that now offers users the ability to access credit
    without the need for intermediaries such as banks. We will analyze this in the
    next section.
  prefs: []
  type: TYPE_NORMAL
- en: Lending and borrowing services on Web3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The bank receives deposits, saves part of them to be able to repay in case the
    owner wants the cash back, and offers the other part as a loan in the market at
    a certain interest rate. The loan can be collateralized or non-collateralized,
    depending on the risk of the loan taker. The interest rate is set high enough
    to generate revenue for the bank and the depositor. Certain protocols on-chain
    reproduce a similar mechanism, as we will describe in this section.
  prefs: []
  type: TYPE_NORMAL
- en: At the time of writing, the main lending and borrowing protocols only work with
    collateralized loans. The process resembles a mortgage where the user provides
    the house as collateral as insurance for the loan payment. If the loan is not
    repaid in full, the bank keeps the house. In this case, if the collateral ratio
    of the loan is not maintained, the protocol liquidates the collateral.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s imagine that Alice wants to invest in a project in USD stablecoin but
    her collateral is in ETH. She is confident that ETH will increase in price, so
    she would rather not sell it for stablecoin. The solution is a protocol that takes
    Alice’s ETH and lends her a USD-pegged stablecoin such as DAI. A protocol that
    does exactly that is Maker, which we have already mentioned previously. For the
    protocol to issue DAI, it requires 1.5 times the value of the issued DAI in collateral
    (ETH); this is called over-collateralization. The ratio between the collateral
    and the loaned asset is the collateral ratio. Usually, these protocols have a
    liquidation fee to disincentivize getting liquidated.
  prefs: []
  type: TYPE_NORMAL
- en: Another well-established protocol is **Compound**, which operates like a liquidity
    pool where liquidity providers supply funds to the pool in exchange for interest
    and borrowers take a loan against interest on the debt. The interest rate is known
    as **Annual Percentage Yield** (**APY**) and varies from pool to pool, depending
    on the liquidity and demand within the pool.
  prefs: []
  type: TYPE_NORMAL
- en: When funds are deposited in Compound, the market maker receives cTokens, which
    represent the percentage of the funds in the pool and accrue interest. A cToken
    is a type of cryptocurrency token that’s used within the ecosystem. They are interest-bearing
    tokens that represent the amount of cryptocurrency a user has deposited into the
    Compound platform. The list of cTokens contracts can be found at [https://docs.compound.finance/#developer-resources](https://docs.compound.finance/#developer-resources).
  prefs: []
  type: TYPE_NORMAL
- en: Let’s explore the protocol in `0xF25212E676D1F7F89Cd72fFEe66158f541246445` and
    is called `cUSDCv3`.
  prefs: []
  type: TYPE_NORMAL
- en: The contract has many view functions, all of which are explored in the `Lending_borrowing.ipynb`
    notebook.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the main functions are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`numAssets()`: The number of assets that can be used as collateral. In the
    case under analysis, there are three assets, namely, ETH, wBTC, and Matic.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`baseToken()`: The token that can be borrowed against the collateral – in our
    case, USDC.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getAssetInfo()`: This returns the collateral asset information, such as the
    collateral address or the price feed address on Chainlink.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Totalsupply()`: The total supply of base tokens plus interest accrued to suppliers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getReserves()`: The balance of the base or collateral asset, which protects
    users from bad debt. We will analyze bad debt shortly.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getUtilization()`: Protocol utilization of the base asset – that is, USDC.
    The function for such a calculation is `TotalBorrows` / `TotalSupply.`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More functions to query state data are available; please refer to the documentation
    for more details.
  prefs: []
  type: TYPE_NORMAL
- en: Transaction data is also very useful for extracting insights. For example, it
    is possible to calculate the TVL and further collateral information by querying
    the logs of the collateral assets. The syntax follows the one we reviewed in the
    *Understanding DEX* section. A dashboard example can be found at [https://dune.com/datanut/Compound-Finance-Deposits-and-Loans](https://dune.com/datanut/Compound-Finance-Deposits-and-Loans).
  prefs: []
  type: TYPE_NORMAL
- en: Lending and borrowing protocols make revenue out of the interest rate paid by
    the borrower. An important metric to measure revenue generated is the utilization
    ratio of a protocol, which is the result of the Borrowing Volume / TVL. This ratio
    tells us how efficient a protocol is to put the value that’s been locked to work.
    The higher the utilization ratio, the better.
  prefs: []
  type: TYPE_NORMAL
- en: Specifically, in Compound, part of said interest goes to its reserves, which
    act as insurance, but such revenue distribution can be modified by the governance
    of the protocol, who are the COMP holders. COMP is an ERC-20 token that enables
    the community governance of the Compound protocol. A COMP token holder may participate
    and debate, propose, and vote on the changes to the protocol.
  prefs: []
  type: TYPE_NORMAL
- en: 'Within this industry, there is a crypto-native product that came to life to
    enable fast loans with zero collateralization: the flash loan.'
  prefs: []
  type: TYPE_NORMAL
- en: Flash loans
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Flash loans** are crypto-native products, with **AAVE** being one of the
    most famous protocols in this category. A flash loan allows the borrower to take
    a loan with zero collateral, on the condition that the loan and any additional
    interest are repaid within the same transaction. If the borrower fails to repay
    the loan within the transaction, the entire transaction is reverted. Flash loans
    serve two main use cases: arbitrage and liquidations.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Arbitrage** involves the simultaneous purchase and sale of the same or different
    assets in different markets, where the prices vary. The arbitrageur profits from
    the small price differences, but it usually requires a substantial amount to make
    a noticeable difference. This practice helps bring the market back to equilibrium,
    ensuring that the prices of the same asset remain stable across multiple markets.'
  prefs: []
  type: TYPE_NORMAL
- en: In situations where a collateralization ratio is lost and the loan defaults,
    a third-party liquidator gains access to the collateral for liquidation purposes.
    The liquidator sells the collateral in the market on behalf of the borrower, pays
    back the debt, and receives a liquidation bonus for the job. All these steps can
    be executed in one transaction with flash loans and without requiring any collateral.
    These complex transactions are typically carried out by bots, which contribute
    to maintaining liquidity in the DeFi ecosystem and keeping prices stable across
    markets.
  prefs: []
  type: TYPE_NORMAL
- en: 'For further insights on flash loan transaction data, open the queries in the
    following dashboard: https://dune.com/hildobby/flashloans.'
  prefs: []
  type: TYPE_NORMAL
- en: A note on protocol bad debt
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Flash loans have been used to carry out attacks on DeFi protocols that resulted
    in these protocols having bad debt. Bad debt arises when users who provide liquidity
    to a pair are unable to withdraw their funds upon deciding to leave the pool.
    Let’s consider an example:'
  prefs: []
  type: TYPE_NORMAL
- en: The attacker obtains a flash loan for token A.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The attacker deposits token A into a DEX or CEX and swaps it for token B, leading
    to an increased supply of token A and decreased liquidity of token B, causing
    token B’s price to rise.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The revalued token B is later used as collateral in a lending protocol to borrow
    token A. Due to the inflated collateral B price, the protocol lends more of token
    A than it would if the collateral were at its equilibrium price.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The attacker repays the loan in the form of A tokens, keeping the surplus of
    token A. When prices return to normal, liquidators try to liquidate token B at
    market price, but it is insufficient to cover the loan of token A. As a result,
    bad debt is incurred, leaving the last supplier of A tokens to bear the loss.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: These attacks are facilitated when the price is sourced from a single oracle,
    making it susceptible to manipulation. Additionally, the lower cost associated
    with flash loans, which do not require collateral, makes such attacks more feasible.
  prefs: []
  type: TYPE_NORMAL
- en: 'An interesting dashboard created by the Risk DAO tracks the bad debt of protocols
    using on-chain data. You can explore it here: [https://bad-debt.riskdao.org/](https://bad-debt.riskdao.org/).'
  prefs: []
  type: TYPE_NORMAL
- en: The world is moving toward a multi-chain environment, where successful chains
    offer differentiated products and attract distinct ideas that become **dApps**.
    For example, Near, with its low fees, has developed the Sweat economy, while Avalanche
    subnets enable games to build their on-chain ecosystem without competing for gas
    slots on the main chain. As more protocols open up their services on multiple
    chains, they aim to leverage the benefits of each chain and reach a diverse range
    of users.
  prefs: []
  type: TYPE_NORMAL
- en: The increasing demand for transferring funds between different chains has led
    to the emergence of crypto-native products called bridges, which we will explore
    in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Multichain protocols and cross-chain bridges
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A bridge is a structure that facilitates the transfer of funds and information
    between different chains. The market recognizes three groups of chains:'
  prefs: []
  type: TYPE_NORMAL
- en: '**L1 chains** are the well-known blockchains, such as Bitcoin and Ethereum.
    It is called Layer 1 as the core team generates a layer of solutions over the
    foundation layer to increase scalability. An example of the evolution of L1 is
    the Ethereum merge, which occurred in September 2022.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**L2 chains** are integrations that run on top of a blockchain to improve specific
    aspects, often focusing on scalability. These scaling solutions allow the main
    chain to offload data to a parallel architecture, processing it there and saving
    only the results on the main chain. Successful L2 chains include Optimism, Arbitrum,
    and Polygon zkEVM.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sidechains** are new blockchains that are connected to a major blockchain.
    For instance, **Rootstock** is linked to Bitcoin, enabling EVM smart contract
    programming with the decentralization and security of Bitcoin. Sidechains are
    separate chains, meaning that consensus methods, gas rules, and other aspects
    may vary.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Given the ongoing availability of diverse blockchain offerings and the absence
    of any apparent halt to this trend, users will continue to explore transitioning
    from one blockchain to another to capitalize on the unique advantages offered
    by each. This underscores the persistent demand for bridge connections between
    these blockchains, which is expected to remain robust.
  prefs: []
  type: TYPE_NORMAL
- en: 'Depending on how a bridge operates, the transaction structure and the data
    points required for analysis may vary. Generally, there are two main types of
    bridges: centralized bridges and trustless bridges. **Centralized bridges** have
    a central entity responsible for bridge security. Examples include the Ronin bridge
    and the Multichain bridge. On the other hand, **trustless bridges** rely solely
    on smart contracts, such as the Near bridge and the Hop bridge.'
  prefs: []
  type: TYPE_NORMAL
- en: Hands-on example – Hop bridge
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s delve into how a Multichain bridge such as Hop works. Hop describes itself
    in [https://hop.exchange/](https://hop.exchange/) as a “*scalable rollup-to-rollup
    general token bridge.*” It enables bridging between ETH and its L2 solutions,
    such as Polygon, Gnosis, Optimism, and Arbitrum.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Hop bridge operates with three core products:'
  prefs: []
  type: TYPE_NORMAL
- en: A Hop token, which is pegged to the value of the underlying asset that’s minted
    in each of the chains, where Hop is active and redeemable in the L1 chain
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A bonder or liquidity provider
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automatic market makers, which allow us to swap between the Hop token and the
    native token in the destination chain
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let’s consider an example transaction:'
  prefs: []
  type: TYPE_NORMAL
- en: Alice wants to use a dApp active on Optimism but her funds are in ETH. So, to
    be able to interact with the dApp, she needs **oETH**, which is wrapped ETH on
    Optimism.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Alice bridges her ETH to Optimism by doing the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A bridge transaction is issued on ETH and will be executed on the native bridge
    after the waiting time and exit time have passed.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: The bonder deposits hop-ETH or **hETH** in Alice’s address on Optimism for the
    bridged amount minus fees and gas costs.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Alice can swap hETH for oETH and interact with the dApp.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the exit time has passed, the bonder receives the funds previously provided
    to Alice along with a small fee.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This is a bridge transaction where the user can transfer funds between chains
    swiftly, sending an asset in one chain and receiving the equivalent (minus a fee)
    in another chain. In this example, we mentioned tokens such as oETH and hETH,
    which are minted and burned in each chain to represent the flow of funds between
    chains. This is known as a Lock and Mint type of bridge.
  prefs: []
  type: TYPE_NORMAL
- en: To analyze bridge contracts, refer to the complete list available at [https://github.com/hop-protocol/hop/blob/develop/packages/core/src/addresses/mainnet.ts](https://github.com/hop-protocol/hop/blob/develop/packages/core/src/addresses/mainnet.ts).
    There are a few `view` functions in it.
  prefs: []
  type: TYPE_NORMAL
- en: A useful view function is `l1CanonicalToken()` that provides information about
    the locked token in the bridge. Knowing this information, we can calculate the
    TVL, as explained in the `Bridges.ipynb` notebook.
  prefs: []
  type: TYPE_NORMAL
- en: 'For aggregated transactional data analysis, understanding the transaction’s
    structure is essential. For instance, let’s analyze the transaction under the
    `0xaf6089e3d7377b5b0c4ad86e486406a19e29280410402aab71195b0995608e81` hash, which
    involves transferring 0.4378 ETHs to the same address on Optimism:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.9 – Transaction details (source: https://etherscan.io/tx/0xaf6089e3d7377b5b0c4ad86e486406a19e29280410402aab71195b0995608e81)](img/B19446_05_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.9 – Transaction details (source: https://etherscan.io/tx/0xaf6089e3d7377b5b0c4ad86e486406a19e29280410402aab71195b0995608e81)'
  prefs: []
  type: TYPE_NORMAL
- en: 'To locate this data in the `raw_transactions` table of any data provider of
    those listed in [*Chapter 2*](B19446_02.xhtml#_idTextAnchor073), look for the
    signature or `TransferSentToL2` event, which includes the amount transferred,
    the bonder, and the user:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.10 – Bridge cross transaction logs – ETH side](img/B19446_05_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.10 – Bridge cross transaction logs – ETH side
  prefs: []
  type: TYPE_NORMAL
- en: 'The transaction has its correlation in the Optimism chain. The relevant information
    is on the logs of the `l2canonical` token, as per the documentation. For wETH,
    this is `''0x4200000000000000000000000000000000000006''`. The transaction in Optimism
    is [https://optimistic.etherscan.io/tx/0x4e76ee9b997868ba894ea9362347bfa9ed64c
    2aaf5b4482d6482940efbe3e738](https://optimistic.etherscan.io/tx/0x4e76ee9b997868ba894ea9362347bfa9ed64c2aaf5b4482d6482940efbe3e738),
    and the relevant log looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.11 – Bridge cross transaction logs – OPT side](img/B19446_05_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.11 – Bridge cross transaction logs – OPT side
  prefs: []
  type: TYPE_NORMAL
- en: Most of these main protocols are already indexed and translated by major data
    providers, making analysis more accessible. For example, explore the very interesting
    dashboard at [https://dune.com/rchen8/Hop-Exchange](https://dune.com/rchen8/Hop-Exchange),
    which leverages events from the reviewed smart contracts.
  prefs: []
  type: TYPE_NORMAL
- en: 'Hop also offers a subgraph, and examples of queries can be found in the documentation:
    https://docs.hop.exchange/v/developer-docs/subgraphs/queries.'
  prefs: []
  type: TYPE_NORMAL
- en: A note on DeFi risks and challenges
  prefs: []
  type: TYPE_NORMAL
- en: DeFi is a young, growing business with multiple challenges ahead. Data practitioners
    play a crucial role in preventing hacks, identifying unusual activities, measuring
    the risks associated with certain decisions, and handling damage control.
  prefs: []
  type: TYPE_NORMAL
- en: There may be instances where we find ourselves supporting governmental efforts
    to establish a regulatory framework for the activity, paving the way for a more
    substantial flow of funds into this ecosystem. As of today, regulatory uncertainty
    and diverse rules prevail. Although there are multiple initiatives aiming to create
    uniformity in legislation, it remains a work in progress. This situation directly
    impacts the industry, where concepts such as deposit guarantees are not applied,
    resulting in many users irrecoverably losing their funds after a hack.
  prefs: []
  type: TYPE_NORMAL
- en: The DeFi experience is still in its early stages, and data practitioners may
    also find themselves studying product experiences to enhance user interactions
    or educate users on better interacting with these products. Initiatives such as
    the SAFE wallet aim to bridge the gap between Web2 and Web3 experiences. This
    company leads in expanding what a wallet can do to match the experience of our
    traditional home banking.
  prefs: []
  type: TYPE_NORMAL
- en: The opportunities for creation in this space are vast, and data-driven decisions
    are imperative.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we delved into the world of DeFi, exploring its core components
    and the primary products offered in the sector. Our analysis covered a wide array
    of areas, including tokens, stablecoins, and DEXs with a focus on pools and DEX
    aggregation, lending and borrowing protocols, and the significance of bridges
    in facilitating cross-chain transactions.
  prefs: []
  type: TYPE_NORMAL
- en: In each case, we analyzed the business flow and how it generates revenue, and
    leveraged some of the data providers to generate aggregated metrics.
  prefs: []
  type: TYPE_NORMAL
- en: While the landscape of DeFi is ever-evolving, with new players emerging and
    innovative services being introduced, our focus remains on comprehending the underlying
    business models and mechanisms. Understanding the essence of these protocols enables
    us to effectively trace transactional details to construct informative metrics
    for further analysis.
  prefs: []
  type: TYPE_NORMAL
- en: Analytics companies play a vital role in simplifying this domain. Leveraging
    both on-chain and off-chain data and collaborating with protocol developers, these
    companies provide invaluable insights. By starting our analysis with well-established
    analytics firms, we can expedite our understanding of the DeFi landscape. However,
    the knowledge we’ve acquired in this chapter empowers us to establish our own
    criteria, delve into the code and the mathematical rationale, and tailor metrics
    to suit our unique requirements. This flexibility allows us to gain deeper insights
    into the DeFi space and make informed decisions based on our specific needs.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll dive into the details of data preparation.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To complement this chapter, the following sources may help:'
  prefs: []
  type: TYPE_NORMAL
- en: Lau, D., Lau, D., Jin, T. S., Kho, K., Azmi, E., Fang, L., Hor, B., & Win, K.
    W. (2021). *How to DeFi:* *Beginner*. CoinGecko.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fang, L., Hor, B., Azmi, E., Khor, W. W., & Gecko, C. (2021). *How to DeFi:*
    *Advanced*. CoinGecko.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*A deep dive into automated market maker decentralized exchanges* (Uniswap
    v1). (n.d.). LearnWeb3: [https://learnWeb3.io/degrees/ethereum-developer-degree/sophomore/a-deep-dive-into-automated-market-maker-decentralized-exchanges-uniswap-v1/](https://learnWeb3.io/degrees/ethereum-developer-degree/sophomore/a-deep-dive-into-automated-market-maker-decentralized-exchanges-uniswap-v1/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*The maker protocol white paper* | Feb 2020\. (n.d.). MakerDAO | An Unbiased
    Global Financial System: [https://makerdao.com/en/whitepaper#abstract](https://makerdao.com/en/whitepaper#abstract).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Fabian Vogelsteller <fabian@ethereum.org>, Vitalik Buterin <vitalik.buterin@ethereum.org>,
    *ERC-20: Token Standard*, Ethereum Improvement Proposals, no. 20, November 2015\.
    [Online serial]. Available at [https://eips.ethereum.org/EIPS/eip-20](https://eips.ethereum.org/EIPS/eip-20).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Ori Pomerantz. (n.d.). *ERC-20 contract walk-through*. ethereum.org: [https://ethereum.org/developers/tutorials/erc20-annotated-code/#the-actual-contract](https://ethereum.org/es/developers/tutorials/erc20-annotated-code/#the-actual-contract).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Introducing Permit2 & universal router*. (2022, November 17). Uniswap Protocol:
    [https://blog.uniswap.org/permit2-and-universal-router#universal-router-unified-token-and-nft-swaps](https://blog.uniswap.org/permit2-and-universal-router#universal-router-unified-token-and-nft-swaps).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Finematics. (n.d.). *What is DeFi? Decentralized Finance Explained* (Ethereum,
    MakerDAO, Compound, Uniswap, Kyber) [Video]. YouTube: [https://www.youtube.com/watch?v=k9HYC0EJU6E](https://www.youtube.com/watch?v=k9HYC0EJU6E).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Helper functions*. (n.d.). Compound III Documentation: [https://docs.compound.finance/helper-functions/](https://docs.compound.finance/helper-functions/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Dune Analytics*. (n.d.). How to Write SQL to Get TVL & Diversification Metrics
    such as HHI and Weighted Volatility [Part 4] [Video]. YouTube: [https://www.youtube.com/watch?v=UiETadtYaLY](https://www.youtube.com/watch?v=UiETadtYaLY).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Flash* *loans*: https://docs.aave.com/faq/flash-loans.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Jp12\. (2022, June 17). *Optimism bridge comparison*. Medium: [https://jp12.medium.com/optimism-bridge-comparison-453fa1f476f6](https://jp12.medium.com/optimism-bridge-comparison-453fa1f476f6).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Dogecoin. (n.d.). *Do only good everyday*. Dogecoin – An open-source peer-to-peer
    digital currency: [https://dogecoin.com/#what-is-dogecoin](https://dogecoin.com/#what-is-dogecoin).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'More Hop stats:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://dune.com/eliasimos/Bridge-Away-(from-Ethereum)](https://dune.com/eliasimos/Bridge-Away-(from-Ethereum))'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://dune.com/queries/417810](https://dune.com/queries/417810)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://dune.xyz/rchen8/Hop-Exchange](https://dune.xyz/rchen8/Hop-Exchange)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://DeFillama.com/protocol/hop-protocol](https://DeFillama.com/protocol/hop-protocol)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://cryptofees.info/](https://cryptofees.info/)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://vfat.tools/polygon/hop/](https://vfat.tools/polygon/hop/)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://explorer.hop.exchange/](https://explorer.hop.exchange/)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://app.hop.exchange/stats](https://app.hop.exchange/stats)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://volume.hop.exchange/](https://volume.hop.exchange/)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Hop Bridge. (n.d.). *Hop transfer diagram*. GitHub: [https://github.com/hop-exchange/contracts/blob/master/assets/Hop_Transfer_Diagrams.jpg](https://github.com/hop-exchange/contracts/blob/master/assets/Hop_Transfer_Diagrams.jpg).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following is a list of very valuable dashboards and analytical resources:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| **CoinStats** | [https://coinstats.app/](https://coinstats.app/es/) |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| **DeFillama** | [https://DeFillama.com/](https://DeFillama.com/) |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| **Debank** | [https://debank.com/](https://debank.com/) |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| **DeFiPulse** | [https://www.DeFipulse.com/](https://www.DeFipulse.com/)
    |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| **LoanScan** | [https://linen.app/interest-rates/](https://linen.app/interest-rates/)
    |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| **Nansen** | [https://www.nansen.ai/](https://www.nansen.ai/) |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| **Token Terminal** | [https://tokenterminal.com/terminal/markets/lending](https://tokenterminal.com/terminal/markets/lending)
    |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| **Zapper** | [https://zapper.xyz/dashboard](https://zapper.xyz/dashboard)
    |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| **Zerion** | [https://zerion.io/](https://zerion.io/) |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| **DEXTools** | [https://www.dextools.io/app/en](https://www.dextools.io/app/en)
    |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| **GeckoTerminal** | [https://www.geckoterminal.com/](https://www.geckoterminal.com/)
    |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| **Into** **the Block** | [https://www.intotheblock.com/](https://www.intotheblock.com/)
    |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| **Messari** | [https://messari.io/](https://messari.io/) |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| **Stablecoin dashboard** | [https://stablecoins.wtf/](https://stablecoins.wtf/)
    |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: Table 5.3 – A list of valuable dashboards
  prefs: []
  type: TYPE_NORMAL
- en: Part 2 Web3 Machine Learning Cases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this part of the book, we will apply common artificial intelligence tasks
    to Web3-related data. This approach offers us an overview of the tools commonly
    used in the Web3 space, building upon the data and sources explored in *Part 1*
    of the book.
  prefs: []
  type: TYPE_NORMAL
- en: 'This part comprises the following chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 6*](B19446_06.xhtml#_idTextAnchor210), *Preparing and Exploring Our
    Data*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 7*](B19446_07.xhtml#_idTextAnchor228), *A Primer on Machine Learning
    and Deep Learning*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 8*](B19446_08.xhtml#_idTextAnchor250), *Sentiment Analysis – NLP
    and Crypto-News*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 9*](B19446_09.xhtml#_idTextAnchor269), *Generative Art for NFTs*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 10*](B19446_10.xhtml#_idTextAnchor294), *A Primer on Security and
    Fraud Detection*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 11*](B19446_11.xhtml#_idTextAnchor307), *Price Prediction with Time
    Series*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 12*](B19446_12.xhtml#_idTextAnchor327), *Marketing Discovery with
    Graphs*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
