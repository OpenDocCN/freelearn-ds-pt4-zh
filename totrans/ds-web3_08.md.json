["```py\npip install nltk\n```", "```py\ntext = unidecode.unidecode(text)\n```", "```py\nnltk.download('stopwords')\nstop_words = set(stopwords.words('english'))\n```", "```py\nnltk.pos_tag\n```", "```py\nword= ['SEC', 'investigating', 'Coinbase', 'Earn', \\\n    'product', ',', 'wallet', 'service', 'exchange','activity']\n[nltk.pos_tag([w]) for w in word]\n[[('SEC', 'NNP')], [('investigating', 'VBG')], [('Coinbase', 'NN')], [('Earn', 'NN')], [('product', 'NN')], [(',', ',')], [('wallet', 'NN')], [('service', 'NN')], [('exchange', 'NN')], [('activity', 'NN')]]\n```", "```py\ninvestigate coinbase earn product wallet service exchange activity\n```", "```py\nmodel = Sequential()\nmodel.add(Embedding(input_dim = len(word_index) + 1 ,\\\n    output_dim = embedding_dim ,\\\n    weights = [embedding_vectors],\\\n    input_length = max_length ,\\\n    trainable = False))\n```", "```py\nmodel.add(Bidirectional(LSTM(embedding_dim, activation = 'relu',\\\n    dropout = 0.0 ,\\\n    recurrent_dropout = 0.0)))\nmodel.add(Dense(embedding_dim, activation='relu'))\nmodel.add(Dropout(0.3))\n```", "```py\nmodel.add(Dense(label_distinct, activation='softmax',\\\n    bias_initializer =  'zeros'))\n```", "```py\nmodel.compile(loss = 'categorical_crossentropy',\\\n    optimizer = Adam(1e-3), \\\n    metrics = ['accuracy'])\n```", "```py\nmodel.fit(X_train_pad, y_train, batch_size = batch_size, \\\n    epochs = 10, validation_data = (X_test_pad, y_test), \\\n    verbose = 0, callbacks=[tensorboard_callback])\n```", "```py\ntensorboard_callback = \\\n    tf.keras.callbacks.TensorBoard(log_dir=\"./logs\")\n```", "```py\nclassification_report(y_test, y_pred_onehot, target_names=target_names\n```", "```py\ntext_tokenizer_json = tokenizer.to_json()\nwith io.open('text_tokenizer.json','w',encoding='utf-8') as f:\n    f.write(json.dumps(text_tokenizer_json, \\\n        ensure_ascii=False))\nmodel.save('chapter8_model.h5')\n```"]