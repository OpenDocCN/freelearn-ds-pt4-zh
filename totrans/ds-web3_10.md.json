["```py\npip install eth-utils\n```", "```py\n    def checksum_encode(addr):\n        hex_addr = addr.hex()\n        checksummed_buffer = \"\"\n        hashed_address = eth_utils.keccak(text=hex_addr).hex()\n        for nibble_index, character in enumerate(hex_addr):\n            if character in \"0123456789\":\n    checksummed_buffer += character\n            elif character in \"abcdef\":\n                hashed_address_nibble = int(hashed_address[nibble_index], 16)\n                if hashed_address_nibble > 7:\n                    checksummed_buffer += character.upper()\n                else:\n                    checksummed_buffer += character\n            else:\n                raise eth_utils.ValidationError(\n                    f\"Unrecognized hex character {character!r} at position {nibble_index}\"\n    )\n        return \"0x\" + checksummed_buffer\n    def test(addr_str):\n        addr_bytes = eth_utils.to_bytes(hexstr=addr_str)\n        checksum_encoded = checksum_encode(addr_bytes)\n        try:\n          assert checksum_encoded == addr_str, f\"{checksum_encoded} != expected {addr_str}\"\n        except AssertionError:\n          return checksum_encoded\n    def address_validation(addr_str):\n        if len(addr_str) == 42:\n    result = test(addr_str)\n        else:\n            result = \"not an ethereum address\"\n        return result\n    ```", "```py\n    Chapter10/Rebuilding.ipynb.\n    ```", "```py\n    variance_df= df.nunique()\n    ```"]