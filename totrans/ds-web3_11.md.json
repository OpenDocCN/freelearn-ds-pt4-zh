["```py\npip install statsmodels\n```", "```py\npip install pmdarima\n```", "```py\npip install yfinance\n```", "```py\ndecompose = seasonal_decompose(df, model= 'additive').plot(observed=True, seasonal=True, trend=True, resid=True, weights=False)\n```", "```py\ndata=yf.Ticker('BTC-USD')\ndf= data.history (start='YEAR-MONTH-DAY', end='YEAR-MONTH-DAY')\n```", "```py\ndf = df.set_index(pd.DatetimeIndex(df['Date'], freq='D'))\n```", "```py\nfrom pandas.tseries.holiday import USFederalHolidayCalendar\n```", "```py\nfrom pandas.tseries.offsets import CustomBusinessDay\n```", "```py\nfrom sklearn.model_selection import TimeSeriesSplit\n```", "```py\ndf.diff().dropna()\n```", "```py\npacf_td = plot_pacf(training_data)\n```", "```py\nacf_diff = plot_acf(df_train_diff)\n```", "```py\npm.auto_arima(training_data, stepwise=False, seasonal=True, n_jobs=-1, trace=True)\n```", "```py\n    sentiment_mapping = {\n        'Positive': 1,\n        'Negative': -1,\n        'Neutral': -1\n    z-score value, which behaves as a threshold against which we will identify outliers. Those considered outliers are multiplied by 2\\. This is done with the following code in the traditional_time_series_models.ipynb file:\n\n    ```", "```py\n\n    ```", "```py\ntesting_data= np.exp(testing_data)\nforecast_test=np.exp(forecast_test)\nrmse_exog = np.sqrt(mean_squared_error(testing_data, forecast_test))\n```", "```py\nmodel= Sequential ()\nmodel.add (LSTM(50, return_sequences=True, input_shape=(x_train.shape[1],1)))\nmodel.add (LSTM (50, return_sequences = False))\nmodel.add (Dense(25))\nmodel.add (Dense(1))\n```", "```py\nmodel.compile (optimizer='Adam', loss='mean_squared_error')\n```", "```py\ntensorboard_callback = tf.keras.callbacks.TensorBoard(log_dir=\"./logs\")\n```", "```py\nmodel.fit (x_train, y_train, batch_size=10, epochs=35,callbacks=[tensorboard_callback])\n```", "```py\nnp.sqrt(mean_squared_error(y_test, predictions))\n```"]