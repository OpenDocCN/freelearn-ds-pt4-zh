["```py\npip install networkx\n```", "```py\npip install stellargraph\n```", "```py\nsql =SELECT from_address, to_address, tx_hash\nFROM ethereum.core.fact_transactions\nWHERE block_timestamp >= '2023-01-01T00:00:00.000Z'\n  and   block_timestamp <= '2023-06-01T00:00:00.000Z'\n  and to_address in ('0x28c6c06298d514db089934071355e5743bf21d60', '0x7f268357a8c2552623316e2562d90e642bb538e5')\n  limit [800]\n```", "```py\npartition = community.best_partition(G)\n```", "```py\nfrom stellargraph import StellarGraph\nG = StellarGraph({\"features\": addresses_no_community}, {\"transactions\": edges})\n```", "```py\ngraphsage_model = GraphSAGE(\n    layer_sizes=[32, 32], generator=generator, bias=True, dropout=0.5,)\n```", "```py\nprediction = layers.Dense(units=train_targets.shape[1], activation=\"sigmoid\")(x_out)\n```", "```py\nhistory = model.fit(\n    train_gen, epochs=20, verbose=2, shuffle=True)\n```", "```py\ntarget_encoding.inverse_transform(all_predictions)\n```"]