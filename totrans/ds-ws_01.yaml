- en: 1\. Introduction to Data Science in Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Overview
  prefs: []
  type: TYPE_NORMAL
- en: This very first chapter will introduce you to the field of data science and
    walk you through an overview of Python's core concepts and their application in
    the world of data science.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you will be able to explain what data science is
    and distinguish between supervised and unsupervised learning. You will also be
    able to explain what machine learning is and distinguish between regression, classification,
    and clustering problems. You'll have learnt to create and manipulate different
    types of Python variable, including core variables, lists, and dictionaries. You'll
    be able to build a `for` loop, print results using f-strings, define functions,
    import Python packages and load data in different formats using `pandas`. You
    will also have had your first taste of training a model using scikit-learn.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Welcome to the fascinating world of data science! We are sure you must be pretty
    excited to start your journey and learn interesting and exciting techniques and
    algorithms. This is exactly what this book is intended for.
  prefs: []
  type: TYPE_NORMAL
- en: 'But before diving into it, let''s define what data science is: it is a combination
    of multiple disciplines, including business, statistics, and programming, that
    intends to extract meaningful insights from data by running controlled experiments
    similar to scientific research.'
  prefs: []
  type: TYPE_NORMAL
- en: The objective of any data science project is to derive valuable knowledge for
    the business from data in order to make better decisions. It is the responsibility
    of data scientists to define the goals to be achieved for a project. This requires
    business knowledge and expertise. In this book, you will be exposed to some examples
    of data science tasks from real-world datasets.
  prefs: []
  type: TYPE_NORMAL
- en: Statistics is a mathematical field used for analyzing and finding patterns from
    data. A lot of the newest and most advanced techniques still rely on core statistical
    approaches. This book will present to you the basic techniques required to understand
    the concepts we will be covering.
  prefs: []
  type: TYPE_NORMAL
- en: With an exponential increase in data generation, more computational power is
    required for processing it efficiently. This is the reason why programming is
    a required skill for data scientists. You may wonder why we chose Python for this
    Workshop. That's because Python is one of the most popular programming languages
    for data science. It is extremely easy to learn how to code in Python thanks to
    its simple and easily readable syntax. It also has an incredible number of packages
    available to anyone for free, such as pandas, scikit-learn, TensorFlow, and PyTorch.
    Its community is expanding at an incredible rate, adding more and more new functionalities
    and improving its performance and reliability. It's no wonder companies such as
    Facebook, Airbnb, and Google are using it as one of their main stacks. No prior
    knowledge of Python is required for this book. If you do have some experience
    with Python or other programming languages, then this will be an advantage, but
    all concepts will be fully explained, so don't worry if you are new to programming.
  prefs: []
  type: TYPE_NORMAL
- en: Application of Data Science
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As mentioned in the introduction, data science is a multidisciplinary approach
    to analyzing and identifying complex patterns and extracting valuable insights
    from data. Running a data science project usually involves multiple steps, including
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Defining the business problem to be solved
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Collecting or extracting existing data
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Analyzing, visualizing, and preparing data
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Training a model to spot patterns in data and make predictions
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Assessing a model's performance and making improvements
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Communicating and presenting findings and gained insights
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Deploying and maintaining a model
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As its name implies, data science projects require data, but it is actually
    more important to have defined a clear business problem to solve first. If it's
    not framed correctly, a project may lead to incorrect results as you may have
    used the wrong information, not prepared the data properly, or led a model to
    learn the wrong patterns. So, it is absolutely critical to properly define the
    scope and objective of a data science project with your stakeholders.
  prefs: []
  type: TYPE_NORMAL
- en: There are a lot of data science applications in real-world situations or in
    business environments. For example, healthcare providers may train a model for
    predicting a medical outcome or its severity based on medical measurements, or
    a high school may want to predict which students are at risk of dropping out within
    a year's time based on their historical grades and past behaviors. Corporations
    may be interested to know the likelihood of a customer buying a certain product
    based on his or her past purchases. They may also need to better understand which
    customers are more likely to stop using existing services and churn. These are
    examples where data science can be used to achieve a clearly defined goal, such
    as increasing the number of patients detected with a heart condition at an early
    stage or reducing the number of customers canceling their subscriptions after
    six months. That sounds exciting, right? Soon enough, you will be working on such
    interesting projects.
  prefs: []
  type: TYPE_NORMAL
- en: What Is Machine Learning?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When we mention data science, we usually think about machine learning, and some
    people may not understand the difference between them. Machine learning is the
    field of building algorithms that can learn patterns by themselves without being
    programmed explicitly. So machine learning is a family of techniques that can
    be used at the modeling stage of a data science project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Machine learning is composed of three different types of learning:'
  prefs: []
  type: TYPE_NORMAL
- en: Supervised learning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unsupervised learning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reinforcement learning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Supervised Learning
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Supervised learning refers to a type of task where an algorithm is trained
    to learn patterns based on prior knowledge. That means this kind of learning requires
    the labeling of the outcome (also called the response variable, dependent variable,
    or target variable) to be predicted beforehand. For instance, if you want to train
    a model that will predict whether a customer will cancel their subscription, you
    will need a dataset with a column (or variable) that already contains the churn
    outcome (cancel or not cancel) for past or existing customers. This outcome has
    to be labeled by someone prior to the training of a model. If this dataset contains
    5,000 observations, then all of them need to have the outcome being populated.
    The objective of the model is to learn the relationship between this outcome column
    and the other features (also called independent variables or predictor variables).
    Following is an example of such a dataset:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.1: Example of customer churn dataset'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15019_01_01.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.1: Example of customer churn dataset'
  prefs: []
  type: TYPE_NORMAL
- en: The `Cancel` column is the response variable. This is the column you are interested
    in, and you want the model to predict accurately the outcome for new input data
    (in this case, new customers). All the other columns are the predictor variables.
  prefs: []
  type: TYPE_NORMAL
- en: 'The model, after being trained, may find the following pattern: a customer
    is more likely to cancel their subscription after 12 months and if their average
    monthly spent is over `$50`. So, if a new customer has gone through 15 months
    of subscription and is spending $85 per month, the model will predict this customer
    will cancel their contract in the future.'
  prefs: []
  type: TYPE_NORMAL
- en: 'When the response variable contains a limited number of possible values (or
    classes), it is a classification problem (you will learn more about this in *Chapter
    3, Binary Classification*, and *Chapter 4, Multiclass Classification with RandomForest*).
    The model will learn how to predict the right class given the values of the independent
    variables. The churn example we just mentioned is a classification problem as
    the response variable can only take two different values: `yes` or `no`.'
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, if the response variable can have a value from an infinite
    number of possibilities, it is called a regression problem.
  prefs: []
  type: TYPE_NORMAL
- en: An example of a regression problem is where you are trying to predict the exact
    number of mobile phones produced every day for some manufacturing plants. This
    value can potentially range from 0 to an infinite number (or a number big enough
    to have a large range of potential values), as shown in *Figure 1.2*.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.2: Example of a mobile phone production dataset'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15019_01_02.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.2: Example of a mobile phone production dataset'
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding figure, you can see that the values for `Daily output` can
    take any value from `15000` to more than `50000`. This is a regression problem,
    which we will look at in *Chapter 2, Regression*.
  prefs: []
  type: TYPE_NORMAL
- en: Unsupervised Learning
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Unsupervised learning is a type of algorithm that doesn't require any response
    variables at all. In this case, the model will learn patterns from the data by
    itself. You may ask what kind of pattern it can find if there is no target specified
    beforehand.
  prefs: []
  type: TYPE_NORMAL
- en: This type of algorithm usually can detect similarities between variables or
    records, so it will try to group those that are very close to each other. This
    kind of algorithm can be used for clustering (grouping records) or dimensionality
    reduction (reducing the number of variables). Clustering is very popular for performing
    customer segmentation, where the algorithm will look to group customers with similar
    behaviors together from the data. *Chapter 5*, *Performing Your First Cluster
    Analysis*, will walk you through an example of clustering analysis.
  prefs: []
  type: TYPE_NORMAL
- en: Reinforcement Learning
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Reinforcement learning is another type of algorithm that learns how to act in
    a specific environment based on the feedback it receives. You may have seen some
    videos where algorithms are trained to play Atari games by themselves. Reinforcement
    learning techniques are being used to teach the agent how to act in the game based
    on the rewards or penalties it receives from the game.
  prefs: []
  type: TYPE_NORMAL
- en: For instance, in the game Pong, the agent will learn to not let the ball drop
    after multiple rounds of training in which it receives high penalties every time
    the ball drops.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Reinforcement learning algorithms are out of scope and will not be covered in
    this book.
  prefs: []
  type: TYPE_NORMAL
- en: Overview of Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As mentioned earlier, Python is one of the most popular programming languages
    for data science. But before diving into Python's data science applications, let's
    have a quick introduction to some core Python concepts.
  prefs: []
  type: TYPE_NORMAL
- en: Types of Variable
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In Python, you can handle and manipulate different types of variables. Each
    has its own specificities and benefits. We will not go through every single one
    of them but rather focus on the main ones that you will have to use in this book.
    For each of the following code examples, you can run the code in Google Colab
    to view the given output.
  prefs: []
  type: TYPE_NORMAL
- en: Numeric Variables
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The most basic variable type is numeric. This can contain integer or decimal
    (or float) numbers, and some mathematical operations can be performed on top of
    them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s use an integer variable called `var1` that will take the value `8` and
    another one called `var2` with the value `160.88`, and add them together with
    the `+` operator, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.3: Output of the addition of two variables'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15019_01_03.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.3: Output of the addition of two variables'
  prefs: []
  type: TYPE_NORMAL
- en: In Python, you can perform other mathematical operations on numerical variables,
    such as multiplication (with the `*` operator) and division (with `/`).
  prefs: []
  type: TYPE_NORMAL
- en: Text Variables
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Another interesting type of variable is `string`, which contains textual information.
    You can create a variable with some specific text using the single or double quote,
    as shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'In order to display the content of a variable, you can call the `print()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.4: Printing the two text variables'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15019_01_04.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.4: Printing the two text variables'
  prefs: []
  type: TYPE_NORMAL
- en: Python also provides an interface called f-strings for printing text with the
    value of defined variables. It is very handy when you want to print results with
    additional text to make it more readable and interpret results. It is also quite
    common to use f-strings to print logs. You will need to add `f` before the quotes
    (or double quotes) to specify that the text will be an f-string. Then you can
    add an existing variable inside the quotes and display the text with the value
    of this variable. You need to wrap the variable with curly brackets, `{}`.
  prefs: []
  type: TYPE_NORMAL
- en: 'For instance, if we want to print `Text:` before the values of `var3` and `var4`,
    we will write the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.5: Printing with f-strings'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15019_01_05.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.5: Printing with f-strings'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also perform some text-related transformations with string variables,
    such as capitalizing or replacing characters. For instance, you can concatenate
    the two variables together with the `+` operator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.6: Concatenation of the two text variables'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15019_01_06.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.6: Concatenation of the two text variables'
  prefs: []
  type: TYPE_NORMAL
- en: Python List
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Another very useful type of variable is the list. It is a collection of items
    that can be changed (you can add, update, or remove items). To declare a list,
    you will need to use square brackets, `[]`, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.7: List containing only string items'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15019_01_07.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.7: List containing only string items'
  prefs: []
  type: TYPE_NORMAL
- en: 'A list can have different item types, so you can mix numerical and text variables
    in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.8: List containing numeric and string items'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15019_01_08.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.8: List containing numeric and string items'
  prefs: []
  type: TYPE_NORMAL
- en: 'An item in a list can be accessed by its index (its position in the list).
    To access the first (index 0) and third elements (index 2) of a list, you do the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: In Python, all indexes start at `0`.
  prefs: []
  type: TYPE_NORMAL
- en: 'You should get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.9: The first and third items in the var6 list'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15019_01_09.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.9: The first and third items in the var6 list'
  prefs: []
  type: TYPE_NORMAL
- en: 'Python provides an API to access a range of items using the `:` operator. You
    just need to specify the starting index on the left side of the operator and the
    ending index on the right side. The ending index is always excluded from the range.
    So, if you want to get the first three items (index 0 to 2), you should do as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.10: The first three items of var6'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15019_01_10.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.10: The first three items of var6'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also iterate through every item of a list using a `for` loop. If you
    want to print every item of the `var6` list, you should do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.11: Output of the for loop'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15019_01_11.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.11: Output of the for loop'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can add an item at the end of the list using the `.append()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.12: Output of var6 after inserting the ''Python'' item'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15019_01_12.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.12: Output of var6 after inserting the ''Python'' item'
  prefs: []
  type: TYPE_NORMAL
- en: 'To delete an item from the list, you use the `.remove()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.13: Output of var6 after removing the ''15019'' item'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15019_01_13.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.13: Output of var6 after removing the ''15019'' item'
  prefs: []
  type: TYPE_NORMAL
- en: Python Dictionary
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Another very popular Python variable used by data scientists is the dictionary
    type. For example, it can be used to load JSON data into Python so that it can
    then be converted into a DataFrame (you will learn more about the JSON format
    and DataFrames in the following sections). A dictionary contains multiple elements,
    like a `{}`, and specify the keys and values separated by `:`, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.14: Output of var7'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15019_01_14.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.14: Output of var7'
  prefs: []
  type: TYPE_NORMAL
- en: 'To access a specific value, you need to provide the corresponding key name.
    For instance, if you want to get the value `Python`, you do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.15: Value for the ''Language'' key'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15019_01_15.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.15: Value for the ''Language'' key'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Each key-value pair in a dictionary needs to be unique.
  prefs: []
  type: TYPE_NORMAL
- en: 'Python provides a method to access all the key names from a dictionary, `.keys()`,
    which is used as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.16: List of key names'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15019_01_16.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.16: List of key names'
  prefs: []
  type: TYPE_NORMAL
- en: 'There is also a method called `.values()`, which is used to access all the
    values of a dictionary:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.17: List of values'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15019_01_17.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.17: List of values'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can iterate through all items from a dictionary using a `for` loop and
    the `.items()` method, as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.18: Output after iterating through the items of a dictionary'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15019_01_18.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.18: Output after iterating through the items of a dictionary'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can add a new element in a dictionary by providing the key name like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.19: Output of a dictionary after adding an item'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15019_01_19.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.19: Output of a dictionary after adding an item'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can delete an item from a dictionary with the `del` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.20: Output of a dictionary after removing an item'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15019_01_20.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.20: Output of a dictionary after removing an item'
  prefs: []
  type: TYPE_NORMAL
- en: In *Exercise 1.01*, *Creating a Dictionary That Will Contain Machine Learning
    Algorithms*, we will be looking to use these concepts that we've just looked at.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: If you are interested in exploring Python in more depth, head over to our website
    ([https://packt.live/2FcXpOp](https://packt.live/2FcXpOp)) to get yourself the
    Python Workshop.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 1.01: Creating a Dictionary That Will Contain Machine Learning Algorithms'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this exercise, we will create a dictionary using Python that will contain
    a collection of different machine learning algorithms that will be covered in
    this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following steps will help you complete the exercise:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Every exercise and activity in this book is to be executed on Google Colab.
  prefs: []
  type: TYPE_NORMAL
- en: Open on a new Colab notebook.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a list called `algorithm` that will contain the following elements:
    `Linear Regression`, `Logistic Regression`, `RandomForest`, and `a3c`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, create a list called `learning` that will contain the following elements:
    `Supervised`, `Supervised`, `Supervised`, and `Reinforcement`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a list called `algorithm_type` that will contain the following elements:
    `Regression`, `Classification`, `Regression or Classification`, and `Game AI`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add an item called `k-means` into the `algorithm` list using the `.append()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Display the content of `algorithm` using the `print()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You should get the following output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 1.21: Output of ''algorithm'''
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15019_01_21.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 1.21: Output of ''algorithm'''
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: From the preceding output, we can see that we added the `k-means` item to the list.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, add the `Unsupervised` item into the `learning` list using the `.append()`
    method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Display the content of `learning` using the `print()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You should get the following output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 1.22: Output of ''learning'''
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15019_01_22.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 1.22: Output of ''learning'''
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: From the preceding output, we can see that we added the `Unsupervised` item
    into the list.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the `Clustering` item into the `algorithm_type` list using the `.append()`
    method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Display the content of `algorithm_type` using the `print()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You should get the following output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 1.23: Output of ''algorithm_type'''
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15019_01_23.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 1.23: Output of ''algorithm_type'''
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: From the preceding output, we can see that we added the `Clustering` item into
    the list.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create an empty dictionary called `machine_learning` using curly brackets, `{}`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new item in `machine_learning` with the key as `algorithm` and the
    value as all the items from the `algorithm` list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Display the content of `machine_learning` using the `print()` function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You should get the following output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 1.24: Output of ''machine_learning'''
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15019_01_24.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 1.24: Output of ''machine_learning'''
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: From the preceding output, we notice that we have created a dictionary from
    the `algorithm` list.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create a new item in `machine_learning` with the key as `learning` and the
    value as all the items from the `learning` list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, create a new item in `machine_learning` with the key as `algorithm_type`
    and the value as all the items from the algorithm_type list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Display the content of `machine_learning` using the `print()` function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You should get the following output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 1.25: Output of ''machine_learning'''
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15019_01_25.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 1.25: Output of ''machine_learning'''
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Remove the `a3c` item from the `algorithm` key using the `.remove()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Display the content of the `algorithm` item from the `machine_learning` dictionary
    using the `print()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You should get the following output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 1.26: Output of ''algorithm'' from ''machine_learning'''
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15019_01_26.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 1.26: Output of ''algorithm'' from ''machine_learning'''
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Remove the `Reinforcement` item from the `learning` key using the `.remove()`
    method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Remove the `Game AI` item from the `algorithm_type` key using the `.remove()`
    method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Display the content of `machine_learning` using the `print()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You should get the following output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 1.27: Output of ''machine_learning'''
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15019_01_27.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 1.27: Output of ''machine_learning'''
  prefs: []
  type: TYPE_NORMAL
- en: You have successfully created a dictionary containing the machine learning algorithms
    that you will come across in this book. You learned how to create and manipulate
    Python lists and dictionaries.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: To access the source code for this specific section, please refer to [https://packt.live/315EmRP](https://packt.live/315EmRP).
  prefs: []
  type: TYPE_NORMAL
- en: You can also run this example online at [https://packt.live/3ay1tYg](https://packt.live/3ay1tYg).
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next section, you will learn more about the two main Python packages
    used for data science:'
  prefs: []
  type: TYPE_NORMAL
- en: '`pandas`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`scikit-learn`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python for Data Science
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Python offers an incredible number of packages for data science. A package is
    a collection of prebuilt functions and classes shared publicly by its author(s).
    These packages extend the core functionalities of Python. The Python Package Index
    ([https://packt.live/37iTRXc](https://packt.live/37iTRXc)) lists all the packages
    available in Python.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we will present to you two of the most popular ones: `pandas`
    and `scikit-learn`.'
  prefs: []
  type: TYPE_NORMAL
- en: The pandas Package
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The pandas package provides an incredible amount of APIs for manipulating data
    structures. The two main data structures defined in the `pandas` package are `DataFrame`
    and `Series`.
  prefs: []
  type: TYPE_NORMAL
- en: DataFrame and Series
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A `DataFrame` is a tabular data structure that is represented as a two-dimensional
    table. It is composed of rows, columns, indexes, and cells. It is very similar
    to a sheet in Excel or a table in a database:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.28: Components of a DataFrame'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15019_01_28.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.28: Components of a DataFrame'
  prefs: []
  type: TYPE_NORMAL
- en: 'In *Figure 1.28*, there are three different columns: `algorithm`, `learning`,
    and `type`. Each of these columns (also called variables) contains a specific
    type of information. For instance, the `algorithm` variable lists the names of
    different machine learning algorithms.'
  prefs: []
  type: TYPE_NORMAL
- en: A row stores the information related to a record (also called an observation).
    For instance, row number `2` (index number `2`) refers to the `RandomForest` record
    and all its attributes are stored in the different columns.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, a cell is the value of a given row and column. For example, `Clustering`
    is the value of the cell of the row index `2` and the `type` column. You can see
    it as the intersection of a specified row and column.
  prefs: []
  type: TYPE_NORMAL
- en: So, a DataFrame is a structured representation of some data organized by rows
    and columns. A row represents an observation and each column contains the value
    of its attributes. This is the most common data structure used in data science.
  prefs: []
  type: TYPE_NORMAL
- en: In pandas, a DataFrame is represented by the `DataFrame` class. A `pandas` DataFrame
    is composed of `pandas` Series, which are 1-dimensional arrays. A `pandas` Series
    is basically a single column in a DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: 'Data is usually classified into two groups: *structured* and *unstructured*.
    Think of structured data as database tables or Excel spreadsheets where each column
    and row has a predefined structure. For example, in a table or spreadsheet that
    lists all the employees of a company, every record will follow the same pattern,
    such as the first column containing the date of birth, the second and third ones
    being for first and last names, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: 'On the other hand, unstructured data is not organized with predefined and static
    patterns. Text and images are good examples of unstructured data. If you read
    a book and look at each sentence, it will not be possible for you to say that
    the second word of a sentence is always a verb or a person''s name; it can be
    anything depending on how the author wanted to convey the information they wanted
    to share. Each sentence has its own structure and will be different from the last.
    Similarly, for a group of images, you can''t say that pixels 20 to 30 will always
    represent the eye of a person or the wheel of a car: it will be different for
    each image.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Data can come from different data sources: there could be flat files, data
    storage, or Application Programming Interface (API) feeds, for example. In this
    book, we will work with flat files such as CSVs, Excel spreadsheets, or JSON.
    All these types of files are storing information with their own format and structure.'
  prefs: []
  type: TYPE_NORMAL
- en: We'll have a look at the CSV file first.
  prefs: []
  type: TYPE_NORMAL
- en: CSV Files
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'CSV files use the comma character—`,`—to separate columns and newlines for
    a new row. The previous example of a DataFrame would look like this in a CSV file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'In Python, you need to first import the packages you require before being able
    to use them. To do so, you will have to use the `import` command. You can create
    an alias of each imported package using the `as` keyword. It is quite common to
    import the `pandas` package with the alias `pd`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '`pandas` provides a `.read_csv()` method to easily load a CSV file directly
    into a DataFrame. You just need to provide the path or the URL to the CSV file,
    as shown below.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Watch out for the slashes in the string below. Remember that the backslashes
    ( `\` ) are used to split the code across multiple lines, while the forward slashes
    ( `/` ) are part of the URL.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.29: DataFrame after loading a CSV file'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15019_01_29.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.29: DataFrame after loading a CSV file'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'In this book, we will be loading datasets stored in the Packt GitHub repository:
    [https://packt.live/2ucwsId](https://packt.live/2ucwsId).'
  prefs: []
  type: TYPE_NORMAL
- en: GitHub wraps stored data into its own specific format. To load the original
    version of a dataset, you will need to load the raw version of it by clicking
    on the **Raw** button and copying the URL provided on your browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'Have a look at *Figure 1.30*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.30: Getting the URL of a raw dataset on GitHub'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15019_01_30.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.30: Getting the URL of a raw dataset on GitHub'
  prefs: []
  type: TYPE_NORMAL
- en: Excel Spreadsheets
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Excel is a Microsoft tool and is very popular in the industry. It has its own
    internal structure for recording additional information, such as the data type
    of each cell or even Excel formulas. There is a specific method in `pandas` to
    load Excel spreadsheets called `.read_excel()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.31: Dataframe after loading an Excel spreadsheet'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15019_01_31.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.31: Dataframe after loading an Excel spreadsheet'
  prefs: []
  type: TYPE_NORMAL
- en: JSON
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'JSON is a very popular file format, mainly used for transferring data from
    web APIs. Its structure is very similar to that of a Python dictionary with key-value
    pairs. The example DataFrame we used before would look like this in JSON format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'As you may have guessed, there is a `pandas` method for reading JSON data as
    well, and it is called `.read_json()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.32: Dataframe after loading JSON data'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15019_01_32.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.32: Dataframe after loading JSON data'
  prefs: []
  type: TYPE_NORMAL
- en: '`pandas` provides more methods to load other types of files. The full list
    can be found in the following documentation: [https://packt.live/2FiYB2O](https://packt.live/2FiYB2O).'
  prefs: []
  type: TYPE_NORMAL
- en: pandas is not limited to only loading data into DataFrames; it also provides
    a lot of other APIs for creating, analyzing, or transforming DataFrames. You will
    be introduced to some of its most useful methods in the following chapters.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 1.02: Loading Data of Different Formats into a pandas DataFrame'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this exercise, we will practice loading different data formats, such as CSV,
    TSV, and XLSX, into pandas DataFrames. The dataset we will use is the Top 10 Postcodes
    for the First Home Owner Grants dataset (this is a grant provided by the Australian
    government to help first-time real estate buyers). It lists the 10 postcodes (also
    known as zip codes) with the highest number of First Home Owner grants.
  prefs: []
  type: TYPE_NORMAL
- en: In this dataset, you will find the number of First Home Owner grant applications
    for each postcode and the corresponding suburb.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: This dataset can be found on our GitHub repository at [https://packt.live/2FgAT7d](https://packt.live/2FgAT7d).
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, it is publicly available here: [https://packt.live/2ZJBYhi](https://packt.live/2ZJBYhi).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following steps will help you complete the exercise:'
  prefs: []
  type: TYPE_NORMAL
- en: Open a new Colab notebook.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the pandas package, as shown in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new variable called `csv_url` containing the URL to the raw CSV file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Load the CSV file into a DataFrame using the pandas `.read_csv()` method. The
    first row of this CSV file contains the name of the file, which you can see if
    you open the file directly. You will need to exclude this row by using the `skiprows=1`
    parameter. Save the result in a variable called `csv_df` and print it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You should get the following output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 1.33: The DataFrame after loading the CSV file'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15019_01_33.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 1.33: The DataFrame after loading the CSV file'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create a new variable called `tsv_url` containing the URL to the raw TSV file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: A TSV file is similar to a CSV file but instead of using the comma character
    (`,`) as a separator, it uses the tab character (`\t`).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Load the TSV file into a DataFrame using the pandas .`read_csv()` method and
    specify the `skiprows=1` and `sep=''\t''` parameters. Save the result in a variable
    called `tsv_df` and print it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You should get the following output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 1.34: The DataFrame after loading the TSV file'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15019_01_34.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 1.34: The DataFrame after loading the TSV file'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create a new variable called `xlsx_url` containing the URL to the raw Excel spreadsheet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Load the Excel spreadsheet into a DataFrame using the pandas `.read_excel()`
    method. Save the result in a variable called `xlsx_df` and print it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You should get the following output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 1.35: Display of the DataFrame after loading the Excel spreadsheet'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15019_01_35.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 1.35: Display of the DataFrame after loading the Excel spreadsheet'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: By default, `.read_excel()` loads the first sheet of an Excel spreadsheet. In
    this example, the data we're looking for is actually stored in the second sheet.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Load the Excel spreadsheet into a Dataframe using the pandas `.read_excel()`
    method and specify the `skiprows=1` and `sheet_name=1` parameters. (Note that
    the `sheet_name` parameter is zero-indexed, so `sheet_name=0` returns the first
    sheet, while `sheet_name=1` returns the second sheet.) Save the result in a variable
    called `xlsx_df1` and print it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You should get the following output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 1.36: The DataFrame after loading the second sheet of the Excel spreadsheet'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15019_01_36.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 1.36: The DataFrame after loading the second sheet of the Excel spreadsheet'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: To access the source code for this specific section, please refer to [https://packt.live/2Yajzuq](https://packt.live/2Yajzuq).
  prefs: []
  type: TYPE_NORMAL
- en: You can also run this example online at [https://packt.live/2Q4dThe](https://packt.live/2Q4dThe).
  prefs: []
  type: TYPE_NORMAL
- en: In this exercise, we learned how to load the Top 10 Postcodes for First Home
    Buyer Grants dataset from different file formats.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will be introduced to scikit-learn.
  prefs: []
  type: TYPE_NORMAL
- en: Scikit-Learn
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Scikit-learn (also referred to as `sklearn`) is another extremely popular package
    used by data scientists. The main purpose of `sklearn` is to provide APIs for
    processing data and training machine learning algorithms. But before moving ahead,
    we need to know what a model is.
  prefs: []
  type: TYPE_NORMAL
- en: What Is a Model?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A machine learning model learns patterns from data and creates a mathematical
    function to generate predictions. A supervised learning algorithm will try to
    find the relationship between a response variable and the given features.
  prefs: []
  type: TYPE_NORMAL
- en: Have a look at the following example.
  prefs: []
  type: TYPE_NORMAL
- en: 'A mathematical function can be represented as a function, ƒ(), that is applied
    to some input variables, X (which is composed of multiple features), and will
    calculate an output (or prediction), ŷ:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.37: Function f(X)'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15019_01_37.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.37: Function f(X)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The function, ƒ(), can be quite complex and have different numbers of parameters.
    If we take a linear regression (this will be presented in more detail in *Chapter
    2*, *Regression*) as an example, the model parameters can be represented as W=(
    w1, w2, ... , wn). So, the function we saw earlier will become as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.38: Function for linear regression'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15019_01_38.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.38: Function for linear regression'
  prefs: []
  type: TYPE_NORMAL
- en: A machine learning algorithm will receive some examples of input *X* with the
    relevant output, *y*, and its goal will be to find the values of ( w1, w2, ...
    , wn) that will minimize the difference between its prediction, *ŷ* and the true
    output, *y*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The previous formulas can be a bit intimidating, but this is actually quite
    simple. Let''s say we have a dataset composed of only one target variable y and
    one feature X, such as the following one:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.39: Example of a dataset with one target variable and one feature'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15019_01_39.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.39: Example of a dataset with one target variable and one feature'
  prefs: []
  type: TYPE_NORMAL
- en: 'If we fit a linear regression on this dataset, the algorithm will try to find
    a solution for the following equation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.40: Function f(x) for linear regression fitting on a dataset'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15019_01_40.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.40: Function f(x) for linear regression fitting on a dataset'
  prefs: []
  type: TYPE_NORMAL
- en: 'o, it just needs to find the values of the `w0` and `w`1 parameters that will
    approximate the data as closely as possible. In this case, the algorithm may come
    up with `wo = 0` and `w1 = 10`. So, the function the model learns will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.41: Function f(x) using estimated values'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15019_01_41.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.41: Function f(x) using estimated values'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can visualize this on the same graph as for the data:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.42: Fitted linear model on the example dataset'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15019_01_42.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.42: Fitted linear model on the example dataset'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can see that the fitted model (the orange line) is approximating the original
    data quite closely. So, if we predict the outcome for a new data point, it will
    be very close to the true value. For example, if we take a point that is close
    to 5 (let''s say its values are `x = 5.1` and `y = 48`), the model will predict
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.43: Model prediction'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15019_01_43.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.43: Model prediction'
  prefs: []
  type: TYPE_NORMAL
- en: This value is actually very close to the ground truth, 48 (red circle). So,
    our model prediction is quite accurate.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is it. It is quite simple, right? In general, a dataset will have more
    than one feature, but the logic will be the same: the trained model will try to
    find the best parameters for each variable to get predictions as close as possible
    to the true values.'
  prefs: []
  type: TYPE_NORMAL
- en: We just saw an example of linear models, but there are actually other types
    of machine learning algorithms, such as tree-based or neural networks, that can
    find more complex patterns from data.
  prefs: []
  type: TYPE_NORMAL
- en: Model Hyperparameters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: On top of the model parameters that are learned automatically by the algorithm
    (now you understand why we call it machine learning), there is also another type
    of parameter called the hyperparameter. Hyperparameters cannot be learned by the
    model. They are set by data scientists in order to define some specific conditions
    for the algorithm learning process. These hyperparameters are different for each
    family of algorithms and they can, for instance, help fast-track the learning
    process or limit the risk of overfitting. In this book, you will learn how to
    tune some of these machine learning hyperparameters.
  prefs: []
  type: TYPE_NORMAL
- en: The sklearn API
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As mentioned before, the scikit-learn (or `sklearn`) package has implemented
    an incredible amount of machine learning algorithms, such as logistic regression,
    k-nearest neighbors, k-means, and random forest.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Do not worry about these terms—you are not expected to know what these algorithms
    involve just yet. You will see a simple random forest example in this chapter,
    but all of these algorithms will be explained in detail in later chapters of the
    book.
  prefs: []
  type: TYPE_NORMAL
- en: '`sklearn` groups algorithms by family. For instance, `RandomForest` and `GradientBoosting`
    are part of the `ensemble` module. In order to make use of an algorithm, you will
    need to import it first like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Another reason why `sklearn` is so popular is that all the algorithms follow
    the exact same API structure. So, once you have learned how to train one algorithm,
    it is extremely easy to train another one with very minimal code changes. With
    `sklearn`, there are four main steps to train a machine learning model:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Instantiate a model with specified hyperparameters: this will configure the
    machine learning model you want to train.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Train the model with training data: during this step, the model will learn
    the best parameters to get predictions as close as possible to the actual values
    of the target.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Predict the outcome from input data: using the learned parameter, the model
    will predict the outcome for new data.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Assess the performance of the model predictions: for checking whether the model
    learned the right patterns to get accurate predictions.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In a real project, there might be more steps depending on the situation, but
    for simplicity, we will stick with these four for now. You will learn the remaining
    ones in the following chapters.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: As mentioned before, each algorithm will have its own specific hyperparameters
    that can be tuned. To instantiate a model, you just need to create a new variable
    from the class you imported previously and specify the values of the hyperparameters.
    If you leave the hyperparameters blank, the model will use the default values
    specified by `sklearn`.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is recommended to at least set the `random_state` hyperparameter in order
    to get reproducible results every time that you have to run the same code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'The second step is to train the model with some data. In this example, we will
    use a simple dataset that classifies 178 instances of Italian wines into 3 categories
    based on 13 features. This dataset is part of the few examples that `sklearn`
    provides within its API. We need to load the data first:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Then using the `.fit()` method to train the model, you will provide the features
    and the target variable as input:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.44: Logs of the trained Random Forest model'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15019_01_44.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.44: Logs of the trained Random Forest model'
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding output, we can see a Random Forest model with the default hyperparameters.
    You will be introduced to some of them in *Chapter 4*, *Multiclass Classification
    with RandomForest*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once trained, we can use the `.predict()` method to predict the target for
    one or more observations. Here we will use the same data as for the training step:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.45: Predictions of the trained Random Forest model'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15019_01_45.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.45: Predictions of the trained Random Forest model'
  prefs: []
  type: TYPE_NORMAL
- en: From the preceding output, you can see that the 178 different wines in the dataset
    have been classified into one of the three different wine categories. The first
    lot of wines have been classified as being in category 0, the second lot are category
    1, and the last lot are category 2\. At this point, we do not know what classes
    0, 1, or 2 represent (in the context of the "type" of wine in each category),
    but finding this out would form part of the larger data science project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we want to assess the model''s performance by comparing its predictions
    to the actual values of the target variable. There are a lot of different metrics
    that can be used for assessing model performance, and you will learn more about
    them later in this book. For now, though, we will just use a metric called **accuracy**.
    This metric calculates the ratio of correct predictions to the total number of
    observations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: You should get the following output
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.46: Accuracy of the trained Random Forest model'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15019_01_46.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.46: Accuracy of the trained Random Forest model'
  prefs: []
  type: TYPE_NORMAL
- en: In this example, the Random Forest model learned to predict correctly all the
    observations from this dataset; it achieves an accuracy score of `1` (that is,
    100% of the predictions matched the actual true values).
  prefs: []
  type: TYPE_NORMAL
- en: It's as simple as that! This may be too good to be true. In the following chapters,
    you will learn how to check whether the trained models are able to accurately
    predict unseen or future data points or if they have only learned the specific
    patterns of this input data (also called overfitting).
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 1.03: Predicting Breast Cancer from a Dataset Using sklearn'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this exercise, we will build a machine learning classifier using `RandomForest`
    from `sklearn` to predict whether the breast cancer of a patient is malignant
    (harmful) or benign (not harmful).
  prefs: []
  type: TYPE_NORMAL
- en: The dataset we will use is the Breast Cancer Wisconsin (Diagnostic) dataset,
    which is available directly from the `sklearn` package at [https://packt.live/2FcOTim](https://packt.live/2FcOTim).
  prefs: []
  type: TYPE_NORMAL
- en: 'The following steps will help you complete the exercise:'
  prefs: []
  type: TYPE_NORMAL
- en: Open a new Colab notebook.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `load_breast_cancer` function from `sklearn.datasets`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Load the dataset from the `load_breast_cancer` function with the `return_X_y=True`
    parameter to return the features and response variable only:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Print the variable features:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You should get the following output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 1.47: Output of the variable features'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15019_01_47.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 1.47: Output of the variable features'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The preceding output shows the values of the features. (You can learn more about
    the features from the link given previously.)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Print the `target` variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You should get the following output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 1.48: Output of the variable target'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15019_01_48.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 1.48: Output of the variable target'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The preceding output shows the values of the target variable. There are two
    classes shown for each instance in the dataset. These classes are `0` and `1`,
    representing whether the cancer is malignant or benign.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Import the `RandomForestClassifier` class from `sklearn.ensemble`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new variable called `seed`, which will take the value `888` (chosen arbitrarily):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Instantiate `RandomForestClassifier` with the `random_state=seed` parameter
    and save it into a variable called `rf_model`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Train the model with the `.fit()` method with `features` and `target` as parameters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You should get the following output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 1.49: Logs of RandomForestClassifier'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15019_01_49.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 1.49: Logs of RandomForestClassifier'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Make predictions with the trained model using the `.predict()` method and `features`
    as a parameter and save the results into a variable called `preds`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Print the `preds` variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You should get the following output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 1.50: Predictions of the Random Forest model'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15019_01_50.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 1.50: Predictions of the Random Forest model'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The preceding output shows the predictions for the training set. You can compare
    this with the actual target variable values shown in *Figure 1.48*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Import the `accuracy_score` method from `sklearn.metrics`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Calculate `accuracy_score()` with `target` and `preds` as parameters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You should get the following output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 1.51: Accuracy of the model'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15019_01_51.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 1.51: Accuracy of the model'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: To access the source code for this specific section, please refer to [https://packt.live/3aBso5i](https://packt.live/3aBso5i).
  prefs: []
  type: TYPE_NORMAL
- en: You can also run this example online at [https://packt.live/316OiKA](https://packt.live/316OiKA).
  prefs: []
  type: TYPE_NORMAL
- en: You just trained a Random Forest model using `sklearn` APIs and achieved an
    accuracy score of `1` in classifying breast cancer observations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 1.01: Train a Spam Detector Algorithm'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You are working for an email service provider and have been tasked with training
    an algorithm that recognizes whether an email is spam or not from a given dataset
    and checking its performance.
  prefs: []
  type: TYPE_NORMAL
- en: In this dataset, the authors have already created 57 different features based
    on some statistics for relevant keywords in order to classify whether an email
    is spam or not.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'The dataset was originally shared by Mark Hopkins, Erik Reeber, George Forman,
    and Jaap Suermondt: [https://packt.live/35fdUUA](https://packt.live/35fdUUA).'
  prefs: []
  type: TYPE_NORMAL
- en: You can download it from the Packt GitHub at [https://packt.live/2MPmnrl](https://packt.live/2MPmnrl).
  prefs: []
  type: TYPE_NORMAL
- en: 'The following steps will help you to complete this activity:'
  prefs: []
  type: TYPE_NORMAL
- en: Import the required libraries.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Load the dataset using `.pd.read_csv()`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Extract the response variable using .`pop()` from `pandas`. This method will
    extract the column provided as a parameter from the DataFrame. You can then assign
    it a variable name, for example, `target = df.pop('class')`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Instantiate `RandomForestClassifier`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Train a Random Forest model to predict the outcome with .`fit()`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Predict the outcomes from the input data using `.predict()`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Calculate the accuracy score using `accuracy_score`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The output will be similar to the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 1.52: Accuracy score for spam detector'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15019_01_52.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 1.52: Accuracy score for spam detector'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'The solution to this activity can be found at the following address: [https://packt.live/2GbJloz](https://packt.live/2GbJloz).'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter provided you with an overview of what data science is in general.
    We also learned the different types of machine learning algorithms, including
    supervised and unsupervised, as well as regression and classification. We had
    a quick introduction to Python and how to manipulate the main data structures
    (lists and dictionaries) that will be used in this book.
  prefs: []
  type: TYPE_NORMAL
- en: Then we walked you through what a DataFrame is and how to create one by loading
    data from different file formats using the famous pandas package. Finally, we
    learned how to use the sklearn package to train a machine learning model and make
    predictions with it.
  prefs: []
  type: TYPE_NORMAL
- en: This was just a quick glimpse into the fascinating world of data science. In
    this book, you will learn much more and discover new techniques for handling data
    science projects from end to end.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter will show you how to perform a regression task on a real-world dataset.
  prefs: []
  type: TYPE_NORMAL
