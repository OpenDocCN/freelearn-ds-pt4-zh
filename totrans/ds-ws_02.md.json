["```py\n    rawBostonData = pd.read_csv\\\n                    ('https://raw.githubusercontent.com/'\\\n                     'PacktWorkshops/The-Data-Science-'\\\n                     'Workshop/master/Chapter02/'\\\n                     'Dataset/Boston.csv')\n    ```", "```py\n    rawBostonData.head()\n    ```", "```py\n    rawBostonData = rawBostonData.dropna()\n    ```", "```py\n    rawBostonData = rawBostonData.drop_duplicates()\n    ```", "```py\n    list(rawBostonData.columns)\n    ```", "```py\n    renamedBostonData = rawBostonData.rename\\\n                        (columns = {\\\n                         'CRIM':'crimeRatePerCapita',\\\n                         ' ZN ':'landOver25K_sqft',\\\n                         'INDUS ':'non-retailLandProptn',\\\n                         'CHAS':'riverDummy',\\\n                         'NOX':'nitrixOxide_pp10m',\\\n                         'RM':'AvgNo.RoomsPerDwelling',\\\n                         'AGE':'ProptnOwnerOccupied',\\\n                         'DIS':'weightedDist',\\\n                         'RAD':'radialHighwaysAccess',\\\n                         'TAX':'propTaxRate_per10K',\\\n                         'PTRATIO':'pupilTeacherRatio',\\\n                         'LSTAT':'pctLowerStatus',\\\n                         'MEDV':'medianValue_Ks'})\n    renamedBostonData.head()\n    ```", "```py\n    renamedBostonData.info()\n    ```", "```py\n    renamedBostonData.describe(include=[np.number]).T\n    ```", "```py\n    X = renamedBostonData.drop('crimeRatePerCapita', axis = 1)\n    y = renamedBostonData[['crimeRatePerCapita']]\n    seed = 10 \n    test_data_size = 0.3 \n    X_train, X_test, \\\n    y_train, y_test = train_test_split(X, y, \\\n                                       test_size = test_data_size, \\\n                                       random_state = seed)\n    train_data = pd.concat([X_train, y_train], axis = 1)\n    test_data = pd.concat([X_test, y_test], axis = 1)\n    ```", "```py\n    corrMatrix = train_data.corr(method = 'pearson')\n    xnames=list(train_data.columns)\n    ynames=list(train_data.columns)\n    plot_corr(corrMatrix, xnames=xnames, ynames=ynames,\\\n              title=None, normcolor=False, cmap='RdYlBu_r')\n    ```", "```py\n    %matplotlib inline\n    import matplotlib as mpl\n    import seaborn as sns\n    import matplotlib.pyplot as plt\n    import statsmodels.formula.api as smf\n    import statsmodels.graphics.api as smg\n    import pandas as pd\n    import numpy as np\n    import patsy\n    from statsmodels.graphics.correlation import plot_corr\n    from sklearn.model_selection import train_test_split\n    plt.style.use('seaborn')\n    ```", "```py\n    rawBostonData = pd.read_csv\\\n                    ('https://raw.githubusercontent.com/'\\\n                     'PacktWorkshops/The-Data-Science-'\\\n                     'Workshop/master/Chapter02/'\n                     'Dataset/Boston.csv')\n    rawBostonData = rawBostonData.dropna()\n    rawBostonData = rawBostonData.drop_duplicates()\n    renamedBostonData = rawBostonData.rename\\\n                        (columns = {\\\n                         'CRIM':'crimeRatePerCapita',\\\n                         ' ZN ':'landOver25K_sqft',\\\n                         'INDUS ':'non-retailLandProptn',\\\n                         'CHAS':'riverDummy',\\\n                         'NOX':'nitrixOxide_pp10m',\\\n                         'RM':'AvgNo.RoomsPerDwelling',\\\n                         'AGE':'ProptnOwnerOccupied',\\\n                         'DIS':'weightedDist',\\\n                         'RAD':'radialHighwaysAccess',\\\n                         'TAX':'propTaxRate_per10K',\\\n                         'PTRATIO':'pupilTeacherRatio',\\\n                         'LSTAT':'pctLowerStatus',\\\n                         'MEDV':'medianValue_Ks'})\n    ```", "```py\n    X = renamedBostonData.drop('crimeRatePerCapita', axis = 1)\n    y = renamedBostonData[['crimeRatePerCapita']]\n    seed = 10 \n    test_data_size = 0.3 \n    X_train, X_test, y_train, y_test = train_test_split\\\n                                       (X, y, \\\n                                        test_size = test_data_size,\\\n                                        random_state = seed)\n    train_data = pd.concat([X_train, y_train], axis = 1)\n    test_data = pd.concat([X_test, y_test], axis = 1)\n    ```", "```py\n    fig, ax = plt.subplots(figsize=(10, 6))\n    ```", "```py\n    sns.regplot(x='medianValue_Ks', y='crimeRatePerCapita', \\\n                ci=None, data=train_data, ax=ax, color='k', \\\n                scatter_kws={\"s\": 20,\"color\": \"royalblue\", \\\n                \"alpha\":1})\n    ```", "```py\n    ax.set_ylabel('Crime rate per Capita', fontsize=15, \\\n                   fontname='DejaVu Sans')\n    ax.set_xlabel(\"Median value of owner-occupied homes \"\\\n                  \"in $1000's\", fontsize=15, \\\n                  fontname='DejaVu Sans')\n    ax.set_xlim(left=None, right=None)\n    ax.set_ylim(bottom=None, top=30)\n    ax.tick_params(axis='both', which='major', labelsize=12)\n    fig.tight_layout()\n    ```", "```py\n    fig, ax = plt.subplots(figsize=(10, 6))\n    ```", "```py\n    y = np.log(train_data['crimeRatePerCapita'])\n    ```", "```py\n    sns.regplot(x='medianValue_Ks', y=y, ci=95, \\\n                data=train_data, ax=ax, color='k', \\\n                scatter_kws={\"s\": 20,\"color\": \"royalblue\", \\\n                \"alpha\":1})\n    ```", "```py\n    ax.set_ylabel('log of Crime rate per Capita', \\\n                  fontsize=15, fontname='DejaVu Sans')\n    ax.set_xlabel(\"Median value of owner-occupied homes \"\\\n                  \"in $1000's\", fontsize=15, \\\n                  fontname='DejaVu Sans')\n    ax.set_xlim(left=None, right=None)\n    ax.set_ylim(bottom=None, top=None)\n    ax.tick_params(axis='both', which='major', labelsize=12)\n    fig.tight_layout()\n    ```", "```py\n    import pandas as pd\n    import statsmodels.formula.api as smf\n    from sklearn.model_selection import train_test_split\n    ```", "```py\n    linearModel = smf.ols\\\n                  (formula='crimeRatePerCapita ~ medianValue_Ks',\\\n                   data=train_data)\n    ```", "```py\n    linearModelResult = linearModel.fit()\n    ```", "```py\n    print(linearModelResult.summary())\n    ```", "```py\n    import statsmodels.formula.api as smf\n    import pandas as pd\n    from sklearn.model_selection import train_test_split\n    ```", "```py\n    multiLinearModel = smf.ols\\\n                       (formula = 'crimeRatePerCapita \\\n                                   ~ pctLowerStatus \\\n                                   + radialHighwaysAccess \\\n                                   + medianValue_Ks \\\n                                   + nitrixOxide_pp10m', \\\n                                   data=train_data)\n    ```", "```py\n    multiLinearModResult = multiLinearModel.fit()\n    ```", "```py\nprint(multiLinearModResult.summary())\n```"]