["```py\n    import pandas as pd\n    from sklearn.cluster import KMeans\n    ```", "```py\n    file_url = 'https://raw.githubusercontent.com'\\\n               '/PacktWorkshops/The-Data-Science-Workshop'\\\n               '/master/Chapter05/DataSet/taxstats2015.csv'\n    ```", "```py\n    df = pd.read_csv(file_url, \\\n                     usecols=['Postcode', \\\n                              'Average net tax', \\\n                              'Average total deductions'])\n    ```", "```py\n    df.head()\n    ```", "```py\n    df.tail()\n    ```", "```py\n    kmeans = KMeans(random_state=42)\n    ```", "```py\n    X = df[['Average net tax', 'Average total deductions']]\n    ```", "```py\n    kmeans.fit(X)\n    ```", "```py\n    y_preds = kmeans.predict(X)\n    y_preds\n    ```", "```py\n    df['cluster'] = y_preds\n    df.head()\n    ```", "```py\nimport numpy as np\ndf.pivot_table(values=['Average net tax', \\\n                       'Average total deductions'], \\\n               index='cluster', aggfunc=np.mean)\n```", "```py\nimport altair as alt\n```", "```py\nchart = alt.Chart(df)\n```", "```py\nscatter_plot = chart.mark_circle()\n```", "```py\nscatter_plot.encode(x='Average net tax', \\\n                    y='Average total deductions', \\\n                    color='cluster:N')\n```", "```py\nscatter_plot.encode(x='Average net tax', \\\n                    y='Average total deductions', \\\n                    color='cluster:N', \\\n                    tooltip=['Postcode', \\\n                             'cluster', 'Average net tax', \\\n                             'Average total deductions'])\\\n                    .interactive()\n```", "```py\n    import pandas as pd\n    from sklearn.cluster import KMeans\n    import altair as alt\n    import numpy as np\n    ```", "```py\n    file_url = 'https://raw.githubusercontent.com'\\\n               '/PacktWorkshops/The-Data-Science-Workshop'\\\n               '/master/Chapter05/DataSet/taxstats2015.csv'\n    ```", "```py\n    df = pd.read_csv(file_url, \\\n                     usecols=['Postcode', \\\n                              'Average total business income', \\\n                              'Average total business expenses'])\n    ```", "```py\n    df.tail(10)\n    ```", "```py\n    X = df[['Average total business income', \\\n            'Average total business expenses']]\n    ```", "```py\n    kmeans = KMeans(random_state=8)\n    kmeans.fit(X)\n    ```", "```py\n    y_preds = kmeans.predict(X)\n    y_preds[-10:]\n    ```", "```py\n    df['cluster'] = y_preds\n    df.tail(10)\n    ```", "```py\n    df.pivot_table(values=['Average total business income', \\\n                           'Average total business expenses'], \\\n                   index='cluster', aggfunc=np.mean)\n    ```", "```py\n    scatter_plot = alt.Chart(df).mark_circle()\n    ```", "```py\n    scatter_plot.encode(x='Average total business income', \\\n                        y='Average total business expenses', \\\n                        color='cluster:N', tooltip = ['Postcode', \\\n                                                      'cluster', \\\n                        'Average total business income', \\\n                        'Average total business expenses'])\\\n                        .interactive()\n    ```", "```py\nclusters = pd.DataFrame()\nclusters['cluster_range'] = range(1, 10)\ninertia = []\n```", "```py\nfor k in clusters['cluster_range']:\n    kmeans = KMeans(n_clusters=k, random_state=8).fit(X)\n    inertia.append(kmeans.inertia_)\n```", "```py\nclusters['inertia'] = inertia\nclusters\n```", "```py\nalt.Chart(clusters).mark_line()\\\n                   .encode(x='cluster_range', y='inertia')\n```", "```py\nkmeans = KMeans(random_state=42, n_clusters=3)\nkmeans.fit(X)\ndf['cluster2'] = kmeans.predict(X)\nscatter_plot.encode(x='Average net tax', \\\n                    y='Average total deductions', \\\n                    color='cluster2:N', \\\n                    tooltip=['Postcode', 'cluster', \\\n                             'Average net tax', \\\n                             'Average total deductions'])\\\n                    .interactive()\n```", "```py\n    import pandas as pd\n    from sklearn.cluster import KMeans\n    import altair as alt\n    ```", "```py\n    file_url = 'https://raw.githubusercontent.com'\\\n               '/PacktWorkshops/The-Data-Science-Workshop'\\\n               '/master/Chapter05/DataSet/taxstats2015.csv'\n    ```", "```py\n    df = pd.read_csv(file_url, \\\n                     usecols=['Postcode', \\\n                              'Average total business income', \\\n                              'Average total business expenses'])\n    ```", "```py\n    df.head()\n    ```", "```py\n    X = df[['Average total business income', \\\n            'Average total business expenses']]\n    ```", "```py\n    clusters = pd.DataFrame()\n    inertia = []\n    ```", "```py\n    clusters['cluster_range'] = range(1, 15)\n    ```", "```py\n    for k in clusters['cluster_range']:\n        kmeans = KMeans(n_clusters=k).fit(X)\n        inertia.append(kmeans.inertia_)\n    ```", "```py\n    clusters['inertia'] = inertia\n    clusters\n    ```", "```py\n    alt.Chart(clusters).mark_line()\\\n       .encode(alt.X('cluster_range'), alt.Y('inertia'))\n    ```", "```py\n    optim_cluster = 4\n    ```", "```py\n    kmeans = KMeans(random_state=42, n_clusters=optim_cluster)\n    kmeans.fit(X)\n    ```", "```py\n    df['cluster2'] = kmeans.predict(X)\n    ```", "```py\n    df.head()\n    ```", "```py\n    alt.Chart(df).mark_circle()\\\n                 .encode\\\n                  (x='Average total business income', \\\n                   y='Average total business expenses', \\\n                   color='cluster2:N', \\\n                   tooltip=['Postcode', 'cluster2', \\\n                            'Average total business income',\\\n                            'Average total business expenses'])\\\n                 .interactive()\n    ```", "```py\nkmeans = KMeans(random_state=14, n_clusters=3, \\\n                init='random', n_init=1)\nkmeans.fit(X)\n```", "```py\ndf['cluster3'] = kmeans.predict(X)\nalt.Chart(df).mark_circle()\\\n             .encode(x='Average net tax', \\\n                     y='Average total deductions', \\\n                     color='cluster3:N', \\\n                     tooltip=['Postcode', 'cluster', \\\n                              'Average net tax', \\\n                              'Average total deductions']) \\\n             .interactive()\n```", "```py\nkmeans = KMeans(random_state=14, n_clusters=3, \\\n                init='k-means++', n_init=5)\nkmeans.fit(X)\ndf['cluster4'] = kmeans.predict(X)\nalt.Chart(df).mark_circle()\\\n             .encode(x='Average net tax', \\\n                     y='Average total deductions', \\\n                     color='cluster4:N', \\\n                     tooltip=['Postcode', 'cluster', \\\n                              'Average net tax', \\\n                              'Average total deductions'])\\\n                    .interactive()\n```", "```py\n    import pandas as pd\n    from sklearn.cluster import KMeans\n    import altair as alt\n    ```", "```py\n    file_url = 'https://raw.githubusercontent.com'\\\n               '/PacktWorkshops/The-Data-Science-Workshop'\\\n               '/master/Chapter05/DataSet/taxstats2015.csv'\n    ```", "```py\n    df = pd.read_csv(file_url, \\\n                     usecols=['Postcode', \\\n                              'Average total business income', \\\n                              'Average total business expenses'])\n    ```", "```py\n    X = df[['Average total business income', \\\n            'Average total business expenses']]\n    ```", "```py\n    kmeans = KMeans(random_state=1, n_clusters=4, \\\n                    init='random', n_init=1)\n    kmeans.fit(X)\n    ```", "```py\n    df['cluster3'] = kmeans.predict(X)\n    ```", "```py\n    scatter_plot = alt.Chart(df).mark_circle()\n    ```", "```py\n    scatter_plot.encode(x='Average total business income', \\\n                        y='Average total business expenses', \\\n                        color='cluster3:N', \\\n                        tooltip=['Postcode', 'cluster3', \\\n                                 'Average total business income', \\\n                                 'Average total business expenses'])\\\n                       .interactive()\n    ```", "```py\n    kmeans = KMeans(random_state=1, n_clusters=4, \\\n                    init='random', n_init=10)\n    kmeans.fit(X)\n    df['cluster4'] = kmeans.predict(X)\n    scatter_plot = alt.Chart(df).mark_circle()\n    scatter_plot.encode(x='Average total business income', \\\n                        y='Average total business expenses', \\\n                        color='cluster4:N',\n                        tooltip=['Postcode', 'cluster4', \\\n                                 'Average total business income', \\\n                                 'Average total business expenses'])\\\n                       .interactive()\n    ```", "```py\n    kmeans = KMeans(random_state=1, n_clusters=4, \\\n                    init='random', n_init=100)\n    kmeans.fit(X)\n    df['cluster5'] = kmeans.predict(X)\n    scatter_plot = alt.Chart(df).mark_circle()\n    scatter_plot.encode(x='Average total business income', \\\n                        y='Average total business expenses', \\\n                        color='cluster5:N', \\\n                        tooltip=['Postcode', 'cluster5', \\\n                        'Average total business income', \\\n                        'Average total business expenses'])\\\n                .interactive()\n    ```", "```py\nx = X.iloc[0,].values\ny = X.iloc[1,].values\nprint(x)\nprint(y)\n```", "```py\nsquared_euclidean = (x[0] - y[0])**2 + (x[1] - y[1])**2\nprint(squared_euclidean)\n```", "```py\n3347858\n```", "```py\nkmeans = KMeans(random_state=42, n_clusters=3, \\\n                init='k-means++', n_init=5)\nkmeans.fit(X)\ndf['cluster6'] = kmeans.predict(X)\n```", "```py\ncentroids = kmeans.cluster_centers_\ncentroids = pd.DataFrame(centroids, \\\n                         columns=['Average net tax', \\\n                                  'Average total deductions'])\nprint(centroids)\n```", "```py\nchart1 = alt.Chart(df).mark_circle()\\\n            .encode(x='Average net tax', \\\n                    y='Average total deductions', \\\n                    color='cluster6:N', \\\n                    tooltip=['Postcode', 'cluster6', \\\n                             'Average net tax', \\\n                             'Average total deductions'])\\\n                   .interactive()\nchart1\n```", "```py\nchart2 = alt.Chart(centroids).mark_circle(size=100)\\\n            .encode(x='Average net tax', \\\n                    y='Average total deductions', \\\n                    color=alt.value('black'), \\\n                    tooltip=['Average net tax', \\\n                             'Average total deductions'])\\\n                   .interactive()\nchart2\n```", "```py\nchart1 + chart2\n```", "```py\n    import pandas as pd\n    from sklearn.cluster import KMeans\n    import altair as alt\n    ```", "```py\n    file_url = 'https://raw.githubusercontent.com/'\\\n               'PacktWorkshops/The-Data-Science-Workshop/'\\\n               'master/Chapter05/DataSet/taxstats2015.csv'\n    df = pd.read_csv(file_url, \\\n                     usecols=['Postcode', \\\n                              'Average total business income', \\\n                              'Average total business expenses'])\n    ```", "```py\n    X = df[['Average total business income', \\\n            'Average total business expenses']]\n    ```", "```py\n    business_income_min = df['Average total business income'].min()\n    business_income_max = df['Average total business income'].max()\n    business_expenses_min = df['Average total business expenses']\\\n                            .min()\n    business_expenses_max = df['Average total business expenses']\\\n                            .max()\n    ```", "```py\n    print(business_income_min)\n    print(business_income_max)\n    print(business_expenses_min)\n    print(business_expenses_max)\n    ```", "```py\n    0\n    876324\n    0\n    884659\n    ```", "```py\n    import random\n    random.seed(42)\n    ```", "```py\n    centroids = pd.DataFrame()\n    ```", "```py\n    centroids\\\n    ['Average total business income'] = random.sample\\\n                                        (range\\\n                                        (business_income_min, \\\n                                         business_income_max), 4)\n    ```", "```py\n    centroids\\\n    ['Average total business expenses'] = random.sample\\\n                                          (range\\\n                                          (business_expenses_min,\\\n                                           business_expenses_max), 4)\n    ```", "```py\n    centroids['cluster'] = centroids.index\n    centroids\n    ```", "```py\n    chart1 = alt.Chart(df.head()).mark_circle()\\\n                .encode(x='Average total business income', \\\n                        y='Average total business expenses', \\\n                        color=alt.value('orange'), \\\n                        tooltip=['Postcode', \\\n                                 'Average total business income', \\\n                                 'Average total business expenses'])\\\n                       .interactive()\n    ```", "```py\n    chart2 = alt.Chart(centroids).mark_circle(size=100)\\\n                .encode(x='Average total business income', \\\n                        y='Average total business expenses', \\\n                        color=alt.value('black'), \\\n                        tooltip=['cluster', \\\n                                 'Average total business income',\\\n                                 'Average total business expenses'])\\\n                       .interactive()\n    ```", "```py\n    chart1 + chart2\n    ```", "```py\n    def squared_euclidean(data_x, data_y, \\\n                          centroid_x, centroid_y, ):\n        return (data_x - centroid_x)**2 + (data_y - centroid_y)**2\n    ```", "```py\n    data_x = df.at[0, 'Average total business income']\n    data_y = df.at[0, 'Average total business expenses']\n    ```", "```py\n    distances = [squared_euclidean\\\n                 (data_x, data_y, centroids.at\\\n                  [i, 'Average total business income'], \\\n                  centroids.at[i, \\\n                  'Average total business expenses']) \\\n                  for i in range(4)]\n    distances\n    ```", "```py\n    [215601466600, 10063365460, 34245932020, 326873037866]\n    ```", "```py\n    cluster_index = distances.index(min(distances))\n    ```", "```py\n    df.at[0, 'cluster'] = cluster_index\n    ```", "```py\n    df.head()\n    ```", "```py\n    distances = [squared_euclidean\\\n                 (df.at[1, 'Average total business income'], \\\n                  df.at[1, 'Average total business expenses'], \\\n                  centroids.at[i, 'Average total business income'],\\\n                  centroids.at[i, \\\n                               'Average total business expenses'])\\\n                 for i in range(4)]\n    df.at[1, 'cluster'] = distances.index(min(distances))\n    distances = [squared_euclidean\\\n                 (df.at[2, 'Average total business income'], \\\n                  df.at[2, 'Average total business expenses'], \\\n                  centroids.at[i, 'Average total business income'],\\\n                  centroids.at[i, \\\n                               'Average total business expenses'])\\\n                 for i in range(4)]\n    df.at[2, 'cluster'] = distances.index(min(distances))\n    distances = [squared_euclidean\\\n                 (df.at[3, 'Average total business income'], \\\n                  df.at[3, 'Average total business expenses'], \\\n                  centroids.at[i, 'Average total business income'],\\\n                  centroids.at[i, \\\n                               'Average total business expenses'])\\\n                 for i in range(4)]\n    df.at[3, 'cluster'] = distances.index(min(distances))\n    distances = [squared_euclidean\\\n                 (df.at[4, 'Average total business income'], \\\n                  df.at[4, 'Average total business expenses'], \\\n                  centroids.at[i, \\\n                  'Average total business income'], \\\n                  centroids.at[i, \\\n                  'Average total business expenses']) \\\n                 for i in range(4)]\n    df.at[4, 'cluster'] = distances.index(min(distances))\n    df.head()\n    ```", "```py\n    chart1 = alt.Chart(df.head()).mark_circle()\\\n                .encode(x='Average total business income', \\\n                        y='Average total business expenses', \\\n                        color='cluster:N', \\\n                        tooltip=['Postcode', 'cluster', \\\n                                 'Average total business income', \\\n                                 'Average total business expenses'])\\\n                       .interactive()\n    chart2 = alt.Chart(centroids).mark_circle(size=100)\\\n                .encode(x='Average total business income', \\\n                        y='Average total business expenses', \\\n                        color=alt.value('black'), \\\n                        tooltip=['cluster', \\\n                                 'Average total business income',\\\n                                 'Average total business expenses'])\\\n                       .interactive()\n    chart1 + chart2\n    ```", "```py\nfrom sklearn.preprocessing import MinMaxScaler\nmin_max_scaler = MinMaxScaler()\n```", "```py\nmin_max_scaler.fit(X)\n```", "```py\nX_min_max = min_max_scaler.transform(X)\nX_min_max\n```", "```py\nX_min_max[:,0].min(), X_min_max[:,0].max(), \\\nX_min_max[:,1].min(), X_min_max[:,1].max()\n```", "```py\nfrom sklearn.preprocessing import StandardScaler\nstandard_scaler = StandardScaler()\n```", "```py\nX_scaled = standard_scaler.fit_transform(X)\nX_scaled\n```", "```py\nX_scaled[:,0].min(), X_scaled[:,0].max(), \\\nX_scaled[:,1].min(), X_scaled[:,1].max()\n```", "```py\nkmeans = KMeans(random_state=42, n_clusters=3, \\\n                init='k-means++', n_init=5)\nkmeans.fit(X_scaled)\ndf['cluster7'] = kmeans.predict(X_scaled)\nalt.Chart(df).mark_circle()\\\n             .encode(x='Average net tax', \\\n                     y='Average total deductions', \\\n                     color='cluster7:N', \\\n                     tooltip=['Postcode', 'cluster7', \\\n                              'Average net tax', \\\n                              'Average total deductions'])\\\n                    .interactive()\n```", "```py\n    import pandas as pd\n    from sklearn.cluster import KMeans\n    import altair as alt \n    ```", "```py\n    file_url = 'https://raw.githubusercontent.com'\\\n               '/PacktWorkshops/The-Data-Science-Workshop'\\\n               '/master/Chapter05/DataSet/taxstats2015.csv'\n    df = pd.read_csv(file_url, \\\n                     usecols=['Postcode', \\\n                              'Average total business income', \\\n                              'Average total business expenses'])\n    ```", "```py\n    X = df[['Average total business income', \\\n            'Average total business expenses']]\n    ```", "```py\n    from sklearn.preprocessing import MinMaxScaler\n    from sklearn.preprocessing import StandardScaler\n    ```", "```py\n    min_max_scaler = MinMaxScaler()\n    min_max_scaler.fit(X)\n    ```", "```py\n    X_min_max = min_max_scaler.transform(X)\n    X_min_max\n    ```", "```py\n    kmeans = KMeans(random_state=1, n_clusters=4, \\\n                    init='k-means++', n_init=5)\n    kmeans.fit(X_min_max)\n    ```", "```py\n    df['cluster8'] = kmeans.predict(X_min_max)\n    ```", "```py\n    scatter_plot = alt.Chart(df).mark_circle()\n    scatter_plot.encode(x='Average total business income', \\\n                        y='Average total business expenses',\\\n                        color='cluster8:N',\\\n                        tooltip=['Postcode', 'cluster8', \\\n                                 'Average total business income',\\\n                                 'Average total business expenses'])\\\n                       .interactive()\n    ```", "```py\n    standard_scaler = StandardScaler()\n    X_scaled = standard_scaler.fit_transform(X)\n    kmeans = KMeans(random_state=1, n_clusters=4, \\\n                    init='k-means++', n_init=5)\n    kmeans.fit(X_scaled)\n    ```", "```py\n    df['cluster9'] = kmeans.predict(X_scaled)\n    ```", "```py\n    scatter_plot = alt.Chart(df).mark_circle()\n    scatter_plot.encode(x='Average total business income', \\\n                        y='Average total business expenses', \\\n                        color='cluster9:N', \\\n                        tooltip=['Postcode', 'cluster9', \\\n                                 'Average total business income',\\\n                                 'Average total business expenses'])\\\n                       .interactive()\n    ```"]