["```py\nfrom sklearn.datasets import load_diabetes\nfrom sklearn.linear_model import LinearRegression\ndata = load_diabetes()\n# fit a linear regression model to the data\nlr_model = LinearRegression()\nlr_model.fit(data.data, data.target)\nlr_model.coef_\n```", "```py\nimport pandas as pd\ncoeff_df = pd.DataFrame()\ncoeff_df['feature'] = data.feature_names\ncoeff_df['coefficient'] = lr_model.coef_\ncoeff_df.head()\n```", "```py\n    import pandas as pd\n    from sklearn.model_selection import train_test_split\n    from sklearn.preprocessing import StandardScaler\n    from sklearn.linear_model import LinearRegression\n    from sklearn.metrics import mean_squared_error\n    import altair as alt\n    ```", "```py\n    file_url = 'https://raw.githubusercontent.com/'\\\n               'PacktWorkshops/The-Data-Science-Workshop/'\\\n               'master/Chapter09/Dataset/phpYYZ4Qc.csv'\n    ```", "```py\n    df = pd.read_csv(file_url)\n    ```", "```py\n    df.head()\n    ```", "```py\n    y = df.pop('rej')\n    ```", "```py\n    df.describe()\n    ```", "```py\n    X_train, X_test, y_train, y_test = train_test_split\\\n                                       (df, y, test_size=0.3, \\\n                                        random_state=1)\n    ```", "```py\n    scaler = StandardScaler()\n    ```", "```py\n    X_train = scaler.fit_transform(X_train)\n    ```", "```py\n    X_test = scaler.transform(X_test)\n    ```", "```py\n    lr_model = LinearRegression()\n    ```", "```py\n    lr_model.fit(X_train, y_train)\n    ```", "```py\n    preds_train = lr_model.predict(X_train)\n    preds_test = lr_model.predict(X_test)\n    ```", "```py\n    train_mse = mean_squared_error(y_train, preds_train)\n    train_mse\n    ```", "```py\n    test_mse = mean_squared_error(y_test, preds_test)\n    test_mse\n    ```", "```py\n    lr_model.coef_\n    ```", "```py\n    coef_df = pd.DataFrame()\n    ```", "```py\n    coef_df['feature'] = df.columns\n    ```", "```py\n    coef_df['coefficient'] = lr_model.coef_\n    ```", "```py\n    coef_df.head()\n    ```", "```py\n    alt.Chart(coef_df).mark_bar().encode(x='coefficient',\\\n                                         y=\"feature\")\n    ```", "```py\nfrom sklearn.datasets import load_breast_cancer\nfrom sklearn.ensemble import RandomForestClassifier\ndata = load_breast_cancer()\nX, y = data.data, data.target\nrf_model = RandomForestClassifier(random_state=168)\nrf_model.fit(X, y)\nrf_model.feature_importances_\n```", "```py\nimport pandas as pd\nvarimp_df = pd.DataFrame()\nvarimp_df['feature'] = data.feature_names\nvarimp_df['importance'] = rf_model.feature_importances_\nvarimp_df.head()\n```", "```py\nimport altair as alt\nalt.Chart(varimp_df).mark_bar().encode(x='importance',\\\n                                       y=\"feature\")\n```", "```py\n    import pandas as pd\n    from sklearn.model_selection import train_test_split\n    from sklearn.ensemble import RandomForestRegressor\n    from sklearn.metrics import mean_squared_error\n    import altair as alt\n    ```", "```py\n    file_url = 'https://raw.githubusercontent.com/'\\\n               'PacktWorkshops/The-Data-Science-Workshop/'\\\n               'master/Chapter09/Dataset/phpYYZ4Qc.csv'\n    ```", "```py\n    df = pd.read_csv(file_url)\n    ```", "```py\n    y = df.pop('rej')\n    ```", "```py\n    X_train, X_test, y_train, y_test = train_test_split\\\n                                       (df, y, test_size=0.3, \\\n                                        random_state=1)\n    ```", "```py\n    rf_model = RandomForestRegressor(random_state=1, \\\n                                     n_estimators=50, max_depth=6,\\\n                                     min_samples_leaf=60)\n    ```", "```py\n    rf_model.fit(X_train, y_train)\n    ```", "```py\n    preds_train = rf_model.predict(X_train)\n    preds_test = rf_model.predict(X_test)\n    ```", "```py\n    train_mse = mean_squared_error(y_train, preds_train)\n    train_mse\n    ```", "```py\n    test_mse = mean_squared_error(y_test, preds_test)\n    test_mse\n    ```", "```py\n    rf_model.feature_importances_\n    ```", "```py\n    varimp_df = pd.DataFrame()\n    ```", "```py\n    varimp_df['feature'] = df.columns\n    varimp_df['importance'] = rf_model.feature_importances_\n    ```", "```py\n    varimp_df.head()\n    ```", "```py\n    alt.Chart(varimp_df).mark_bar().encode(x='importance',\\\n                                           y=\"feature\")\n    ```", "```py\nfrom sklearn.datasets import load_breast_cancer\nfrom sklearn.ensemble import RandomForestClassifier\n\ndata = load_breast_cancer()\nX, y = data.data, data.target\nrf_model = RandomForestClassifier(random_state=168)\nrf_model.fit(X, y)\n```", "```py\nfrom mlxtend.evaluate import feature_importance_permutation\nimp_vals, _ = feature_importance_permutation\\\n              (predict_method=rf_model.predict, X=X, y=y, \\\n               metric='r2', num_rounds=1, seed=2)\nimp_vals\n```", "```py\nimport pandas as pd\nvarimp_df = pd.DataFrame()\nvarimp_df['feature'] = data.feature_names\nvarimp_df['importance'] = imp_vals\nvarimp_df.head()\nimport altair as alt\nalt.Chart(varimp_df).mark_bar().encode(x='importance',\\\n                                       y=\"feature\")\n```", "```py\n    import pandas as pd\n    from sklearn.model_selection import train_test_split\n    from sklearn.ensemble import RandomForestRegressor\n    from mlxtend.evaluate import feature_importance_permutation\n    import altair as alt\n    ```", "```py\n    file_url = 'https://raw.githubusercontent.com/'\\\n               'PacktWorkshops/The-Data-Science-Workshop/'\\\n               'master/Chapter09/Dataset/phpYYZ4Qc.csv'\n    ```", "```py\n    df = pd.read_csv(file_url)\n    ```", "```py\n    y = df.pop('rej')\n    ```", "```py\n    X_train, X_test, y_train, y_test = train_test_split\\\n                                       (df, y, test_size=0.3, \\\n                                        random_state=1)\n    ```", "```py\n    rf_model = RandomForestRegressor(random_state=1, \\\n                                     n_estimators=50, max_depth=6, \\\n                                     min_samples_leaf=60)\n    ```", "```py\n    rf_model.fit(X_train, y_train)\n    ```", "```py\n    imp_vals, _ = feature_importance_permutation\\\n                  (predict_method=rf_model.predict, \\\n                   X=X_test.values, y=y_test.values, \\\n                   metric='r2', num_rounds=1, seed=2)\n    imp_vals\n    ```", "```py\n    varimp_df = pd.DataFrame({'feature': df.columns, \\\n                              'importance': imp_vals})\n    ```", "```py\n    alt.Chart(varimp_df).mark_bar().encode(x='importance',\\\n                                           y=\"feature\")\n    ```", "```py\nfrom sklearn.datasets import load_breast_cancer\nimport pandas as pd\ndata = load_breast_cancer()\ndf = pd.DataFrame(data.data, columns=data.feature_names)\ndf['target'] = data.target\n```", "```py\nimport altair as alt\nalt.Chart(df).mark_circle(size=60)\\\n             .encode(x='worst concave points', y='target')\n```", "```py\nimport altair as alt\nfrom sklearn.inspection import plot_partial_dependence\nfeature_index = df.columns.get_loc(\"worst concave points\")\n```", "```py\nplot_partial_dependence(rf_model, df, \\\n                        features=[feature_index])\n```", "```py\n    import pandas as pd\n    from sklearn.model_selection import train_test_split\n    from sklearn.ensemble import RandomForestRegressor\n    from sklearn.inspection import plot_partial_dependence\n    import altair as alt\n    ```", "```py\n    file_url = 'https://raw.githubusercontent.com/'\\\n               'PacktWorkshops/The-Data-Science-Workshop/'\\\n               'master/Chapter09/Dataset/phpYYZ4Qc.csv'\n    ```", "```py\n    df = pd.read_csv(file_url)\n    ```", "```py\n    y = df.pop('rej')\n    ```", "```py\n    X_train, X_test, y_train, y_test = train_test_split\\\n                                       (df, y, test_size=0.3, \\\n                                        random_state=1)\n    ```", "```py\n    rf_model = RandomForestRegressor(random_state=1, \\\n                                     n_estimators=50, max_depth=6,\\\n                                     min_samples_leaf=60)\n    ```", "```py\n    rf_model.fit(X_train, y_train)\n    ```", "```py\n    plot_partial_dependence(rf_model, X_test, \\\n                            features=[df.columns.get_loc('a1pop')])\n    ```", "```py\n    plot_partial_dependence(rf_model, X_test, \\\n                            features=[df.columns.get_loc('temp')])\n    ```", "```py\nfrom sklearn.datasets import load_breast_cancer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\ndata = load_breast_cancer()\nX, y = data.data, data.target\nX_train, X_test, y_train, y_test = train_test_split\\\n                                   (X, y, test_size=0.3, \\\n                                    random_state=1)\nrf_model = RandomForestClassifier(random_state=168)\nrf_model.fit(X_train, y_train)\n```", "```py\n!pip install lime\n```", "```py\nfrom lime.lime_tabular import LimeTabularExplainer\nlime_explainer = LimeTabularExplainer\\\n                 (X_train, feature_names=data.feature_names,\\\n                 class_names=data.target_names,\\\n                 mode='classification')\n```", "```py\nexp = lime_explainer.explain_instance\\\n      (X_test[1], rf_model.predict_proba, num_features=10)\nexp.show_in_notebook()\n```", "```py\n    import pandas as pd\n    from sklearn.model_selection import train_test_split\n    from sklearn.ensemble import RandomForestRegressor\n    ```", "```py\n    file_url = 'https://raw.githubusercontent.com/'\\\n               'PacktWorkshops/The-Data-Science-Workshop/'\\\n               'master/Chapter09/Dataset/phpYYZ4Qc.csv'\n    ```", "```py\n    df = pd.read_csv(file_url)\n    ```", "```py\n    y = df.pop('rej')\n    ```", "```py\n    X_train, X_test, y_train, y_test = train_test_split\\\n                                       (df, y, test_size=0.3, \\\n                                        random_state=1)\n    ```", "```py\n    rf_model = RandomForestRegressor(random_state=1, \\\n                                     n_estimators=50, max_depth=6,\\\n                                     min_samples_leaf=60)\n    ```", "```py\n    rf_model.fit(X_train, y_train)\n    ```", "```py\n    !pip install lime\n    ```", "```py\n    from lime.lime_tabular import LimeTabularExplainer\n    ```", "```py\n    lime_explainer = LimeTabularExplainer\\\n                     (X_train.values, \\\n                      feature_names=X_train.columns, \\\n                      mode='regression')\n    ```", "```py\n    exp = lime_explainer.explain_instance\\\n          (X_test.values[0], rf_model.predict)\n    exp.show_in_notebook()\n    ```", "```py\n    exp = lime_explainer.explain_instance\\\n          (X_test.values[2], rf_model.predict)\n    exp.show_in_notebook()\n    ```"]