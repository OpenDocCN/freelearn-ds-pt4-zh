["```py\n    import pandas as pd\n    filename = 'https://raw.githubusercontent.com/PacktWorkshops'\\\n               '/The-Data-Science-Workshop/master/'\\\n               'Chapter13/Dataset/bank-full.csv'\n    ```", "```py\n    #Loading the data using pandas\n    bankData = pd.read_csv(filename,sep=\";\")\n    bankData.head()\n    ```", "```py\n    from sklearn.preprocessing import RobustScaler\n    rob_scaler = RobustScaler()\n    ```", "```py\n    # Converting each of the columns to scaled version\n    bankData['ageScaled'] = rob_scaler.fit_transform\\\n                            (bankData['age'].values.reshape(-1,1))\n    bankData['balScaled'] = rob_scaler.fit_transform\\\n                            (bankData['balance']\\\n                             .values.reshape(-1,1))\n    bankData['durScaled'] = rob_scaler.fit_transform\\\n                            (bankData['duration']\\\n                             .values.reshape(-1,1))\n    ```", "```py\n    # Dropping the original columns\n    bankData.drop(['age','balance','duration'], \\\n                  axis=1, inplace=True)\n    ```", "```py\n    bankData.head()\n    ```", "```py\n    bankCat = pd.get_dummies(bankData[['job','marital','education',\\\n                                       'default','housing','loan',\\\n                                       'contact','month',\\\n                                       'poutcome']])\n    ```", "```py\n    bankNum = bankData[['ageScaled','balScaled','day',\\\n                        'durScaled','campaign','pdays','previous']]\n    bankNum.shape\n    ```", "```py\n    (45211, 7)\n    ```", "```py\n    # Merging with the original data frame\n    # Preparing the X variables\n    X = pd.concat([bankCat, bankNum], axis=1)\n    print(X.shape)\n    # Preparing the Y variable\n    Y = bankData['y']\n    print(Y.shape)\n    X.head()\n    ```", "```py\n    from sklearn.model_selection import train_test_split\n    from sklearn.linear_model import LogisticRegression\n    ```", "```py\n    X_train, X_test, y_train, y_test = train_test_split\\\n                                       (X, Y, test_size=0.3, \\\n                                        random_state=123)\n    ```", "```py\n    # Defining the LogisticRegression function\n    bankModel = LogisticRegression()\n    bankModel.fit(X_train, y_train)\n    ```", "```py\n    pred = bankModel.predict(X_test)\n    print('Accuracy of Logistic regression model prediction on '\\\n          'test set: {:.2f}'\\\n          .format(bankModel.score(X_test, y_test)))\n    ```", "```py\n    Accuracy of Logistic regression model prediction on test set: 0.90\n    ```", "```py\n    # Confusion Matrix for the model\n    from sklearn.metrics import confusion_matrix\n    confusionMatrix = confusion_matrix(y_test, pred)\n    print(confusionMatrix)\n    from sklearn.metrics import classification_report\n    print(classification_report(y_test, pred))\n    ```", "```py\nprint('Percentage of negative class :',\\\n      (y_train[y_train=='yes'].value_counts()\\\n       /len(y_train) ) * 100)\nprint('Percentage of positive class :',\\\n      (y_train[y_train=='no'].value_counts()\\\n       /len(y_train) ) * 100)\n```", "```py\nPercentage of negative class: yes    11.764148\nName: y, dtype: float64\nPercentage of positive class: no    88.235852\nName: y, dtype: float64\n```", "```py\nData set Size: 10,000 examples\nNegative class : 9910\nPositive Class : 90\n```", "```py\n# Classifier biased to only negative class\nAccuracy = (TP + TN ) / ( TP + FP + FN + TN)\n = (0 + 9900) / ( 0 + 0 + 90 + 9900) = 9900/10000\n = 99%\n```", "```py\nRecall Positive class  = TP / ( TP + FN ) = 0 / ( 0 + 90)\n = 0\nRecall Negative Class = TN / ( TN + FP) = 9900 / ( 9900 + 0)\n= 100%\n```", "```py\n    \"\"\"\n    Let us first join the train_x and train_y for ease of operation\n    \"\"\"\n    trainData = pd.concat([X_train,y_train],axis=1)\n    ```", "```py\n    trainData.head()\n    ```", "```py\n    ind = trainData[trainData['y']=='yes'].index\n    print(len(ind))\n    ```", "```py\n    3723\n    ```", "```py\n    minData = trainData.loc[ind]\n    print(minData.shape)\n    ```", "```py\n    (3723, 52)\n    ```", "```py\n    ind1 = trainData[trainData['y']=='no'].index\n    print(len(ind1))\n    ```", "```py\n    27924\n    ```", "```py\n    majData = trainData.loc[ind1]\n    print(majData.shape)\n    majData.head()\n    ```", "```py\n    majSample = majData.sample(n=len(ind),random_state = 123)\n    ```", "```py\n    print(majSample.shape)\n    majSample.head()\n    ```", "```py\n    \"\"\"\n    Concatenating both data sets and then shuffling the data set\n    \"\"\"\n    balData = pd.concat([minData,majSample],axis = 0)\n    ```", "```py\n    # Shuffling the data set\n    from sklearn.utils import shuffle\n    balData = shuffle(balData)\n    balData.head()\n    ```", "```py\n    # Making the new X_train and y_train\n    X_trainNew = balData.iloc[:,0:51]\n    print(X_trainNew.head())\n    y_trainNew = balData['y']\n    print(y_trainNew.head())\n    ```", "```py\n    from sklearn.linear_model import LogisticRegression\n    bankModel1 = LogisticRegression()\n    bankModel1.fit(X_trainNew, y_trainNew)\n    ```", "```py\n    pred = bankModel1.predict(X_test)\n    print('Accuracy of Logistic regression model prediction on '\\\n          'test set for balanced data set: {:.2f}'\\\n          .format(bankModel1.score(X_test, y_test)))\n    ```", "```py\n    Accuracy of Logistic regression model prediction on test set for balanced data set:0.83\n    ```", "```py\n    from sklearn.metrics import confusion_matrix\n    confusionMatrix = confusion_matrix(y_test, pred)\n    print(confusionMatrix)\n    from sklearn.metrics import classification_report\n    print(classification_report(y_test, pred))\n    ```", "```py\n!pip install smote-variants\n```", "```py\n    # Shape before oversampling\n    print(\"Before OverSampling count of yes: {}\"\\\n          .format(sum(y_train=='yes')))\n    print(\"Before OverSampling count of no: {} \\n\"\\\n          .format(sum(y_train=='no')))\n    ```", "```py\n    Before OverSampling count of yes: 3694\n    Before OverSampling count of no: 27953\n    ```", "```py\n    !pip install smote-variants\n    import smote_variants as sv\n    import numpy as np\n    ```", "```py\n    # Instantiating the SMOTE class\n    oversampler= sv.SMOTE()\n    ```", "```py\n    # Creating new training set\n    X_train_os, y_train_os = oversampler.sample\\\n                             (np.array(X_train), np.array(y_train))\n    ```", "```py\n    # Shape after oversampling\n    print('After OverSampling, the shape of train_X: {}'\\\n          .format(X_train_os.shape))\n    print('After OverSampling, the shape of train_y: {} \\n'\\\n          .format(y_train_os.shape))\n    print(\"After OverSampling, counts of label 'Yes': {}\"\\\n          .format(sum(y_train_os=='yes')))\n    print(\"After OverSampling, counts of label 'no': {}\"\\\n          .format(sum(y_train_os=='no')))\n    ```", "```py\n    After OverSampling, the shape of train_X: (55906, 51)\n    After OverSampling, the shape of train_y: (55906,) \n    After OverSampling, counts of label 'Yes': 27953\n    After OverSampling, counts of label 'no': 27953\n    ```", "```py\n    # Training the model with Logistic regression model\n    from sklearn.linear_model import LogisticRegression\n    bankModel2 = LogisticRegression()\n    bankModel2.fit(X_train_os, y_train_os)\n    ```", "```py\n    pred = bankModel2.predict(X_test)\n    ```", "```py\n    print('Accuracy of Logistic regression model prediction on '\\\n          'test set for Smote balanced data set: {:.2f}'\\\n          .format(bankModel2.score(X_test, y_test)))\n    ```", "```py\n    Accuracy of Logistic regression model prediction on test set for Smote balanced data set: 0.83\n    ```", "```py\n    from sklearn.metrics import confusion_matrix\n    confusionMatrix = confusion_matrix(y_test, pred)\n    print(confusionMatrix)\n    ```", "```py\n    [[10042  1956]\n     [  306  1260]]\n    ```", "```py\n    from sklearn.metrics import classification_report\n    print(classification_report(y_test, pred))\n    ```", "```py\n    # Shape before oversampling\n    print(\"Before OverSampling count of yes: {}\"\\\n          .format(sum(y_train=='yes')))\n    print(\"Before OverSampling count of no: {} \\n\"\\\n          .format(sum(y_train=='no')))\n    ```", "```py\n    Before OverSampling count of yes: 3723\n    Before OverSampling count of no: 27924\n    ```", "```py\n    !pip install smote-variants\n    import smote_variants as sv\n    import numpy as np\n    ```", "```py\n    # Instantiating the MSMOTE class\n    oversampler= sv.MSMOTE()\n    ```", "```py\n    # Creating new training set\n    X_train_os, y_train_os = oversampler.sample\\\n                             (np.array(X_train), np.array(y_train))\n    # Shape after oversampling\n    print('After OverSampling, the shape of train_X: {}'\\\n          .format(X_train_os.shape))\n    print('After OverSampling, the shape of train_y: {} \\n'\\\n          .format(y_train_os.shape))\n    print(\"After OverSampling, counts of label 'Yes': {}\"\\\n          .format(sum(y_train_os=='yes')))\n    print(\"After OverSampling, counts of label 'no': {}\"\\\n          .format(sum(y_train_os=='no')))\n    ```", "```py\n    After OverSampling, the shape of train_X: (55848, 51)\n    After OverSampling, the shape of train_y: (55848,) \n    After OverSampling, counts of label 'Yes': 27924\n    After OverSampling, counts of label 'no': 27924\n    ```", "```py\n    # Training the model with Logistic regression model\n    from sklearn.linear_model import LogisticRegression\n    # Defining the LogisticRegression function\n    bankModel3 = LogisticRegression()\n    bankModel3.fit(X_train_os, y_train_os)\n    ```", "```py\n    pred = bankModel3.predict(X_test)\n    ```", "```py\n    print('Accuracy of Logistic regression model prediction on '\\\n          'test set for MSMOTE balanced data set: {:.2f}'\\\n          .format(bankModel3.score(X_test, y_test)))\n    ```", "```py\n    Accuracy of Logistic regression model prediction on test set for MSMOTE balanced data set: 0.84\n    ```", "```py\n    from sklearn.metrics import confusion_matrix\n    confusionMatrix = confusion_matrix(y_test, pred)\n    print(confusionMatrix)\n    ```", "```py\n    [[10167  1831]\n     [  314  1252]]\n    ```", "```py\n    from sklearn.metrics import classification_report\n    print(classification_report(y_test, pred))\n    ```"]