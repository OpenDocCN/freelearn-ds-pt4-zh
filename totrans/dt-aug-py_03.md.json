["```py\n# clone the book repo.\nf = 'https://github.com/PacktPublishing/Data-Augmentation-with-Python'\n!git clone {f}\n# invoke Pluto\n%run 'Data-Augmentation-with-Python/pluto/pluto_chapter_2.py'\n```", "```py\n---------------------------- : ---------------------------\n            Hello from class : <class '__main__.PacktDataAug'> Class: PacktDataAug\n                   Code name : Pluto\n                   Author is : Duc Haba\n---------------------------- : ---------------------------\n```", "```py\n# display system and libraries version\npluto.say_sys_info()\n```", "```py\n---------------------------- : ---------------------------\n                 System time : 2022/09/18 06:07\n                    Platform : linux\n     Pluto Version (Chapter) : 2.0\n       Python version (3.7+) : 3.7.13 (default, Apr 24 2022, 01:04:09) [GCC 7.5.0]\n            PyTorch (1.11.0) : actual: 1.12.1+cu113\n              Pandas (1.3.5) : actual: 1.3.5\n                 PIL (9.0.0) : actual: 7.1.2\n          Matplotlib (3.2.2) : actual: 3.2.2\n                   CPU count : 2\n                  CPU speed : NOT available\n---------------------------- : ---------------------------\n```", "```py\n# fetch image data\npluto.fetch_kaggle_dataset('https://www.kaggle.com/datasets/pranavraikokte/covid19-image-dataset')\n# import to Pandas data frame\nf = 'kaggle/covid19-image-dataset/Covid19-dataset/train'\npluto.df_covid19 = pluto.make_dir_dataframe(f)\n```", "```py\n# fetch image data\npluto.fetch_kaggle_dataset('https://www.kaggle.com/datasets/sinhayush29/indian-people')\n# import to Pandas DataFrame\nf = 'kaggle/indian-people/Indian_Train_Set'\npluto.df_people = pluto.make_dir_dataframe(f)\n```", "```py\n# fetch image data\npluto.fetch_kaggle_dataset('https://www.kaggle.com/datasets/marcosvolpato/edible-and-poisonous-fungi')\n# import into Pandas data frame\nf = 'kaggle/edible-and-poisonous-fungi'\npluto.df_fungi = pluto.make_dir_dataframe(f)\n```", "```py\n# fetch image data\npluto.fetch_kaggle_dataset('https://www.kaggle.com/datasets/vencerlanz09/sea-animals-image-dataste')\n# import to Pandas data frame\nf = 'kaggle/sea-animals-image-dataste'\npluto.df_sea_animal = pluto.make_dir_dataframe(f)\n```", "```py\n# fetch image data\npluto.fetch_kaggle_dataset('https://www.kaggle.com/datasets/quandang/vietnamese-foods')\n# import to Pandas DataFrame\nf = 'kaggle/vietnamese-foods/Images/Train'\npluto.df_food = pluto.make_dir_dataframe(f)\n```", "```py\n# fetch image data\npluto.fetch_kaggle_dataset('https://www.kaggle.com/datasets/ferasoughali/mall-crowd-estimation')\n# import to Pandas DataFrame\nf = 'kaggle/mall-crowd-estimation/mall_dataset/frames'\npluto.df_crowd = pluto.make_dir_dataframe(f)\n```", "```py\n# use PIL to flip horizontal\nmirror_img = PIL.ImageOps.mirror(img)\n```", "```py\n# Select an image from Pandas and show the original and flip\npluto.draw_image_flip_pil(pluto.df_people.fname[100])\n```", "```py\n# use fast.ai to flip image in wrapper function\ndef draw_image_flip(self,df,bsize=15):\n  aug = [fastai.vision.augment.Flip(p=0.75)]\n  item_fms = fastai.vision.augment.Resize(480)\n  dsl_org = self._make_data_loader(df, aug,item_fms)\n  dsl_org.show_batch(max_n=bsize)\n  return dsl_org\n```", "```py\n# Show random flip-image batch 15 in Pandas, wraper function\npluto.dls_people = pluto.draw_image_flip(pluto.df_people)\n```", "```py\n# use flip wrapper function on Fungi data\npluto.dls_fungi = pluto.draw_image_flip(pluto.df_fungi)\n```", "```py\n# use flip wrapper function on covid data\npluto.dls_covid19 = pluto.draw_image_flip(pluto.df_covid19)\n```", "```py\n# using fast.ai for fliping\naug = fastai.vision.augment.Dihedral(p=0.8,pad_mode=pad_mode)\n```", "```py\n# use wrapper function on both flip on people images\npluto.dls_people = pluto.draw_image_flip_both(\n  pluto.df_people)\n```", "```py\n# use flip wrapper function on food photos\npluto.dls_food = pluto.draw_image_flip_both(pluto.df_food)\n```", "```py\n# use fast.ai to crop image in wrapper function\nitem_tfms=fastai.vision.augment.CropPad(480,\n   pad_mode=\"zeros\")\n```", "```py\n# use wrapper function to crop and pad people photo\npluto.dls_people = pluto.draw_image_crop(pluto.df_people,\n  pad_mode=\"border\",\n  isize=640)\n```", "```py\n# use wrapper function to crop and pad Fungi image\npluto.dls_fungi = pluto.draw_image_crop(pluto.df_fungi,\n  pad_mode=\"zeros\",\n  isize=240)\n```", "```py\n# use wrapper function to crop and pad food image\npluto.dls_food = pluto.draw_image_crop(pluto.df_food,\n  pad_mode=\"reflection\",\n  isize=640)\n```", "```py\n# use fast.ai for rotating\naug = [fastai.vision.augment.Rotate(max_rotate,\n  p=0.75,\n  pad_mode=pad_mode)]\n```", "```py\n# use wrapper function to rotate sea animal photo\npluto.dls_sea_animal = pluto.draw_image_rotate(\n  pluto.df_sea_animal,\n  max_rotate=180.0,\n  pad_mode='reflection')\n```", "```py\n# user wrapper function to rotate people photo\npluto.dls_people = pluto.draw_image_rotate(pluto.df_people,\n  max_rotate=25.0,\n  pad_mode='border')\n```", "```py\n# using PIL for shifting image\nshift_img = PIL.ImageChops.offset(img,x_axis,y_axis)\n```", "```py\n# select an image in Pandas\nf = pluto.df_people.fname[30]\n# user wrapper function to shift the image\npluto.draw_image_shift_pil(f, -150, -50)\n```", "```py\n# select random images\nsamp = df.sample(int(ncol * nrow))\n# convert to an array\nimg_numpy = numpy.array(PIL.Image.open(samp.fname[i]))\n# perform the transformation using albumentations\nimg = aug_album(image=img_numpy)['image']\n# display the image in batch modde\nax.imshow(img)\n```", "```py\ndef draw_image_brightness(self,df,\n  brightness=0.2,\n  bsize=5):\n  aug_album = albumentations.ColorJitter(\n    brightness = brightness,\n    contrast=0.0,\n    saturation=0.0,\n    hue=0.0,\n    always_apply=True,\n    p=1.0)\n  self._draw_image_album(df,aug_album,bsize)\n  Return\n```", "```py\n# use the Albumentations library function for brightness\naug_album = albumentations.ColorJitter(brightness=brightness,\n  contrast=0.0,\n  saturation=0.0,\n  hue=0.0,\n  always_apply=True,\n  p=1.0)\n```", "```py\n# use the brightness wrapper function for people photo\npluto.draw_image_brightness(pluto.df_people, brightness=1.7)\n```", "```py\n# use the brightness wrapper function for food image\npluto.draw_image_brightness(pluto.df_food, brightness=0.3)\n```", "```py\n# use albumentations for grayscale\naug_album = albumentations.ToGray(p=1.0)\n```", "```py\n# use the grayscale wrapper function for fungi image\npluto.draw_image_grayscale(pluto.df_fungi)\n```", "```py\n# use the grayscale wrapper function for crowd photo\npluto.draw_image_grayscale(pluto.df_crowd)\n```", "```py\n# for contrast\naug_album = albumentations.ColorJitter(brightness=0.0,\n  contrast=contrast, saturation=0.0,\n  hue=0.0, always_apply=True, p=1.0)\n# for saturation\naug_album = albumentations.ColorJitter(brightness=0.0,\n  contrast=0.0, saturation=saturation,\n  hue=0.0, always_apply=True, p=1.0)\n# for hue shifting\naug_album = albumentations.ColorJitter(brightness=0.0,\n  contrast=0.0, saturation=0.0,\n  hue=hue, always_apply=True, p=1.0)\n```", "```py\n# use the contrast wrapper function on sea animal image\npluto.draw_image_contrast(pluto.df_sea_animal,\n  contrast=8.5,\n  bsize=2)\n```", "```py\n# use the contrast wrapper function on food image\npluto.draw_image_saturation(pluto.df_food,\n  saturation=10.5)\n```", "```py\n# use the contrast wrapper function on people photo\npluto.draw_image_hue(pluto.df_people,hue=0.5)\n```", "```py\n# use Albumentations for noise injection\naug_album = albumentations.GaussNoise(var_limit=var_limit,\n  always_apply=True,\n  p=1.0)\n```", "```py\n# use noise wrapper function on fungi photo\npluto.draw_image_noise(pluto.df_fungi,\n  var_limit=(10000.0, 20000.0), bsize=2)\n```", "```py\n# use noise wrapper function on crowd image\npluto.draw_image_noise(pluto.df_crowd,\n  var_limit=(200.0, 400.0),\n  bsize=2)\n```", "```py\n# for rain\naug_album = albumentations.RandomRain(\n  drop_length = drop_length,\n  drop_width=drop_width,\n  blur_value=blur_value,\n  always_apply=True,\n  p=1.0)\n# for sun flare\naug_album = albumentations.RandomSunFlare(\n  flare_roi = flare_roi,\n  src_radius=src_radius,\n  always_apply=True, p=1.0)\n```", "```py\n# use sunflare wrapper function with people photo\npluto.draw_image_sunflare(pluto.df_people,\n  flare_roi=(0, 0, 1, 0.5),\n  src_radius=400,\n  bsize=2)\n```", "```py\n# use the sunflare wrapper function on fungi image\npluto.draw_image_sunflare(pluto.df_fungi, src_radius=120)\n```", "```py\n# use the rain wrapper function on people photo\npluto.draw_image_rain(pluto.df_people, drop_length=20,\n  drop_width=1, blur_value=1)\n```", "```py\n# for sepia use albumentations library\naug_album = albumentations.ToSepia(always_apply=True, p=1.0)\n# for FancyPCA use albumentations library\naug_album = albumentations.FancyPCA(alpha=alpha,\n  always_apply=True,\n  p=1.0)\n```", "```py\n# use the sepia wrapper function on people photo\npluto.draw_image_sepia(pluto.df_people)\n```", "```py\n# use fancyPCA wrapper function on people photo\npluto.draw_image_fancyPCA(pluto.df_people,alpha=5.0,bsize=2)\n```", "```py\n# use fastai library for random erasing\naug = [fastai.vision.augment.RandomErasing(p=1.0,\n  max_count=max_count)]\nitfms = fastai.vision.augment.Resize(480)\n```", "```py\n# use random erasing wrapper function on food image\npluto.dls_food = pluto.draw_image_erasing(\n  pluto.df_food,\n  bsize=6,\n  max_count=4)\n```", "```py\n# use fastai library for brightness and contrast\naug = [\n  fastai.vision.augment.Brightness(max_lighting=0.3,p=0.5),\n  fastai.vision.augment.Contrast(max_lighting=0.4, p=0.5)]\n# use albumentation library\nalbumentations.Compose([\n  albumentations.GaussNoise(var_limit=(100.0, 300.0),\n    p=0.5)])\n```", "```py\n# use covid 19 wrapper function\npluto.draw_augment_covid19(pluto.df_covid19)\n```", "```py\n# use both fastai and albumentation library\naug = [\n  fastai.vision.augment.Brightness(max_lighting=0.3,p=0.5),\n  fastai.vision.augment.Contrast(max_lighting=0.4, p=0.5),\n  AlbumentationsTransform(self._fetch_album_covid19())]\n# use alpbumentation library in the _fetch_albm_covid()\nalbumentations.Compose([\n  albumentations.ColorJitter(brightness=0.3,\n    contrast=0.4, saturation=3.5,hue=0.0, p=0.5),\n  albumentations.ToSepia(p=0.5),\n  albumentations.FancyPCA(alpha=0.5, p=0.5),\n  albumentations.GaussNoise(var_limit=(300.0, 500.0), p=0.5)\n  ])\n```", "```py\n# use people wrapper function\npluto.draw_augment_people(pluto.df_people)\n```", "```py\n# use both fastai and albumentations libraries\naug = [\n  fastai.vision.augment.Flip(p=0.5),\n  fastai.vision.augment.Rotate(25.0,p=0.5,pad_mode='border'),\n  fastai.vision.augment.Warp(magnitude=0.3,\n    pad_mode='border',p=0.5),\n  fastai.vision.augment.RandomErasing(p=0.5,max_count=2),\n  AlbumentationsTransform(self._fetch_album_fungi())]\n# use albumentation inside the _fetch_album_fungi()\nalbumentations.Compose([\n  albumentations.ColorJitter(brightness=0.3,\n    contrast=0.4, saturation=2.0,hue=0.0, p=0.5),\n  albumentations.FancyPCA(alpha=0.5, p=0.5),\n  albumentations.RandomSunFlare(flare_roi=(0, 0, 1, 0.5),\n    src_radius=200, always_apply=True, p=0.5),\n  albumentations.RandomRain(drop_length=20,\n    drop_width=1.1,blur_value=1.1,always_apply=True, p=0.5),\n  albumentations.GaussNoise(var_limit=(200.0, 400.0), p=0.5)\n  ])\n```", "```py\n# use fungi wrapper function\npluto.draw_augment_fungi(pluto.df_fungi)\n```", "```py\n# use both fastai and albumentations library\naug = [\n  fastai.vision.augment.Dihedral(p=0.5,\n    pad_mode='reflection'),\n  fastai.vision.augment.Rotate(180.0,\n    p=0.5,pad_mode='reflection'),\n  fastai.vision.augment.Warp(magnitude=0.3,\n    pad_mode='reflection',p=0.5),\n  fastai.vision.augment.RandomErasing(p=0.5,max_count=2),\n  AlbumentationsTransform(self._fetch_album_sea_animal())]\n# use albumentations for _fetch_album_sea_animal()\nalbumentations.Compose([\n  albumentations.ColorJitter(brightness=0.4,\n    contrast=0.4, saturation=2.0,hue=1.5, p=0.5),\n  albumentations.FancyPCA(alpha=0.5, p=0.5),\n  albumentations.GaussNoise(var_limit=(200.0, 400.0),\n    p=0.5)])\n```", "```py\n# use the sea animal wrapper function\npluto.draw_augment_sea_animal(pluto.df_sea_animal)\n```", "```py\n# use both fastai and albumentations libraries\naug = [\n  fastai.vision.augment.Dihedral(p=0.5,\n    pad_mode='reflection'),\n  fastai.vision.augment.Rotate(180.0,\n    p=0.5,pad_mode='reflection'),\n  fastai.vision.augment.Warp(magnitude=0.3,\n    pad_mode='reflection',p=0.5),\n  fastai.vision.augment.RandomErasing(p=0.5,max_count=2),\n  AlbumentationsTransform(self._fetch_album_food())]\n# use albumentation library for _fetch_album_food()\nalbumentations.Compose([\n  albumentations.ColorJitter(brightness=0.4,\n    contrast=0.4, saturation=2.0,hue=1.5, p=0.5),\n  albumentations.FancyPCA(alpha=0.5, p=0.5),\n  albumentations.GaussNoise(var_limit=(200.0, 400.0),\n    p=0.5)])\n```", "```py\n# use food wrapper function\npluto.draw_augment_food(pluto.df_food)\n```", "```py\n# use both fastai and albumentations libraries\naug = [\n  fastai.vision.augment.Flip(p=0.5),\n  fastai.vision.augment.Rotate(25.0,\n    p=0.5,pad_mode='zeros'),\n  fastai.vision.augment.Warp(magnitude=0.3,\n    pad_mode='zeros',p=0.5),\n  fastai.vision.augment.RandomErasing(p=0.5,max_count=2),\n  AlbumentationsTransform(self._fetch_album_crowd())]\n# use albumentation library for _fetch_album_crowd()\nalbumentations.Compose([\n  albumentations.ColorJitter(brightness=0.3,\n    contrast=0.4, saturation=3.5,hue=0.0, p=0.5),\n  albumentations.ToSepia(p=0.5),\n  albumentations.FancyPCA(alpha=0.5, p=0.5),\n  albumentations.GaussNoise(var_limit=(300.0, 500.0),\n    p=0.5)])\n```", "```py\n# use the crowd wrapper function\npluto.draw_augment_crowd(pluto.df_crowd)\n```"]