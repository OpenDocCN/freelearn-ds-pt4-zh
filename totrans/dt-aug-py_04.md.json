["```py\n# clone the github\n!git clone 'https://github.com/PacktPublishing/Data-Augmentation-with-Python'\n# instantiate Pluto\n%run 'Data-Augmentation-with-Python/pluto/pluto_chapter_3.py'\n```", "```py\n---------------------------- : ---------------------------\n            Hello from class : <class '__main__.PacktDataAug'> Class: PacktDataAug\n                   Code name : Pluto\n                   Author is : Duc Haba\n---------------------------- : ---------------------------\n                fastai 2.6.3 :  actual 2.7.9\n---------------------------- : ---------------------------\n        albumentations 1.2.1 : actual 1.2.1\n---------------------------- : ---------------------------\n```", "```py\n# display Python and libraries version number\npluto.say_sys_info()\n```", "```py\n---------------------------- : ---------------------------\n                 System time : 2022/10/21 15:46\n                    Platform : linux\n     Pluto Version (Chapter) : 3.0\n       Python version (3.7+) : 3.7.13 (default, Apr 24 2022, 01:04:09) [GCC 7.5.0]\n            PyTorch (1.11.0) : actual: 1.12.1+cu113\n              Pandas (1.3.5) : actual: 1.3.5\n                 PIL (9.0.0) : actual: 7.1.2\n          Matplotlib (3.2.2) : actual: 3.2.2\n                   CPU count : 2\n                  CPU speed : NOT available\n---------------------------- : ---------------------------\n```", "```py\n# Fetch Camvid photo\nurl = 'https://www.kaggle.com/datasets/carlolepelaars/camvid'\npluto.fetch_kaggle_dataset(url)\n# Fetch Aerial image\nurl = 'https://www.kaggle.com/datasets/humansintheloop/semantic-segmentation-of-aerial-imagery'\npluto.fetch_kaggle_dataset(url)\n```", "```py\n# import data to Pandas\nf = 'kaggle/camvid/CamVid/train'\npluto.df_camvid = pluto.make_dir_dataframe(f)\n```", "```py\n# define helper function\n@add_method(PacktDataAug)\ndef _make_df_mask_name(self,fname):\n  p = pathlib.Path(fname)\n  return (str(p.parent.parent) +\n    '/' + str(p.parent.name) + '_labels/' +\n    str(p.stem) + '_L' + str(p.suffix))\n# method definition\n@add_method(PacktDataAug)\ndef make_df_mask_name(self,df):\n  df['mask_name'] = df.fname.apply(self._make_df_mask_name)\n  return\n```", "```py\n# create mask file name\npluto.make_df_mask_name(pluto.df_camvid)\n```", "```py\n# use new batch display method for segmentation\npluto.draw_batch_segmentation(pluto.df_camvid,\n  is_shuffle=True)\n```", "```py\n# fetch real-world data\nurl = 'https://www.kaggle.com/datasets/humansintheloop/semantic-segmentation-of-aerial-imagery'\npluto.fetch_kaggle_dataset(url)\n```", "```py\n# import to Pandas\nf = 'kaggle/semantic-segmentation-of-aerial-imagery'\npluto.df_aerial = pluto.make_dir_dataframe(f)\n```", "```py\n# create mask filename\npluto.make_df_mask_name_aerial(pluto.df_aerial)\n```", "```py\n# draw batch image\npluto.draw_batch_segmentation(pluto.df_aerial,\n  is_shuffle=True)\n```", "```py\n# use wrapper function to flip image\npluto.draw_image_flip_pil_segmen(pluto.df_camvid.fname[0])\n```", "```py\n# use wrapper function to flip image mask\npluto.draw_image_flip_pil_segmen(pluto.df_camvid.mask_name[0]\n```", "```py\n# method definition\n@add_method(PacktDataAug)\ndef draw_image_flip_segmen(self,df):\n  aug_album = albumentations.HorizontalFlip(p=1.0)\n  self._draw_image_album_segmentation(df,aug_album,\n    'Horizontal Flip')\n  return\n```", "```py\n# use wrapper function to flip both image and image mask\npluto.draw_image_flip_segmen(pluto.df_camvid)\n```", "```py\n# use the same flip segmentation wrapper function on arial\npluto.draw_image_flip_segmen(pluto.df_aerial)\n```", "```py\n# use albumentations library function\naug_album = albumentations.Flip(p=1.0)\n```", "```py\n# use flip wrapper function for camvid data\npluto.draw_image_flip_both_segmen(pluto.df_camvid)\n```", "```py\n# use flip wrapper function for aerial image\npluto.draw_image_flip_both_segmen(pluto.df_aerial)\n```", "```py\n# use albumentation library function for rotating\naug_album = albumentations.Rotate(limit=45, p=1.0)\n```", "```py\n# use rotate wrapper function for camvid image\npluto.draw_image_rotate_segmen(pluto.df_camvid)\n```", "```py\n# use rotate wrapper function for aerial image\npluto.draw_image_rotate_segmen(pluto.df_aerial)\n```", "```py\n# use albumentations function for resizing and cropping\naug_album = albumentations.RandomSizedCrop(\n  min_max_height=(500, 600),\n  height=500,\n  width=500,\n  p=1.0)\n```", "```py\n# use resize and crop wrapper functiion for camvid photo\npluto.draw_image_resize_segmen(pluto.df_camvid)\n```", "```py\n# use resize and crop wrapper functiion for aerialphoto\npluto.draw_image_resize_segmen(pluto.df_aerial)\n```", "```py\n# use albumentations library for transpose\naug_album = albumentations.Transpose(p=1.0)\n```", "```py\n# use transpose wrapper function for camvid data\npluto.draw_image_transpose_segmen(pluto.df_camvid)\n```", "```py\n# use transpose wrapper function for aerial data\npluto.draw_image_transpose_segmen(pluto.df_aerial)\n```", "```py\n# use albumentations library for brightness\naug_album = albumentations.ColorJitter(\n  brightness=brightness,\n  contrast=0.0,\n  saturation=0.0,\n  hue=0.0,\n  always_apply=True,\n  p=1.0)\n```", "```py\n# use the brightmess wrapper function for camvid image\npluto.draw_image_brightness_segmen(pluto.df_camvid)\n```", "```py\n# use the brightmess wrapper function for aerial image\npluto.draw_image_brightness_segmen(pluto.df_aerial)\n```", "```py\n# use albumentations library for fancyPCA\naug_album = albumentations.FancyPCA(\n  alpha=alpha,\n  always_apply=True,\n  p=1.0)\n```", "```py\n# use the fancyPCA wrapper function for camvid image\npluto.draw_image_fancyPCA_segmen(pluto.df_camvid)\n```", "```py\n# use the fancyPCA wrapper function for aerial image\npluto.draw_image_fancyPCA_segmen(pluto.df_aerial)\n```", "```py\n# use Pandas to display the combination filters\npluto.print_safe_parameters_segmen()\n```", "```py\n# use albumentations library\naug_album = albumentations.Compose([\n  albumentations.ColorJitter(brightness=0.5,\n    contrast=0.0,\n    saturation=0.0,\n    hue=0.0,p=0.5),\n  albumentations.HorizontalFlip(p=0.5),\n  albumentations.Flip(p=0.5),\n  albumentations.Rotate(limit=45, p=0.5),\n  albumentations.RandomSizedCrop(\n    min_max_height=(500, 600),\n    height=500,\n    width=500,\n    p=0.5),\n  albumentations.Transpose(p=0.5),\n  albumentations.FancyPCA(alpha=0.2, p=0.5)])\n```", "```py\n# use combination wrapper function for camvid photo\npluto.draw_uber_segmen(pluto.df_camvid)\n```", "```py\n# use combination wrapper function for aerial photo\npluto.draw_uber_segmen(pluto.df_aerial)\n```"]