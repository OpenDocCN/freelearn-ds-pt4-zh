["```py\n# clone GitHub repo\n!git clone 'https://github.com/PacktPublishing/Data-Augmentation-with-Python'\n# instantiate Pluto\n%run 'Data-Augmentation-with-Python/pluto/pluto_chapter_2.py'\n```", "```py\n---------------------------- : ---------------------------\n            Hello from class : <class '__main__.PacktDataAug'> Class: PacktDataAug\n                   Code name : Pluto\n                   Author is : Duc Haba\n---------------------------- : ---------------------------\n```", "```py\npluto.say_sys_info()\n```", "```py\n---------------------------- : ---------------------------\n                 System time : 2022/10/30 06:52\n                    Platform : linux\n     Pluto Version (Chapter) : 2.0\n             Python (3.7.10) : actual: 3.7.15 (default, Oct 12 2022, 19:14:55) [GCC 7.5.0]\n            PyTorch (1.11.0) : actual: 1.12.1+cu113\n              Pandas (1.3.5) : actual: 1.3.5\n                 PIL (9.0.0) : actual: 7.1.2\n          Matplotlib (3.2.2) : actual: 3.2.2\n                   CPU count : 2\n                  *CPU speed : NOT available\n---------------------------- : ---------------------------\n```", "```py\n# fetch data\nurl = 'https://www.kaggle.com/datasets/infamouscoder/dataset-netflix-shows'\npluto.fetch_kaggle_dataset(url)\n```", "```py\n# fetch data\nurl = 'https://www.kaggle.com/datasets/mayurdalvi/twitter-sentiments-analysis-nlp'\npluto.fetch_kaggle_dataset(url)\n```", "```py\n# import into Panda\nf = 'kaggle/dataset-netflix-shows/netflix_titles.csv'\npluto.df_netflix_data = pluto.fetch_df(f)\n# display data batch\npluto.print_batch_text(pluto.df_netflix_data,\n  cols=['title', 'description'])\n```", "```py\n# clean space-char\nf = 'kaggle/twitter-sentiments-analysis-nlp'\n!find {f} -name \"* *\" -type f | rename 's/ /_/g'\n# import into Pandas\nf = 'kaggle/twitter-sentiments-analysis-nlp/Twitter_Sentiments.csv'\npluto.df_twitter_data = pluto.fetch_df(f)\n# display data batch\npluto.print_batch_text(pluto.df_twitter_data,cols=['label', 'tweet'])\n```", "```py\nreturn (re.sub('[^A-Za-z0-9 .,!?#@]+', '', str(x)))\n```", "```py\nreturn (profanity.censor_profanity(x, ''))\n```", "```py\n# clean text\ndf['clean_tweet'] = df.tweet.apply(self._clean_text)\n# remove profanity words\ndf['clean_tweet'] = df['clean_tweet'].apply(\n    self._clean_bad_word)\n```", "```py\n# clean tweets\npluto.clean_text(pluto.df_twitter_data)\n# display data batch\npluto.print_batch_text(pluto.df_twitter_data,\n    cols=['label', 'clean_tweet'])\n```", "```py\n# draw word count\npluto.draw_word_count(pluto.df_netflix_data)\n```", "```py\n# draw word count\npluto.draw_word_count(pluto.df_twitter_data)\n```", "```py\nmissingno.matrix(df,color=color,ax=pic)\n```", "```py\n# draw missing data/null value\npluto.draw_text_null_data(pluto.df_netflix_data)\n```", "```py\n# draw missing data/null value\npluto.draw_text_null_data(pluto.df_twitter_data)\n```", "```py\n# generate word cloud\nimg = wordcloud.WordCloud(width = 1600,\n        height = 800,\n        background_color ='white',\n        stopwords = xignore_words,\n        min_font_size = 10).generate(words_str)\n# covert Pandas to word string input\norig = df_1column.str.cat()\nword_clean = re.sub('[^A-Za-z0-9 ]+', '', orig)\n```", "```py\n# draw word cloud\npluto.draw_text_wordcloud(pluto.df_netflix_data.description,\n    xignore_words=wordcloud.STOPWORDS,\n    title='Word Cloud: Netflix Movie Review')\n```", "```py\n# draw word cloud\npluto.draw_text_wordcloud(pluto.df_twitter_data.clean_tweet,\n    xignore_words=wordcloud.STOPWORDS,\n    title='Clean Tweets Word Cloud')\n```", "```py\n# method definition\ndef _print_aug_batch(self, df,\n    aug_func,\n    col_dest=\"description\",\n    bsize=3,\n    aug_name='Augmented'):\n```", "```py\n# method definiton\n@add_method(PacktDataAug)\ndef print_aug_ocr(self, df,\n    col_dest=\"description\",\n    bsize=3,\n    aug_name='Augmented'):\n    aug_func = nlpaug.augmenter.char.OcrAug()\n    self._print_aug_batch(df,\n        aug_func,\n        col_dest=col_dest,\n        bsize=bsize,\n        aug_name=aug_name)\n    return\n```", "```py\n# use OCR method\npluto.print_aug_ocr(pluto.df_netflix_data,\n    col_dest='description',\n    aug_name='OCR Augment')\n```", "```py\n# print the batch\npluto.print_aug_ocr(pluto.df_twitter_data,\n    col_dest='clean_tweet',\n    aug_name='OCR Augment')\n```", "```py\n# define augmentation function variable definition\naug_func = nlpaug.augmenter.char.KeyboardAug()\n```", "```py\n# use keyboard augmentation technique\npluto.print_aug_keyboard(pluto.df_netflix_data,\n    col_dest='description',\n    aug_name='Keyboard Augment')\n```", "```py\n# use keyboard augmentation technique\npluto.print_aug_keyboard(pluto.df_twitter_data,\n    col_dest='clean_tweet',\n    aug_name='Keyboard Augment')\n```", "```py\n# define augmentation function variable definition\naug_func = nlpaug.augmenter.char.RandomCharAug(action=action)\n```", "```py\n# use random insert augmentation technique\npluto.print_aug_char_random(pluto.df_netflix_data,\n    action='insert',\n    col_dest='description',\n    aug_name='Random Insert Augment')\n```", "```py\n# use random insert augmentation technique\npluto.print_aug_char_random(pluto.df_twitter_data,\n    action='insert',\n    col_dest='clean_tweet',\n    aug_name='Random Insert Augment')\n```", "```py\n# use random delete augmentation technique\npluto.print_aug_char_random(pluto.df_netflix_data,\n    action='delete',\n    col_dest='description',\n    aug_name='Random Delete Augment')\n```", "```py\n# use random delete augmentation technique\npluto.print_aug_char_random(pluto.df_twitter_data,\n    action='delete', col_dest='clean_tweet',\n    aug_name='Random Delete Augment')\n```", "```py\n# use random substitute augmentation technique\npluto.print_aug_char_random(pluto.df_netflix_data,\n    action='substitute',\n    col_dest='description',\n    aug_name='Random Substitute Augment')\n```", "```py\n# use random substitude augmentation technique\npluto.print_aug_char_random(pluto.df_twitter_data,\n    action='substitute',\n    col_dest='clean_tweet',\n    aug_name='Random Substitute Augment')\n```", "```py\n# use random swap augmentation technique\npluto.print_aug_char_random(pluto.df_netflix_data,\n    action='swap',\n    col_dest='description',\n    aug_name='Random Swap Augment')\n```", "```py\n# use random swap augmentation technique\npluto.print_aug_char_random(pluto.df_twitter_data,\n    action='swap',\n    col_dest='clean_tweet',\n    aug_name='Random Swap Augment')\n```", "```py\n# define augmentation function variable definition\naug_func = nlpaug.augmenter.word.SpellingAug()\n```", "```py\n# use word missplell augmentation\npluto.print_aug_word_misspell(pluto.df_netflix_data,\n    col_dest='description',\n    aug_name='Word Spelling Augment')\n```", "```py\n# use word missplell augmentation\npluto.print_aug_word_misspell(pluto.df_twitter_data,\n    col_dest='clean_tweet',\n    aug_name='Word Spelling Augment')\n```", "```py\n# define augmentation function variable definition\naug_func = nlpaug.augmenter.word.SplitAug()\n```", "```py\n# use word split augmentation\npluto.print_aug_word_split(pluto.df_netflix_data,\n    col_dest='description',\n    aug_name='Word Split Augment')\n```", "```py\n# use word split augmentation\npluto.print_aug_word_split(pluto.df_twitter_data,\n    col_dest='clean_tweet',\n    aug_name='Word Split Augment')\n```", "```py\n# define augmentation function variable definition\naug_func = nlpaug.augmenter.word.RandomWordAug(action=action)\n```", "```py\n# use word random swap augmentation\npluto.print_aug_word_random(pluto.df_netflix_data,\n    action='swap',\n    col_dest='description',\n    aug_name='Word Random Swap Augment')\n```", "```py\n# use word random swap augmentation\npluto.print_aug_word_random(pluto.df_twitter_data,\n    action='swap',\n    col_dest='clean_tweet',\n    aug_name='Word Random Swap Augment')\n```", "```py\n# use word random crop augmentation\npluto.print_aug_word_random(pluto.df_netflix_data,\n    action='crop',\n    col_dest='description',\n    aug_name='Word Random Crop Augment')\n```", "```py\n# use word random swap augmentation\npluto.print_aug_word_random(pluto.df_twitter_data,\n    action='crop',\n    col_dest='clean_tweet',\n    aug_name='Word Random Crop Augment')\n```", "```py\n# define augmentation function variable definition\naug_func = nlpaug.augmenter.word.SynonymAug(\n    aug_src='wordnet')\n```", "```py\n# use word synonym augmentation\npluto.print_aug_word_synonym(pluto.df_netflix_data,\n    col_dest='description',\n    aug_name='Synonym WordNet Augment')\n```", "```py\n# use word synonym augmentation\npluto.print_aug_word_synonym(pluto.df_twitter_data,\n    col_dest='clean_tweet',\n    aug_name='Synonym WordNet Augment')\n```", "```py\n# define augmentation function variable definition\naug_func = nlpaug.augmenter.word.AntonymAug()\n```", "```py\n# use word antonym augmentation\npluto.print_aug_word_antonym(pluto.df_netflix_data,\n    col_dest='description',\n    aug_name='Antonym Augment')\n```", "```py\n# use word antonym augmentation\npluto.print_aug_word_antonym(pluto.df_twitter_data,\n    col_dest='clean_tweet',\n    aug_name='Antonym Augment')\n```", "```py\n# define augmentation function\naug_func = nlpaug.augmenter.word.ReservedAug(\n    reserved_tokens=reserved_tokens)\n# define control sentence reserved words\npluto.reserved_control = [['wisdom', 'sagacity',\n    'intelligence', 'prudence'],\n    ['foolishness', 'folly', 'idiocy', 'stupidity']]\n# define Netflix reserved words\npluto.reserved_netflix = [['family','household', 'brood',\n    'unit', 'families'],\n    ['life','existance', 'entity', 'creation'],\n    ['love', 'warmth', 'endearment','tenderness']]\npluto.reserved_netflix = pluto.reserved_control +\n    pluto.reserved_netflix\n# define Twitter reserved words\npluto.reserved_twitter = [['user', 'users', 'customer',\n    'client','people','member','shopper'],\n    ['happy', 'cheerful', 'joyful', 'carefree'],\n    ['time','clock','hour']]\npluto.reserved_twitter = pluto.reserved_control +\n    pluto.reserved_twitter\n```", "```py\n# use word reserved augmentation\npluto.print_aug_word_reserved(pluto.df_netflix_data,\n    col_dest='description',\n    reserved_tokens=pluto.reserved_netflix)\n```", "```py\n# use word reserved augmentation\npluto.print_aug_word_reserved(pluto.df_twitter_data,\n    col_dest='clean_tweet',\n    reserved_tokens=pluto.reserved_twitter)\n```"]