["```py\n# sneak peek at a waveform plot\npluto.draw_audio(pluto.df_audio_control_data)\n```", "```py\n# fun use of waveform graph\npluto.draw_time_series_text(pluto.text_marry_lamb)\n```", "```py\n# clone the GitHub repo.\nf='https://github.com/PacktPublishing/Data-Augmentation-with-Python'\n!git clone {f}\n# instantiate Pluto\n%run 'Data-Augmentation-with-Python/pluto/pluto_chapter_2.py'\n```", "```py\n---------------------------- : ----------------------------\n            Hello from class : <class '__main__.PacktDataAug'> Class: PacktDataAug\n                   Code name : Pluto\n                   Author is : Duc Haba\n---------------------------- : ----------------------------\n```", "```py\n# How are you doing Pluto?\npluto.say_sys_info()\n```", "```py\n---------------------------- : ----------------------------\n                 System time : 2022/12/30 19:17\n                    Platform : linux\n     Pluto Version (Chapter) : 2.0\n             Python (3.7.10) : actual: 3.8.16 (default, Dec  7 2022, 01:12:13) [GCC 7.5.0]\n            PyTorch (1.11.0) : actual: 1.13.0+cu116\n              Pandas (1.3.5) : actual: 1.3.5\n                 PIL (9.0.0) : actual: 7.1.2\n          Matplotlib (3.2.2) : actual: 3.2.2\n                   CPU count : 2\n                  CPU speed : NOT available\n---------------------------- : ----------------------------\n```", "```py\n# download from Kaggle\nurl = 'https://www.kaggle.com/datasets/kingofarmy/musical-emotions-classification'\npluto.fetch_kaggle_dataset(url)\n# import to Pandas\nf = 'kaggle/musical-emotions-classification/Train.csv'\npluto.df_music_data = pluto.fetch_df(f)\n# out a few header record\nPluto.df_music_data.head(3)\n```", "```py\n# helper function snippet\ny = re.findall('([a-zA-Z ]*)\\d*.*', x)[0]\nreturn (f'kaggle/musical-emotions-classification/Audio_Files/Audio_Files/Train/{y}/{x}')\n# main function snippet\ndf['fname'] = df.ImageID.apply(self._append_music_full_path)\n```", "```py\n# download the dataset\nurl = 'https://www.kaggle.com/datasets/ejlok1/cremad'\npluto.fetch_kaggle_dataset(url)\n# import to Pandas and print out header record\nf = 'kaggle/cremad/AudioWAV'\npluto.df_voice_data = pluto.make_dir_dataframe(f)\npluto.df_voice_data.head(3)\n```", "```py\n# download dataset from Kaggle website\nurl='https://www.kaggle.com/datasets/rupakroy/urban-sound-8k'\npluto.fetch_kaggle_dataset(url)\n# import to Pandas and print header records\nf = 'kaggle/urban-sound-8k/UrbanSound8K/UrbanSound8K/audio'\npluto.df_sound_data = pluto.make_dir_dataframe(f)\npluto.df_sound_data.head(3)\n```", "```py\n# draw area code snippet fill top/positive/blue section\npic.fill_between(\n    i, xzero, ndata, where=(ndata >= xzero),\n    interpolate=True, color=tcolor, alpha=alpha,\n    label=\"Positive\"\n)\n# fill bottom/negative/yellow section\npic.fill_between(\n    i, xzero, ndata, where=(ndata < xzero),\n    interpolate=True, color=bcolor, alpha=alpha,\n    label=\"Negative\"\n)\n```", "```py\n# code snippet, load/read and import to Pandas DataFrame\ndata_amp, sam_rate = librosa.load(samp.fname[0], mono=True)\n# draw the Waveform graphs\nself._draw_area_with_neg(data_amp,pic[0])\n# draw the zoom in Waveform plot\nself._draw_area_with_neg(data_amp[mid:end],pic[1])\n# display the play-audio button\ndisplay(IPython.display.Audio(data_amp, rate=sam_rate))\n```", "```py\n# display the play button the waveform plot\npluto.draw_audio(pluto.df_music_data)\n```", "```py\n# display the play button the waveform plot\npluto.draw_audio(pluto.df_voice_data)\n```", "```py\n# display the play button the waveform plot\npluto.draw_audio(pluto.df_sound_data)\n```", "```py\n# code snippet, use Pandas to select a random/sample record\np = df.sample(dsize)\n# fetch the audio data\ndata_amp, sam_rate, fname = self._fetch_audio_data(lname)\n# do the transformation\nxaug = xtransform(data_amp, sample_rate=sam_rate)\n# display the Waveform graphs and the audio play button\nself._draw_audio(xaug, sam_rate, title + ' Augmented: ' + fname)\ndisplay(IPython.display.Audio(xaug, rate=sam_rate))\n```", "```py\n# function definition\ndef play_aug_time_shift(self, df,\n  min_fraction=-0.2,\n  max_fraction=0.8,\n  rollover=True,\n  title='Time Shift'):\n# code snippet for time shift\nxtransform = audiomentations.Shift(\n  min_fraction = min_fraction,\n  max_fraction = max_fraction,\n  rollover = rollover,\n  p=1.0)\n```", "```py\n# augment using time shift\npluto.play_aug_time_shift(\n  pluto.audio_control_dmajor,\n  min_fraction=0.2)\n```", "```py\n# augment audio using time shift\npluto.play_aug_time_shift(\n  pluto.df_music_data)\n```", "```py\n# augment audio using time shift\npluto.play_aug_time_shift(pluto.df_voice_data,\n  min_fraction=0.5)\n```", "```py\n# augment audio using time shift\npluto.play_aug_time_shift(pluto.df_sound_data,\n  min_fraction=0.5)\n```", "```py\n# function definition\ndef play_aug_time_stretch(self, df,\n  min_rate=0.2,\n  max_rate=6.8,\n  leave_length_unchanged=True,\n  title='Time Stretch'):\n# code snippet for time stretch\nxtransform = audiomentations.TimeStretch(\n  min_rate = min_rate,\n  max_rate = max_rate,\n  leave_length_unchanged = leave_length_unchanged,\n  p=1.0)\n```", "```py\n# augment using time stretch\npluto.play_aug_time_stretch(pluto.audio_control_dmajor,\n  max_rate=5.4)\n```", "```py\n# augment using tim stretch\npluto.play_aug_time_stretch(pluto.df_music_data,\n  max_rate=3.0)\n```", "```py\n# augment using time stretch\npluto.play_aug_time_stretch(pluto.df_voice_data,\n  max_rate=3.5)\n```", "```py\n# augment using time stretch\npluto.play_aug_time_stretch(pluto.df_sound_data,\n  max_rate=2.4)\n```", "```py\n# function definition\ndef play_aug_pitch_scaling(self, df,\n  min_semitones = -6.0,\n  max_semitones = 6.0,\n  title='Pitch Scaling'):\n# code snippet for pitch shift\nxtransform = audiomentations.PitchShift(\n  min_semitones = min_semitones,\n  max_semitones = max_semitones,\n  p=1.0)\n```", "```py\n# augment using pitch scaling\npluto.play_aug_pitch_scaling(pluto.audio_control_dmajor)\n```", "```py\n# augment using pitch scaling\npluto.play_aug_pitch_scaling(pluto.df_music_data,\n  min_semitones=-11.0,\n  max_semitones=-9.0)\n```", "```py\n# augment using pitch scaling\npluto.play_aug_pitch_scaling(pluto.df_voice_data)\n```", "```py\n# augment using pitch scaling\npluto.play_aug_pitch_scaling(pluto.df_sound_data,\n  min_semitones=4.0,\n  max_semitones=11.0)\n```", "```py\n# function definition\ndef play_aug_noise_injection(self, df,\n  min_amplitude = 0.002,\n  max_amplitude = 0.2,\n  title='Gaussian noise injection'):\n# code snippet for noise injection\nxtransform = audiomentations.AddGaussianNoise(\n  min_amplitude = min_amplitude,\n  max_amplitude = max_amplitude,\n  p=1.0)\n```", "```py\n# code snippet for adding background noise\nxtransform = audiomentations.AddBackgroundNoise(\n  sounds_path=\"~/background_sound_files\",\n  min_snr_in_db=3.0,\n  max_snr_in_db=30.0,\n  noise_transform=PolarityInversion(),\n  p=1.0)\n```", "```py\n# code snippet for adding short noise\nxtransform = audiomentations.AddShortNoises(\n  sounds_path=\"~/background_sound_files\",\n  min_snr_in_db=3.0,\n  max_snr_in_db=30.0,\n  noise_rms=\"relative_to_whole_input\",\n  min_time_between_sounds=2.0,\n  max_time_between_sounds=8.0,\n  noise_transform=audiomentations.PolarityInversion(),\n  p=1.0)\n```", "```py\n# function definition\ndef play_aug_polar_inverse(self, df,\n  title='Polarity inversion'):\n# code snippet for polarity inversion\nxtransform = audiomentations.PolarityInversion(\n  p=1.0)\n```", "```py\n# augment using polar inverse\npluto.play_aug_polar_inverse(pluto.df_voice_data)\n```", "```py\n# implement using numpy\nxaug = numpy.array(data_amp) * -1\n```", "```py\n# function definition\ndef play_aug_low_pass_filter(self, df,\n  min_cutoff_freq=150, max_cutoff_freq=7500,\n  min_rolloff=12, max_rolloff=24,\n  title='Low pass filter'):\n# code snippet for low pass filter\nxtransform = audiomentations.LowPassFilter(\n  min_cutoff_freq = min_cutoff_freq,\n  max_cutoff_freq = max_cutoff_freq,\n  min_rolloff = min_rolloff,\n  max_rolloff = max_rolloff,\n  p=1.0)\n```", "```py\n# augment using low pass filter\npluto.play_aug_low_pass_filter(pluto.audio_control_dmajor)\n```", "```py\n# augment using low pass filter\npluto.play_aug_low_pass_filter(pluto.df_music_data)\n```", "```py\n# augment using low pass filter\npluto.play_aug_low_pass_filter(pluto.df_voice_data)\n```", "```py\n# augment using low pass filter\npluto.play_aug_low_pass_filter(pluto.df_sound_data)\n```", "```py\n# function definition\ndef play_aug_band_pass_filter(self, df,\n  min_center_freq=200, max_center_freq=4000,\n  min_bandwidth_fraction=0.5, max_bandwidth_fraction=1.99,\n  min_rolloff=12, max_rolloff=24,\n  title='Band pass filter'):\n# code snippet for band pass filter\nxtransform = audiomentations.BandPassFilter(\n  min_center_freq = min_center_freq,\n  max_center_freq = max_center_freq,\n  min_bandwidth_fraction = min_bandwidth_fraction,\n  max_bandwidth_fraction = max_bandwidth_fraction,\n  min_rolloff = min_rolloff,\n  max_rolloff = max_rolloff,\n  p=1.0)\n```", "```py\n# augment using band pass filter\npluto.play_aug_band_pass_filter(pluto.audio_control_dmajor)\n```", "```py\n# augment using band pass filter\npluto.play_aug_band_pass_filter(pluto.df_music_data)\n```", "```py\n# augment using band pass filter\npluto.play_aug_band_pass_filter(pluto.df_voice_data)\n```", "```py\n# augment using band pass filter\npluto.play_aug_band_pass_filter(pluto.df_sound_data)\n```", "```py\n# function definition\ndef play_aug_high_pass_filter(self, df,\n  min_cutoff_freq=20, max_cutoff_freq=2400,\n  min_rolloff=12, max_rolloff=24,\n  title='High pass filter'):\n# code snippet for high pass filter\nxtransform = audiomentations.HighPassFilter(\n  min_cutoff_freq = min_cutoff_freq,\n  max_cutoff_freq = max_cutoff_freq,\n  min_rolloff = min_rolloff,\n  max_rolloff = max_rolloff,\n  p=1.0)\n```"]