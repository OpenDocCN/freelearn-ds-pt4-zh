["```py\n# print out the tabular data\npluto.df_bank_data[['fraud_bool',\n  'proposed_credit_limit',\n  'customer_age',\n  'payment_type']].sample(5)\n```", "```py\n# Clone GitHub repo.\nurl = 'https://github.com/PacktPublishing/Data-Augmentation-with-Python'\n!git clone {url}\n# Initialize Pluto from Chapter 2\npluto_file = 'Data-Augmentation-with-Python/pluto/pluto_chapter_2.py'\n%run {pluto_file}\n# Verify Pluto\npluto.say_sys_info()\n# Fetch Bank Fraud dataset\nurl = 'https://www.kaggle.com/datasets/sgpjesus/bank-account-fraud-dataset-neurips-2022'\npluto.fetch_kaggle_dataset(url)\n# Import to Pandas\nf = 'kaggle/bank-account-fraud-dataset-neurips-2022/Base.csv'\npluto.df_bank_data = pluto.fetch_df(f)\n# Fetch World Series Baseball dataset\nurl = 'https://www.kaggle.com/datasets/mattop/world-series-baseball-television-ratings'\npluto.fetch_kaggle_dataset(url)\n# Import to Pandas\nf = 'kaggle/world-series-baseball-television-ratings/world-series-ratings.csv'\npluto.df_world_data = pluto.make_dir_dataframe(f)\n```", "```py\n---------------------------- : ----------------------------\n                                 System time : 2023/01/31 07:03\n                                        Platform : linux\n         Pluto Version (Chapter) : 2.0\n                         Python (3.7.10) : actual: 3.8.10 (default, Nov 14 2022, 12:59:47) [GCC 9.4.0]\n                        PyTorch (1.11.0) : actual: 1.13.1+cu116\n                            Pandas (1.3.5) : actual: 1.3.5\n                                 PIL (9.0.0) : actual: 7.1.2\n                    Matplotlib (3.2.2) : actual: 3.2.2\n                                     CPU count : 2\n                                    CPU speed : NOT available\n---------------------------- : ----------------------------\n```", "```py\n# display tabular data in Pandas\npluto.df_bank_data.info()\n```", "```py\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 1000000 entries, 0 to 999999\nData columns (total 32 columns):\n#     Column                                                    Non-Null Count        Dtype\n---    ------                                                 --------------        ----\n0     fraud_bool                                            1000000 non-null    int64\n1     income                                                    1000000 non-null    float64\n2     name_email_similarity                     1000000 non-null    float64\n3     prev_address_months_count             1000000 non-null    int64\n4     current_address_months_count        1000000 non-null    int64\n5     customer_age                                        1000000 non-null    int64\n6     days_since_request                            1000000 non-null    float64\n7     intended_balcon_amount                    1000000 non-null    float64\n8     payment_type                                        1000000 non-null    object\n9     zip_count_4w                                        1000000 non-null    int64\n10    velocity_6h                                         1000000 non-null    float64\n11    velocity_24h                                        1000000 non-null    float64\n12    velocity_4w                                         1000000 non-null    float64\n13    bank_branch_count_8w                        1000000 non-null    int64\n14    date_of_birth_distinct_emails_4 1000000 non-null    int64\n15    employment_status                             1000000 non-null    object\n16    credit_risk_score                             1000000 non-null    int64\n17    email_is_free                                     1000000 non-null    int64\n18    housing_status                                    1000000 non-null    object\n19    phone_home_valid                                1000000 non-null     int64\n20    phone_mobile_valid                            1000000 non-null    int64\n21    bank_months_count                             1000000 non-null    int64\n22    has_other_cards                                 1000000 non-null     int64\n23    proposed_credit_limit                     1000000 non-null    float64\n24    foreign_request                                 1000000 non-null     int64\n25    source                                                    1000000 non-null    object\n26    session_length_in_minutes             1000000 non-null    float64\n27    device_os                                             1000000 non-null    object\n28    keep_alive_session                            1000000 non-null    int64\n29    device_distinct_emails_8w             1000000 non-null    int64\n30    device_fraud_count                            1000000 non-null    int64\n31    month                                                     1000000 non-null    int64\ndtypes: float64(9), int64(18), object(5)\nmemory usage: 244.1+ MB\n```", "```py\n# count uniqueness\npluto.df_bank_data.nunique()\n```", "```py\nfraud_bool                                                             2\nincome                                                                     9\nname_email_similarity                             998861\nprev_address_months_count                            374\ncurrent_address_months_count                     423\ncustomer_age                                                         9\n```", "```py\n# display the tabular data using Pandas\npluto.df_bank_data[['fraud_bool',\n    'proposed_credit_limit',\n    'customer_age',\n    'payment_type']].sample(5)\n```", "```py\n# display histogram plot\npluto.draw_tabular_histogram(pluto.df_bank_data,\n    title='Bank Fraud data with 32 million points')\n```", "```py\n# code snippet, use Pandas histogram function\ndf.plot.hist()\n```", "```py\n# code snippet for token index\nfor i, x in enumerate(xarr):\n  if (val == x):\n    return i\n```", "```py\n# code snippet for tokenize\narrname = numpy.array(df[cname].unique())\ndf[tname] = df[cname].apply(\n  self._fetch_token_index,\n  args=(arrname,))\n```", "```py\n# tokenize the data\npluto.df_bank_tokenize_data = pluto.df_bank_data.copy()\npluto.add_token_index(\n  pluto.df_bank_tokenize_data,\n  ['payment_type', 'employment_status',\n  'housing_status', 'source', 'device_os'])\n```", "```py\n# print out first 6 row of the tabular data\npluto.df_bank_tokenize_data[['payment_type',\n  'payment_type_tokenize']].head(6)\n```", "```py\n# code snippet for calculate the checksum\ndf['checksum'] = df.apply(\n  lambda x: numpy.mean(tuple(x)), axis=1)\n```", "```py\n# compute the checksum\npluto._fetch_checksum(pluto.df_bank_tokenize_data)\n```", "```py\n# plot correlogram\npluto.draw_tabular_correlogram(pluto.df_bank_half_data,\n  title='Bank Fraud half Correlogram')\n```", "```py\n# plotting heatmap\npluto.draw_tabular_heatmap(\n  pluto.df_bank_tokenize_data,\n  x='checksum',\n  y='month')\n```", "```py\n# tokenize the text or categorical columns\npluto.df_bank_fraud_data = pluto.df_bank_tokenize_data[\n  pluto.df_bank_tokenize_data.fraud_bool == 1]\npluto.df_bank_fraud_data.reset_index(\n  drop=True,\n  inplace=True)\n```", "```py\n# describe the tabular dataset\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 54 entries, 0 to 53\nData columns (total 14 columns):\n#   Column              Non-Null Count  Dtype\n---  ------              --------------  -----\n0   year                54 non-null     int64\n1   network             54 non-null     object\n2   average_audience    54 non-null     int64\n3   game_1_audience     53 non-null     float64\n4   game_2_audience     52 non-null     float64\n5   game_3_audience     53 non-null     float64\n6   game_4_audience     53 non-null     float64\n7   game_5_audience     44 non-null     float64\n8   game_6_audience     31 non-null     float64\n9   game_7_audience     18 non-null     float64\n10  total_games_played  54 non-null     int64\n11  winning_team        54 non-null     object\n12  losing_team         54 non-null     object\n13  losing_team_wins    54 non-null     int64\ndtypes: float64(7), int64(4), object(3)\nmemory usage: 6.0+ KB\n```", "```py\n# plot histogram graph\npluto.draw_tabular_histogram(pluto.df_world_data,\n  title='World Series Baseball',\n  maxcolors=14)\n```", "```py\n# plot joyplot graph\npluto.draw_tabular_joyplot(pluto.df_world_data,\n  x=['game_1_audience', 'game_2_audience', 'game_3_audience',\n     'game_4_audience', 'game_5_audience', 'game_6_audience',\n     'game_7_audience'],\n  y='network',\n  t='World series baseball audience')\n```", "```py\n# copy tokenize data\npluto.df_world_tokenize_data = pluto.df_world_data.copy()\n# eliminate the null value\npluto.df_world_tokenize_data=pluto.df_world_tokenize_data.fillna(0)\n# tokenize the data\npluto.add_token_index(pluto.df_world_tokenize_data,\n  ['network', 'winning_team', 'losing_team'])\npluto.df_world_tokenize_data =\n  pluto.df_world_tokenize_data.drop(\n  ['network', 'winning_team', 'losing_team'],\n  axis=1)\n# calculate the checksum\npluto._fetch_checksum(pluto.df_world_tokenize_data)\n```", "```py\n# draw the correlogram graph\npluto.draw_tabular_correlogram(pluto.df_world_tokenize_data,\n  title='World Series Baseball Correlogram')\n```", "```py\n# draw the joyplot graph\npluto.draw_tabular_joyplot(pluto.df_world_tokenize_data,\n  x=['checksum', 'average_audience'],\n  y='network_tokenize',\n  t='World series baseball, checksum and average auidence',\n  legloc='upper right')\n```", "```py\n# plot the waffle graph\npluto.draw_tabular_waffle(pluto.df_world_data,\n  col='winning_team',\n  title='World Series Baseball Winning Team')\n```", "```py\n# draw the waffle graph\npluto.draw_tabular_waffle(pluto.df_world_data,\n  col='losing_team',\n  title='World Series Baseball Losing Team')\n```", "```py\n# draw the waffle graph\npluto.draw_tabular_waffle(pluto.df_world_data,\n  col='network',\n  title='World Series Baseball Network',\n  anchor=(0.5, -0.2))\n```", "```py\n# define robust scaler\ndef augment_tabular_robust_scaler(self, df):\n  return deltapy.transform.robust_scaler(df.copy(),\n    drop=[\"checksum\"])\n```", "```py\n# augment using robust scaler\ndf_out = pluto.augment_tabular_robust_scaler(\n  pluto.df_world_tokenize_data)\n# plot joy plot\npluto.draw_tabular_joyplot(df_out,\n  x=['game_1_audience', 'game_2_audience', 'game_3_audience',\n     'game_4_audience', 'game_5_audience', 'game_6_audience',\n     'game_7_audience'],\n  y='network_tokenize',\n  t='World series baseball audience')\n```", "```py\n# define standard scaler\ndef augment_tabular_standard_scaler(self, df):\n  return deltapy.transform.standard_scaler(df.copy(),\n    drop=[\"checksum\"])\n```", "```py\n# augment using standard scaler\ndf_out = pluto.augment_tabular_standard_scaler(\n  pluto.df_world_tokenize_data)\n# draw using joy plot\npluto.draw_tabular_joyplot(df_out,\n  x=['game_1_audience', 'game_2_audience', 'game_3_audience',\n     'game_4_audience', 'game_5_audience', 'game_6_audience',\n     'game_7_audience'],\n  y='network_tokenize',\n  t='World series baseball audience',\n  legloc='upper right')\n```", "```py\n# define capping\ndef augment_tabular_capping(self, df):\n  x, y = deltapy.transform.outlier_detect(df, \"checksum\")\n  return deltapy.transform.windsorization(df.copy(),\n    \"checksum\",\n    y,\n    strategy='both')\n```", "```py\n# augment using capping\ndf_out = pluto.augment_tabular_capping(\n  pluto.df_bank_tokenize_data)\n# draw correlogram plot\npluto.draw_tabular_correlogram(df_out,\n  title='Bank Fraud Capping Transformation')\n```", "```py\n# define regression\ndef augment_tabular_regression(self, df):\n  return deltapy.interact.lowess(\n    df.copy(),\n    [\"winning_team_tokenize\",\"losing_team_tokenize\"],\n    pluto.df_world_tokenize_data[\"checksum\"],\n    f=0.25, iter=3)\n```", "```py\n# augment using tabular regression\ndf_out = pluto.augment_tabular_regression(\n  pluto.df_world_tokenize_data)\n# draw joy plot\npluto.draw_tabular_joyplot(df_out,\n  x=['game_1_audience', 'game_2_audience', 'game_3_audience',\n     'game_4_audience', 'game_5_audience', 'game_6_audience',\n     'game_7_audience'],\n  y='network_tokenize',\n  t='World series baseball audience: Regression',\n  legloc='upper right')\n```", "```py\n# define tabular operator\ndef augment_tabular_operator(self, df):\n  return deltapy.interact.muldiv(\n    df.copy(),\n    [\"credit_risk_score\",\"proposed_credit_limit\"])\n```", "```py\n# augment using tabular operator\ndf_out = pluto.augment_tabular_operator(\n  pluto.df_bank_tokenize_data)\n# draw the correlogram plot\npluto.draw_tabular_correlogram(df_out,\n  title='Bank Fraud Operator Interaction')\n```"]