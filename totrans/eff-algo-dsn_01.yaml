- en: <st c="0">Preface</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="8">In the second chapter of this book, we explore the concept of the
    “loop invariant,” which refers to an attribute within a changing process that
    remains constant.</st> <st c="171">If we look at human progress since the Industrial
    Revolution, despite the volatility and constant change, we can identify a few
    unchanging attributes.</st> <st c="322">One is our drive to automate more and
    more, and the other is our systematic approach to problem-solving, which took
    a formal direction with the invention of the digital computer.</st> <st c="501">This
    is what we now</st> <st c="521">call algorithms.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="537">This book is another contribution to the world of algorithms.</st>
    <st c="600">It’s not meant to replace the existing and remarkable works that I
    have enjoyed reading and teaching.</st> <st c="702">Instead, it offers an alternative
    approach to learning algorithms by merging theoretical concepts with practical
    applications.</st> <st c="829">It also represents the culmination of 30 years
    of experience in research, industry, and academia, particularly in computer science
    and artificial intelligence, as well as 12 years of continuous teaching of algorithms</st>
    <st c="1046">to students.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1058">If it were possible, I would add my students as co-authors, because
    I have learned more from their challenging questions than I could ever teach them.</st>
    <st c="1210">Their inquiries have pushed me to uncover the deeper explanations
    and logic behind every aspect of algorithms.</st> <st c="1321">Yes, I do mean
    every aspect.</st> <st c="1350">Algorithms are about making human-made machines
    function correctly and deliver the results we expect.</st> <st c="1452">Here,
    nothing short of a logical process and behavior</st> <st c="1506">is acceptable.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1520">This book does not claim to cover every aspect or topic in the
    vast field of algorithms.</st> <st c="1610">Instead, it narrows its focus to the
    design and analysis of algorithms, seeking to address the essential questions
    we must always consider when evaluating them.</st> <st c="1771">First and foremost,
    can we prove that the algorithm functions correctly and as intended?</st> <st
    c="1860">It’s crucial to establish that the algorithm reliably produces the expected
    results for all</st> <st c="1952">possible inputs.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1968">Next, we must ask how we can ensure the algorithm consistently
    behaves as we anticipate.</st> <st c="2058">This involves scrutinizing its logic,
    understanding its steps, and confirming that each part contributes to the overall
    goal.</st> <st c="2184">Finally, we need to consider whether the algorithm terminates
    within an acceptable timeframe.</st> <st c="2278">No matter how elegantly an algorithm
    is designed, if it doesn’t complete its task efficiently, it becomes impractical
    for real-world use.</st> <st c="2416">By concentrating on these fundamental questions,
    this book aims to guide you through the process of designing robust, reliable,
    and</st> <st c="2548">efficient algorithms.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="2569">Who this book is for</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="2590">The primary audience for this book is mid-career software engineers,
    developers, information technology professionals, and research scientists.</st>
    <st c="2735">It serves as a practical manual for understanding and applying algorithms
    effectively in various</st> <st c="2832">professional contexts</st>*<st c="2853">.</st>*
  prefs: []
  type: TYPE_NORMAL
- en: <st c="2854">Although this book was not initially intended as a textbook, given
    its lack of exercises—which may be included in a future edition – it provides
    numerous examples that enhance learning.</st> <st c="3041">We believe it can be
    used as a primary or secondary textbook for courses such as Design and Analysis
    of Algorithms for students in computer science, software engineering, and other
    related engineering programs.</st> <st c="3252">The author, who has been teaching
    these courses for over a decade, wrote this book to tackle the challenges that
    often arise when explaining complex</st> <st c="3401">algorithmic concepts.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="3422">While the book is geared toward readers who have some familiarity
    with algorithms and a background in mathematics or engineering, certain chapters
    have broader appeal.</st> *<st c="3591">Chapters 1</st>* <st c="3601">through</st>
    *<st c="3609">5</st>*<st c="3611">, as well as</st> *<st c="3624">Chapters 8,
    9</st>*<st c="3637">, and</st> *<st c="3643">14,</st>* <st c="3646">discuss interesting
    real-life decision-making scenarios, making them accessible and engaging for a
    wider audience beyond the</st> <st c="3772">technical field.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="3788">What this book covers</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[*<st c="3810">Chapter 1</st>*](B22248_01.xhtml#_idTextAnchor014)*<st c="3820">,
    Introduction to Algorithm Analysis,</st>* <st c="3858">offers a foundational understanding
    of algorithms as structured and systematic tools for problem-solving.</st> <st
    c="3964">It introduces the essential concepts of algorithm design and explores
    the dual nature of computer systems, distinguishing between hardware and software.</st>
    <st c="4117">The chapter also emphasizes the importance of algorithm analysis,
    focusing on both correctness and efficiency, setting the stage for a deeper exploration
    of algorithmic techniques in</st> <st c="4300">subsequent chapters.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: '[*<st c="4320">Chapter 2</st>*](B22248_02.xhtml#_idTextAnchor023)*<st c="4330">,
    Mathematical Induction and Loop Invariant for Algorithm Correctness,</st>* <st
    c="4401">discusses the mathematical foundations necessary for proving the correctness
    of algorithms.</st> <st c="4493">It introduces mathematical induction as a fundamental
    technique and extends this concept with loop invariants to ensure the reliability
    of iterative processes.</st> <st c="4653">The chapter provides practical examples
    to illustrate these principles, establishing a strong basis for validating algorithms
    and ensuring they produce correct results in</st> <st c="4824">all scenarios.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: '[*<st c="4838">Chapter 3</st>*](B22248_03_split_000.xhtml#_idTextAnchor033)*<st
    c="4848">, Rate of Growth for Complexity Analysis,</st>* <st c="4890">explores
    the concept of algorithm efficiency and how running times scale with input size.</st>
    <st c="4980">It introduces various growth rates, from constant to factorial time,
    and explains how to represent and compare them using asymptotic notations such
    as Big O, Omega, and Theta.</st> <st c="5156">This chapter lays the groundwork
    for understanding and predicting algorithm performance, helping you make informed
    decisions when designing or selecting algorithms for</st> <st c="5324">different
    tasks.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: '[*<st c="5340">Chapter 4</st>*](B22248_04.xhtml#_idTextAnchor051)*<st c="5350">,
    Recursion and Recurrence Functions,</st>* <st c="5387">introduces the concept
    of recurrence functions, essential for analyzing the complexity of recursive algorithms.</st>
    <st c="5500">The chapter explores two primary types of recurrence functions: subtractive
    and divide-and-conquer, detailing how each impacts the efficiency of algorithms.</st>
    <st c="5657">Through practical examples such as merge sort and binary search,
    it demonstrates the application of recurrence relations in</st> <st c="5781">real-world
    scenarios.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: '[*<st c="5802">Chapter 5</st>*](B22248_05_split_000.xhtml#_idTextAnchor062)*<st
    c="5812">, Solving Recurrence Functions,</st>* <st c="5844">discusses in detail
    the techniques for analyzing the performance of recursive algorithms.</st> <st
    c="5934">It introduces key methods such as the substitution method, the master
    theorem, and recursion trees to solve recurrence relations that arise in divide-and-conquer
    and other recursive algorithms.</st> <st c="6128">The chapter explains how to
    apply these methods to determine the asymptotic complexity of an algorithm, highlighting
    the strengths and limitations of</st> <st c="6278">each approach.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: '[*<st c="6292">Chapter 6</st>*](B22248_06.xhtml#_idTextAnchor081)*<st c="6302">,
    Sorting Algorithms,</st>* <st c="6324">explores the fundamental techniques for
    arranging data in a specific order, offering a comprehensive overview of both
    iterative and recursive sorting methods.</st> <st c="6483">The chapter begins
    with a detailed examination of comparison-based algorithms, highlighting their
    operational principles and time complexities.</st> <st c="6627">It further explores
    advanced sorting techniques such as merge sort, explaining the divide-and-conquer
    approach and its implications for stability and efficiency.</st> <st c="6789">Additionally,
    the chapter introduces non-comparison-based</st> <st c="6847">sorting algorithms.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: '[*<st c="6866">Chapter 7</st>*](B22248_07_split_000.xhtml#_idTextAnchor103)*<st
    c="6876">, Search Algorithms,</st>* <st c="6897">begins by examining different
    types of search algorithms, including linear and sublinear methods, highlighting
    their characteristics and performance.</st> <st c="7047">The chapter then introduces
    the concept of hashing, explaining how hash functions can be used to achieve constant-time</st>
    <st c="7166">search operations.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: '[*<st c="7184">Chapter 8</st>*](B22248_08.xhtml#_idTextAnchor118)*<st c="7194">,
    Symbiotic Relationship Between Sort and Search,</st>* <st c="7244">provides an
    overview of the interconnected nature of sorting and searching algorithms.</st>
    <st c="7331">It examines how sorting can significantly enhance the efficiency
    of search operations and explores scenarios where sorting is advantageous.</st>
    <st c="7471">The chapter presents a comprehensive analysis of the trade-offs between
    the cost of sorting and the benefits of faster searching, using real-world examples
    to highlight</st> <st c="7640">these dynamics.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: '[*<st c="7655">Chapter 9</st>*](B22248_09.xhtml#_idTextAnchor129)*<st c="7665">,
    Randomized Algorithms,</st>* <st c="7690">is about the use of randomness in algorithm
    design to tackle problems that deterministic approaches may struggle to solve
    efficiently.</st> <st c="7825">Through various case studies, including the hiring
    problem and the birthday paradox, this chapter demonstrates how randomized algorithms
    can effectively navigate uncertainty and enhance</st> <st c="8011">decision-making
    processes.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: '[*<st c="8037">Chapter 10</st>*](B22248_10.xhtml#_idTextAnchor149)*<st c="8048">,
    Dynamic Programming,</st>* <st c="8071">begins with the fundamental principles
    that distinguish dynamic programming from other methods, such as divide-and-conquer
    and greedy algorithms.</st> <st c="8217">The chapter presents dynamic programming
    through detailed examples.</st> <st c="8285">This chapter provides a thorough
    understanding of dynamic programming’s advantages and limitations, preparing you
    for its practical application in various</st> <st c="8440">problem-solving scenarios.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: '[*<st c="8466">Chapter 11</st>*](B22248_11.xhtml#_idTextAnchor164)*<st c="8477">,
    Landscape of Data Structures,</st>* <st c="8509">explores how different types
    of data structures, such as linear and non-linear, static and dynamic, as well
    as those supporting sequential and random access, can significantly impact algorithm
    performance.</st> <st c="8715">This foundational knowledge sets the stage for
    a more in-depth exploration of specific data structures and their algorithmic
    applications in the</st> <st c="8860">following chapters.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: '[*<st c="8879">Chapter 12</st>*](B22248_12.xhtml#_idTextAnchor187)*<st c="8890">,
    Linear Data Structures,</st>* <st c="8916">provides an in-depth exploration of
    fundamental structures such as arrays, linked lists, stacks, queues, and deques.</st>
    <st c="9033">This chapter will guide you through the essential operations and
    characteristics of each data structure, highlighting their unique benefits and
    trade-offs.</st> <st c="9189">It also introduces advanced concepts such as</st>
    <st c="9234">skip lists.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: '[*<st c="9245">Chapter 13</st>*](B22248_13.xhtml#_idTextAnchor200)*<st c="9256">,
    Non-Linear Data Structures,</st>* <st c="9286">discusses non-linear data structures.</st>
    <st c="9324">The chapter begins with an exploration of the general properties
    that distinguish non-linear structures from linear ones.</st> <st c="9446">It
    covers two major categories – graphs and trees – examining their types, properties,
    and applications.</st> <st c="9551">The chapter concludes by introducing heaps,
    a specialized form of binary trees, demonstrating their significance in sorting
    algorithms and</st> <st c="9690">priority queues.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: '[*<st c="9706">Chapter 14</st>*](B22248_14.xhtml#_idTextAnchor222)*<st c="9717">,
    Tomorrow’s Algorithms,</st>* <st c="9742">explores the cutting-edge trends that
    are defining the future of computing.</st> <st c="9818">The chapter categorizes
    these emerging trends into three key areas: scalability, context awareness, and
    moral responsibility.</st> <st c="9944">It explores how algorithms are evolving
    to address the demands of large-scale data processing, adapt to dynamic environments,
    and</st> <st c="10074">operate ethically.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="10092">To get the most out of this book</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="10125">To effectively use the code in this book, you will need the latest
    version of Python and a suitable</st>**<st c="10225">integrated development environment</st>**
    *<st c="10260">(</st>***<st c="10262">IDE</st>***<st c="10265">)</st>* <st c="10268">for
    developing and testing the code.</st> <st c="10305">We recommend using the Anaconda
    Python environment due to its ease of use and comprehensive package management.</st>
    <st c="10417">Anaconda comes with many pre-installed libraries and tools that
    are useful for algorithm development and analysis.</st> <st c="10532">You can
    download and install Anaconda from the official</st> <st c="10588">website:</st>[<st
    c="10596">https://www.anaconda.com/download</st>](https://www.anaconda.com/download)*<st
    c="10630">.</st>*
  prefs: []
  type: TYPE_NORMAL
- en: <st c="10631">Once installed, you can use Anaconda’s IDE (Spyder) or Jupyter
    Notebook to run the code examples provided in this book.</st> <st c="10752">Both
    tools offer an interactive environment that is particularly helpful for learning
    and experimenting with algorithms.</st> <st c="10873">Additionally, you may want
    to explore other IDEs such as PyCharm or Visual Studio Code, which offer powerful
    features for</st> <st c="10995">Python development.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="11014">If you are using the digital version of this book, we advise
    you to type the code yourself or access the code from the book’s GitHub repository
    (a link is available in the next section).</st> <st c="11202">Doing so will help
    you avoid any potential errors related to the copying and pasting</st>** **<st
    c="11287">of code.</st>**'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="11295">Download the example code files</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="11327">You can download the example code files for this book from GitHub
    at</st> [<st c="11397">https://github.com/PacktPublishing/Efficient-Algorithm-Design</st>](https://github.com/PacktPublishing/Efficient-Algorithm-Design)<st
    c="11458">. If there’s an update to the code, it will be updated in the</st> <st
    c="11520">GitHub repository.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="11538">We also have other code bundles from our rich catalog of books
    and videos available at</st> [<st c="11626">https://github.com/PacktPublishing/</st>](https://github.com/PacktPublishing/)<st
    c="11661">. Check</st> <st c="11669">them out!</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="11678">Conventions used</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="11695">There are a number of text conventions used throughout</st> <st
    c="11751">this book.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '`<st c="11761">Code in text</st>`<st c="11774">: Indicates code words in text,
    database table names, folder names, filenames, file extensions, pathnames, dummy
    URLs, user input, and Twitter/X handles.</st> <st c="11929">Here is an example:
    “In the preceding function, the running time depends on the number of times the</st>
    `<st c="12029">for i in range(1, n + 1):</st>` <st c="12054">loop</st> <st c="12060">is
    executed.”</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="12073">A block of code is set</st> <st c="12097">as follows:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: <st c="12244">Any command-line input or output is written</st> <st c="12289">as
    follows:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**<st c="12332">Bold</st>**<st c="12337">: Indicates a new term, an important
    word, or words that you see onscreen.</st> <st c="12413">For instance, words in
    menus or dialog boxes appear in</st> **<st c="12468">bold</st>**<st c="12472">.
    Here is an example: “In</st> [*<st c="12498">Chapter 13</st>*](B22248_13.xhtml#_idTextAnchor200)<st
    c="12508">, we will discuss a search algorithm based on a specific data structure
    called</st> **<st c="12587">Binary Search</st>** **<st c="12601">Trees</st>**
    <st c="12606">(</st>**<st c="12608">BSTs</st>**<st c="12612">).”</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="12616">Tips or important notes</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="12640">Appear like this.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="12658">Get in touch</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="12671">Feedback from our readers is</st> <st c="12701">always welcome.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="12716">General feedback</st>**<st c="12733">: If you have questions
    about any aspect of this book, email us at</st> [<st c="12801">customercare@packtpub.com</st>](mailto:customercare@packtpub.com)
    <st c="12826">and mention the book title in the subject of</st> <st c="12872">your
    message.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="12885">Errata</st>**<st c="12892">: Although we have taken every care
    to ensure the accuracy of our content, mistakes do happen.</st> <st c="12988">If
    you have found a mistake in this book, we would be grateful if you would report
    this to us.</st> <st c="13083">Please visit</st> [<st c="13096">www.packtpub.com/support/errata</st>](http://www.packtpub.com/support/errata)
    <st c="13127">and fill in</st> <st c="13140">the form.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="13149">Piracy</st>**<st c="13156">: If you come across any illegal
    copies of our works in any form on the internet, we would be grateful if you would
    provide us with the location address or website name.</st> <st c="13327">Please
    contact us at</st> [<st c="13348">copyright@packt.com</st>](mailto:copyright@packt.com)
    <st c="13367">with a link to</st> <st c="13383">the material.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="13396">If you are interested in becoming an author</st>**<st c="13440">:
    If there is a topic that you have expertise in and you are interested in either
    writing or contributing to a book, please</st> <st c="13565">visit</st> [<st c="13571">authors.packtpub.com</st>](http://authors.packtpub.com)<st
    c="13591">.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="13592">Share Your Thoughts</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="13612">Once you’ve read</st> *<st c="13630">Efficient Algorithm Design</st>*<st
    c="13656">, we’d love to hear your thoughts!</st> <st c="13691">Please</st> [<st
    c="13698">click here to go straight to the Amazon review page</st>](https://packt.link/r/1-835-08926-7)
    <st c="13749">for this book and share</st> <st c="13774">your feedback.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="13788">Your review is important to us and the tech community and will
    help us make sure we’re delivering excellent</st> <st c="13897">quality content.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="13913">Download a free PDF copy of this book</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="13951">Thanks for purchasing</st> <st c="13974">this book!</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="13984">Do you like to read on the go but are unable to carry your print</st>
    <st c="14050">books everywhere?</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="14067">Is your eBook purchase not compatible with the device of</st>
    <st c="14125">your choice?</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="14137">Don’t worry, now with every Packt book you get a DRM-free PDF
    version of that book at</st> <st c="14224">no cost.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="14232">Read anywhere, any place, on any device.</st> <st c="14274">Search,
    copy, and paste code from your favorite technical books directly into</st> <st
    c="14352">your application.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="14369">The perks don’t stop there, you can get exclusive access to discounts,
    newsletters, and great free content in your</st> <st c="14485">inbox daily</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="14496">Follow these simple steps to get</st> <st c="14530">the benefits:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="14543">Scan the QR code or visit the</st> <st c="14574">link below</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B22248_QR_Free_PDF.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[<st c="14586">https://packt.link/free-ebook/9781835886823</st>](https://packt.link/free-ebook/9781835886823)'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="14629">Submit your proof</st> <st c="14648">of purchase</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="14659">That’s it!</st> <st c="14671">We’ll send your free PDF and other
    benefits to your</st> <st c="14723">email directly</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
