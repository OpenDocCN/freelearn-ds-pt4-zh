["```py\n def factorial_iterative(n):\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result\n```", "```py\n def factorial_recursive(n):\n    # Base case\n    if n == 0:\n        return 1\n    # Recursive case\n    else:\n        return n * factorial_recursive(n - 1)\n```", "```py\n     if n == 0:\n    return 1\n    ```", "```py\n def power_recursive(base, exponent):\n    # Base case\n    if exponent == 0:\n        return 1\n    # Recursive case\n    elif exponent % 2 == 0:\n        half_power = power_recursive(base, exponent // 2)\n        return half_power * half_power\n    else:\n        return base * power_recursive(base, exponent - 1)\n```", "```py\n     def factorial_tail(n, accumulator=1):\n        if n == 0:\n            return accumulator\n        else:\n            return factorial_tail(n - 1, n * accumulator)\n    ```", "```py\n    def traverse_linked_list(node):\n        if node is None:\n            return\n        print(node.value)\n        traverse_linked_list(node.next)\n    ```", "```py\n     def head_recursive(n):\n        if n == 0:\n            return\n        else:\n            head_recursive(n - 1)\n            print(n)\n    ```", "```py\n     def linear_recursive(n):\n        if n == 0:\n            return 0\n        else:\n            return n + linear_recursive(n - 1)\n    ```", "```py\n     def fun(n):\n        if (n > 0):\n            print(n, end=\" \")\n            fun(n - 1)\n            fun(n - 1)\n    ```", "```py\n     def fibonacci_binary_recursive(n):\n        if n <= 1:\n            return n\n        else:\n            return fibonacci_binary_recursive(n - 1) +        fibonacci_binary_recursive(n - 2)\n    ```", "```py\n     def multiple_recursive(n):\n        if n <= 1:\n            return 1\n        else:\n            return multiple_recursive(n - 1) + multiple_recursive(n - 2) + multiple_recursive(n - 3)\n    ```", "```py\n    def ternary_search(arr, target, start, end):\n        if start > end:\n            return -1  # Target not found\n        else:\n            mid1 = start + (end - start) // 3\n            mid2 = start + 2 * (end - start) // 3\n            if arr[mid1] == target:\n                return mid1\n            elif arr[mid2] == target:\n                return mid2\n            elif arr[mid1] > target:\n                return ternary_search(arr, target, start, mid1 - 1)  # First recursive call\n            elif arr[mid2] < target:\n                return ternary_search(arr, target, mid2 + 1, end)  # Second recursive call\n            else:\n                return ternary_search(arr, target, mid1 + 1, mid2 - 1)  # Third recursive call\n    ```", "```py\n     def nested_recursive(n):\n        if n > 100:\n            return n - 10\n        else:\n            return nested_recursive_function(nested_recursive(n + 11))\n    ```", "```py\n def functionA(n):\n    if n <= 0:\n        return \"End\"\n    else:\n        return functionB(n - 1)\ndef functionB(n):\n    if n <= 0:\n        return \"End\"\n    else:\n        return functionA(n - 2)\n```", "```py\n def merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    mid = len(arr) // 2\n    left_half = arr[:mid]\n    right_half = arr[mid:]\n    sorted_left = merge_sort(left_half)\n    sorted_right = merge_sort(right_half)\n    return merge(sorted_left, sorted_right)\ndef merge(left, right):\n    sorted_array = []\n    i = j = 0\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            sorted_array.append(left[i])\n            i += 1\n        else:\n            sorted_array.append(right[j])\n            j += 1\n    # Append any remaining elements\n    sorted_array.extend(left[i:])\n    sorted_array.extend(right[j:])\n    return sorted_array\n```", "```py\n def factorial_recursive(n):\n    # Base case: if n is 0, the factorial is 1\n    if n == 0:\n        return 1\n    # Recursive case: multiply n by the factorial of (n - 1)\n    else:\n        return n * factorial_recursive(n - 1)\n```", "```py\n def fibonacci_recursive(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci_recursive(n - 1) + fibonacci_recursive(n - 2)\n```", "```py\n def binary_search(arr, target, low, high):\n    if low > high:\n        return -1  # Target is not in the array\n    mid = (low + high) // 2\n    if arr[mid] == target:\n        return mid\n    elif arr[mid] < target:\n        return binary_search(arr, target, mid + 1, high)\n    else:\n        return binary_search(arr, target, low, mid - 1)\n```"]