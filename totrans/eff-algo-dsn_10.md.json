["```py\n def iterative_linear_search(a, target):\n    for index in range(len(a)):\n        if a[index] == target:\n            return index\n    return -1\n```", "```py\n def recursive_linear_search(a, target, index=0):\n    if index >= len(a):\n        return -1\n    if a[index] == target:\n        return index\n    return recursive_linear_search(a, target, index + 1)\n```", "```py\n def recursive_binary_search(a, target, left, right):\n    if right >= left:\n        mid = left + (right - left) // 2\n        if a[mid] == target:\n            return mid\n        elif a[mid] > target:\n            return recursive_binary_search(a, target, left, mid - 1)\n        else:\n            return recursive_binary_search(a, target, mid + 1, right)\n    return -1\n```", "```py\n def recursive_interpolation_search(a, target, low, high):\n    if low <= high and target >= a[low] and target <= a[high]:\n        pos = low + ((high - low) // (a[high] - a[low]) * (target - a[low]))\n        if a[pos] == target:\n            return pos\n        if a[pos] < target:\n            return recursive_interpolation_search(a, target, pos + 1, high)\n        return recursive_interpolation_search(a, target, low, pos - 1)\n    return -1  # Target not found\n```", "```py\n def iterative_exponential_search(a, target):\n    if a[0] == target:\n        return 0\n    n = len(a)\n    i = 1\n    while i < n and a[i] <= target:\n        i = i * 2\n    return binary_search(a, i // 2, min(i, n - 1), target)\n```", "```py\n def recursive_exponential_search(a, target, i=1):\n    n = len(a)\n    if a[0] == target:\n        return 0\n    if i < n and a[i] <= target:\n        return recursive_exponential_search(a, target, i * 2)\n    return binary_search(a, i // 2, min(i, n - 1), target)\n```", "```py\n import math\ndef jump_search(a, target):\n    n = len(a)\n    step = int(math.sqrt(n))\n    prev = 0\n    while a[min(step, n) - 1] < target:\n        prev = step\n        step += int(math.sqrt(n))\n        if prev >= n:\n            return -1\n    while a[prev] < target:\n        prev += 1\n        if prev == min(step, n):\n            return -1\n    if a[prev] == target:\n        return prev\n    return -1\n```", "```py\n import math\ndef recursive_jump_search(a, target, prev=0, step=None):\n    n = len(a)\n    if step is None:\n        step = int(math.sqrt(n))  # Block size to jump\n    if prev >= n:\n        return -1\n    if a[min(step, n) - 1] < target:\n        return recursive_jump_search(a, target, step, step + int(math.sqrt(n)))\n    while prev < min(step, n) and a[prev] < target:\n        prev += 1\n    if prev < n and a[prev] == target:\n        return prev\n    return -1\n```", "```py\n def polynomial_hash(string, p=11, m=2**31):\n  hash_value = 0\n  for char in string:\n    hash_value = (hash_value * p + ord(char)) % m\n  return hash_value\n# Example usage\nstring = \"Hello\"\nhash_value = polynomial_hash(string)\nprint(f\"The polynomial hash value of '{string}' is: {hash_value}\")\n```", "```py\n def djb2(string):\n  hash = 5381\n  for char in string:\n    hash = ((hash << 5) + hash) + ord(char)\n  return hash & 0xFFFFFFFF\n```"]