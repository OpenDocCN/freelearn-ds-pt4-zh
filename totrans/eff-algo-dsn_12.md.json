["```py\n import random\nimport matplotlib.pyplot as plt\ndef simulate_birthday_paradox(trials, n):\n    shared_birthday_count = 0\n    for _ in range(trials):\n        birthdays = []\n        for person in range(n):\n            birthday = random.randint(1, 365)\n            if birthday in birthdays:\n                shared_birthday_count += 1\n                break\n            birthdays.append(birthday)\n    return shared_birthday_count / trials\ndef main():\n    trials = 10000\n    results = []\n    group_sizes = range(2, 367)\n    for n in group_sizes:\n        probability = simulate_birthday_paradox(trials, n)\n        results.append(probability)\n        print(f\"Group size: {n}, Probability of shared birthday: {probability:.4f}\")\n    plt.figure(figsize=(10, 6))\n    plt.plot(group_sizes, results, marker='o')\n    plt.title('Birthday Paradox Simulation')\n    plt.xlabel('Group Size')\n    plt.ylabel('Probability of Shared Birthday')\n    plt.grid(True)\n    plt.show()\nif __name__ == \"__main__\":\n    main()\n```", "```py\n import numpy as np\nimport matplotlib.pyplot as plt\ndef calculate_p_n(n, k):\n    if k == 1:\n        return 1 / n\n    sum_term = sum(1 / (j - 1) for j in range(k, n + 1))\n    return (k - 1) / n * sum_term\ndef find_optimal_k(n):\n    probabilities = [calculate_p_n(n, k) for k in range(1, n + 1)]\n    optimal_k = np.argmax(probabilities) + 1\n    return optimal_k, probabilities\nn_values = np.arange(10, 501, 1)  # Smoother plot with more points\noptimal_k_ratios = []\nfor n in n_values:\n    optimal_k, probabilities = find_optimal_k(n)\n    optimal_k_ratios.append(optimal_k / n)\nplt.figure(figsize=(10, 6))\nplt.plot(n_values, optimal_k_ratios, marker='o', linestyle='-', markersize=4, label='Optimal k/n Ratio')\nplt.axhline(1/np.e, color='r', linestyle='--', label='1/e (approximately 0.3679)')\nplt.title('Optimal k/n Ratio for Different Values of n')\nplt.xlabel('n')\nplt.ylabel('Optimal k/n Ratio')\nplt.legend()\nplt.grid(True)\nplt.show()\n```"]