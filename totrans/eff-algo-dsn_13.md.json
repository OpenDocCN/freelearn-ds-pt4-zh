["```py\n def fib(n):\n    if n <= 1:\n        return n\n    return fib(n-1) + fib(n-2)\nn = 10\nprint(f\"Fibonacci number F({n}) is: {fib(n)}\")\n```", "```py\n def dp_fib(n, memo={}):\n    if n in memo:\n        return memo[n]\n    if n <= 1:\n        return n\n    memo[n] = dp_fib(n-1, memo) + dp_fib(n-2, memo)\n    return memo[n]\nn = 10\nprint(f\"Fibonacci number F({n}) is: {dp_fib(n)}\")\n```", "```py\n def bottom_up_fib(n):\n    if n <= 1:\n        return n\n    fib = [0] * (n+1)\n    fib[1] = 1\n    for i in range(2, n+1):\n        fib[i] = fib[i-1] + fib[i-2]\n    return fib[n]\nn = 10\nprint(f\"Fibonacci number F({n}) is: {bottom_up_fib(n)}\")\n```", "```py\n def dp_knapsack(weights, values, W):\n  n = len(weights)\n  d = [[0 for _ in range(W + 1)] for _ in range(n + 1)]\n  for i in range(n + 1):\n    for w in range(W + 1):\n      if i == 0 or w == 0:\n        d[i][w] = 0\n      elif weights[i - 1] <= w:\n        dp[i][w] = max(values[i - 1] + d[i - 1][w - weights[i - 1]], d[i - 1][w])\n      else:\n        d[i][w] = d[i - 1][w]\n  return d[n][W]\nweights = [2, 3, 4]\nvalues = [3, 4, 5]\nW = 5\nresult = knapsack(weights, values, W)\nprint(\"Maximum value:\", result)\n```"]