["```py\nfrom sklearn.datasets import make_classification\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import RepeatedStratifiedKFold\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nX, y = make_classification(n_samples = 1000, n_features = 8, n_informative = 8,\nn_redundant = 0, random_state = 1) #train examples and labels\nmodel = LinearDiscriminantAnalysis()\ncv = RepeatedStratifiedKFold(n_splits = 10, n_repeats = 3, random_state = 1)\ngrid = dict()\ngrid['solver'] = ['svd', 'lsqr', 'eigen'] #grid configuration\nsearch = GridSearchCV(model, grid, scoring = 'accuracy', cv = cv, n_jobs = -1)\nresults = search.fit(X, y)\nprint('Mean Accuracy: %.4f' % results.best_score_) #model accuracy check\nrow = [0.1277, -3.6440, -2.2326, 1.8211, 1.7546, 0.1243, 1.0339, 2.3582] #new example\nyhat = search.predict([row]) #predict on test data\nprint('Predicted Class: %d' % yhat) #class probability of new example\n```", "```py\nfrom sklearn.datasets import make_classification\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import RepeatedStratifiedKFold\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.decomposition import PCA\nfrom sklearn.linear_model import LogisticRegression\nfrom numpy import mean\nfrom numpy import std\nimport matplotlib.pyplot as plt\ndef get_models():\n     models = dict()\n     for i in range(1, 11):\n           steps = [('pca', PCA(n_components = i)), ('m', LogisticRegression())]\nmodels[i] = Pipeline(steps = steps)\nreturn models\ndef evaluate_model(model, X, y):\n     cv = RepeatedStratifiedKFold(n_splits = 10, n_repeats = 3, random_state = 1)\nscores = cross_val_score(model, X,  y, scoring = 'accuracy', cv = cv, n_jobs = -1,  error_score = 'raise')\nreturn scores\nX, y = make_classification(n_samples = 1000, n_features = 10, n_informative = 8, n_redundant = 2, random_state = 7)\nmodels = get_models()\nresults, names = list(), list()\nfor name, model in models.items():\n     scores = evaluate_model(model, X, y)\n     results.append(scores)\n     names.append(name)\nprint('Mean Accuracy: %.4f (%.4f)' % (mean(results), std(results))) red_square = dict(markerfacecolor = 'r', marker = 's')\n```", "```py\nplt.boxplot(results, labels = names, showmeans = True, showfliers = True, flierprops = red_square)\nplt.grid()\nplt.xlabel('Principal Components')\nplt.xticks(rotation = 45)\nplt.show()\nrow = [0.1277, -3.6440, -2.2326, 1.8211, 1.7546, 0.1243, 1.0339, 2.3582, -2.8264,0.4491] #new example\nsteps = [('pca', PCA(n_components = 8)), ('m', LogisticRegression())]\nmodel = Pipeline(steps = steps)\nmodel.fit(X, y)\nyhat = model.predict([row]) #predict on test data\nprint('Predicted Class: %d' % yhat) #predicted class of new example\n```"]