["```py\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import mean_squared_error\n#gradient descent method\nclass GDLinearRegression:\n    def __init__(self, learning_rate, epoch):\n        self.learning_rate, self.iterations = learning_rate, epoch\n       #epoch is number of iterations\n    def fit(self, X, y):\n        c = 0\n        m = 5\n        n = X.shape[0]\n        for _ in range(self.iterations):\n            b_gradient = -2 * np.sum(y - m*X + c) / n\n            m_gradient = -2 * np.sum(X*(y - (m*X + c))) / n\n            c = c + (self.learning_rate * b_gradient)\n            m = m - (self.learning_rate * m_gradient)\n        self.m, self.c = m, c\n    def predict(self, X):\n        return self.m*X + self.c\n#dataset\nnp.random.seed(42)\nX = np.array(sorted(list(range(5))*20)) + np.random.normal(size = 100, scale = 0.5)\ny = np.array(sorted(list(range(5))*20)) + np.random.normal(size = 100, scale = 0.3)\n#model 1\nClf_1 = GDLinearRegression(learning_rate = 0.05, epoch = 1000)\nClf_1.fit(X, y)\ny_pred = Clf_1.predict(X)\nmse_1 = mean_squared_error(y, y_pred)\nplt.style.use('fivethirtyeight')\nplt.scatter(X, y, color='black')\nplt.plot(X, y_pred)\nplt.gca().set_title(\"Linear Regression Model 1\")\nprint('Slope = ', round(Clf_1.m, 4))\nprint('Intercept = ', round(Clf_1.c, 4))\nprint('MSE = ', round(mse_1, 2))\n```", "```py\n#model 2\nClf_2 = GDLinearRegression(learning_rate = 0.2, epoch = 1000)\nClf_2.fit(X, y)\ny_pred = Clf_2.predict(X)\nmse_2 = mean_squared_error(y, y_pred)\nplt.style.use('fivethirtyeight')\nplt.scatter(X, y, color='black')\nplt.plot(X, y_pred)\nplt.gca().set_title(\"Linear Regression Model 2\")\nprint('MSE = ', round(mse_2, 2))\n#model 3\nClf_3 = GDLinearRegression(learning_rate = 0.0001, epoch = 1000)\nClf_3.fit(X, y)\ny_pred = Clf_3.predict(X)\nmse_3 = mean_squared_error(y, y_pred)\nplt.style.use('fivethirtyeight')\nplt.scatter(X, y, color='black')\nplt.plot(X, y_pred)\nplt.gca().set_title(\"Linear Regression Model 3\")\nprint('MSE = ', round(mse_3, 2))\n```"]