- en: '7'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Kalman Filter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In a dynamic system, there is uncertain information. To capture the uncertainty,
    yet another mathematical tool, called the Kalman filter, comes into play. One
    can utilize the Kalman filter to optimally estimate the system’s next state, and
    it is ideal for continuously changing systems. It is especially useful for handling
    noisy sensor data by collating sensor data to best estimate the parameter of interest.
    In other words, the Kalman filter is an estimator of the system’s states in the
    presence of imprecise and uncertain measurements. It is mostly useful for the
    estimation of unobserved variables in real time.
  prefs: []
  type: TYPE_NORMAL
- en: The Kalman filter algorithm is widely used in signal processing, target tracking,
    navigation, and control applications. In tracking and control systems, an accurate
    and precise estimation of location and velocity, which are hidden (unknown) states,
    is a challenge. The uncertainty in the measurement of hidden states is attributed
    to external factors, such as atmospheric effects and thermal noise. The Kalman
    filter is an algorithm to estimate the hidden states of a dynamic system and predict
    the future state of the system based on past estimations. It is named after Rudolf
    E. Kalman, who published his famous paper on a recursive solution to a discrete
    data linear-filtering problem in 1960.
  prefs: []
  type: TYPE_NORMAL
- en: A system is governed by a set of equations, and this set is called a dynamic
    model or state space model. If a system’s current state and the dynamic model
    are known, the subsequent state can be estimated. The uncertainty in the dynamic
    model is influenced by external factors and is called process noise. This is the
    error or misalignment between the equations of motion and the actual motion of
    the system. The random error or uncertainty in measurement is called measurement
    noise. In order to improve the estimation of the future state of the system, it
    becomes essential to account for process noise as well as measurement noise. The
    Kalman filter takes both of these uncertainties into account.
  prefs: []
  type: TYPE_NORMAL
- en: 'Any measured (or computed) parameter is an estimate and it can be significantly
    improved by the usage of multiple sensors. In this regard, two terms, namely,
    accuracy and precision, have to be understood well as they cannot be used interchangeably.
    Accuracy indicates the closeness of the measurement to the true value, while precision
    indicates the variability in measurements of the same parameter. Accuracy and
    precision form the basis of an estimate of a hidden state of the system. *Figure
    7**.1* shows the high accuracy and high precision of an estimate:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.1: High accuracy and high precision of measurement](img/Figure_07_01_B18943.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.1: High accuracy and high precision of measurement'
  prefs: []
  type: TYPE_NORMAL
- en: Unbiased systems have no or significantly low built-in systematic error (bias)
    and, hence, are high-accuracy systems. Real systems are biased and have process
    noise. High-precision systems have low variance (or low uncertainty). The influence
    of variance can be reduced by averaging (smoothing) measurements. The more measurements,
    the closer the estimate to the true value. A **probability distribution function**
    (**PDF**) describes a measurement as it is a random variable. The dispersion in
    distribution (*Figure 7**.2*) shows the measurement noise. In a low-precision
    and low-accuracy system, the estimates are neither close to each other nor to
    the true value and they will be spread all over the four quadrants of spatial
    coordinates.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.2: Measurement distribution](img/Figure_07_02_B18943.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.2: Measurement distribution'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that the concepts of a measurement and its precision and accuracy are clear,
    we will discuss how the Kalman filter works. This chapter covers topics that are
    essentially the component steps of this estimation algorithm, concluding with
    an illustrative Python code:'
  prefs: []
  type: TYPE_NORMAL
- en: Computation of measurements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Filtration of measurements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementation of the Kalman filter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Kalman filter will be tested out with an example to estimate the position
    (displacement) and velocity of a moving object using Python in the last section.
  prefs: []
  type: TYPE_NORMAL
- en: Computation of measurements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will start with a flow diagram of the Kalman filter algorithm, shown in *Figure
    7**.3a*. The Kalman filter requires an initial guess to start with. This input
    can be a very rough estimate. So, step 0 is the initial guess and step 1 is the
    measurement of the state variable.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.3a: Flow diagram of the Kalman filter](img/Figure_07_03_B18943.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.3a: Flow diagram of the Kalman filter'
  prefs: []
  type: TYPE_NORMAL
- en: When the input is a measured value, the output is the current state estimated
    using the state update equation in step 2, which is calculated from the predicted
    value of the current state and the residual scaled (updated) by a factor called
    the Kalman gain. The Kalman gain takes the input measurement uncertainty into
    account, the residual being the difference between the measured and predicted
    values. This update and estimate make the second step in the algorithm.
  prefs: []
  type: TYPE_NORMAL
- en: 'The output from step 2 is fed to predict the next state of the system. The
    state for the next iteration is predicted using the dynamic model. The prediction
    in step 3 is basically an extrapolation of the current state utilizing the set
    of equations of dynamism. This continues for several iterations and the Kalman
    gain is calculated at each iteration. An illustrative example of tracking the
    values (true, measured, estimated, and predicted) of a constant velocity aircraft
    in one dimension is shown in *Figure 7**.3b*, which also exemplifies a univariate
    Kalman filter:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.3b: Estimated and predicted values (positions) of constant velocity
    aircraft](img/Figure_07_04_B18943.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.3b: Estimated and predicted values (positions) of constant velocity
    aircraft'
  prefs: []
  type: TYPE_NORMAL
- en: It is evident from the figure that the estimation algorithm (Kalman filter)
    has a smoothing effect on the measurements and converges toward the true value
    with an increasing number of iterative steps. The next section describes the filtration
    of random variables in the form of measurements to optimize the uncertainty in
    the estimate.
  prefs: []
  type: TYPE_NORMAL
- en: Filtration of measurements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Kalman filter has inputs and outputs like any filter. The inputs are noisy
    and inaccurate measurements, while the outputs are much less noisy and more accurate
    estimates. Mathematically speaking, the inputs to the filter are a measured value
    and measurement covariance matrix. The dynamic system model is the state transition
    matrix (representing equations) and process noise covariance matrix, the Kalman
    gain is internal and dependent on the system, and the outputs from the filter
    are the state variable and state covariance matrix. This is illustrated in *Figure
    7**.4a*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.4a: Input and output of the Kalman filter](img/Figure_07_05_B18943.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.4a: Input and output of the Kalman filter'
  prefs: []
  type: TYPE_NORMAL
- en: When an estimate is propagated in time, the future state is inherently uncertain
    and hence, the error covariance matrix grows with time. The dynamic model (equations
    of motion) is approximate; the process noise (uncertainty) adds to the existing
    noise, and this is represented by the process noise covariance matrix. The estimate
    needs to be converted from the state space to the measurement space and this conversion
    is done via another matrix (state-to-measurement). For Kalman filters applied
    to linear systems discussed in this chapter, this transformation matrix is simple,
    whereas the transformation can be complex for non-linear (or extended) Kalman
    filters. If the system is non-linear, a non-linear state estimator or filter is
    utilized. For example, extended Kalman filters do a linearization of the distribution
    around the mean of the current estimate and use it in the predict and update states
    of the algorithm.
  prefs: []
  type: TYPE_NORMAL
- en: The Kalman gain is computed in each iteration and it determines the influence
    of the input measurement (new information) on the estimate. If the input measurement
    is very noisy, the Kalman gain will trust its current state estimate more than
    the input. The Kalman filter has the ability to recognize how to appropriately
    put weights on its current estimate and a new input measurement at each time step
    to produce an optimal estimate.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.4b: Kalman filtering in the form of distribution functions](img/Figure_07_06_B18943.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.4b: Kalman filtering in the form of distribution functions'
  prefs: []
  type: TYPE_NORMAL
- en: To summarize, the Kalman filter is an optimal filter that treats two random
    variables (prior estimate and measurement) to estimate the current state variable,
    as shown in *Figure 7**.4b*, by minimizing the uncertainty. If we have a prior
    distribution with a high variance and a measured distribution with a lower variance,
    the Kalman filter combines the two to estimate a distribution with a higher peak
    and narrower variance than the prior.
  prefs: []
  type: TYPE_NORMAL
- en: In the following section, the computation and filtration of measurements leveraging
    the Kalman filter estimation algorithm are implemented with Python code.
  prefs: []
  type: TYPE_NORMAL
- en: Implementation of the Kalman filter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this illustrative example, time-series data is used as input and the Kalman
    filter provides estimates at each time step. The example is of a moving vehicle
    for which initializations of velocity, displacement, and acceleration are made.
    Acceleration values at different time steps are also incorporated. The kinematic
    equation, which relates displacement, velocity, and acceleration of the vehicle,
    yields the true values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Random noise (error) is added to the true values in the form of small perturbations,
    and measurements are determined:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We can compare the true values with the measured values of displacement. On
    running the following piece of code, we obtain a visual comparison (*Figure 7**.5*).
    Similarly, we can make a visual comparison of true values with the measured values
    of velocity as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure 7.5: True values versus measurements for displacement](img/Figure_07_07_B18943.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.5: True values versus measurements for displacement'
  prefs: []
  type: TYPE_NORMAL
- en: 'We are, therefore, done with the computation of measurements. Next is the filtration
    of measurements for which the noisy data is fed into the Kalman filter. Displacement
    and velocity are initialized and the error covariance (`Q`) is estimated. The
    transition matrix (`A`) is also used wherein it is assumed acceleration of the
    vehicle is unknown. The measurement error (`R`) is higher than the estimation
    error due to noise in the data. `H` in the following code yields states and `P`
    is the error matrix:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now compare the true values with an estimated value of displacement
    as well as velocity. On running the following piece of code, we obtain a visual
    comparison (*Figure 7**.6*) of only displacement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure 7.6: True values versus estimated values of displacement](img/Figure_07_08_B18943.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.6: True values versus estimated values of displacement'
  prefs: []
  type: TYPE_NORMAL
- en: 'It is evident that the Kalman filter provides estimates of the displacement
    of a moving vehicle that are very close to the true values when used on noisy
    data. The example of a moving vehicle used in the algorithm implementation is
    illustrated in *Figure 7**.7*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.7: Optimal state estimate of a moving vehicle](img/Figure_07_09_B18943.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.7: Optimal state estimate of a moving vehicle'
  prefs: []
  type: TYPE_NORMAL
- en: Though synthetic data was utilized in the Python code, the usage and application
    are generic, and the algorithm works for a dynamic system provided the matrices
    governing the system dynamics are set up properly.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we explored the Kalman filter – the estimation and prediction
    algorithm utilized to solve problems in signal processing, navigation, and control
    systems. There are linear and univariate (one-dimensional) Kalman filters in which
    the system dynamics are assumed to be linear. Many dynamic processes, however,
    have more than one dimension, and in such cases, we utilize multivariate and mostly
    non-linear (or extended) Kalman filters. For example, the state vector that describes
    a moving object’s position and velocity in space is six-dimensional, and a non-linear
    Kalman filter is utilized to determine the displacement (and velocity) in space
    of such an object. Also, the Kalman filter consumes low computational power (leading
    to a shorter runtime) due to the usage of matrices in its operation that occupy
    less computer memory. The Kalman filter is arguably the best estimation algorithm
    with noisy data as it mitigates the uncertainty by combining the information we
    have and providing us with a distribution we can feel more confident about.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter is the last one in this part (*Mathematical Tools*) of the
    book and is about the Markov chain, an algorithm to sample states from a population
    with a complex probability distribution. It is a probabilistic tool to traverse
    a system of states. In other words, it randomly walks across a graph and helps
    predict the next state just from knowledge of the present.
  prefs: []
  type: TYPE_NORMAL
