["```py\n[3, 2, 0, 1]\n```", "```py\n[1, 3, 0, 2]\n```", "```py\n[1, 2, 7, 5, 0, 3, 4, 6]\n```", "```py\nNumber of violations =  3\n```", "```py\n    nQueens = queens.NQueensProblem(NUM_OF_QUEENS)\n    ```", "```py\n    creator.create(\"FitnessMin\", base.Fitness, weights=(-1.0,))\n    ```", "```py\n    # create an operator that generates randomly shuffled indices:\n    toolbox.register(\"randomOrder\", random.sample, \\\n        range(len(nQueens)), len(nQueens))\n    toolbox.register(\"individualCreator\", tools.initIterate, \\\n        creator.Individual, toolbox.randomOrder)\n    toolbox.register(\"populationCreator\", tools.initRepeat, \\\n        list, toolbox.individualCreator)\n    ```", "```py\n    def getViolationsCount(individual):\n        return nQueens.getViolationsCount(individual),\n    toolbox.register(\"evaluate\", getViolationsCount)\n    ```", "```py\n    # Genetic operators:\n    toolbox.register(\"select\", tools.selTournament, \\\n        tournsize=2)\n    toolbox.register(\"mate\", tools.cxUniformPartialyMatched, \\\n        indpb=2.0/len(nQueens))\n    toolbox.register(\"mutate\", tools.mutShuffleIndexes, \\\n        indpb=1.0/len(nQueens))\n    ```", "```py\n    population, logbook = elitism.eaSimpleWithElitism(population,\n        toolbox,\n        cxpb=P_CROSSOVER,\n        mutpb=P_MUTATION,\n        ngen=MAX_GENERATIONS,\n        stats=stats,\n        halloffame=hof,\n        verbose=True)\n    ```", "```py\n    print(\"- Best solutions are:\")\n    for i in range(HALL_OF_FAME_SIZE):\n        print(i, \": \", hof.items[i].fitness.values[0], \" -> \", \n            hof.items[i])\n    ```", "```py\nNUM_OF_QUEENS = 16\nPOPULATION_SIZE = 300\nMAX_GENERATIONS = 100\nHALL_OF_FAME_SIZE = 30\nP_CROSSOVER = 0.9\nP_MUTATION = 0.1\n```", "```py\ngen nevals min avg\n0 300 3 10.4533\n1 246 3 8.85333\n..\n23 250 1 4.38\n24 227 0 4.32\n..\n- Best solutions are:\n0 : 0.0 -> Individual('i', [7, 2, 8, 14, 9, 4, 0, 15, 6, 11, 13, 1, 3, 5, 10, 12])\n1 : 0.0 -> Individual('i', [7, 2, 6, 14, 9, 4, 0, 15, 8, 11, 13, 1, 3, 5, 12, 10])\n..\n7 : 0.0 -> Individual('i', [14, 2, 6, 12, 7, 4, 0, 15, 8, 11, 3, 1, 9, 5, 10, 13])\n8 : 1.0 -> Individual('i', [2, 13, 6, 12, 7, 4, 0, 15, 8, 14, 3, 1, 9, 5, 10, 11])\n..\n```", "```py\n[0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0]\n```", "```py\n# list of nurses:\nself.nurses = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H']\n# nurses' respective shift preferences - morning, evening, night:\nself.shiftPreference = [[1, 0, 0], [1, 1, 0], [0, 1, 1], [0, 1, 0], \n    [0, 0, 1], [1, 1, 1], [0, 1, 1], [1, 1, 1]]\n# min and max number of nurses allowed for each shift - morning, evening, night:\nself.shiftMin = [2, 2, 1]\nself.shiftMax = [3, 4, 2]\n# max shifts per week allowed for each nurse:\nself.maxShiftsPerWeek = 5\n```", "```py\nRandom Solution =\n[0 1 0 0 0 1 0 0 0 1 0 0 0 0 1 0 1 1 1 0 1 0 1 1 1 1 1 1 1 1 0 0 1 1 1 0 1 0 0 0 0 0 1 1 1 1 1 0 1 1 0 1 0 1 0 1 1 0 0 0 0 0 0 0 0 1 1 0 1 1 1 1 0 1 0 1 1 1 0 1 0 1 0 1 0 0 1 0 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 0 1 0 1 1 0 1 0 1 1 0 1 0 1 0 0 1 1 0 1 1 1 0 0 0 0 0 0 0 0 0 1 0 1 1 1 0 0 0 0 1 0 0 0 0 0 1 0 1 0 1 0 0 1 1 1 0 1 0]\nSchedule for each nurse:\nA : [0 1 0 0 0 1 0 0 0 1 0 0 0 0 1 0 1 1 1 0 1]\nB : [0 1 1 1 1 1 1 1 1 0 0 1 1 1 0 1 0 0 0 0 0]\nC : [1 1 1 1 1 0 1 1 0 1 0 1 0 1 1 0 0 0 0 0 0]\nD : [0 0 1 1 0 1 1 1 1 0 1 0 1 1 1 0 1 0 1 0 1]\nE : [0 0 1 0 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1]\nF : [1 1 1 1 0 1 0 1 1 0 1 0 1 1 0 1 0 1 0 0 1]\nG : [1 0 1 1 1 0 0 0 0 0 0 0 0 0 1 0 1 1 1 0 0]\nH : [0 0 1 0 0 0 0 0 1 0 1 0 1 0 0 1 1 1 0 1 0]\nconsecutive shift violations =  47\nweekly Shifts =  [8, 12, 11, 13, 16, 13, 8, 8]\nShifts Per Week Violations =  49\nNurses Per Shift =  [3, 4, 7, 5, 4, 5, 4, 5, 5, 3, 4, 3, 5, 5, 5, 3, 4, 5, 4, 2, 4]\nNurses Per Shift Violations =  28\nShift Preference Violations =  39\nTotal Cost =  1279\n```", "```py\n    nsp = nurses.NurseSchedulingProblem(HARD_CONSTRAINT_PENALTY)\n    ```", "```py\n    creator.create(\"FitnessMin\", base.Fitness, weights=(-1.0,))\n    ```", "```py\n    creator.create(\"Individual\", list, fitness=creator.FitnessMin)\n    toolbox.register(\"zeroOrOne\", random.randint, 0, 1)\n    toolbox.register(\"individualCreator\", tools.initRepeat, \\\n        creator.Individual, toolbox.zeroOrOne, len(nsp))\n    toolbox.register(\"populationCreator\", tools.initRepeat, \\\n        list, toolbox.individualCreator)\n    ```", "```py\n    def getCost(individual):\n        return nsp.getCost(individual),\n    toolbox.register(\"evaluate\", getCost)\n    ```", "```py\n    toolbox.register(\"select\", tools.selTournament, tournsize=2)\n    toolbox.register(\"mate\", tools.cxTwoPoint)\n    toolbox.register(\"mutate\", tools.mutFlipBit, indpb=1.0/len(nsp))\n    ```", "```py\n    population, logbook = elitism.eaSimpleWithElitism(\n        population, toolbox, cxpb=P_CROSSOVER, \\\n        mutpb=P_MUTATION, ngen=MAX_GENERATIONS, \\\n        stats=stats, halloffame=hof, verbose=True)\n    ```", "```py\n    nsp.printScheduleInfo(best)\n    ```", "```py\nPOPULATION_SIZE = 300\nP_CROSSOVER = 0.9\nP_MUTATION = 0.1\nMAX_GENERATIONS = 200\nHALL_OF_FAME_SIZE = 30\n```", "```py\nHARD_CONSTRAINT_PENALTY = 1\n```", "```py\n-- Best Fitness = 3.0\n-- Schedule =\nSchedule for each nurse:\nA : [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0]\nB : [1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0]\nC : [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nD : [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0]\nE : [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0]\nF : [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0]\nG : [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1]\nH : [1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0]\nconsecutive shift violations = 0\nweekly Shifts = [5, 6, 2, 5, 4, 5, 5, 5]\nShifts Per Week Violations = 1\nNurses Per Shift = [2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 1]\nNurses Per Shift Violations = 0\nShift Preference Violations = 2\n```", "```py\nHARD_CONSTRAINT_PENALTY = 10\n```", "```py\n-- Best Fitness = 3.0\n-- Schedule =\nSchedule for each nurse:\nA : [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0]\nB : [1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0]\nC : [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1]\nD : [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0]\nE : [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0]\nF : [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0]\nG : [0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0]\nH : [1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0]\nconsecutive shift violations = 0\nweekly Shifts = [4, 5, 5, 5, 3, 5, 5, 5]\nShifts Per Week Violations = 0\nNurses Per Shift = [2, 2, 1, 2, 2, 1, 2, 2, 2, 2, 2, 1, 2, 2, 1, 2, 2, 2, 2, 2, 1]\nNurses Per Shift Violations = 0\nShift Preference Violations = 3\n```", "```py\n[0, 2, 1, 3, 1, 2, 0, 3, 3, 0]\n```", "```py\nself.nodeList = list(self.graph.nodes)\nself.adjMatrix = nx.adjacency_matrix(graph).todense()\n```", "```py\ngcp = GraphColoringProblem(nx.petersen_graph(), 10)\nsolution = np.random.randint(5, size=len(gcp))\n```", "```py\nsolution = [2 4 1 3 0 0 2 2 0 3]\nnumber of colors = 5\nNumber of violations = 1\nCost = 15\n```", "```py\n    gcp = graphs.GraphColoringProblem(nx.petersen_graph(), \n        HARD_CONSTRAINT_PENALTY)\n    ```", "```py\n    creator.create(\"FitnessMin\", base.Fitness, weights=(-1.0,))\n    ```", "```py\n    toolbox.register(\"Integers\", random.randint, 0, MAX_COLORS - 1)\n    toolbox.register(\"individualCreator\", tools.initRepeat, \\\n        creator.Individual, toolbox.Integers, len(gcp))\n    toolbox.register(\"populationCreator\", tools.initRepeat, \\\n        list, toolbox.individualCreator)\n    ```", "```py\n    def getCost(individual):\n        return gcp.getCost(individual),\n    toolbox.register(\"evaluate\", getCost)\n    ```", "```py\n    toolbox.register(\"select\", tools.selTournament, tournsize=2)\n    toolbox.register(\"mate\", tools.cxTwoPoint)\n    toolbox.register(\"mutate\", tools.mutUniformInt, low=0, \\\n        up=MAX_COLORS - 1, indpb=1.0/len(gcp))\n    ```", "```py\n    population, logbook = elitism.eaSimpleWithElitism(\\\n        population, toolbox, cxpb=P_CROSSOVER, \\\n        mutpb=P_MUTATION, ngen=MAX_GENERATIONS, \\\n        stats=stats, halloffame=hof, verbose=True)\n    ```", "```py\n    gcp.plotGraph(best)\n    ```", "```py\nPOPULATION_SIZE = 100\nP_CROSSOVER = 0.9\nP_MUTATION = 0.1\nMAX_GENERATIONS = 100\nHALL_OF_FAME_SIZE = 5\n```", "```py\nHARD_CONSTRAINT_PENALTY = 10\nMAX_COLORS = 10\n```", "```py\n-- Best Individual = [5, 0, 6, 5, 0, 6, 5, 0, 0, 6]\n-- Best Fitness = 3.0\nNumber of colors = 3\nNumber of violations = 0\nCost = 3\n```", "```py\ngcp = graphs.GraphColoringProblem(nx.mycielski_graph(5), \n    HARD_CONSTRAINT_PENALTY)\n```", "```py\n-- Best Individual = [9, 6, 9, 4, 0, 0, 6, 5, 4, 5, 1, 5, 1, 1, 6, 6, 9, 5, 9, 6, 5, 1, 4]\n-- Best Fitness = 6.0\nNumber of colors = 6\nNumber of violations = 0\nCost = 6\n```", "```py\nMAX_COLORS = 5\n```", "```py\n-- Best Individual = [0, 3, 0, 2, 4, 4, 2, 2, 2, 4, 1, 4, 3, 1, 3, 3, 4, 4, 2, 2, 4, 3, 0]\n-- Best Fitness = 5.0\nNumber of colors = 5\nNumber of violations = 0\nCost = 5\n```"]