- en: Vector Calculus
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most of you will likely have had some exposure to calculus in the past, be it
    in high school, college, or university, and were likely hoping to never have to
    deal with it again. However, calculus is not only one of the most profound discoveries
    in mathematics; it also plays a vital role in deep learning.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will start by introducing core concepts of calculus using
    single variable calculus, and then we will move on to multivariable calculus and
    extend everything we learned in multivariable calculus to gain an understanding
    of vector calculus and its relation to deep learning.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Single variable calculus
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multivariable calculus
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vector calculus
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Single variable calculus
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At its core, calculus is nothing more than the study of relationships and change.
    Having a keen grasp of calculus will help you better understand how deep learning
    algorithms work and how to make them work better for you as a practitioner.
  prefs: []
  type: TYPE_NORMAL
- en: Let's move on to understanding what makes calculus such a powerful tool. We
    start with single variable calculus, which is about functions that take in a single
    input and produce a single output.
  prefs: []
  type: TYPE_NORMAL
- en: Derivatives
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To start with, let''s imagine a straight line with the following equation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/aa7984ce-3f61-4ad0-8d7c-43312df9eb75.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the equation, the following aspects apply:'
  prefs: []
  type: TYPE_NORMAL
- en: '*y* is a function of *x*, often written simply as *f(x)* (which is the notation
    we will be predominantly using in the remainder of the book). In the preceding
    equation, the output value *y* is dependent on the input value *x*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *m* value is the gradient, which tells us how steep the straight line is,
    or what its rate of change is (that is, how much does a change in the *x* value
    affect the *y* value).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The ![](img/3eaebf0e-13b1-4078-b90a-89c4597d7c98.png) value tells us whether
    the line is moving upward or downward.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The ![](img/f242110e-d2e4-44f8-802a-a9411a28f0ea.png) value tells us by how
    much the line is above or below the origin.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *m* and *b* values in a straight line are constant throughout.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that you know what the equation of a straight line looks like, you're probably
    wondering how to find it for an arbitrary straight line.
  prefs: []
  type: TYPE_NORMAL
- en: We start by first picking two points, (*x[1], y[1]*) and (*x[2], y[2]*), that
    lay on the line, and plug their values into the formula [![](img/1d707d49-6ca6-4819-8282-a6e05a6659b1.png)].
    After having found the value for *m*, we find the value of *b* by using the line
    equation and plugging into it the value for *m* and one (*x, y*) point on the
    line, and solve for *b*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Well, that was very simple and straightforward. However, there are far more
    complex equations out there that aren''t as straightforward—those that relate
    to curves (nonlinear functions), as illustrated in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9952e1b9-a429-42ed-a380-4535e0eb0596.png)'
  prefs: []
  type: TYPE_IMG
- en: Imagine a picture of a couple of hills or camel humps. If you trace the surface
    of them, you will have a curve, and as you may have no doubt noticed, they go
    up and then down and then back up, and the process repeats itself.
  prefs: []
  type: TYPE_NORMAL
- en: From the preceding image of the curve, you can easily tell that the gradient
    is not constant, as it was in the previous example with the straight line. We
    could sketch straight lines along the curve and calculate their slopes to understand
    how the curve moves. However, there is a simpler method than this tedious one.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the very core of calculus are two concepts, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Differentiation** helps us understand how much a function output changes
    with respect to changing input.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Integration** helps us understand the impact of this change in inputs between
    certain points.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We will begin initially by taking an in-depth look at differentiation. The
    primary equation for finding the derivative of a function is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f9062c7a-3330-4e38-91dd-65eb66be81d8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'I know there are a few new symbols here and it looks complicated, but it''s
    really very simple. What this equation is doing is finding the derivative of the
    function *f* with respect to the variable in the denominator *x*. This isn''t
    too different from the earlier equation we saw (which we used to calculate the
    gradient of a straight line). We subtract two values, *f(x+h)* and *f(x), *and
    divide it by its difference, *h*. But what does [![](img/7254965b-6a3e-4c66-ba4c-ffda679af62f.png)] have
    to do with this? This tells us that we want the two points on the curve to be
    as close to each other as possible so that when we are sketching the gradient
    on the curve, it looks like a straight line at one point on the curve. This allows
    us to better visualize and understand the effect of the change, as can be seen
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/af7f06c7-704a-4aea-947a-d511e68a65e9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'See the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8edacc96-ce9a-4bda-8048-509329c9b4ad.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that we understand what a derivative is and how to find it for any function,
    let's move on to some important rules of differentiation.
  prefs: []
  type: TYPE_NORMAL
- en: Sum rule
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The sum rule states that the derivative of the sum of two functions is the
    same as the sum of the individual derivatives of the two functions, as can be
    seen in the following equation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e1bd1f1b-f172-4bfc-9801-3e118806dcab.png)'
  prefs: []
  type: TYPE_IMG
- en: Let's suppose we have [![](img/5a7475a2-1ddf-4c79-baa1-c03def2552f8.png)] and [![](img/f5f9a3bc-4187-453d-bb88-9a84ad8cc88d.png)].
  prefs: []
  type: TYPE_NORMAL
- en: From this, we can see that the following equation, [![](img/ebd0bf36-1a99-47e0-9957-f3d760aeec73.png)],
    is the same as this one:[![](img/05df891e-9156-4259-bb4a-aa9e2953286c.png)].
  prefs: []
  type: TYPE_NORMAL
- en: Power rule
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The power rule helps to find the derivative of a function where the variable
    has an exponent. Simply put, you multiply the power by the constant in front of
    the variable, and reduce the power by 1\. Let''s see what an example of this looks
    like, using the power rule [![](img/257032ca-20f4-4eb2-a68f-5f13ae02ba40.png)],
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6dd27b33-072d-449f-887d-14860524e576.png)'
  prefs: []
  type: TYPE_IMG
- en: Note that not every function will have a derivative, at least not in the function's
    domain.
  prefs: []
  type: TYPE_NORMAL
- en: There are certain functions—such as [![](img/b70ba598-b44e-4cb5-8b06-cd31db7e2c3d.png)] or [![](img/cb8aa930-34d3-4ee1-89ef-9edea0b4ecb7.png)] —that
    are not as straightforward as the ones we saw earlier. The function [![](img/72973c05-d123-4d46-bfbb-10e4a90310b2.png)] is
    not differentiable at *x = 0* because its value is undefined. This is known as
    **discontinuity**.
  prefs: []
  type: TYPE_NORMAL
- en: The same applies to [![](img/db449b88-f018-41d4-b761-122781d99dfe.png)]; however, *e* (known
    as **Euler's number**) has a very interesting property whereby the function is
    equal to its derivative—that is, [![](img/4ad4557a-efd4-4123-b67d-49c892a2a78e.png)].
  prefs: []
  type: TYPE_NORMAL
- en: Trigonometric functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In high school or university, you likely studied trigonometry and encountered
    the sine, cosine, and tangent functions. More important to us are the sine and
    cosine functions, which you will encounter often and which we will look at here.
    These functions can be seen in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9180e689-9902-4707-8156-29175f938c29.png)'
  prefs: []
  type: TYPE_IMG
- en: Here, sine is [![](img/77570f27-f16c-42eb-a904-fbd41087473f.png)] and cosine
    is [![](img/91ef94ec-c6f4-4668-b9c0-07e860896e0a.png).]
  prefs: []
  type: TYPE_NORMAL
- en: The sine and cosine functions are related, and the derivative will show us how.
  prefs: []
  type: TYPE_NORMAL
- en: If [![](img/0caf5d22-1868-4c84-9637-07062b3f708c.png)], then [![](img/ca5654f3-9661-4b7a-954a-0b42f5d4b10d.png)].
    However, if [![](img/f53ab3f8-feef-49f3-b828-d91f204c481d.png)], then [![](img/cdd675b8-f811-4fab-9f27-3cc6779be414.png)].
  prefs: []
  type: TYPE_NORMAL
- en: 'The derivatives create a loop, which we can see as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/02d28816-e09e-49c6-b82e-180903528446.png)'
  prefs: []
  type: TYPE_IMG
- en: First and second derivatives
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we know how to find the derivative of a function, it is important to
    know that we can take the derivative more than once.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first derivative, as we know, gives us the gradient (slope of the tangent
    line) of a function at any given point (*x*) on the curve—in other words, whether
    the curve''s altitude (that is, *y* or *f(x)*) is increasing or decreasing. A
    positive slope tells us *f(x)* is increasing as *x* increases and a negative slope
    tells us *f(x)* is decreasing as *x* increases, and a slope of 0 tells us nothing
    about the curve''s direction, other than that it is likely at a turning point
    (local minimum or local maximum). This can be written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: If [![](img/d86125d6-30d9-41e3-9f73-cbf7baa85925.png)], then *f(x)* is increasing
    at *x = t*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If [![](img/80ce76bf-3eb6-44e4-aba4-acbf744fdea2.png)], then *f(x)* is decreasing
    at *x = t*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If [![](img/ec3149ab-956c-4b9b-9d54-2a6a63938657.png)], then *x=t* is a critical
    point of *f(x)*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For example, let [![](img/5f0e7e76-62c0-4d8d-a361-bfbb43ca4f46.png)]. The derivative
    of this function is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a7b22566-1a2e-4aff-82aa-6c6f099c85c4.png)'
  prefs: []
  type: TYPE_IMG
- en: At *x = 0*, the derivative is 9, which tells us the function is increasing at
    this point. But at *x = 1* the derivative is -3 telling us that the function is
    decreasing at this point.
  prefs: []
  type: TYPE_NORMAL
- en: The second derivative is the derivative of the derivative of the function. We
    write this as [![](img/b626c2af-5a48-437d-9bc5-9cdad7f73bfe.png)] or [![](img/c97b55b5-c095-4e4d-a50d-b32ff8677660.png)].
    As before, where the first derivative told us whether the function was increasing
    or decreasing, the second derivative gives us the same information about the first
    derivative—whether it is increasing or decreasing.
  prefs: []
  type: TYPE_NORMAL
- en: If the second derivative is positive, then as *x* increases, the first derivative
    is increasing; and if the second derivative is negative, then as *x* increases, the
    first derivative is decreasing.
  prefs: []
  type: TYPE_NORMAL
- en: 'To help us visualize this, when the second derivative is positive, the curve
    is concave up (parabola open upward) at a point, whereas when it is negative,
    the curve is concave down (parabola open downward). And as before, when the second
    derivative is equal to zero, we learn nothing new. This point could be a local
    maximum, a local minimum, or an inflection point. This is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: If [![](img/c18fb859-0682-4ff4-9f87-ef62eb38be89.png)], then *f(x)* is concave
    up at *x=t*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If [![](img/f81a65d5-84cd-4bd4-b09d-3352b9f1f3c8.png)], then *f(x)* is concave
    down at *x=t*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If [![](img/0f9c7cda-5ccc-4b95-9562-725fc46747d4.png)], then at *x=t* we obtain
    no new information about *f(x)*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For example, let''s take the second derivative of the same function we used,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/58fa95b6-5228-49f2-8b75-5282c90782eb.png)'
  prefs: []
  type: TYPE_IMG
- en: At *x = 0*, the second derivative is -24, which tells us the function is concave
    down here. But at *x = 2*, it is equal to 24, telling us the function is concave
    up.
  prefs: []
  type: TYPE_NORMAL
- en: 'Earlier, we learned that when *x* is a critical point of a function we learn
    nothing new about the function at that point, but we can use it to find out whether
    it is a local maximum or a local minimum. These rules can be written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: If [![](img/f41bc72b-726c-466d-a9b8-eda08e92612b.png)] and [![](img/9893df9d-c62e-48a5-9346-8d9803dec297.png)],
    then *f(x)* has a local minimum at *x=t*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If [![](img/26ad0c1e-e9ef-47ec-ab47-3da7f453a19e.png)] and [![](img/259c824b-df4e-493b-9c71-bcd5be72c704.png)],
    then *f(x)* has a local maximum at *x=t*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If [![](img/65ee9469-3f8b-4065-bf94-920277d88181.png)] and [![](img/38599662-9046-4b09-85f8-46705527c1ae.png)],
    then at *x=t* we learn nothing new about *f(x)*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Product rule
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The product rule gives us a straightforward method to find the derivative of
    the product of two functions. Let's take two arbitrary functions, *f(x)* and *g(x), *and
    multiply them. So, [![](img/de194b8d-ea89-4e64-b8fd-ae93468a4413.png)]. The derivative
    is [![](img/a1078065-6639-471a-975b-3ac15be2479f.png)].
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s explore this in more detail to understand how this works. Have a look
    at the following equation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0cf58109-75ff-4cf3-9018-aff26a026420.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can rewrite the derivative, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/77772ea4-8854-4058-92b8-a4e79825b65b.png)'
  prefs: []
  type: TYPE_IMG
- en: This can be further simplified as [![](img/2db03584-1427-4c51-ab85-09fd8085fb06.png)],
    which is the same as before.
  prefs: []
  type: TYPE_NORMAL
- en: Quotient rule
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The quotient rule allows us to find the derivative of a function that is being
    divided by another function. This can be derived from the product rule. As before,
    we take two functions *f(x)* and *g(x)*, but now, we will divide them. So, [![](img/b231fb61-5dcf-4683-8b9f-7df5c6f4e275.png)].
    The derivative is [![](img/0d9122c5-410e-4abb-8598-5a8ea7508373.png)].
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose we have [![](img/824bc5f5-c4af-4bfa-a3f2-b0bcc8a1ab02.png)] and [![](img/04eaba54-d29b-4cba-9d23-5ebd2657faaf.png)].
    Then, we have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/64cf49f5-d145-4b82-95ab-588e93df7968.png)'
  prefs: []
  type: TYPE_IMG
- en: 'By finding the derivatives of *f(x)* and *g(x)* and plugging them into the
    preceding equation, we get the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/68168e9d-53b4-44df-a5cf-bf27ba9af5f5.png)'
  prefs: []
  type: TYPE_IMG
- en: If we expand it, we find the derivative.
  prefs: []
  type: TYPE_NORMAL
- en: Chain rule
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The chain rule applies to functions that take in another function as input.
    Let's consider [![](img/ed41b349-9489-4391-9581-99c220927654.png)], which is often
    written as [![](img/6b296cca-7a66-4f08-ae53-70347d20eafa.png)] and read as *f* of
    *g* of *x*. This means that the output of *g(x)* will become the input to the
    function *f*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The derivative of this will be written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d4b250a5-7a46-4a8a-8bb9-e97f84b43d46.png)'
  prefs: []
  type: TYPE_IMG
- en: This is the same as [![](img/f60f19bf-a078-42e8-9f8c-eadd6eef2276.png)].
  prefs: []
  type: TYPE_NORMAL
- en: For example, suppose we have [![](img/0f2ecc29-f74e-4a9c-86ac-945a4ee45215.png)] and
    [![](img/58b5b56c-5a21-4ec1-a5c6-2db52c30fc28.png)]. We then differentiate the
    two functions and get [![](img/af10bf17-de2b-4b15-b893-dae3366107eb.png)] and
    [![](img/891ac83b-ad63-49a8-abe1-d9619abe1085.png)].
  prefs: []
  type: TYPE_NORMAL
- en: By plugging this into the preceding formula, we get [![](img/583fbb30-d59c-4345-bfb7-7c22ddddd08c.png)].
  prefs: []
  type: TYPE_NORMAL
- en: Antiderivative
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We now know what derivatives are and how to find them, but now, suppose we know
    the rate of change (*F*) of the population (*f*), and we want to find what the
    population will be at some point in time. What we have to do is find a function
    *F* whose derivative is *f*. This is known as the **antiderivative**, and we define
    it formally as a function *F* is called an antiderivative of *f* on [![](img/635f7faa-5a7a-4d61-87aa-99728032b763.png)] if [![](img/33eb577d-55b4-4446-944d-f57bb6394223.png)] for
    all ![](img/f213a601-0421-4be1-865d-053761e776a4.png).
  prefs: []
  type: TYPE_NORMAL
- en: Suppose we have a function [![](img/ee867575-1177-49b7-babb-0d4e20150490.png)],
    then [![](img/fba25894-337d-4156-9808-a141a57b0480.png)] (where *c* is some constant),
    from which we can confirm that [![](img/4ac163f8-f9b2-4b60-8331-a7724a5bd656.png)].
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table shows some important functions and their antiderivatives
    that we will encounter often:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Function** | **Antiderivative** |'
  prefs: []
  type: TYPE_TB
- en: '| ![](img/4a4df447-7c22-476e-bc54-a869bff13d1b.png) | ![](img/264a83db-2125-48f5-8e56-19423fee8167.png)
    |'
  prefs: []
  type: TYPE_TB
- en: '| ![](img/d0ecb407-ec75-4cde-b9d5-7394b87bc069.png) | ![](img/6e2e7819-764f-4fe8-a372-4ae76a498ba3.png)
    |'
  prefs: []
  type: TYPE_TB
- en: '| ![](img/b8e0a0d0-6ae2-4e2f-90d1-7a522cb1760b.png) | ![](img/f7c0b9fa-b845-4564-b1ff-48f15b6c940c.png)
    |'
  prefs: []
  type: TYPE_TB
- en: '| ![](img/0d2197f2-cf35-4034-a2dc-41a80cf1390e.png) | ![](img/a500fee4-160c-411c-ada0-8c148a350a8a.png)
    |'
  prefs: []
  type: TYPE_TB
- en: '| ![](img/df9ccc18-4b6d-4638-a5af-341e610765d5.png) | ![](img/28b6ebf4-c52f-4b04-aae8-b8f757731794.png)
    |'
  prefs: []
  type: TYPE_TB
- en: '| ![](img/1e01b7fd-74b6-40fa-8017-e8f21c41527d.png) | ![](img/41a34e31-dd91-48a6-b360-9111145b56dd.png)
    |'
  prefs: []
  type: TYPE_TB
- en: '| ![](img/a446e722-0db7-4983-bd67-dfd732784be7.png) | ![](img/c1534e87-0946-4590-92a4-c6045ce6ecad.png)
    |'
  prefs: []
  type: TYPE_TB
- en: '| ![](img/557e24dd-070d-4a15-add4-c472d34ebe69.png) | ![](img/3a9b6fd3-1f92-420c-9cdd-dc6297982a86.png)
    |'
  prefs: []
  type: TYPE_TB
- en: '| ![](img/c6369ea0-9427-4ef9-9c2c-78be0b132426.png) | ![](img/3a4c33ac-1018-406f-89f1-d9bd893a87d9.png)
    |'
  prefs: []
  type: TYPE_TB
- en: 'Let''s suppose we have the following function:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b57b3099-0063-40f6-8785-6ba53e65d1a1.png)'
  prefs: []
  type: TYPE_IMG
- en: We want to find its antiderivative. I know this probably looks like a difficult
    equation, but by using the preceding table, we can make this very easy for ourselves.
    Let's see how.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we rewrite the function so it becomes the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/050a81e0-a8a5-46ee-8951-0c1228927d8e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'And so, the antiderivative is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f5dd52fc-900f-4d4f-b519-4575004b1bde.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To make things easier, we rewrite this, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2b074ce1-0d0f-4dc5-95aa-f799edb57054.png).'
  prefs: []
  type: TYPE_NORMAL
- en: And there you have it.
  prefs: []
  type: TYPE_NORMAL
- en: You may now be wondering whether or not we can find what the value of *c* is,
    and if so, how. Let's go through another example, and see how.
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose we have a function that is the second derivative, and we want to find
    the antiderivative of the antiderivative—that is, the original function. We have
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d0755649-4af0-4fbc-ba12-3d1878d463cf.png) and ![](img/8bff1025-e006-49fd-9e76-2d0776b1daec.png) and ![](img/e9232ae9-dd37-4c8a-9435-5f9068d5f7e3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, the first antiderivative is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5f4ed156-2651-484a-aabd-f5f2fc8d1c64.png)'
  prefs: []
  type: TYPE_IMG
- en: 'And so, the second antiderivative is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2ff2b47a-ff55-49cc-8417-3640de5e3ab6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here, we want to find the values of *c* and *d*. We can do this simply by plugging
    in the preceding values and solving for the unknowns, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9b78cb2c-bf66-43f0-9081-8920db7503f7.png); therefore, ![](img/0458a1e5-6874-4de9-9f04-541ba171cdd9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can also do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7370788f-724f-4bb0-99d0-fbf3345dee0e.png); therefore, ![](img/2fc29d8e-c90d-439e-9ef2-2ce8eb6bfd1a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Thus, our function looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/80ea4eb4-1eed-4d16-a511-ec89e75d792c.png)'
  prefs: []
  type: TYPE_IMG
- en: Integrals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have studied derivatives, which is a method for extracting information
    about the rate of change of a function. But as you may have realized, integration
    is the reverse of the earlier problems.
  prefs: []
  type: TYPE_NORMAL
- en: In integration, we find the area underneath a curve. For example, if we have
    a car and our function gives us its velocity, the area under the curve will give
    us the distance it has traveled between two points.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s suppose we have the curve [![](img/112ab104-760c-4ac2-97b4-b254d08f9f9a.png)],
    and the area under the curve between *x = a* (the lower limit) and *x = b* (the
    upper limit, also written as [*a, b*]) is S. Then, we have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/15d05293-5a13-481b-9954-f5c81029bfde.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The diagramatical representation of the curve is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1e4dc6a3-a3cb-43d3-aa51-20234d07d01c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This can also be written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ee572d5a-5e62-46f1-8022-9a8b29b23c20.png)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding function, the following applies: [![](img/b1dc159f-9f35-487d-9c90-6d8a4b351e44.png)],
    and ![](img/17457674-cd90-4a0a-8e80-fa5b0ac06bea.png) is in the subinterval [![](img/642b9214-4c5d-4791-a9b9-a4840a37f971.png)].
  prefs: []
  type: TYPE_NORMAL
- en: 'The function looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d68f33bd-9e7d-4ca3-beae-281243535f89.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The integral gives us an approximation of the area under the curve such that
    for some, ε > 0 (ε is assumed to be a small value), the following formula applies:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/76c13e50-7190-4a54-910c-3c77e438e6ea.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, let''s suppose our function lies both above and below the *x* axis, thus
    taking on positive and negative values, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/31767c94-5e84-48a4-9460-17f2cdde39ca.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As we can see from the preceding screenshot, the portions above the *x* axis
    (*A[1]*) have a positive area, and the portions below the *x* axis (*A[2]*) have
    a negative area. Therefore, the following formula applies:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6f180dcc-26b4-4780-9dd7-dc9668edd17a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Working with sums is an important part of evaluating integrals, and understanding
    this requires some new rules for sums. Look at the following examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[![](img/3e84708c-5e54-457e-b11a-8f4f9af5d0fd.png)]'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[![](img/4b45c9f0-619b-4842-8f93-bbeadce8a681.png)]'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[![](img/b45cc14c-4dac-4ab0-a87f-3213941cfa93.png)]'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[![](img/215c696d-38af-471b-bca8-6872bac94ebd.png)]'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[![](img/633a79aa-35bf-4eea-9d6d-b83b2e105e4f.png)]'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[![](img/f8b5c7a0-95bb-4a78-99d4-18d5a4d16cdd.png)]'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[![](img/401fb9fc-bae0-447c-a699-80998c30a06e.png)]'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, let''s explore some of the important properties of integrals, which will
    help us as we go deeper into the chapter. Look at the following examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[![](img/9c0d1263-8db3-446a-bf81-5af06a246904.png)]'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/d5b3a394-1c0a-46d0-9b82-fac1f45547ce.png), when [![](img/9fe44f8b-e606-4190-9cfa-fc50eee21ac3.png)]'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[![](img/6ee6c8b1-4c72-4d24-8d27-e2cfae17d8e7.png)], where *c* is a constant'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[![](img/da5d0899-abdb-4b30-84f4-a40851b8965f.png)]'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[![](img/b167d886-a9bd-4f27-b3e5-e65c8096d262.png)]'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[![](img/a3752f24-4fa4-4852-b92f-d2c3afd12d50.png)]'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, suppose we have the function [![](img/606575fe-4ab6-4e57-82c3-76a87f7fe184.png)],
    which looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0fbf3c73-00a3-494b-bf14-dc09907579df.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, we get the following property:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e734a2be-251f-4190-8a3d-775cc1d80941.png)'
  prefs: []
  type: TYPE_IMG
- en: This property only works for functions that are continuous and have adjacent
    intervals.
  prefs: []
  type: TYPE_NORMAL
- en: The fundamental theorem of calculus
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The fundamental theorem of calculus is the most important theorem in calculus
    and is named very appropriately since it establishes a relationship between differential
    calculus and integral calculus. Let's see how.
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose that *f(x)* is continuous on [*a, b*] and differentiable at (*a, b*),
    and that *F(x)* is the antiderivative of *f(x)*. Then, we have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a6711a17-581a-4a77-ada8-3f44f91423fc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s rewrite the preceding equation a bit so it becomes this equation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5e704612-aa00-44c4-84a9-17c644d2ed64.png)'
  prefs: []
  type: TYPE_IMG
- en: 'All we have done here is replace *x* with *t* and *b* with *x*. And we know
    that *F(x)-F(a)* is also a function. From this, we can derive the following property:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d357ce0d-925c-4388-80c6-9ac8bbb38341.png)'
  prefs: []
  type: TYPE_IMG
- en: We can derive the preceding property since *F(a)* is a constant and thus has
    the derivative zero.
  prefs: []
  type: TYPE_NORMAL
- en: 'By shifting our point of view a bit, we get the following function:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/469c5399-2588-4c5d-805e-5e480168fe10.png)'
  prefs: []
  type: TYPE_IMG
- en: Therefore, we get ![](img/d74d4c9a-2d0b-4c93-b890-b9e9bd4007cd.png).
  prefs: []
  type: TYPE_NORMAL
- en: In summary, if we integrate our function *f* and then differentiate it, we end
    up with the original function *f*.
  prefs: []
  type: TYPE_NORMAL
- en: Substitution rule
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Obviously, being able to find the antiderivative of a function is important,
    but the anti-differentiation formulas do not tell us how to evaluate every type
    of integral—for example, what to do when we have functions such as the following
    one:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/482474f9-c0c3-4c3e-a415-e46d0fac49b2.png)'
  prefs: []
  type: TYPE_IMG
- en: This isn't as straightforward as the examples we saw earlier. In this case,
    we need to introduce a new variable to help us out and make the problem more manageable.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s make our new variable *u*, and ![](img/19f8ee20-b90e-4fd6-8f10-e8cb83d42de4.png),
    and the differential of *u* is then ![](img/e6006c36-cbdf-4c48-abd6-1774b725a865.png).
    This changes the problem into the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/388f09d4-e250-4305-93f8-23cc5c3e9ac5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This is clearly a lot simpler. The antiderivative of this becomes the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2a27ca99-9c6e-46a8-9f81-88c90fe53fcd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'And by plugging in the original value ![](img/88197e12-4ec6-4db2-8782-5942162d3233.png),
    we get the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1157bd53-54d2-4bac-a00b-54575380879b.png)'
  prefs: []
  type: TYPE_IMG
- en: And there we have it.
  prefs: []
  type: TYPE_NORMAL
- en: 'This method is very useful, and works when we have problems that can be written
    in the following form:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/76b23ba9-216c-4318-8699-4b812d91d773.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If [![](img/ed09ae3b-2eb7-4d42-816b-851c2cf4cba8.png)], then the following
    applies:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/91b4ed55-cb15-4367-8a72-e33acc5b266c.png)'
  prefs: []
  type: TYPE_IMG
- en: That equation might be looking somewhat similar to you. And it should. It is
    the chain rule from differentiation.
  prefs: []
  type: TYPE_NORMAL
- en: Areas between curves
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We know that integration gives us the ability to find the area underneath a
    curve between two points. But now, suppose we want to find the area that lies
    between two graphs, as in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/823a8488-5a2d-45ce-93ea-3c2341ae7f3f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Our region *S*, as we can see, lies between the curves *f(x)* and *g(x)* in
    between the two vertical lines *x = a* and *x = b*. Therefore, we can take an
    approximation of the area between the curves to be the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/faaa6614-1128-4790-ae3e-89e5f53ee617.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can rewrite this as an integral, in the following form:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/29533d2e-fb17-493e-b8c1-c20174201a75.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To visualize this better and create an intuition of what is happening, we have
    the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dea92838-066b-4ec4-be9f-1ed245297494.png)'
  prefs: []
  type: TYPE_IMG
- en: Integration by parts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By now, we know that for every rule in differentiation, there is a corresponding
    rule in integration since they have an inverse relationship.
  prefs: []
  type: TYPE_NORMAL
- en: In the earlier section on differentiation, we encountered the product rule.
    In integration, the corresponding rule is known as integration by parts.
  prefs: []
  type: TYPE_NORMAL
- en: 'As a recap, the product rule states that if *f* and *g* are differentiable,
    then the following applies:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c88be3f5-0b11-41ea-b631-9ca184eb0761.png)'
  prefs: []
  type: TYPE_IMG
- en: 'And so, in integration, this becomes the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f981a162-de56-414f-b4d6-197d3cb77b84.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can rewrite this, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/81725a0d-9c73-4247-877d-7916f0731a05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can combine this formula with the fundamental theorem of calculus and obtain
    the following equation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cd0eb6dd-8f53-4fea-b151-6ab66c34f745.png)'
  prefs: []
  type: TYPE_IMG
- en: We can use this to evaluate the integral between the interval [*a, b*].
  prefs: []
  type: TYPE_NORMAL
- en: '**Note**: The term [![](img/31029f3c-de81-4781-aee8-1cf85f090b40.png) ]merely
    states that we plug in the value *b* in place of *x* and evaluate it, and then
    subtract it from the evaluation at *a*.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also use the preceding substitution method for integration by parts
    to make our lives easier when calculating the integral. We make [![](img/18be32d3-4434-4982-8ab6-36ba3548e529.png)] and [![](img/58b26dd3-447c-4ebe-b314-0fe72c383978.png)];
    then, the differentials are [![](img/ec51ec39-f497-4131-91a3-0fb26c3a8bfc.png)] and [![](img/1a940e5f-2e1e-44a9-80ee-e9e283f66b7c.png)].
    And so, the formula becomes this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3ceb179d-9272-41d8-807e-215833675629.png)'
  prefs: []
  type: TYPE_IMG
- en: Multivariable calculus
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have gone through single variable calculus and understand what calculus
    is about, it is time for us to go a step deeper and look at multivariable calculus.
    Multivariable calculus has a lot of similarities with single variable calculus,
    except—as the name suggests—here, we will be dealing with functions that accept
    two or more variables as input.
  prefs: []
  type: TYPE_NORMAL
- en: Multivariable calculus is used everywhere in the real world and has applications
    in every field and industry, from healthcare to economics, to finance, to robotics,
    to aerospace, and so on. An example of this could be trying to model how air curves
    around an airplane, to understand how aerodynamic it is and where the design of
    the airplane body can be improved. This is something we would not be able to do
    with single variable calculus.
  prefs: []
  type: TYPE_NORMAL
- en: Partial derivatives
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A partial derivative is a method we use to find the derivative of a function
    that depends on more than one variable, with respect to one of its variables,
    while keeping the others constant. This allows us to understand how a function
    is affected by a single variable instead of by all of them. Suppose we are modeling
    the price of a stock item, and the price depends on a number of different factors.
    We can vary one variable at a time to determine how much this change will affect
    the price of the stock item. This is different from taking a total derivative,
    where all the variables vary.
  prefs: []
  type: TYPE_NORMAL
- en: 'A multivariate function can have as many variables as you would look like,
    but to keep things simple, we will look at a function with two variables, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/49317bbb-48f4-47d2-89f3-c8d8be7d3591.png)'
  prefs: []
  type: TYPE_IMG
- en: This function looks a lot more complicated than the ones we have previously
    dealt with. Let's break it down. When we take the partial derivative of a function
    with respect to *x*, we find the rate of change of *z* as *x* varies, while keeping
    *y* constant. The same applies when we differentiate with respect to any other
    variable.
  prefs: []
  type: TYPE_NORMAL
- en: Let's visually imagine the *xy*-plane (a flat surface) as being the set of acceptable
    points that can be used as input to our function. The output, *z*, can be thought
    of as how much we are elevated (or the height) from the *xy*-plane.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by first differentiating the function with respect to ![](img/0b2dac96-00d5-4af1-87b9-d4a54051ecba.png),
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0f8712f5-2b14-4290-a5c8-baac7fcec4d7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This gives us the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/04024c91-c5ae-4c9a-9fbf-02b9d01e66ad.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we will differentiate with respect to *y*, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fbd57942-7492-4165-8e3e-f3b179a10a45.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This gives us the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3501ca6d-2b68-4800-a026-353cb16c51b7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As we saw earlier, in single variable differentiation, we can take second derivatives
    of functions (within reason, of course), but in multivariable calculus, we can
    also take mixed partial derivatives, as illustrated here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/655b50f4-ea62-490e-9788-c5dad3ab8f08.png)'
  prefs: []
  type: TYPE_IMG
- en: You may have noticed that when we take a mixed partial derivative, the order
    of the variables does not matter, and we get the same result whether we first
    differentiate with respect to *x* and then with respect to *y*, or vice versa.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also write this in another form that is often more convenient, and this
    is what we will be using in this book, going forward. The function is illustrated
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/685ffa19-a0fd-4d99-ba56-8fbe912ad858.png)'
  prefs: []
  type: TYPE_IMG
- en: Chain rule
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s take an arbitrary function *f* that takes variables *x* and *y* as input,
    and there is some change in either variable so that [![](img/ca1ff359-479b-4057-90c8-a882ece7af6a.png)].
    Using this, we can find the change in *f* using the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b77f4dbf-7a64-4ed0-b736-45daeeff4a34.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This leads us to the following equation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/85c8797e-e2af-4dbf-9621-fd060d37d0c3.png)'
  prefs: []
  type: TYPE_IMG
- en: Then, by taking the limit of the function as [![](img/91e4e54f-ec5a-4655-83d2-35d5ed41a518.png)],
    we can derive the chain rule for partial derivatives.
  prefs: []
  type: TYPE_NORMAL
- en: 'We express this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b0459ebf-42e3-4555-ab42-fd7aae96b3ed.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We now divide this equation by an additional small quantity (*t*) on which
    *x* and *y* are dependent, to find the gradient along [![](img/2c7e949d-030d-4521-9171-1d7279d7482e.png)].
    The preceding equation then becomes this one:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/866e0098-a54a-4cef-bc69-bf8d0e0e19bf.png)'
  prefs: []
  type: TYPE_IMG
- en: The differentiation rules that we came across earlier still apply here and can
    be extended to the multivariable case.
  prefs: []
  type: TYPE_NORMAL
- en: Integrals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As in the single variable case, we have antiderivatives and integrals for functions
    that depend on multiple variables as well. Earlier, we learned that an integral
    gives us the area under a curve [![](img/7acd24aa-85a0-44b8-9bda-f3aa4a16e818.png)] between
    an interval [*a, b*]. Now, instead of finding the area over an interval, we will
    be finding the volume under the graph [![](img/b95a54d1-f946-45ab-b528-284f70f82050.png)] over
    a region. The equation looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/540405b4-b445-4ccf-9ac9-c04d3b348304.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the preceding equation, *R* is a region in the *xy*-plane. Think of *R* as
    being cut into multiple small rectangular regions, denoted Δ*A.* Then, we can
    approximate the volume as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dc69db3c-edf2-47e2-885d-ec0b44dd7ecd.png)'
  prefs: []
  type: TYPE_IMG
- en: Additionally, [![](img/1d593af0-f0af-4c55-93de-f0a25bf3ce1e.png);] thus, [![](img/8821d935-1ebd-454f-9c25-89be013cc69b.png)].
  prefs: []
  type: TYPE_NORMAL
- en: '**Note**: A double integral is not the same as taking an integral twice.'
  prefs: []
  type: TYPE_NORMAL
- en: Now, instead of calculating over small rectangular regions, let's divide the
    region into long, thin slices of a fixed width Δ*x*. Sound familiar? It should,
    as this is very similar to what we did earlier in single variable integration.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s assign [![](img/1f2a4e61-beb2-4c8b-b219-2ec8d4d46c37.png)], and now,
    our integral takes the following form:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ad381372-6c96-4d98-ba5a-b0ec5d05a8d5.png)'
  prefs: []
  type: TYPE_IMG
- en: We then multiply the result by Δ*x*.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can now rewrite the integral, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c7688812-32f9-45d9-be9c-ad07a8d3507e.png)'
  prefs: []
  type: TYPE_IMG
- en: Here, [![](img/059c7dc0-8dda-4ea5-98cf-fad68596779d.png)] and [![](img/348bd2bf-f7ec-4cf6-a671-d76f137d3cb7.png)].
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose that we have the function [![](img/c61f3181-8c5e-4e0a-8d57-9bbcda8df208.png)] and
    the boundaries of the region are defined over [![](img/45cd31fb-bb39-48cc-af21-198902cc6188.png)] and [![](img/273110de-82bf-401e-a318-60fa2c14723d.png)].
    Then, the integral is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9922169b-a119-4039-852d-4da4e59c96c7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'And by evaluating the inner integral, we get the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/17115c30-bb32-4e01-85fb-d4485bc65613.png)'
  prefs: []
  type: TYPE_IMG
- en: 'And by evaluating the outer integral, we get the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/60e815a1-85d4-4c46-962f-778e95704725.png)'
  prefs: []
  type: TYPE_IMG
- en: And there you have it. That is how we find integrals of multivariable functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s now suppose that we have a function [![](img/b34be4a4-e527-4bbd-a05f-1b11575129d6.png)],
    and we evaluate the integral over the region where [![](img/059c7dc0-8dda-4ea5-98cf-fad68596779d.png)] and [![](img/348bd2bf-f7ec-4cf6-a671-d76f137d3cb7.png)].
    Then, we have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1889bd7c-a91e-4118-b998-bf7b2c3bd4b5.png)'
  prefs: []
  type: TYPE_IMG
- en: This is a direct result of the distributive law.
  prefs: []
  type: TYPE_NORMAL
- en: The region we have been integrating over so far has been rectangular, but this
    most likely will not always be the case. If the region is an irregular shape,
    then the limits of integration will vary at each slice.
  prefs: []
  type: TYPE_NORMAL
- en: The best way to deal with this is to write it as a function of the variable
    we are not integrating.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s suppose that we have [![](img/a5bc1222-27e0-467f-9f15-c0b6fa8ba798.png)],
    and the set of points it exists on is [![](img/f8676e09-4660-4e3d-88ad-a8f35eb3e361.png)], which
    tells us [![](img/d34ce71b-fa77-4f08-9013-2f941f66d70a.png)] and [![](img/a573c00d-bdf8-4a3d-a686-109e19ffd7e7.png)].
    We can now write this in the following form:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/031bf82e-ac78-4220-8c64-3fef3dfa3fad.png)'
  prefs: []
  type: TYPE_IMG
- en: Here, as we can see, *x* is defined on the interval [*a, b*], and *y* exists
    between two functions of *x—**g(x)* and *h(x)*.
  prefs: []
  type: TYPE_NORMAL
- en: We know from trigonometry, particularly the Pythagorean theorem, that the smallest
    value for *y* will be [![](img/53feae41-cc88-42b6-b143-635a407374af.png)]and the
    largest value will be [![](img/80008ff2-f60c-41ee-9122-1769fbe2d6f8.png)].
  prefs: []
  type: TYPE_NORMAL
- en: 'We can now proceed to rewrite the preceding set of points, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f3109bfc-d343-4a60-9d9c-9856c8c2291f.png)'
  prefs: []
  type: TYPE_IMG
- en: Changing it up and writing it this way slices the unit disk into vertical lines
    spaced apart by a fixed width.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, our integral becomes this one:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/35f179f9-865d-45eb-8d0d-af813394bdf8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'And because [![](img/1d8a39ee-0ac0-4f8e-a2c5-48575b4966cf.png)], we can rewrite
    the preceding integral, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e91a51cf-e4fe-4036-b05a-6088a9896e36.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We then proceed by evaluating the inner integral and then the outer integral,
    like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3ad754b2-0a8d-4517-9644-bf842e7a1999.png)'
  prefs: []
  type: TYPE_IMG
- en: We know this to be true from the area of a circle: [![](img/6077f9b6-feca-4d04-8f5d-f08c4b62ffdd.png)]
  prefs: []
  type: TYPE_NORMAL
- en: 'Some important properties for double integrals are shown in the following list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[![](img/515db093-9981-42e4-8863-17a0b05a2d79.png)]'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[![](img/e783f387-7d27-42f0-864a-524e4afdee3a.png)] , where *c* is some constant'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[![](img/585a4b82-4409-491c-a8cc-6441d0017c09.png)] if the *R* can be split
    into two regions, *R[1]* and *R[2]*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[![](img/e7c38ee1-ec4e-4b44-906b-bca50be88855.png)] when [![](img/182bc4ca-1bfd-467b-95be-8418aaf9765d.png)] for
    all [![](img/2650d259-2e72-4cb3-9b93-80720c70099e.png)]'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s now suppose we have a cylinder with a spherical top, as in the following
    diagram, and we want to find its volume. The region under the sphere is [![](img/bff95499-a648-44c6-a736-36e07ce66d84.png)] and
    inside the cylinder [![](img/6a5fac7f-a81c-420a-98ff-757aa5f503c4.png)] and above
    *z = 0*, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e2000541-b7aa-4343-acc7-5c4276b28fad.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We know that we find the volume of a region as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/18738304-ab2a-4a7f-9668-f5cbeeeaa0f3.png)'
  prefs: []
  type: TYPE_IMG
- en: To evaluate this integral, we start by rewriting the equation of the sphere
    into [![](img/6f2b4703-ca8a-4f9a-9512-3e345313b518.png)], and the set of points
    where *x* and *y* are defined is [![](img/3980fe21-c852-4765-8fb6-9a36d3bdb1c8.png)].
  prefs: []
  type: TYPE_NORMAL
- en: 'We rewrite our points and define the limits of the region in terms of polar
    coordinates *θ* and the radius *r*, so that the equation looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/918eabda-a108-417e-bd45-5076e30c61d2.png) and ![](img/8a539c2d-00c4-4a1e-855d-84060779733f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can now rewrite *z*, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b159ca1b-4e61-4b5f-9c49-219ba148608f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'So, the volume is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/684ef696-1257-424e-8218-3b95076d6d98.png)'
  prefs: []
  type: TYPE_IMG
- en: 'And by evaluating the inner and outer integrals, we get the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8f3b3e61-d4c0-42c4-8e4f-25a9bdac6c97.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We now know how to integrate our regions in ![](img/be1a346a-3930-4601-831f-2b50356df49d.png)and
    find the volume under the graph. But what about when we have regions in ![](img/d3408957-b006-4916-b42b-a1556c39659d.png)?
    Earlier, we used a double integral for two-dimensional regions; so, naturally,
    for a three-dimensional region, we will use three integrals. We write this as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6643df1f-06f4-46f8-a9ee-6069c228ee26.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Suppose now that the region we integrate over is defined by [![](img/e1e098bc-f518-4914-b23c-bfab40a61306.png)], [![](img/df14700a-c47b-4095-b4ee-e542809f2827.png)] and [![](img/2e3cc4b1-ff69-4b8c-8aab-7a7f138877e8.png)].
    The triple integral then becomes the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d74823b3-0240-49f9-8da5-9615d786ab8c.png)'
  prefs: []
  type: TYPE_IMG
- en: Earlier on, we came across something called substitution, where we made our
    function equal to a variable to make it easier for us to find the derivative.
    We can also do the same in integration.
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose we have the following integral:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/85a603b4-17c1-4b2b-8a6a-2d88a366688f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can make [![](img/3181bf85-00b1-4212-b19b-4cf253bf53ad.png)], and the integral
    then becomes this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c181f01c-467b-4770-a84d-068f1cf34219.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, let's move on to double integrals, and see how we can transform regions
    to make them easier for us to deal with. To do this, we will need to call on our
    old friend the Jacobian matrix for help.
  prefs: []
  type: TYPE_NORMAL
- en: 'As a refresher, suppose we have [![](img/01875f3d-69c9-4580-8595-3a6a34b9f357.png)] and [![](img/9411aa5d-5a9e-4023-8e85-44abb622d1a6.png).] Then,
    the Jacobian matrix is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bcfc4f85-904a-43c4-9e5f-36f41780011f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Also, recall that the Jacobian matrix can also be thought of as the determinant.
    So, we can rewrite the preceding equation as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/158f1b30-ba6b-42f6-af29-0b600946443e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Suppose now that we want to integrate [![](img/abb6174b-993e-4c49-8188-ed0c8d3547c8.png)] over
    *R*. Now, let''s make [![](img/01ad860b-f5c2-4c9d-8103-bb668d1bad2f.png)] and [![](img/1a2b5769-2606-4d8b-a88a-d9de179cbb77.png)],
    and rename our region as *S*. The integral now looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5cfe91ee-3bab-4679-b065-2b49edc0ce38.png)'
  prefs: []
  type: TYPE_IMG
- en: From this, we can easily observe that [![](img/fb76b78b-ec61-4c06-ba0b-e7da27b5cca5.png)].
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s move on to triple integrals now. Suppose we have a function [![](img/9a3f9cdb-f071-46bd-a95c-1d6635a619aa.png)] and
    we want to integrate it over *R*. We start by making [![](img/6a69125c-a4fa-4d35-8a1e-87945d9193e5.png)], [![](img/490c9f57-b1a9-4196-86d2-ffc3afa99bef.png)],
    and [![](img/e5c53871-9aab-4b25-a862-1098f1f868dd.png)], and as before, we rename
    the new region as *S*. The Jacobian matrix is then the following one:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/54edd27c-3db3-427f-b140-3321e8e42cc0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The triple integral now looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c715df27-41f9-45ca-a206-0bca0ac3fa5e.png)'
  prefs: []
  type: TYPE_IMG
- en: We now have a good enough understanding of multivariable calculus and are ready
    to dive into the wonderful world of vector calculus.
  prefs: []
  type: TYPE_NORMAL
- en: Vector calculus
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we find derivatives of functions with respect to vectors, we need to be
    a lot more diligent. And as we will see in [Chapter 2](6a34798f-db83-4a32-9222-06ba717fc809.xhtml),
    *Linear Algebra*, vectors and matrices are noncommutative and behave quite differently
    from scalars, and so we need to find a different way to differentiate them.
  prefs: []
  type: TYPE_NORMAL
- en: Derivatives
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Earlier, we saw that functions are differentiated by using the limit of the
    variable in the quotient. But vectors, as we know, are not like scalars in that
    we cannot divide by vectors, which creates the need for new definitions for vector-valued
    functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can define a vector function as a function ![](img/baaa0c31-2440-4d95-af1c-0dc465738402.png)—that
    is, it takes in a scalar value as input and outputs a vector. So, the derivative
    of *F* is defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/73f17a07-fd96-41ff-84e2-9a01df882f69.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the preceding equation, δ*x* is a small perturbation on *x*. Additionally,
    *F* is only differentiable if the following applies:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/28debd64-9863-4c3d-8cdc-3f641b306439.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can also write the preceding differential as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2dd006ae-a223-4d7c-b707-10af669d9952.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Generally, we differentiate vectors component-wise, so, the preceding differential
    becomes this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b619f706-e26f-4434-8d29-12113e2a71e9.png)'
  prefs: []
  type: TYPE_IMG
- en: Here *e[i]* is an orthonormal basis vector.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some rules for vector differentiation are shown in the following list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[![](img/7b3211b2-bf03-4c31-a867-f286fbe81e5e.png)]'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[![](img/8317c958-a8d9-45a6-87b3-19cf67f2ec7d.png)]'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[![](img/a644d6c9-9dd5-4728-b88f-f5775d9762c7.png)]'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[![](img/3f6ac63f-a704-48b3-a3ed-47355555c91d.png)]'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[![](img/0aabed2a-0d4d-49fb-ab54-83e738dbb91d.png)]'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[![](img/ff7680ac-a53a-4d1f-8d6b-3a0140d75994.png)]'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We know from earlier that we use the concept of limits to find the derivative
    of a function. So, let's see how we can find the limit of a vector. We use the
    concept of norms here. We say [![](img/7a930e9f-4bd6-4e79-bb69-4e828a091869.png)],
    and so, if [![](img/6c8151df-0a70-434f-8c1a-143626f33095.png)], then as ![](img/e4684acc-c400-4b7a-80b8-611c79274c47.png), [![](img/6dfc2246-e4d8-4b9d-b519-648ac878655f.png)].
  prefs: []
  type: TYPE_NORMAL
- en: 'Generally, the derivative is calculated in all possible directions. But what
    if we want to find it in only one particular direction *n* (unit vector)? Then,
    assuming *δr = hn*, we have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/732b2bd0-bc2a-49e1-8caf-9fcbc4476d77.png)'
  prefs: []
  type: TYPE_IMG
- en: 'From this, we can derive the directional derivative to be the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/38e35a69-562b-4d7f-97f1-35dbaaca52ea.png)'
  prefs: []
  type: TYPE_IMG
- en: This gives us the rate of change of *f* in this direction.
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose now that we have *n = e[i]*. Then, our directional derivative becomes
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/851f69d9-e6e9-4e64-a869-2d51ffbbf41b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Therefore, we have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c6dda802-9d49-4dd7-b1ff-995d80d6b7da.png)'
  prefs: []
  type: TYPE_IMG
- en: 'And so, the condition of differentiability now becomes the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9302ca7d-1848-4c3f-a19f-72a21777a9c7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can express this in differential notation, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/33b24343-477b-486d-9448-47805a69b0ce.png)'
  prefs: []
  type: TYPE_IMG
- en: This looks very similar to something we encountered earlier. It's the chain
    rule for partial derivatives.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s now take a function [![](img/3c259100-6e23-44b3-923a-b4f4faff313d.png)] that
    takes in a vector input ![](img/f79cb4fb-e733-4673-9198-c8f53ede5072.png) such
    that [![](img/3093bed9-02a2-47d8-a59c-bd8395c64976.png)]. The partial derivatives
    of this function are written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/32b5cfe8-6268-4037-b5da-edc66ab598de.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can then write this collectively as an ![](img/8fcea3db-709d-4595-9e05-a3d9a731be73.png) vector,
    which we write as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9b85addc-9c3d-4ea8-9cd6-14a49fd41342.png)'
  prefs: []
  type: TYPE_IMG
- en: Let's go a step further and imagine a vector function made of *m* different
    scalar functions, which take the vector *x* as input. We will write this as *y
    = f(x)*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Expanding *y = f(x)*, we get the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ccc9f4ee-acbf-4f9f-a4d7-d0886d56c6f3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s revisit the Jacobian matrix briefly. As you can see, it is simply an
    (*m×n*) matrix containing all the partial derivatives of the earlier vector function.
    We can see what this looks like here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0efbc5a3-52f8-4eee-a0dc-451ea275d204.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s go a step further and extend this definition to multiple functions.
    Here, we have *y*, which is the sum of two functions *f* and *g*, each taking
    in a different vectorial input, which gives us the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6152b8e1-6d89-403f-be4f-0fabe95214bb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'And for the sake of simplicity, *f*, *g*, *a*, and *b* are all *n*-dimensional,
    which results in an *n×n* matrix, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c3f6b60b-97de-4559-8739-74af67f45ef5.png)'
  prefs: []
  type: TYPE_IMG
- en: We can differentiate this matrix with respect to *a* or *b* and find the Jacobian
    matrix(es) for each.
  prefs: []
  type: TYPE_NORMAL
- en: 'By differentiating with respect to *a*, we get the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/577451d4-d89d-4fb6-aeb6-4d734198545a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'By differentiating with respect to *b*, we get the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/55ccdff4-7e3c-4f36-8d35-883c3d9eefc2.png)'
  prefs: []
  type: TYPE_IMG
- en: We can do the same for any type of element-wise operation on the two functions.
  prefs: []
  type: TYPE_NORMAL
- en: As in single variable and multivariable calculus, we have a chain rule for vector
    differentiation as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take the composition of two vector functions that take in a vector input [![](img/55234a66-e3ca-458f-bf8b-b96d1c553558.png)],
    and so the gradient of this will be [![](img/a26a06e2-32f9-4199-8676-ee745c44d543.png)],
    which looks similar to what we encountered before. Let''s expand this further,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cd154d02-0eb4-451c-8ff1-afe98b0df49e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the majority of cases, for arguments in the Jacobian matrix where *i ≠ j*,
    the argument tends to be zero, which leads us to the following definitions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/86ebc192-bf82-472a-b81e-238560ec44e6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'And so, the following applies:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/df26c76c-3949-4c97-848f-e78e0e9b4c0f.png)'
  prefs: []
  type: TYPE_IMG
- en: As we can see, this is a diagonal matrix.
  prefs: []
  type: TYPE_NORMAL
- en: Vector fields
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We define a vector field as a function ![](img/c9fd80cb-58a3-484e-9c45-059d1bba46c1.png),
    and it can only be differentiated if the following applies:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1672512e-0333-4a77-8850-d37aa0227177.png)'
  prefs: []
  type: TYPE_IMG
- en: Here, ![](img/1e791f2f-4bed-4985-86bc-786ed37144cf.png) is the derivative of
    *F*.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can think of *M* as a matrix that maps one vector to another, and we can
    now express *F* as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/40ae9d86-ade8-4a53-86f3-bdb7cb4ba1a8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here, [![](img/8a5ad17b-8451-478f-8945-f315e956e0be.png)] for all [![](img/c6f13406-4f09-4cac-9324-31f23e1487c1.png)],
    and therefore, the derivative of *F* is this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fc8e832a-f37e-4158-bd5b-859428967f5b.png)'
  prefs: []
  type: TYPE_IMG
- en: Earlier on in single and multivariable calculus, we learned the importance of
    the chain rule, so it should be no surprise that we have it in vector calculus
    as well. And it goes as follows.
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose we have [![](img/c5134051-782a-4efb-91bf-82bdd5b4c2c5.png)] and [![](img/6bd65aa9-8332-4748-b5a3-f85212838074.png)] and
    the coordinates are [![](img/0010a03b-86af-4b1f-947f-ae563fdf9d01.png)], [![](img/b0db5aa4-7aca-4251-8980-648c6cd9aa99.png)], and [![](img/09af3d54-44c2-45c2-a0e5-ab3b56dd9a42.png)].
    Then, the chain rule gives us the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2ddd83c8-d02a-4cb0-9c8a-0a629c4c4afc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can rewrite this in matrix form, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dac75952-d318-486e-b1c1-e0b3e6683ce4.png)'
  prefs: []
  type: TYPE_IMG
- en: Inverse functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Inverse functions are a rather fascinating class of functions in that if we
    have two functions and we apply them on each other, we receive the identity. Mathematically,
    we define this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Suppose we have [![](img/df0afc01-a820-471a-8a1c-069712ec8918.png)]. Then, they
    are only inverse functions if [![](img/1f43586d-7308-40b0-9ab0-83ae54133b02.png)].
    For example, we could have [![](img/933cf644-e772-4347-a255-aaf8c5dc70e3.png)] and [![](img/6b9d1fc1-0a0d-41a6-811d-7b3b81daf17e.png)].
    Therefore, [![](img/62ee60a8-4516-428e-9298-938b3f03204f.png)], which tells us
    that [![](img/e5a270c0-e9b6-44b3-9d72-4d4fa6d66e8c.png)].
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is another cool property that this has:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/106625a0-72e6-40d9-bf0f-df5310a346f0.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: And with that, we conclude our chapter on calculus. So far, we have learned
    about the fundamental concepts of single variable, multivariable, and vector calculus,
    and what it is that makes them so useful.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will move on to probability and statistics, and see
    how what we learned in linear algebra and calculus carries over into these fields.
  prefs: []
  type: TYPE_NORMAL
