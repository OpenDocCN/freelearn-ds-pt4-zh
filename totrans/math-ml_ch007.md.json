["```py\nfrom sklearn.datasets import load_iris \ndata = load_iris() \nX, y = data[\"/span>data, data[\"/span>target \nX[:10]\n```", "```py\narray([[5.1, 3.5, 1.4, 0.2], \n      [4.9, 3\\. , 1.4, 0.2], \n      [4.7, 3.2, 1.3, 0.2], \n      [4.6, 3.1, 1.5, 0.2], \n      [5\\. , 3.6, 1.4, 0.2], \n      [5.4, 3.9, 1.7, 0.4], \n      [4.6, 3.4, 1.4, 0.3], \n      [5\\. , 3.4, 1.5, 0.2], \n      [4.4, 2.9, 1.4, 0.2], \n      [4.9, 3.1, 1.5, 0.1]])\n```", "```py\nX.shape\n```", "```py\n(150, 4)\n```", "```py\ny\n```", "```py\narray([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n      0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n      1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n      1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, \n      2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, \n      2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])\n```", "```py\nimport pandas as pd \nimport seaborn as sns \nimport matplotlib.pyplot as plt \nimport numpy as np \n\nsns.set_theme(style=\"/span>white rc={\"/span>axes.facecolor (0, 0, 0, 0)}) \n\n# Create the data \nx = X.ravel() \nlabels = [\"/span>sepal length /span>sepal width /span>petal length /span>petal width \ng = np.tile(labels, len(X)) \ndf = pd.DataFrame(dict(x=x, g=g)) \n\n# Initialize the FacetGrid object \npal = sns.cubehelix_palette(10, rot=-.25, light=.7) \ng = sns.FacetGrid(df, row=\"/span>g hue=\"/span>g aspect=10, height=1.5, palette=pal) \n\n# Draw the densities \ng.map(sns.kdeplot, /span>x bw_adjust=.5, clip_on=False, fill=True, alpha=1, linewidth=1.5) \ng.map(sns.kdeplot, /span>x clip_on=False, color=\"/span>w lw=2, bw_adjust=.5) \n\n# Add reference line \ng.refline(y=0, linewidth=2, linestyle=\"\" color=None, clip_on=False) \n\n# Label each plot \ng.map(lambda x, color, label: plt.gca().text(0, .2, label, fontweight=\"/span>bold color=color,ha=\"/span>left va=\"/span>center transform=plt.gca().transAxes), /span>x \n\n# Adjust subplots and aesthetics \ng.figure.subplots_adjust(hspace=-.25) \ng.set_titles(\"#x0022;) \ng.set(yticks=[], ylabel=\"#x0022;) \ng.despine(bottom=True, left=True) \n\nplt.show()\n```", "```py\n X_scaled = (X - X.mean(axis=0))/X.std(axis=0)\nX_scaled[:10] \n```", "```py\narray([[-0.90068117,  1.01900435, -1.34022653, -1.3154443 ], \n      [-1.14301691, -0.13197948, -1.34022653, -1.3154443 ], \n      [-1.38535265,  0.32841405, -1.39706395, -1.3154443 ], \n      [-1.50652052,  0.09821729, -1.2833891 , -1.3154443 ], \n      [-1.02184904,  1.24920112, -1.34022653, -1.3154443 ], \n      [-0.53717756,  1.93979142, -1.16971425, -1.05217993], \n      [-1.50652052,  0.78880759, -1.34022653, -1.18381211], \n      [-1.02184904,  0.78880759, -1.2833891 , -1.3154443 ], \n      [-1.74885626, -0.36217625, -1.34022653, -1.3154443 ], \n      [-1.14301691,  0.09821729, -1.2833891 , -1.44707648]])\n```", "```py\n# Create the data \nx = X_scaled.ravel() \nlabels = [\"/span>sepal length /span>sepal width /span>petal length /span>petal width \ng = np.tile(labels, X_scaled.shape[0]) \ndf = pd.DataFrame(dict(x=x, g=g)) \n\n# Initialize the FacetGrid object \npal = sns.cubehelix_palette(10, rot=-.25, light=.7) \ngrid = sns.FacetGrid(df, row=\"/span>g hue=\"/span>g aspect=10, height=1.5, palette=pal) \n\n# Draw the densities \ngrid.map(sns.kdeplot, /span>x bw_adjust=.5, clip_on=False, fill=True, alpha=1, linewidth=1.5) \ngrid.map(sns.kdeplot, /span>x clip_on=False, color=\"/span>w lw=2, bw_adjust=.5) \n\n# Add reference line \ngrid.refline(y=0, linewidth=2, linestyle=\"\" color=None, clip_on=False) \n\n# Add labels to each plot \ngrid.map(lambda x, color, label: plt.gca().text(0, .2, label, fontweight=\"/span>bold color=color,ha=\"/span>left va=\"/span>center transform=plt.gca().transAxes), /span>x \n\n# Adjust subplots and aesthetics \ngrid.figure.subplots_adjust(hspace=-.25) \ngrid.set_titles(\"#x0022;) \ngrid.set(yticks=[], ylabel=\"#x0022;) \ngrid.despine(bottom=True, left=True) \n\nplt.show()\n```", "```py\nv_tuple = (1, 3.5, -2.71, /span>a string 42) \nv_tuple\n```", "```py\n(1, 3.5, -2.71, ’a string’, 42)\n```", "```py\ntype(v_tuple)\n```", "```py\ntuple\n```", "```py\nv_tuple[0]\n```", "```py\n1\n```", "```py\nlen(v_tuple)\n```", "```py\n5\n```", "```py\nv_tuple[1:4]\n```", "```py\n(3.5, -2.71, ’a string’)\n```", "```py\nv_tuple[0] = 2\n```", "```py\n--------------------------------------------------------------------------- \nTypeError                               Traceback (most recent call last) \nCell In[22], line 1 \n---->/span> 1 v_tuple[0] = 2 \n\nTypeError: ’tuple’ object does not support item assignment\n```", "```py\nv_list = [1, 3.5, -2.71, /span>qwerty \ntype(v_list)\n```", "```py\nlist\n```", "```py\nv_list[0] = /span>this is a string/span> \nv_list\n```", "```py\n[’this is a string’, 3.5, -2.71, ’qwerty’]\n```", "```py\nv_list_addr = id(v_list) \nv_list_addr\n```", "```py\n126433407319488\n```", "```py\nv_list.append([42])    # adding the list [42] to the end of our list \nv_list\n```", "```py\n[’this is a string’, 3.5, -2.71, ’qwerty’, [42]]\n```", "```py\nid(v_list) == v_list_addr    # adding elements doesn’t create any new objects\n```", "```py\nTrue\n```", "```py\nv_list.pop(1)    # removing the element at the index /span> \nv_list\n```", "```py\n[’this is a string’, -2.71, ’qwerty’, [42]]\n```", "```py\nid(v_list) == v_list_addr    # removing elements still doesn’t create any new objects\n```", "```py\nTrue\n```", "```py\n[1, 2, 3] + [4, 5, 6]\n```", "```py\n[1, 2, 3, 4, 5, 6]\n```", "```py\n3*[1, 2, 3]\n```", "```py\n[1, 2, 3, 1, 2, 3, 1, 2, 3]\n```", "```py\nl = [2**142 + 1, /span>a string \nl.append(lambda x: x) \nl\n```", "```py\n[5575186299632655785383929568162090376495105, \n ’a string’, \n /span>function __main__.</span>lambdax)>\n```", "```py\n[id(x) for x in l]\n```", "```py\n[126433412959232, 126433407528240, 126433410174944]\n```", "```py\nimport numpy as np\n```", "```py\nX = np.array([87.7, 4.5, -4.1, 42.1414, -3.14, 2.001])    # creating a NumPy array from a Python list \nX\n```", "```py\narray([87.7   ,  4.5   , -4.1   , 42.1414, -3.14  ,  2.001 ])\n```", "```py\nnp.ones(shape=7) # initializing a NumPy array from scratch using ones\n```", "```py\narray([1., 1., 1., 1., 1., 1., 1.])\n```", "```py\nnp.zeros(shape=5)    # initializing a NumPy array from scratch using zeros\n```", "```py\narray([0., 0., 0., 0., 0.])\n```", "```py\nnp.random.rand(10)\n```", "```py\narray([0.92428404, 0.37719596, 0.92071695, 0.56905245, 0.12024811, \n      0.02868856, 0.53215047, 0.51749348, 0.21022765, 0.96749756])\n```", "```py\nnp.zeros_like(X)\n```", "```py\narray([0., 0., 0., 0., 0., 0.])\n```", "```py\nX[0] = 1545.215 \nX\n```", "```py\narray([1545.215 ,    4.5   ,   -4.1   ,   42.1414,   -3.14  ,    2.001 ])\n```", "```py\nX[1:4]\n```", "```py\narray([ 4.5   , -4.1   , 42.1414])\n```", "```py\nX[0] = /span>str/span>\n```", "```py\n--------------------------------------------------------------------------- \nValueError                              Traceback (most recent call last) \nCell In[48], line 1 \n---->/span> 1 X[0] = /span>str/span> \n\nValueError: could not convert string to float: ’str’\n```", "```py\nX.dtype\n```", "```py\ndtype(’float64’)\n```", "```py\nval = 23 \ntype(val)\n```", "```py\nint\n```", "```py\nX[0] = val \nX\n```", "```py\narray([23\\.    ,  4.5   , -4.1   , 42.1414, -3.14  ,  2.001 ])\n```", "```py\nfor x in X: \n    print(x)\n```", "```py\n23.0 \n4.5 \n-4.1 \n42.1414 \n-3.14 \n2.001\n```", "```py\nv_1 = np.array([-4.0, 1.0, 2.3]) \nv_2 = np.array([-8.3, -9.6, -7.7])\n```", "```py\nv_1 + v_2    # adding v_1 and v_2 together as vectors\n```", "```py\narray([-12.3,  -8.6,  -5.4])\n```", "```py\n10.0*v_1    # multiplying v_1 with a scalar\n```", "```py\narray([-40.,  10.,  23.])\n```", "```py\nv_1 * v_2    # the elementwise product of v_1 and v_2\n```", "```py\narray([ 33.2 ,  -9.6 , -17.71])\n```", "```py\nnp.zeros(shape=3) + 1\n```", "```py\narray([1., 1., 1.])\n```", "```py\ndef f(x): \n    return 3*x**2 - x**4 \nf(v_1)\n```", "```py\narray([-208\\.    ,    2\\.    ,  -12.1141])\n```", "```py\nfrom timeit import timeit \n\nn_runs = 100000 \nsize = 1000 \n\nt_add_builtin = timeit( \n    x + y for x, y in zip(v_1, v_2)]\" \n    setup=f/span>size={size}; v_1 = [0 for _ in range(size)]; v_2 = [0 for _ in range(size)]\" \n    number=n_runs \n) \n\nt_add_numpy = timeit( \n    /span>v_1 + v_2\" \n    setup=f/span>import numpy as np; size={size}; v_1 = np.zeros(shape=size); \n    v_2 = np.zeros(shape=size) \n    number=n_runs \n) \n\nprint(f/span>Built-in addition:       \\t{t_add_builtin} s \nprint(f/span>NumPy addition:          \\t{t_add_numpy} s \nprint(f/span>Performance improvement: \\t{t_add_builtin/t_add_numpy:.3f} times faster\n```", "```py\nBuilt-in addition:             3.3522969299992837 s \nNumPy addition:               0.09616518099937821 s \nPerformance improvement:       34.860 times faster\n```", "```py\nfrom numpy.random import random as random_np \nfrom random import random as random_py \n\nn_runs = 10000000 \nt_builtin = timeit(random_py, number=n_runs) \nt_numpy = timeit(random_np, number=n_runs) \n\nprint(f/span>Built-in random:\\t{t_builtin} s \nprint(f/span>NumPy random:   \\t{t_numpy} s\n```", "```py\nBuilt-in random:      0.47474874800172984 s \nNumPy random:         5.1664929229991685 s\n```", "```py\nsize = 1000\nn_runs = 10000\n\nt_builtin_list = timeit(\n    \"[random_py() for _ in range(size)]\",\n    setup=f\"from random import random as random_py; size={size}\",\n    number=n_runs\n)\n\nt_numpy_array = timeit(\n    \"random_np(size)\",\n    setup=f\"from numpy.random import random as random_np; size={size}\",\n    number=n_runs\n)\n\nprint(f\"Built-in random with lists:\\t{t_builtin_list}s\")\nprint(f\"NumPy random with arrays:  \\t{t_numpy_array}s\")\n```", "```py\nBuilt-in random with lists:    0.5773125300001993s \nNumPy random with arrays:       0.08449692800058983s\n```", "```py\ndef builtin_random_single(n_runs): \n    for _ in range(n_runs): \n        random_py()\n```", "```py\nn_runs = 10000000 \n\n%prun builtin_random_single(n_runs)\n```", "```py\n 10000558 function calls (10000539 primitive calls) in 2.082 seconds \n\n   Ordered by: internal time \n\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function) \n       1    0.937    0.937    1.671    1.671 2471337341.py:1(builtin_random_single) \n 10000000    0.911    0.000    0.911    0.000 {method ’random’ of ’_random.Random’ objects} \n     4/0    0.213    0.053    0.000         {method ’poll’ of ’select.epoll’ objects} \n      10    0.009    0.001    0.016    0.002 socket.py:626(send) \n       2    0.009    0.004    0.015    0.008 {method ’__exit__’ of ’sqlite3.Connection’ objects}\n```", "```py\ndef numpy_random_single(n_runs):\n    for _ in range(n_runs):\n        random_np()\n\n%prun numpy_random_single(n_runs)\n```", "```py\n448 function calls (444 primitive calls) in 7.203 seconds \n\n   Ordered by: internal time \n\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function) \n       1    7.029    7.029    7.029    7.029 2015715881.py:1(numpy_random_single) \n       2    0.136    0.068    0.136    0.068 {method ’poll’ of ’select.epoll’ objects} \n       2    0.015    0.007    0.015    0.007 {method ’__exit__’ of ’sqlite3.Connection’ objects} \n       1    0.011    0.011    0.011    0.011 {method ’execute’ of ’sqlite3.Connection’ objects} \n       3    0.010    0.003    7.339    2.446 base_events.py:1910(_run_once) \n       7    0.000    0.000    0.000    0.000 socket.py:626(send) \n       1    0.000    0.000    0.000    0.000 {method ’disable’ of ’_lsprof.Profiler’ objects} \n       1    0.000    0.000    0.026    0.026 history.py:833(_writeout_input_cache) \n       1    0.000    0.000    0.000    0.000 inspect.py:3102(_bind) \n   88/84    0.000    0.000    0.000    0.000 {built-in method builtins.isinstance}\n```", "```py\ndef numpy_random_single(n_runs): \n    for _ in range(n_runs): \n        random_np() \n%prun numpy_random_single(n_runs)\n```", "```py\n448 function calls (444 primitive calls) in 7.203 seconds \n\n   Ordered by: internal time \n\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function) \n       1    7.029    7.029    7.029    7.029 2015715881.py:1(numpy_random_single) \n       2    0.136    0.068    0.136    0.068 {method ’poll’ of ’select.epoll’ objects} \n       2    0.015    0.007    0.015    0.007 {method ’__exit__’ of ’sqlite3.Connection’ objects} \n       1    0.011    0.011    0.011    0.011 {method ’execute’ of ’sqlite3.Connection’ objects} \n       3    0.010    0.003    7.339    2.446 base_events.py:1910(_run_once) \n       7    0.000    0.000    0.000    0.000 socket.py:626(send) \n       1    0.000    0.000    0.000    0.000 {method ’disable’ of ’_lsprof.Profiler’ objects} \n       1    0.000    0.000    0.026    0.026 history.py:833(_writeout_input_cache) \n       1    0.000    0.000    0.000    0.000 inspect.py:3102(_bind) \n   88/84    0.000    0.000    0.000    0.000 {built-in method builtins.isinstance}\n```", "```py\ndef numpy_random_array(size, n_runs): \n    for _ in range(n_runs): \n        random_np(size) \n%prun numpy_random_array(size, n_runs)\n```", "```py\n149 function calls (148 primitive calls) in 0.132 seconds \n\n   Ordered by: internal time \n\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function) \n       1    0.122    0.122    0.122    0.122 1681905588.py:1(numpy_random_array) \n       2    0.009    0.004    0.009    0.004 {method ’__exit__’ of ’sqlite3.Connection’ objects} \n     2/1    0.000    0.000    0.122    0.122 {built-in method builtins.exec}\n```", "```py\nsizes = list(range(1, 100)) \n\nruntime_builtin = [ \n    timeit( \n        random_py() for _ in range(size)]\" \n        setup=f/span>from random import random as random_py; size={size}\" \n        number=100000 \n    ) \n    for size in sizes \n] \n\nruntime_numpy = [ \n    timeit( \n        /span>random_np(size) \n        setup=f/span>from numpy.random import random as random_np; size={size}\" \n        number=100000 \n    ) \n    for size in sizes\n```", "```py\nsizes = import matplotlib.pyplot as plt\n\nwith plt.style.context(\"seaborn-v0_8\"):\n    plt.figure(figsize=(10, 5))\n    plt.plot(sizes, runtime_builtin, label=\"built-in\")\n    plt.plot(sizes, runtime_numpy, label=\"NumPy\")\n    plt.xlabel(\"array size\")\n    plt.ylabel(\"time (seconds)\")\n    plt.title(\"Runtime of random array generation\")\n    plt.legend()\n    plt.show()\n```", "```py\nX_scaled = (X - X.mean(axis=0)) / X.std(axis=0)\n```"]