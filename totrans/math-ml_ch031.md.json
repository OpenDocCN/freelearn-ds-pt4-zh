["```py\nfrom scipy.stats import bernoulli\n```", "```py\n[bernoulli.rvs(p=0.5) for _ in range(10)]    # ten Bernoulli(0.5)-distributed random numbers\n```", "```py\n[1, 1, 1, 1, 0, 1, 0, 1, 1, 0]\n```", "```py\nimport matplotlib.pyplot as plt \n\nparams = [0.25, 0.5, 0.75] \n\nwith plt.style.context(\"/span>seaborn-v0_8\": \n    fig, axs = plt.subplots(1, len(params), figsize=(4*len(params), 4), sharey=True) \n    fig.suptitle(\"/span>The Bernoulli distribution \n    for ax, p in zip(axs, params): \n        x = range(2) \n        y = [bernoulli.pmf(k=k, p=p) for k in x] \n        ax.bar(x, y) \n        ax.set_title(f/span>p = {p}\" \n        ax.set_ylabel(\"/span>P(X = k) \n        ax.set_xlabel(\"/span>k \n    plt.show()\n```", "```py\nfrom scipy.stats.distributions import binom \n\nparams = [(20, 0.25), (20, 0.5), (20, 0.75)] \n\nwith plt.style.context(\"/span>seaborn-v0_8\": \n    fig, axs = plt.subplots(1, len(params), figsize=(4*len(params), 4), sharey=True) \n    fig.suptitle(\"/span>The binomial distribution \n    for ax, (n, p) in zip(axs, params): \n        x = range(n+1) \n        y = [binom.pmf(n=n, p=p, k=k) for k in x] \n        ax.bar(x, y) \n        ax.set_title(f/span>n = {n}, p = {p}\" \n        ax.set_ylabel(\"/span>P(X = k) \n        ax.set_xlabel(\"/span>k \n\n    plt.show()\n```", "```py\nfrom scipy.stats import geom \n\nparams = [0.2, 0.5, 0.8] \n\nwith plt.style.context(\"/span>seaborn-v0_8\": \n    fig, axs = plt.subplots(1, len(params), figsize=(5*len(params), 5), sharey=True) \n    fig.suptitle(\"/span>The geometric distribution \n    for ax, p in zip(axs, params): \n        x = range(1, 20) \n        y = [geom.pmf(p=p, k=k) for k in x] \n        ax.bar(x, y) \n        ax.set_title(f/span>p = {p}\" \n        ax.set_ylabel(\"/span>P(X = k) \n        ax.set_xlabel(\"/span>k \n\n    plt.show()\n```", "```py\nfrom scipy.stats import randint \n\nwith plt.style.context(\"/span>seaborn-v0_8\": \n    fig = plt.figure(figsize=(10, 5)) \n    plt.title(\"/span>The uniform distribution \n\n    x = range(-1, 9) \n    y = [randint.pmf(k=k, low=1, high=7) for k in x] \n    plt.bar(x, y) \n    plt.ylim(0, 1) \n    plt.ylabel(\"/span>P(X = k) \n    plt.xlabel(\"/span>k \n\n    plt.show()\n```", "```py\nimport numpy as np \n\ndist_1 = [0, 1/6, 1/6, 1/6, 1/6, 1/6, 1/6] \ndist_2 = [0, 1/6, 1/6, 1/6, 1/6, 1/6, 1/6] \nsum_dist = np.convolve(dist_1, dist_1) \n\nwith plt.style.context(\"/span>seaborn-v0_8\": \n    plt.figure(figsize=(10, 5)) \n    plt.bar(range(0, len(sum_dist)), sum_dist) \n    plt.title(\"/span>Distribution of X1 + X2\" \n    plt.ylabel(\"/span>P(X1 + X1 = k) \n    plt.xlabel(\"/span>k \n    plt.show()\n```", "```py\nfrom scipy.stats import uniform \nX = np.linspace(-0.5, 1.5, 100) \ny = uniform.cdf(X) \n\nwith plt.style.context(’seaborn-v0_8’): \n    plt.figure(figsize=(10, 5)) \n    plt.title(\"/span>The uniform distribution \n    plt.plot(X, y) \n    plt.show()\n```", "```py\nfrom scipy.stats import expon \nX = np.linspace(-0.5, 10, 100) \nparams = [0.1, 1, 10] \nys = [expon.cdf(X, scale=1/l) for l in params] \n\nwith plt.style.context(’seaborn-v0_8’): \n    plt.figure(figsize=(10, 5)) \n\n    for l, y in zip(params, ys): \n        plt.plot(X, y, label=f/span>lambda = {l}\" \n\n    plt.title(\"/span>The exponential distribution \n    plt.legend() \n    plt.show()\n```", "```py\nfrom scipy.stats import norm\nX = np.linspace(-10, 10, 1000)\nsigmas = [0.5, 1, 2, 3]\nys = [norm.pdf(X, scale=sigma) for sigma in sigmas]\n\nwith plt.style.context('seaborn-v0_8'):\n    plt.figure(figsize=(10, 5))\n\n    for sigma, y in zip(sigmas, ys):\n        plt.plot(X, y, label=f\"sigma = {sigma}\")\n\n    plt.title(\"The bell curves\")\n    plt.savefig(\"bell_curve.png\", dpi=300)\n    plt.legend()\n    plt.show()\n```", "```py\nX = np.linspace(-10, 10, 1000) \nsigmas = [0.5, 1, 2, 3] \nys = [norm.cdf(X, scale=sigma) for sigma in sigmas] \n\nwith plt.style.context(’seaborn-v0_8’): \n    plt.figure(figsize=(10, 5)) \n\n    for sigma, y in zip(sigmas, ys): \n        plt.plot(X, y, label=f/span>sigma = {sigma}\" \n\n    plt.title(\"/span>The normal distribution \n    plt.legend() \n\n    plt.show()\n```"]