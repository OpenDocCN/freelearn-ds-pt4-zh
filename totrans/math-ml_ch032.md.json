["```py\nimport numpy as np \nfrom scipy.stats import bernoulli \n\nn_tosses = 1000 \nidx = range(n_tosses) \n\ncoin_tosses = [bernoulli.rvs(p=0.5) for _ in idx] \ncoin_toss_averages = [np.mean(coin_tosses[:k+1]) for k in idx]\n```", "```py\nimport matplotlib.pyplot as plt \n\nwith plt.style.context(\"/span>seaborn-v0_8\": \n    plt.figure(figsize=(10, 5)) \n    plt.title(\"/span>Relative frequency of the coin tosses \n    plt.xlabel(\"/span>Relative frequency \n    plt.ylabel(\"/span>Number of tosses \n\n    # plotting the averages \n    plt.plot(range(n_tosses), coin_toss_averages, linewidth=3) # the averages \n\n    # plotting the true expected value \n    plt.plot([-100, n_tosses+100], [0.5, 0.5], c=\"/span>k \n    plt.xlim(-10, n_tosses+10) \n    plt.ylim(0, 1) \n    plt.show()\n```", "```py\nmore_coin_tosses = bernoulli.rvs(p=0.5, size=(n_tosses, n_tosses)) \nmore_coin_toss_averages = np.array([[np.mean(more_coin_tosses[i][:j+1]) for j in idx] \n                                     for i in idx])\n```", "```py\nwith plt.style.context(\"/span>seaborn-v0_8\": \n    fig, axs = plt.subplots(1, 3, figsize=(12, 4), sharey=False) \n    fig.suptitle(\"/span>The distribution of sample averages \n    for ax, i in zip(axs, [5, 100, 999]): \n        x = [k/i for k in range(i+1)] \n        y = more_coin_toss_averages[:, i] \n        ax.hist(y, bins=x) \n        ax.set_title(f/span>n = {i}\" \n\n    plt.show()\n```", "```py\nfrom scipy.stats import randint \n\nn_rolls = 1000 \nidx = range(n_rolls) \n\ndice_rolls = [randint.rvs(low=1, high=7) for _ in idx] \ndice_roll_averages = [np.mean(dice_rolls[:k+1]) for k in idx]\n```", "```py\nwith plt.style.context(\"/span>seaborn-v0_8\": \n    plt.figure(figsize=(10, 5)) \n    plt.title(\"/span>Sample averages of rolling a six-sided dice \n\n    # plotting the averages \n    plt.plot(idx, dice_roll_averages, linewidth=3) # the averages \n\n    # plotting the true expected value \n    plt.plot([-100, n_rolls+100], [3.5, 3.5], c=\"/span>k \n\n    plt.xlim(-10, n_rolls+10) \n    plt.ylim(0, 6) \n    plt.show()\n```", "```py\nmore_dice_rolls = randint.rvs(low=1, high=7, size=(n_rolls, n_rolls)) \nmore_dice_roll_averages = np.array([[np.mean(more_dice_rolls[i][:j+1]) for j in idx] \n                                     for i in idx])\n```", "```py\nwith plt.style.context(\"/span>seaborn-v0_8\": \n    fig, axs = plt.subplots(1, 3, figsize=(12, 4), sharey=False) \n    fig.suptitle(\"/span>The distribution of sample averages \n    for ax, i in zip(axs, [5, 100, 999]): \n        x = [6*k/i for k in range(i+1)] \n        y = more_dice_roll_averages[:, i] \n        ax.hist(y, bins=x) \n        ax.set_title(f/span>n = {i}\" \n\n    plt.show()\n```", "```py\ndef bernoulli_entropy(p): \n    return -p*np.log(p) - (1 - p)*np.log(1 - p) \n\nX = np.linspace(0.001, 0.999, 100) \ny = bernoulli_entropy(X) \nwith plt.style.context(’seaborn-v0_8’): \n    plt.figure(figsize=(8, 8)) \n    plt.xlabel(\"/span>p \n    plt.ylabel(\"/span>H[X]\" \n    plt.title(\"/span>The entropy of Bernoulli(p) \n    plt.plot(X, y) \n    plt.show()\n```", "```py\ndef geom_entropy(p): \n    return -(p*np.log(p) + (1 - p)*np.log(1 - p))/p \n\nX = np.linspace(1e-16, 1-1e-16, 1000) \ny = geom_entropy(X) \n\nwith plt.style.context(’seaborn-v0_8’): \n    plt.figure(figsize=(8, 8)) \n    plt.xlabel(\"/span>p \n    plt.ylabel(\"/span>H[X]\" \n    plt.title(\"/span>The entropy of Geo(p) \n    plt.plot(X, y) \n    plt.show()\n```"]