- en: What is Matplotlib?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Matplotlib is a Python package for data visualization. It allows easy creation
    of various plots, including line, scattered, bar, box, and radial plots, with
    high flexibility for refined styling and customized annotation. The versatile
    `artist` module allows developers to define basically any kind of visualization.
    For regular usage, Matplotlib offers a simplistic object-oriented interface, the
    `pyplot` module, for easy plotting.
  prefs: []
  type: TYPE_NORMAL
- en: Besides generating static graphics, Matplotlib also supports an interactive
    interface which not only aids in creating a wide variety of plots but is also
    very useful in creating web-based applications.
  prefs: []
  type: TYPE_NORMAL
- en: Matplotlib is readily integrated into popular development environments, such
    as Jupyter Notebook, and it supports many more advanced data visualization packages.
  prefs: []
  type: TYPE_NORMAL
- en: Merits of Matplotlib
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are many advantages in creating data visualization with code so that the
    visualization streamlines into part of the result generation pipeline. Let's have
    a look at some of the key advantages of the Matplotlib library.
  prefs: []
  type: TYPE_NORMAL
- en: Easy to use
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Matplotlib plotting library is easy to use in several ways:'
  prefs: []
  type: TYPE_NORMAL
- en: Firstly, the object-oriented module structures simplify the plotting process.
    More often than not, we're only required to call `import maplotlib.pyplot as plt` to
    import the plotting API to create and customize many basic plots.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Matplotlib is highly integrated with two common data analytics packages, pandas
    and NumPy. For example, we can simply append `.plot()` to a pandas DataFrame such
    as by `df.plot()` to create a simple plot, and customize its styling with Matplotlib
    syntax.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For styling, Matplotlib offers functions to alter the appearance of each feature,
    and ready-made default style sheets are also available to avoid these extra steps
    when refined aesthetics is not required.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Diverse plot types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Often in data analytics, we need sophisticated plots to express our data. Matplotlib
    offers numerous plotting APIs natively, and is also the basis for a collection
    of third-party packages for additional functionalities, including:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Seaborn**: Provides simple plotting APIs, including some advanced plot types,
    with aesthetically appealing default styling'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**HoloViews**: Creates interactive plots with metadata annotation from bundled
    data'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Basemap/GeoPandas/Canopy**: Maps data values to colors on geographical maps'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We would learn some of the applications of these third-party packages in later
    chapters on advanced plotting.
  prefs: []
  type: TYPE_NORMAL
- en: Hackable to the core (only when you want)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When we want to go beyond the default settings to ensure that the resultant
    figure meets our specific purpose, we can customize the appearance and behaviors
    of each plot feature:'
  prefs: []
  type: TYPE_NORMAL
- en: Per-element styling is possible
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The ability to plot data values as colors and draw any shape of patches allows
    the creation of almost any kind of visualization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Useful in customizing plots created by extensions such as Seaborn
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Open source and community support
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As Matplotlib is open source, it enables developers and data analysts to use
    it for free. The users also have the freedom to improve and contribute to the
    Matplotlib library. As part of the open source experience, the users get prompt
    online support from the members of the global community on various platforms and
    forums.
  prefs: []
  type: TYPE_NORMAL
- en: What's new in Matplotlib 2.x?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Matplotlib supports Python 3 since version 1.2, released in 2013\. The Matplotlib 2.0 release
    introduced a number of changes and upgrades to improve data visualization projects.
    Let us look at some of the key improvements and upgrades.
  prefs: []
  type: TYPE_NORMAL
- en: Improved functionality and performance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Matplotlib 2.0 presents new features that improve user experience, including
    speed, and output quality, as well as resource usage.
  prefs: []
  type: TYPE_NORMAL
- en: Improved color conversion API and RGBA support
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The alpha channel that specifies the transparency level is fully supported in
    Matplotlib 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: Improved image support
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Matplotlib 2.0 now resamples images with less memory and less data type conversion.
  prefs: []
  type: TYPE_NORMAL
- en: Faster text rendering
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Community developers claim that the speed of text rendering by the `Agg` backend
    has improved by 20%.
  prefs: []
  type: TYPE_NORMAL
- en: Change in the default animation codec
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A very efficient codec, H.264, is now used as the default, which replaces MPEG-4,
    to generate video output for animated plots. With H.264, we can now have longer
    video record time and lesser data traffic and loading time thanks to the higher
    compression rate and smaller output file size. It is also noted that real-time
    playback of H.264 videos is better than those encoded in MPEG-4.
  prefs: []
  type: TYPE_NORMAL
- en: Changes in default styles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a number of style changes for improved visualization, such as more
    intuitive colors by default. We will discuss more in the chapter on figure aesthetics.
  prefs: []
  type: TYPE_NORMAL
- en: For details on all Matplotlib updates, you may visit [http://matplotlib.org/devdocs/users/whats_new.html](http://matplotlib.org/devdocs/users/whats_new.html).
  prefs: []
  type: TYPE_NORMAL
- en: Matplotlib website and online documentation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As developers, you probably recognize the importance of reading documentation
    and manuals to get acquainted with syntax and functionality. We would like to
    reiterate the importance of reading the library documentation and encourage you
    to do the same. You can find the documentation here: [https://matplotlib.org](https://matplotlib.org/). On
    the official Matplotlib website, you would find the documentation for each function,
    news of latest releases and ongoing development, and a list of third-party packages,
    as well as tutorials and galleries of example plots.
  prefs: []
  type: TYPE_NORMAL
- en: However, building advanced and sophisticated plots by reading through documentation
    from scratch means a much steeper learning curve and a lot more time spent, especially
    when the documentation is regularly updated for better comprehension. This book
    aims to provide the reader with a guided road-map to accelerate the learning process,
    save time and effort, and put theory into practice. The online manuals can serve
    as the atlases you can turn to whenever you want to explore further.
  prefs: []
  type: TYPE_NORMAL
- en: The Matplotlib source code is available on GitHub at [https://github.com/matplotlib/matplotlib](https://github.com/matplotlib/matplotlib).
    We encourage our readers to fork it and add their ideas!
  prefs: []
  type: TYPE_NORMAL
- en: Output formats and backends
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Matplotlib enables users to obtain output plots as static figures. The plots
    can also be piped and made responsive through interactive backends.
  prefs: []
  type: TYPE_NORMAL
- en: Static output formats
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Static images are the most commonly used output format for reporting and presentation
    purposes, and for our own quick inspection of data. Static images can be classified
    into two distinct categories.
  prefs: []
  type: TYPE_NORMAL
- en: Raster images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Raster is the classic image format that provides support to a wide variety of
    image files, including PNG, JPG and BMP. Each raster image can be seen as a dense
    array of color values. For raster images, resolution matters.
  prefs: []
  type: TYPE_NORMAL
- en: The amount of image details kept is measured in **dots per inch** (**DPI**).
    The higher the DPI value (that is, the more pixel dots kept in it), the clearer
    the resultant image would be, even when stretched to a larger size. Of course,
    the file size and computational resources needed for the rendering would increase
    accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: Vector images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For vector images, instead of a matrix of discrete color dots, information
    is saved as paths, which are lines joining dots. They scale without losing any
    details:'
  prefs: []
  type: TYPE_NORMAL
- en: SVG
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PDF
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up Matplotlib
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have a comprehensive overview of the capabilities and functionalities
    of Matplotlib, we are ready to get our hands dirty and work through some examples.
    We will begin after ensuring that we have set up the Matplotlib environment. Follow
    along the steps discussed to set up the environment.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since version 2.0, Matplotlib supports both Python 2.7 and 3.4+. We are using
    Python 3 in this book, which is the latest stable Python version. You can download
    Python from [http://www.python.org/download/](http://www.python.org/download/).
  prefs: []
  type: TYPE_NORMAL
- en: Python installation for Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Python comes as an installer or zipped source code for Windows. We recommend
    the executable installer. Choose the right computer architecture for the best
    performance. You can call Python in the Command Prompt by pressing the Windows
    + *R* keys and typing `cmd.exe`, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/78c14f01-eb5f-49d4-a56c-aee840e7d040.png)'
  prefs: []
  type: TYPE_IMG
- en: Python installation for macOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'macOS natively comes with Python 2.7\. To install Python 3.4+, download the
    installation wizard and follow the instructions. Following is a screenshot of
    the wizard at the first step:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6fa2f292-a7ed-4c0a-9020-3c1dd47a047c.png)'
  prefs: []
  type: TYPE_IMG
- en: Some Python packages require Xcode command-line tools to compile properly. Xcode
    can be obtained from the Mac App Store. To install the command-line tools, enter
    the following command in the Terminal: `xcode-select --install`. Then follow the
    installation prompts.
  prefs: []
  type: TYPE_NORMAL
- en: Python installation for Linux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Most Linux distributions have Python 3.4 preinstalled. You may confirm this
    by typing `python3` in the Terminal. If you see the following, it means Python
    3.4 is present:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'If the Python shell does not appear at the command, you can install Python
    3 with `apt`, the Linux software management tool:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The `build-essential` package contains compilers that are useful for building
    non-pure Python packages. Meanwhile, you may need to substitute `apt` with `apt-get` if
    you have Ubuntu 14.04 or older.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Matplotlib
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Matplotlib requires a large number of dependencies. We recommend installing
    Matplotlib by a Python package manager, which will help you to automatically resolve
    and install dependencies upon each installation or upgrade of a package. We will
    demonstrate how to install Matplotlib with `pip`.
  prefs: []
  type: TYPE_NORMAL
- en: About the dependencies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Matplotlib depends on a host of Python packages for background calculation,
    graphic rendering, interaction, and more. They are NumPy, libpng, and FreeType,
    and so on. Depending on the usage, users can install additional backend packages,
    such as PyQt5, for a better user interface.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the pip Python package manager
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We recommend installing Matplotlib using the Python package manager `pip`; it
    resolves basic dependencies automatically. `pip` is installed with `Python 2 >=
    2.7.9` or `Python 3 >= 3.4` binaries.
  prefs: []
  type: TYPE_NORMAL
- en: 'If `pip` is not installed, you may do so by downloading `get-pip.py` from [http://bootstrap.pypa.io/get-pip.py](http://bootstrap.pypa.io/get-pip.py),
    and running it in the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'To upgrade `pip` to the latest version, do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The documentation for `pip` can be found at [http://pip.pypa.io](http://pip.pypa.io/).
  prefs: []
  type: TYPE_NORMAL
- en: Installing Matplotlib with pip
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Enter `python3 -m pip install matplotlib` on the Terminal/Command Prompt to
    install. Add a `--user` option for `pip install` for users without root/admin
    rights where necessary.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Jupyter Notebook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To create our plots, we need a user-friendly development environment.
  prefs: []
  type: TYPE_NORMAL
- en: Jupyter Notebook provides an interactive coding ground to edit and run your
    code, display the results, and document them neatly. Data and methods can be loaded
    to the memory for reuse within a session. As each notebook is hosted as a web
    server, you can connect to notebook instances running at a remote server on a
    browser.
  prefs: []
  type: TYPE_NORMAL
- en: If you are excited to try it out before installing, you may go to [https://try.jupyter.org](https://try.jupyter.org/) and
    open a Python 3 notebook.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install Jupyter, type this in your console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Starting a Jupyter Notebook session
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Just type `jupyter notebook` in the console. This will start a Jupyter Notebook
    session as a web server.
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, a notebook session should pop up on your default browser. To manually
    open the page, type `localhost:8888` as the URL. Then you will enter the following
    home page of the Jupyter Notebook:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c65bbed6-9858-43ca-a60e-5d40fa199339.png)'
  prefs: []
  type: TYPE_IMG
- en: You can choose to host the notebook on different ports, for instance, when you
    are running multiple notebooks. You can specify the port to use with the `--port=<customportnum>` option.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since the release of 4.3, token authentication has been added to Jupyter, so
    you may be asked for a token password before entering the notebook home page, as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/91507fbc-f312-4612-9724-ea789ab67dd0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To retrieve the token, such as when visiting the running notebook from a different
    browser or machine, you may call `jupyter notebook list` from the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8f7d0c80-5102-4976-a573-e013dabcee4b.png)'
  prefs: []
  type: TYPE_IMG
- en: Running Jupyter Notebook on a remote server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To open a notebook running on a remote server, you may set up port forwarding
    during SSH, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Then you may open the notebook again with `localhost:8888` as the URL.
  prefs: []
  type: TYPE_NORMAL
- en: When multiple users are running Jupyter Notebooks on the same server on the
    same port (say the default, `8888`) and each uses the same port forwarding, there
    is a possibility that your notebook content will be forwarded to another user
    who cannot read his/her own content without changing the port. While this might
    be fixed with later releases, it is recommended to change the port from the default.
  prefs: []
  type: TYPE_NORMAL
- en: 'To upgrade from a previous version, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '`pip` will automatically collect and install the Matplotlib dependencies for
    you.'
  prefs: []
  type: TYPE_NORMAL
- en: Editing and running code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A Jupyter Notebook has boxes called **cells**. It begins with the text input
    area for code editing, known as the gray box cell, by default. To insert and edit
    the code do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Click inside the gray box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type your Python code inside it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the play button or press *Shift* + *Enter* to run the current cell
    and move the cursor to the next cell:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a514e680-8386-41d2-a451-5515181c9852.png)'
  prefs: []
  type: TYPE_IMG
- en: Once a cell is run, the relevant data and methods are loaded to the memory and
    can be used across cells in the same notebook kernel. No reloading is needed unless
    for an intended change. This saves effort and time in debugging and reloading
    large datasets.
  prefs: []
  type: TYPE_NORMAL
- en: Manipulating notebook kernel and cells
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can use the toolbar at the top to manipulate cells and the kernel. The
    available functions are annotated as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1ea382b7-c667-4225-8375-f3893d1e2d16.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Verify your output amount before running a cell! A huge output stream doesn''t
    usually kill your console, but it can easily crash your browser and notebook in
    a matter of seconds. This issue has been addressed since Jupyter 4.2 by stopping
    large output. However, it does not guarantee to capture all non-stop output. Therefore,
    readers are advised to exercise caution and avoid attempts to obtain large output
    results in a notebook cell. Consider slicing it for a glimpse or obtaining output
    in another file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d00f4180-4bf4-45b5-a23b-78ebc0519892.png)'
  prefs: []
  type: TYPE_IMG
- en: Embed your Matplotlib plots
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Matplotlib is highly integrated into Jupyter Notebook. Use the Jupyter built-in
    *magic* command `%matplotlib inline` (set as default in the current release) to
    display resultant plots as static image output at each cell:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/10ec035e-61bf-422b-aba3-827dd767f8d5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Alternatively, you can run a magic cell command—`%matplotlib notebook` to use
    the interactive Matplotlib GUI for zooming or rotating in the same output area:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1fc043f2-5808-469e-aead-fe36030907a8.png)'
  prefs: []
  type: TYPE_IMG
- en: Documenting in Markdown
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Jupyter Notebook supports Markdown syntax for organized documentation:'
  prefs: []
  type: TYPE_NORMAL
- en: Select Markdown from the drop-down list in the toolbar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write your notes in the gray input box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on Run or *Shift* + *Enter*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e8c394d9-ac9e-4435-9715-769a9fe04236.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After running the cell, the text will be styled in the display:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e4dd6677-6d1d-45a3-b239-471a091ee090.png)'
  prefs: []
  type: TYPE_IMG
- en: You can find a detailed Markdown cheat sheet by Adam Pritchard at [https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet](https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet).
  prefs: []
  type: TYPE_NORMAL
- en: Save your hard work!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Jupyter Notebook auto-saves itself every 2 minutes. As good practice, you should
    save it yourself more often by clicking on the floppy icon on the toolbar, or
    more conveniently by *Ctrl* + *S*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Each project you open on Jupyter is saved as the JSON-based `.ipynb` notebook
    format:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4c0f2039-c640-4bfc-8fc2-2800defbe691.png)'
  prefs: []
  type: TYPE_IMG
- en: The `.ipynb` notebook is portable across different Jupyter servers. Notebooks
    can be exported as basic runnable Python script `.py`, Markdown `.md` for documentation,
    and web page format `.html` for instant display of the flow of your project without
    having the readers install Jupyter Notebook in advance. It also supports LaTex
    format and PDF conversion via LaTex upon installation of the dependency Pandoc.
    If interested, you may check out the installation instructions at [http://pandoc.org/installing.html](http://pandoc.org/installing.html).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Woo-hoo! We've taken our first steps in our Matplotlib journey together. You
    can rest assured you have a comprehensive understanding of Matplotlib's capabilities
    and also have the requisite environment set up. Now that we have successfully
    ventured into data visualization and gotten our feet wet, let's go ahead and build
    our first plots!
  prefs: []
  type: TYPE_NORMAL
