["```py\nimport matplotlib.pyplot as plt\nfor i in range(10):\n    plt.plot([i]*5,c='C'+str(i),label='C'+str(i))\nplt.xlim(0,5)\nplt.legend()\nplt.show()\n```", "```py\nimport matplotlib as mpl \nmpl.rcParams['axes.prop_cycle']\n```", "```py\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nN = M = 200\nX, Y = np.ogrid[0:20:N*1j, 0:20:M*10]\ndata = np.sin(np.pi * X*2 / 20) * np.cos(np.pi * Y*2 / 20)\n\nfig, (ax2, ax1) = plt.subplots(1, 2, figsize=(7, 3)) # cmap=viridis by default\nim = ax1.imshow(data, extent=[0, 200, 0, 200])\nax1.set_title(\"v2.0: 'viridis'\")\nfig.colorbar(im, ax=ax1, shrink=0.85)\n\nim2 = ax2.imshow(data, extent=[0, 200, 0, 200], cmap='jet')\nfig.colorbar(im2, ax=ax2, shrink=0.85)\nax2.set_title(\"classic: 'jet'\")\n\nfig.tight_layout()\nplt.show()\n```", "```py\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.colors\n\n# Create a 30 random dots\nnp.random.seed(52)\nx,y,c = zip(*np.random.rand(30,3))\n\n# Create a custom linear colormap\ncmap = matplotlib.colors.LinearSegmentedColormap.from_list(\"\", [\"red\",\"yellow\",\"green\"])\n\nplt.scatter(x,y,c=c, cmap=cmap)\nplt.colorbar()\nplt.show()\n```", "```py\nimport matplotlib.pyplot as plt\nfrom matplotlib.lines import Line2D\n\nfor i,marker in enumerate(Line2D.markers):\n    plt.scatter(i%10,i,marker=marker,s=100) # plot each of the markers in size of 100\nplt.show()\n```", "```py\nimport matplotlib.pyplot as plt\nfrom matplotlib.lines import Line2D\n\ncustom_markers = ['$'+x+'$' for x in ['\\$','\\%','\\clubsuit','\\sigma','']]\nfor i,marker in enumerate(custom_markers):\n    plt.scatter(i%10,i,marker=marker,s=500) # plot each of the markers in size of 100\nplt.show()\n```", "```py\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.colors\n\n# Prepare a list of integers\nn = list(range(5))\n\n# Prepare a list of sizes that increases with values in n\ns = [i**2*100+100 for i in n]\n\n# Prepare a list of colors\nc = ['red','orange','yellow','green','blue']\n\n# Draw a scatter plot of n points with sizes in s and colors in c\nplt.scatter(n,n,s=s,c=c)\n\n# Draw a line plot with n points with black cross markers of size 12\nplt.plot(n,marker='x',color='black',ms=12)\n\n# Set axis limits to show the markers completely\nplt.xlim(-0.5,4.5)\nplt.ylim(-1,5)\n\nplt.show()\n```", "```py\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.colors\n\n# Prepare data points\nx = list(range(5))\ny = [1]*5\n\n# Set the face color, edge color, and edge width of markers\nplt.plot(x,y,marker='o',ms=36,markerfacecolor='floralwhite',markeredgecolor='slateblue',markeredgewidth=10)\n\nplt.show()\n```", "```py\nimport matplotlib.pyplot as plt\n\n# Prepare 4 data series of sine curves\ny = [np.sin(i) for i in np.arange(0.0, 10.0, 0.1)]\n\ndash_capstyles = ['-','--','-.','.',':']\n\n# Plot each data series in different cap dash styles\nfor i,x in enumerate(dash_capstyles):\n    plt.plot([n*(i+1) for n in y],x,label=x)\n\nplt.legend(fontsize=16,loc='lower left')\nplt.show()\n```", "```py\nimport matplotlib.pyplot as plt\n\n# Prepare 4 data series of sine curves\ny = list(range(10))\n\ndash_capstyles = ['butt','projecting','round']\n\n# Plot each data series in different cap dash styles\nfor i,x in enumerate(dash_capstyles):\n plt.plot([n*(i+1) for n in y],lw=10,ls='--',dash_capstyle=x,label=x)\n\nplt.legend(fontsize=16)\nplt.show()\n```", "```py\n\nimport matplotlib.pyplot as plt\n\ny = list(range(4))\nplt.plot(y)\n\n# Store the current axes as ax\nax = plt.gca()\n\n# Set the spine properties\nax.spines['left'].set_linewidth(3)\nax.spines['bottom'].set_linewidth(3)\nax.spines['left'].set_color('darkblue')\nax.spines['bottom'].set_color('darkblue')\nax.spines['right'].set_visible(False)\nax.spines['top'].set_visible(False)\n\nplt.show()\n```", "```py\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nnp.random.seed(8)\nx = np.random.binomial(100, 0.5, size=10000)\nplt.hist(x,bins=20) # or plt.hist(x,20)\nplt.show()\n```", "```py\nimport matplotlib.pyplot as plt\n\n# Data retrieved from https://coinmarketcap.com on Jan 8, 2018\n# Prepare the data series\ncc = ['BTC','XRP','ETH','BCH','ADA']\ncap = [282034,131378,107393,49999,26137]\n\n# Plot the bar chart\nplt.bar(cc,cap)\nplt.title('Market capitalization of five top cryptocurrencies in Jan 2018')\nplt.xlabel('Crytocurrency')\nplt.ylabel('Market capitalization (million USD)')\nplt.show()\n```", "```py\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndf = pd.DataFrame({'cc':cc,'cap':cap}, legend=False)\n\nax = df.plot(kind='bar')\nax.set_xticklabels(df['cc'])\n\nplt.title('Market capitalization of five top cryptocurrencies in Jan 2018')\nplt.xlabel('Crytocurrency')\nplt.ylabel('Market capitalization (million USD)')\nplt.show()\n```", "```py\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Prepare the data series\nlabels_drug = ['Drug (Before)', 'Drug (After)']\nlabels_placebo = ['Placebo (Before)', 'Drug (After)']\ndrug = [2.88,1.42]\nplacebo = [2.72,2.68]\nyerr_drug = [0.12,0.08]\nyerr_placebo = [0.24,0.13]\n\ndf = pd.DataFrame([drug,placebo])\ndf.columns = ['Before', 'After']\ndf.index = ['Drug','Placebo']\n\n# Plot the bar chart with error bars\ndf.plot(kind='bar',width=0.4,color=['midnightblue','cornflowerblue'],\\\n        yerr=[yerr_drug,yerr_placebo])\n\nplt.title('Effect of Drug A Treatment')\nplt.xlabel('Condition')\nplt.ylabel('[hsCRP] (mg/L)')\nplt.xticks(rotation=0) # to keep the xtick labels horizontal\nplt.legend(loc=(0.4,0.8))\n\nplt.show()\n```", "```py\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Prepare data for a sine curve\nx = np.arange(0, 5, 0.3)\ny = np.sin(-x)\n\n# Prepare random error to plot the error bar\nnp.random.seed(100)\ne1 = 0.1 * np.abs(np.random.randn(len(y)))\n\n# Plotting the error bar\nplt.errorbar(x, y, yerr=e1, fmt='.-')\nplt.show()\n```", "```py\n# Data obtained from https://trends.builtwith.com/web-server on Jan 06, 2017\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(4,4))\n\nx = [0.31,0.3,0.14,0.1,0.15]\nlabels = ['nginx','Apache','IIS','Varnish','Others']\nplt.pie(x,labels=labels,autopct='%1.1f%%')\nplt.title('Web Server Usage Statistics')\nplt.show()\n```", "```py\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(4,4))\nx = [0.1,0.3]\nplt.pie(x)\nplt.show()\n```", "```py\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ntheta = np.arange(0., 2., 1./180.)*np.pi\nplt.polar(3*theta, theta/6)\nplt.polar(theta, np.cos(6*theta))\nplt.polar(theta, [1.2]*len(theta))\n\nplt.savefig('mpldev_03_polarrose.png')\nplt.show()\n```", "```py\nplt.text(0.25,0.5,'Hello World!',fontsize=30)\nplt.show()\n```", "```py\nplt.title(r'$\\alpha > \\beta$')\nplt.show()\n```", "```py\nimport matplotlib.pyplot as plt\n\nplt.axis([0, 9, 0, 18])\narrstyles = ['-', '->', '-[', '<-', '<->', 'fancy', 'simple', 'wedge']\nfor i, style in enumerate(arrstyles):\n plt.annotate(style, xytext=(1, 2+2*i), xy=(4, 1+2*i), \\\n arrowprops=dict(arrowstyle=style))\nconnstyles=[\"arc\", \"arc,angleA=10,armA=30,rad=15\", \\\n \"arc3,rad=.2\", \"arc3,rad=-.2\", \"angle\", \"angle3\"]\n\nfor i, style in enumerate(connstyles):\n plt.annotate(\"\", xytext=(6, 2+2*i), xy=(8, 1+2*i), \\\n arrowprops=dict(arrowstyle='->', connectionstyle=style))\n\nplt.show()\n\n```", "```py\n## Available styles\n Matplotlib provides a number of pre-built style sheets. You can check them out by with `matplotlib.style.available`.\n\nimport matplotlib as mpl\nmpl.style.available\n\nOut[1]: ['seaborn-talk',\n'seaborn-poster',\n'_classic_test',\n'seaborn-ticks',\n'seaborn-paper',\n'ggplot',\n'seaborn',\n'seaborn-dark',\n'seaborn-bright',\n'seaborn-pastel',\n'fivethirtyeight',\n'Solarize_Light2',\n'classic',\n'grayscale',\n'bmh',\n'seaborn-dark-palette',\n'seaborn-whitegrid',\n'seaborn-white',\n'dark_background',\n'seaborn-muted',\n'fast',\n'seaborn-notebook',\n'seaborn-darkgrid',\n'seaborn-colorblind',\n'seaborn-deep']\n```"]