- en: Decorating Graphs with Plot Styles and Types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we learned some basic concepts to draw line and scatter
    plots with Matplotlib, and made adjustments to a few elements. Now that we are
    familiar with the Matplotlib syntax, we are ready to go further and explore the
    potential of Matplotlib.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will discuss:'
  prefs: []
  type: TYPE_NORMAL
- en: Color specification
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Line style customization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Point style customization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More native plot types
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inserting text and other annotations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Considerations in plot styling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Controlling the colors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Color is an essential element in any visual. It can have a huge impact on how
    graphics are perceived. For example, sharp color contrast can be used to highlight
    a focus; a combination of several distinct colors is useful in setting up a hierarchy.
  prefs: []
  type: TYPE_NORMAL
- en: In Matplotlib 2, colors have been set by default to better differentiate between
    categories; and to perceive continuous numerical values more intuitively, yet
    we often need better control over the colors to represent our data. In this section,
    we will introduce the common color options in Matplotlib.
  prefs: []
  type: TYPE_NORMAL
- en: Default color cycle
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A color cycle is a list of colors used to control the color of a series of
    elements automatically, such as each data series in multiline plots. In Matplotlib
    2.0, the default color cycle has expanded from 7 to 10 colors using the *category10*
    palette in **Data-Driven Documents** (**D3**)[https://github.com/d3](https://github.com/d3) and
    Vega, a declarative language for visualization grammar. These colors are designed
    to show good contrast between distinct categories. Each color is named `''C0''`
    to `''C9''`, and can be called in manually by specifying a color in the preset
    color cycle. Here is a toy example of a multiline plot with each color in the
    default cycle:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the figure output. The legend displays the name of each color
    in the default cycle:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5da8130d-045f-4230-95bc-c7000c1c643b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To access the hexadecimal codes of the colors, you may use the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Single-lettered abbreviations for basic colors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are several common colors with built-in, single-lettered standard abbreviations
    for quick use. They are listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`''b''`: Blue'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''g''`: Green'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''r''`: Red'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''c''`: Cyan'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''m''`: Magenta'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''y''`: Yellow'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''k''`: Black'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''w''`: White'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Standard HTML color names
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we want to quickly build a palette from a wider range of colors, names
    in plain English may be more intuitive to start with than numerical code. There
    are more than a hundred different color names that are supported by HTML on all
    modern browsers. They are well supported in Matplotlib, for example, salmon, orange,
    yellow-green, chocolate, and cornflower blue.
  prefs: []
  type: TYPE_NORMAL
- en: You can find the full list with matched colors and names at: [https://matplotlib.org/examples/color/named_colors.html](https://matplotlib.org/examples/color/named_colors.html).
    The corresponding hexadecimal code is available at: [https://www.w3schools.com/colors/colors_names.asp](https://www.w3schools.com/colors/colors_names.asp).
  prefs: []
  type: TYPE_NORMAL
- en: RGB or RGBA color code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A color can also be specified as a tuple of three to four float numbers between
    zero and one, such as `(0.1,0.1,0.2)` or `(0.2,0.2,0.3,0.8)`. The first three
    numbers define how much red, green, and blue light should be mixed into the desired
    color output. The optional fourth number is the alpha value to control the transparency
    level.
  prefs: []
  type: TYPE_NORMAL
- en: Hexadecimal color code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Similar to RGBA values, hexademical (hex) color codes control the amount of
    red, green, and blue light. They also control transparency with a two-digit hex
    number, each starting with a hash sign `'#'`, for instance, `'#81d8d0ec'`. Therefore,
    pure red, green, blue, black, and white's hex codes are `'#ff0000'`, `'#00ff00'`,
    `'#0000ff'`, `'#000000'`, and `'#ffffff'`, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: Depth of grayscale
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can specify any value within *0-1* in a string of a float number, such as
    `'0.5'`. A smaller number gives a darker shade of gray.
  prefs: []
  type: TYPE_NORMAL
- en: Colormaps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Colormaps map numerical values to a range of colors.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since Matplotlib 2.0, the default colormap has been changed from `''jet''`,
    which spans the visible light spectrum from red to blue, to `''viridis''`, which
    is a perceptually uniform continuum from yellow to blue. This makes it more intuitive
    to perceive continuous values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Check out the following image generated with the preceding code to understand
    what perceptual color uniformity means:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f8c5798f-add3-4613-9c72-952b6697cf7b.png)'
  prefs: []
  type: TYPE_IMG
- en: Matplotlib also provides a number of preset colormaps that are optimized for
    displaying diverging values or qualitative categories. Feel free to check them
    out at: [https://matplotlib.org/2.1.0/tutorials/colors/colormaps.html](https://matplotlib.org/2.1.0/tutorials/colors/colormaps.html).
  prefs: []
  type: TYPE_NORMAL
- en: Creating custom colormaps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can set up our own colormap. This is useful when customizing heatmaps and
    surface plots.
  prefs: []
  type: TYPE_NORMAL
- en: 'A simple way to create a custom linear colormap is to prepare a list of colors
    and allow Matplotlib to handle the transition. Let''s look at the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we have a scatter plot with a colormap set up on our own, morphing from
    `red` through `yellow` to `green`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d12da00a-66b6-4719-aac4-aac066efe7c8.png)'
  prefs: []
  type: TYPE_IMG
- en: Line and marker styles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have demonstrated how to draw line plots and scatter plots in the previous
    chapter. We know that scatter plots are made up of dots denoting each data point,
    whereas line plots are generated by joining dots of data points. In Matplotlib,
    the marker to mark the location of data points can be customized to have different
    styles, including shape, size, color, and transparency. Similarly, the line segments
    joining the data points as well as different 2D lines that share the same class
    in the object-oriented Matplotlib structure can have their styles adjusted, as
    briefly demonstrated in the grid section of the previous chapter. Adjusting marker
    and line styles is useful in making the data series more distinguishable, and
    sometimes for aesthetic considerations. In this section, we will go through the
    details and implementation methods of marker and line styles in Matplotlib.
  prefs: []
  type: TYPE_NORMAL
- en: Marker styles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For markers denoting data points, we can adjust their shapes, sizes, and colors.
    By default, Matplotlib draws markers as single round dots. Here, we introduce
    the methods of adjustment.
  prefs: []
  type: TYPE_NORMAL
- en: Choosing the shape of markers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are dozens of available markers to denote data points. They are grouped
    into unfilled `markers` and the bolder `filled_markers`. Here are a few examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '`''o''`: Circle'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''x''`: Cross'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''+''`: Plus sign'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''P''`: Filled plus sign'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''D''`: Filled diamond'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''s''`: Square'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''^''`: Triangle'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We can access the keys and names of all available marker shapes under `mpl.lines.Line2D.markers`.
    The following is a code snippet for an overview of all our marker shapes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the graphical output of the markers:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8b3e8a2e-494a-4f38-bd0c-85f8812d7845.png)'
  prefs: []
  type: TYPE_IMG
- en: Using custom characters as markers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Matplotlib supports the use of custom characters as markers, which now include
    mathtext and emoji. To use characters as custom markers, we concatenate two dollar
    signs `'$'`, each in front of and behind the character, and we pass them as the
    `marker` parameter.
  prefs: []
  type: TYPE_NORMAL
- en: The notations starting with a backslash `'\'`, such as `'\clubsuit'`, are in
    mathtext, which will be introduced later in this chapter (in the text and annotations
    section).
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of a scatter plot of markers in mathematical symbols and
    an emoji:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'As seen from the following figure, we have successfully used symbols, a Greek
    alphabet, as well as an emoji as custom markers in a scatter plot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/73032a2c-8422-42cf-a6df-12d57a65c6ef.png)'
  prefs: []
  type: TYPE_IMG
- en: Adjusting marker sizes and colors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In a scatter plot, we can specify the marker size with the parameter `s` and
    the marker color with `c` in the `plt.scatter()` function.
  prefs: []
  type: TYPE_NORMAL
- en: To draw markers on line plots, we first specify the shape of the markers in
    the `plt.plot()` function, such as `marker='x'`. Marker colors follow the line
    color.
  prefs: []
  type: TYPE_NORMAL
- en: Please note that scatter plots accept list types as size and color values, convenient
    in visualizing clusters, while line plots only accept a single value per data
    series.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'This code generates a figure of a scatter plot with marker sizes increasing
    with the data values, and a line plot with cross-shaped markers of a fixed size:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b55785d3-30ba-40ab-9699-550e1a0ec628.png)'
  prefs: []
  type: TYPE_IMG
- en: Fine-tuning marker styles with keyword arguments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can have further refined control over marker styles with some more keyword
    arguments. For example, for `plt.plot()`, we can change the `markeredgecolor`,
    `markeredgewidth,` and `markerfacecolor`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a code example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the result of adding the extra keyword arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8f87b433-889d-4045-8ab3-4f14751cd7e3.png)'
  prefs: []
  type: TYPE_IMG
- en: Line styles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Lines are among the most frequently occurring elements in Matplotlib visualization,
    from those representing data series to those marking axes, grids, and outlines
    of any shape. Hence, it is important to understand how we can adjust line style.
    Lines in Matplotlib are controlled by the `Line2D` class. The object-oriented
    structure of Matplotlib makes it easy to adjust line styles through keyword arguments
    with similar grammar in each API. Here, we shall introduce the several most commonly
    tuned aspects of Matplotlib lines.
  prefs: []
  type: TYPE_NORMAL
- en: Color
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Setting the color of the lines in a line plot is as simple as adding a `color` or
    its shorthand `c` parameter to the `plt.plot()` command. The color option is available
    in many other Matplotlib APIs as well.
  prefs: []
  type: TYPE_NORMAL
- en: Line thickness
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The thickness is set by the `linewidth` or `lw` parameter in most Matplotlib
    elements involving lines, including line plots.
  prefs: []
  type: TYPE_NORMAL
- en: Dash patterns
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Dash patterns of lines are designated by the `linestyle` or `ls` parameter.
    It can sometimes be used as a positional argument for convenience. For example,
    in line plots, we can specify the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`''solid''` or `''-''`: Solid line; default'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''dashed''` or `''--''`: Equally spaced dashes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''dashdot''` or `''-.''`: Alternate dashes and dots'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''.''`: Loose dotted line'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`'':''`: Packed dotted line'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''None''`, `'' ''`, `''''`: No visible line'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`(offset, on-off-dash-seq)`: Customized dashes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following is an example of lines in different dash patterns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'We can see the effect of each dash style in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/95bae8d9-3487-475f-979e-462082353f63.png)'
  prefs: []
  type: TYPE_IMG
- en: Designing a custom dash style
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Matplotlib does not limit us to its preset line styles. In fact, we can design
    our own dash patterns by specifying the length and space for each repeating dash
    unit, such as `(0, (5,3,1,3,1,3))`.
  prefs: []
  type: TYPE_NORMAL
- en: Cap styles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Another parameter for tuning is `dash_capstyle`. It controls the style of the
    dash ends:'
  prefs: []
  type: TYPE_NORMAL
- en: '`''butt''`: Blunt end'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''projecting''`: Extends in length'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''round''`: Rounded end'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To demonstrate the different cap styles, we have a code snippet of a multiline
    plots with thick lines to enlarge the dashes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'From the following figure, we can clearly see how blunt and round dashes give
    different impressions of sharpness and subtlety:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9a85cd40-61a0-414f-9d5d-ae50a91223ef.png)'
  prefs: []
  type: TYPE_IMG
- en: Spines
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Spines in Matplotlib refer to the lines surrounding the axes of the plotting
    area. We can set each spine to have different line styles or to be invisible.
  prefs: []
  type: TYPE_NORMAL
- en: To begin, we first access the axes with `plt.gca()`, where **gca** stands for
    **get current axes**, and store it in a variable, say `ax`.
  prefs: []
  type: TYPE_NORMAL
- en: We then adjust the properties of each spine in `ax.spines` with either `'top'`,
    `'right'`, `'bottom'`, or `'left'`. The common settings include line widths, color,
    and visibility, which is demonstrated in the following code snippet.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is an example to remove the top and right spines, often seen
    as a convention in certain scientific plots, and to enhance visual simplicity
    in general. It is also common to thicken the remaining spines. The change in color
    is shown as a demonstration. We can adjust it to suit our overall design where
    the plot is displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'This will create a graph of blue spines on the left and bottom:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3c9551bf-bc93-44e6-a6b5-febc805bfeb7.png)'
  prefs: []
  type: TYPE_IMG
- en: More native Matplotlib plot types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Besides the most basic scatter and line plots, Matplotlib provides a versatile
    collection of plot types to serve different data visualization purposes. In this
    section, we will introduce the rationale of plot type selection and the usage
    of each type.
  prefs: []
  type: TYPE_NORMAL
- en: Choosing the right plot
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A successful visualization must communicate the message well. In order to achieve
    this goal, we need to have a good understanding of the nature of our data as well
    as the advantages and limitations of each plot type in illustrating different
    relationships in data.
  prefs: []
  type: TYPE_NORMAL
- en: 'In choosing the right plot type to display, we have the following considerations:'
  prefs: []
  type: TYPE_NORMAL
- en: Number of variables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Distribution of data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Relationships between data series
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Histogram
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Histograms are useful in surveying the distribution of data. For example, we
    can plot data on a histogram when we want to see some age groups distributed in
    a population, light exposure in a photograph, or the amount of precipitation in
    each month in a city.
  prefs: []
  type: TYPE_NORMAL
- en: In Matplotlib, we call the `plt.hist()` function with a linear array. Matplotlib
    will automatically group the set of data points into `bins` and plot out the frequencies
    for each bin in bars. We can also specify the bin size by `plt.hist(array,bins=binsize)`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of plotting a randomly generated binomial distribution:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The histogram produced is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8e23ba30-9cd2-4931-9193-a05b3a1cd290.png)'
  prefs: []
  type: TYPE_IMG
- en: Bar plot
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Bar plots are useful for comparing absolute levels of discrete data series.
    They are created by the function `plt.bar(labels,heights)` in Matplotlib.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at the example of the market capitalization of today''s much hyped
    cryptocurrencies. The five top cryptocurrencies in terms of market capitalization
    are shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'We can see from the following figure that instead of following the input order,
    Matplotlib outputs a figure of bars with labels sorted alphabetically:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8c3f9fbb-4c29-4699-ac95-f89b9fbc97b4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To create bar plots with bars in the designated order, we can make use of Pandas
    and its Matplotlib integration. The procedure is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a Pandas DataFrame `df`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Plot the bar chart with `df.plot(kind='bar')`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the labels of `xticks`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adjust the other plot properties
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Show the plot with `plt.show()`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Please note that, by default, `df.plot()` includes a legend. We need to specify
    `legend=False` to turn it off.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example to reorder the bar plot in the previous output figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/65f71bc5-cb9c-481a-af62-81f1df523cfb.png)'
  prefs: []
  type: TYPE_IMG
- en: Setting bar plot properties
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can set the `width`, `color`, and `bottom` coordinates of the bars as keyword
    arguments in `plt.bar()`.
  prefs: []
  type: TYPE_NORMAL
- en: The bar `width` is set in ratios, whereas the color is set as introduced in
    the earlier section of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: For data that may include experimental or measurement errors, we can input lists
    of `yerr` (and `xerr`) values to show the accuracy.
  prefs: []
  type: TYPE_NORMAL
- en: Drawing bar plots with error bars using multivariate data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can easily create bar plots with multiple data series with Pandas `df.plot()`.
    This API also allows us to easily add error bars by supplying the `xerr` and `yerr`
    parameters. Let's have a look at an example that demonstrates the usage of this
    function along with bar property adjustment.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code snippet draws a multibar plot to show the performance of
    an imaginary drug to treat inflammation, by comparing the level of an inflammatory
    protein before and after treatment of a drug and placebo as control:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Here, you get a paired bar chart for two conditions. It seems the drug may have
    some effect compared to the placebo control. Can you think of more examples of
    data to draw multibar plots?
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6ac134b1-c01c-4cbd-b369-f35052dc0bc5.png)'
  prefs: []
  type: TYPE_IMG
- en: Besides using Pandas, we can also call multiple `plt.bar()` commands to draw
    multiple series of bar charts. Note that we will have to shift the coordinates
    so that the bars do not overlap each other.
  prefs: []
  type: TYPE_NORMAL
- en: Mean-and-error plots
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For experimental sciences, a data point is often averaged from several repeats
    of experiments, necessitating the need to show the error range to illustrate the
    precision level. In this case, mean-and-error plots may be more suitable than
    bar charts. In Matplotlib, mean-and-error plots are generated by the `plt.errorbar()`API.
  prefs: []
  type: TYPE_NORMAL
- en: When the positive errors and negative errors are the same, we can input 1D arrays
    to error values to draw symmetric error bars. Otherwise, we input 2D arrays of
    `[positive errors, negative errors]` for asymmetric error bars. While it is more
    common to have plots with `y` errors only, error values for both `x` and `y` axes
    are supported.
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, Matplotlib draws a line linking each error bar, with format `fmt` set
    to `''.-''`. For discrete datasets, we can add the keyword argument `fmt=''.''` to
    remove the line. Let''s go through a simple example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'We now get a sine curve with error bars, as follows. Try to substitute it with
    some real testing data you get:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/13b784a0-c887-4fdc-94ed-ca1e6bd90e77.png)'
  prefs: []
  type: TYPE_IMG
- en: Pie chart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Pie chart is a circular representation of component ratios. The angle, and hence
    the arc length of each sector ratio (also called **wedges**), presents the proportion
    that each component accounts for, relative to the whole.
  prefs: []
  type: TYPE_NORMAL
- en: Matplotlib provides the `plt.pie()` function to draw pie charts. We can label
    each sector with `labels` as well as the percentage with `autopct` automatically.
    For different ways to customize the string format of the percentages, you may
    refer to: [https://pyformat.info/](https://pyformat.info/).
  prefs: []
  type: TYPE_NORMAL
- en: To maintain the circular shape of our pie chart, we specify the same width and
    length for a square figure with `plt.figure(figsize=(n,n))`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, we have an example of web server usage in the first week of January 2017:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The resultant pie chart is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ba0baf01-10db-4e84-a653-a42c35c4838d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can also separate each sector by passing a list of ratios to the keyword
    argument `explode`. For example, adding the argument `explode=[0.1]*5` to the
    preceding `plt.pie()` plot will generate the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dc2379b5-99ce-4b60-9db6-c2e9e3bd2bd8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Please note that if the input array sums up to less than 1, the output pie
    chart will be incomplete, as shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'As seen here, instead of a full circle, we have an incomplete fan-shaped plot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4d2bafb5-0f0c-4de0-a4a0-a2679a74be35.png)'
  prefs: []
  type: TYPE_IMG
- en: In that case, we have to explicitly specify the ratio of each term. For instance,
    in the preceding example, change `x = [0.1,0.3]` to `x = [0.25,0.75]`.
  prefs: []
  type: TYPE_NORMAL
- en: Polar chart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A polar chart is used to display multivariate data and is also known as a radar
    chart or a spider chart. It is often seen in illustrations of strength in different
    aspects of different objects for comparison, such as the evaluation of the price
    and various specifications of a piece of hardware, or the abilities of a game
    character.
  prefs: []
  type: TYPE_NORMAL
- en: Moreover, polar plots are also useful in drawing mathematical functions, which
    we are going to demonstrate here. In Matplotlib, we draw polar charts with the
    command `plt.polar()`. Apart from the x, y coordinate system we are familiar with,
    polar coordinates are used for polar charts, angles, and radii. The central point
    is called the **pole**. Note that Matplotlib takes a degree unit for the angle
    input.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the code to draw a polar rose:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: This is the result. How many petals do you see in the rose?
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a3853537-fad8-45a1-9699-ce95b0b8dcb4.png)'
  prefs: []
  type: TYPE_IMG
- en: We can also make use of the polar coordinate system to create charts such as
    a heatmap of wind speed of the earth in geography, or the surface temperature
    of a round object for engineers. We will leave these advanced uses for you as
    an exercise when you have completed this book.
  prefs: []
  type: TYPE_NORMAL
- en: Controlling radial and angular grids
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are two functions to control the radial and angular grids: `rgrid()` and
    `thetagrid()` respectively. We can pass the `radii`, `labels`, and `angle` arguments
    to the `rgrid()` function, and `angles`, `labels`, and `frac` to the `thetagrid()` function,
    respectively.'
  prefs: []
  type: TYPE_NORMAL
- en: Text and annotations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To enhance the understanding of plot details, we may sometimes add in text annotations
    for explanation. We will now introduce the methods of adding and adjusting text
    in Matplotlib plots.
  prefs: []
  type: TYPE_NORMAL
- en: Adding text annotations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can add text to our plot by calling `plt.text(x,y,text)`; we specify the
    `x` and `y` coordinates and the text string.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a quick example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'You can see in this figure the **Hello World!** message appearing in the center
    of the plot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4b742924-31ab-44b1-a66d-50cebdb847f6.png)'
  prefs: []
  type: TYPE_IMG
- en: Font
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are some of the common font properties adjustable in Matplotlib:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Font size**: Float or relative size, for example, smaller and x-large'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Font weight**: For example, bold or semibold'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Font style**: For example, italic'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Font family**: For example, Arial'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Rotation**: Angle in degrees; it is vertical or horizontal'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Matplotlib now supports unicode and emoji.
  prefs: []
  type: TYPE_NORMAL
- en: Mathematical notations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As a plotting tool, mathematical notations are common. We can use the in-built
    mathtext or LaTeX to render mathematical symbols in Matplotlib.
  prefs: []
  type: TYPE_NORMAL
- en: Mathtext
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To create a mathtext notation, we precede a string with r, such as `r''$\alpha''`.
    The following is a short code for demo:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Alpha plus beta in the following plot are printed by MathTex:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f6b487c8-2294-478a-9341-d8eb29f3942c.png)'
  prefs: []
  type: TYPE_IMG
- en: LaTeX support
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Matplotlib supports LaTeX, although it renders slower than mathtext; accordingly,
    it allows more flexible text rendering. Here are more details of the LaTeX usage: [https://matplotlib.org/users/usetex.html](https://matplotlib.org/users/usetex.html).
  prefs: []
  type: TYPE_NORMAL
- en: External text renderer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If we have LaTeX installed, we can allow the external LaTeX engine to render
    the text elements by `matplotlib.rc('text', usetex='false')`.
  prefs: []
  type: TYPE_NORMAL
- en: Arrows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To point out specific features in a plot, we can draw arrows with the function
    `plt.arrow()`. This code illustrates the different available styles of arrow annotations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'It generates the following figure to list the available arrow shapes for annotation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4b2bc6c2-4308-466c-9b59-79a4a647ee02.png)'
  prefs: []
  type: TYPE_IMG
- en: Using style sheets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We have learned to style our plots step by step so far. For more persistent
    and portable settings, we can apply a predefined global style via the `matplotlib.style` module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Applying a style sheet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can call `plt.style.use(stylename)` to apply a style. This function takes
    in built-in style sheets, local paths, and URLs.
  prefs: []
  type: TYPE_NORMAL
- en: Creating own style sheet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can also create your own style sheet. For the specifications of a Matplotlib
    style sheet file, please refer to the documentation page at: [http://matplotlib.org/users/customizing.html](http://matplotlib.org/users/customizing.html).
  prefs: []
  type: TYPE_NORMAL
- en: Resetting to default styles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The effects set by style sheets are sustained through new plots. To reset to
    the default parameters, call `plt.rcdefaults()`.
  prefs: []
  type: TYPE_NORMAL
- en: Aesthetics and readability considerations in styling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As visualization is about delivering messages, the more we think from the reader's
    perspective, the more effective it will be. An attractive graphic catches more
    attention. The easier to read a plot is, the more likely are readers to understand
    the message. Here are several basic principles in designing data plots.
  prefs: []
  type: TYPE_NORMAL
- en: Suitable font styles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The hierarchy can use no more than three levels of font family, weight, and
    sizes. Use less fancy font families, Sans Serif font if possible. Make sure the
    font size is large enough to be legible
  prefs: []
  type: TYPE_NORMAL
- en: '**Serif versus Sans Serif**'
  prefs: []
  type: TYPE_NORMAL
- en: Serif means decorative edges on alphabets. And sans means without in French.
    As the names imply, Sans Serif fonts are plainer and more simplistic than Serif
    fonts in general. Let's take the most popular examples of default fonts in Microsoft
    Office. Times New Roman used in Office 2007 and before is a Serif font, whereas
    the newer Calibri is a Sans Serif font.
  prefs: []
  type: TYPE_NORMAL
- en: Effective use of colors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Use sharper color contrasts for emphasis and distinction
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use extra colors with discretion, for example, one color only for one data series
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Be friendly for readers with a color weakness; for example, avoid red-green
    combinations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keeping it simple
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <q>"Less is more. "</q> <q>                                                 
                                –  Andrea del Sarto (The Faultless Painter) by Robert
    Browning</q>
  prefs: []
  type: TYPE_NORMAL
- en: This quote spells out the basic principle of the preceding suggestions. The
    philosophy of minimalist design inspires much of the most brilliant work, from
    architecture to graphic design. While the use of different colors and styles creates
    distinction and hierarchy as well as adding attractiveness to our graphics, we
    must reduce the fanciness wherever possible. This helps our readers focus on the
    major message, and also helps keep a professional impression for our figures.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Congratulations! You have now mastered the most commonly used plots and the
    basic methods to customize plots. We are now ready to move on to more advanced
    Matplotlib usage.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will cover more plot types with the help of third-party
    packages, methods to optimize displays for multiple plots and axes in certain
    scales, as well as showing pixels in images. Stay tuned!
  prefs: []
  type: TYPE_NORMAL
