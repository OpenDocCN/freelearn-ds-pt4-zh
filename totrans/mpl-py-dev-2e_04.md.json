["```py\nimport matplotlib.pyplot as plt\n# Initiates a figure area for plotting\nfig = plt.figure()\n\n# Initiates six subplot axes\nax1 = plt.subplot(231)\nax2 = plt.subplot(232)\nax3 = plt.subplot(233)\nax4 = plt.subplot(234)\nax5 = plt.subplot(235)\nax6 = plt.subplot(236)\n\n# Print the type of ax1\nprint(type(ax1))\n\n# Label each subplot with corresponding identities\nax1.text(0.3,0.5,'231',fontsize=18)\nax2.text(0.3,0.5,'232',fontsize=18)\nax3.text(0.3,0.5,'233',fontsize=18)\nax4.text(0.3,0.5,'234',fontsize=18)\nax5.text(0.3,0.5,'234',fontsize=18)\nax6.text(0.3,0.5,'236',fontsize=18)\n\nplt.show()\n```", "```py\nimport matplotlib.pyplot as plt\n\nfig = plt.figure()\nax = fig.add_subplot(111) \n\nplt.show()\n```", "```py\nimport matplotlib.pyplot as plt\n\nfig = plt.figure()\nax1 = fig.add_subplot(111,facecolor='red')\nax2 = fig.add_subplot(121,facecolor='green')\nax3 = fig.add_subplot(233,facecolor='blue')\n\nplt.show()\n```", "```py\nimport matplotlib.pyplot as plt\n\nfig = plt.figure() # Note this line is optional here\nax1 = plt.subplot(111,facecolor='red')\nax2 = plt.subplot(121,facecolor='green')\nax3 = plt.subplot(233,facecolor='blue')\n\nplt.show()\n```", "```py\nimport matplotlib.pyplot as plt\n\nax1 = plt.subplot(111,facecolor='red')\nfig = plt.gcf() # get current figure\nax2 = fig.add_subplot(121,facecolor='green')\nax3 = fig.add_subplot(233,facecolor='blue')\n\nplt.show()\n```", "```py\nimport matplotlib.pyplot as plt\n\nfig, axarr = plt.subplots(1,1)\nprint(type(fig))\nprint(type(axarr))\n\nplt.show()\n```", "```py\nimport matplotlib.pyplot as plt\n\nfig, axarr = plt.subplots(3,4)\nfor i in range(3):\n    for j in range(4):\n        axarr[i][j].text(0.3,0.5,str(i)+','+str(j),fontsize=18)\n\nplt.show()\n```", "```py\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nx = np.arange(0.0, 1.0, 0.01)\ny1 = np.sin(8*np.pi*x)\ny2 = np.cos(8*np.pi*x)\n\n# Draw 1x2 subplots\nfig, axarr = plt.subplots(2,figsize=(8,6))\n\naxarr[0].plot(x,y1)\naxarr[1].plot(x,y2,'red')\n\nplt.show()\n```", "```py\nfig, axarr = plt.subplots(3,4,sharex=True,sharey=True)\n```", "```py\nimport matplotlib.pyplot as plt\n\nfig, axarr = plt.subplots(3,4,sharex=True,sharey=True)\nfor i in range(3):\n    for j in range(4):\n        axarr[i][j].text(0.3,0.5,str(i)+','+str(j),fontsize=18)\n\nplt.tight_layout(pad=0, w_pad=-1.6, h_pad=-1)\n```", "```py\nimport matplotlib.pyplot as plt\n\naxarr = []\naxarr.append(plt.subplot2grid((3,3),(0,0)))\naxarr.append(plt.subplot2grid((3,3),(1,0)))\naxarr.append(plt.subplot2grid((3,3),(0,2), rowspan=3))\naxarr.append(plt.subplot2grid((3,3),(2,0), colspan=2))\naxarr.append(plt.subplot2grid((3,3),(0,1), rowspan=2))\n\naxarr[0].text(0.4,0.5,'0,0',fontsize=16)\naxarr[1].text(0.4,0.5,'1,0',fontsize=16)\naxarr[2].text(0.4,0.5,'0,2\\n3 rows',fontsize=16)\naxarr[3].text(0.4,0.5,'2,0\\n2 cols',fontsize=16)\naxarr[4].text(0.4,0.5,'0,1\\n2 rows',fontsize=16)\n\nplt.show()\n```", "```py\nfig = plt.figure() # or fig = plt.gcf()\nfig.add_axes([left, bottom, width, height])\n```", "```py\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfig = plt.figure()\nnp.random.seed(100)\n# Prepare data\nx = np.random.binomial(1000,0.6,1000)\ny = np.random.binomial(1000,0.6,1000)\nc = np.random.rand(1000)\n\n# Draw the parent plot\nax = plt.scatter(x,y,s=1,c=c)\nplt.xlim(580,650)\nplt.ylim(580,650)\n\n# Draw the inset subplot\nax_new = fig.add_axes([0.6, 0.6, 0.2, 0.2])\nplt.scatter(x,y,s=1,c=c)\nplt.show()\n```", "```py\nax.xaxis.set_major_locator(xmajorLocator)    \nax.xaxis.set_minor_locator(xminorLocator)\nax.yaxis.set_major_locator(ymajorLocator)\nax.yaxis.set_minor_locator(yminorLocator)\n```", "```py\nax.xaxis.set_major_formatter(xmajorFormatter)    \nax.xaxis.set_minor_formatter(xminorFormatter)\nax.yaxis.set_major_formatter(ymajorFormatter)\nax.yaxis.set_minor_formatter(yminorFormatter)\n```", "```py\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Prepare 100 evenly spaced numbers from -200 to 200\nx = np.linspace(-1000, 1000, 100)\ny = x * 2\n# Setup subplot with 3 rows and 2 columns, with shared x-axis.\n# More details about subplots will be discussed in Chapter 3.\nf, axarr = plt.subplots(2,3, figsize=(8,6), sharex=True)\nfor i in range(2):\n    for j in range(3):\n        axarr[i,j].plot(x, y)\n        # Horizontal line (y=10)\n        axarr[i,j].scatter([0], [10])\n\n# Linear scale\naxarr[0,0].set_title('Linear scale')\n\n# Log scale, mask non-positive numbers\naxarr[0,1].set_title('Log scale, nonposy=mask')\naxarr[0,1].set_yscale('log', nonposy='mask')\n\n# Log scale, clip non-positive numbers\naxarr[0,2].set_title('Log scale, nonposy=clip')\naxarr[0,2].set_yscale('log', nonposy='clip')\n\n# Symlog\naxarr[1,0].set_title('Symlog scale')\naxarr[1,0].set_yscale('symlog')\n\n# Symlog scale, expand the linear range to -100,100 (default=None)\naxarr[1,1].set_title('Symlog scale, linthreshy=100')\naxarr[1,1].set_yscale('symlog', linthreshy=100)\n\n# Symlog scale, expand the linear scale to 3 (default=1)\n# The linear region is expanded, while the log region is compressed.\naxarr[1,2].set_title('Symlog scale, linscaley=3')\naxarr[1,2].set_yscale('symlog', linscaley=3)\nplt.show()\n```", "```py\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Prepare the data\n# Weekly earnings of U.S. wage workers in 2016, by age\n# Downloaded from Statista.com\n# Source URL: https://www.statista.com/statistics/184672/median-weekly-earnings-of-full-time-wage-and-salary-workers/\nus_agegroups = [22,29.5,39.5,49.5]\n# Convert to a rough estimation of monthly earnings by multiplying 4\nus_incomes = [x*4 for x in [513,751,934,955]]\n\n# Monthly salary in the Netherlands in 2016 per age group excluding overtime (Euro)\n# Downloaded from Statista.com \n# Source URL: https://www.statista.com/statistics/538025/average-monthly-wage-in-the-netherlands-by-age/\n# take the center of each age group\nnl_agegroups = [22.5, 27.5, 32.5, 37.5, 42.5, 47.5, 52.5]\nnl_incomes = [x*1.113 for x in [1027, 1948, 2472, 2795, 2996, 3069, 3070]]\n\n# Median monthly wage analyzed by sex, age group, educational attainment, occupational group and industry section\n# May-June 2016 (HKD)\n# Downloaded form the website of Censor and Statistics Department of the HKSAR government\n# Source URL: https://www.censtatd.gov.hk/fd.jsp?file=D5250017E2016QQ02E.xls&product_id=D5250017&lang=1\nhk_agegroups = [19.5, 29.5, 39.5, 49.5]\nhk_incomes = [x/7.770 for x in [11900,16800,19000,16600]]\n```", "```py\nimport seaborn as sns\ndef kdeplot_income_vs_age(agegroups,incomes):\n    plt.figure()\n    sns.kdeplot(agegroups,incomes)\n    plt.xlim(0,65)\n    plt.ylim(0,6000)\n    plt.xlabel('Age')\n    plt.ylabel('Monthly salary (USD)')\n    return\n\nkdeplot_income_vs_age(us_agegroups,us_incomes)\nkdeplot_income_vs_age(nl_agegroups,nl_incomes)\nkdeplot_income_vs_age(hk_agegroups,hk_incomes)\n```", "```py\nimport pandas as pd\nimport numpy as np\n# Prepare 2500 random data points densely clustered at center\nnp.random.seed(123)\n\ndf = pd.DataFrame(np.random.randn(2500, 2), columns=['x', 'y'])\ndf['y'] = df['y'] = df['y'] + np.arange(2500)\ndf['z'] = np.random.uniform(0, 3, 2500)\n\n# Plot the scatter plot\nax1 = df.plot.scatter(x='x', y='y')\n# Plot the hexbin plot\nax2 = df.plot.hexbin(x='x', y='y', C='z', reduce_C_function=np.max,gridsize=25)\n\nplt.show()\n```", "```py\n# Data obtained from https://ark.intel.com/#@Processors\nimport pandas as pd\n\ncpuspec = pd.read_csv('intel-cpu-7+8.csv').set_index('Name')\nprint(cpuspec.info())\ncpuspec.head()\n```", "```py\ncpuspec['Max Frequency'] = cpuspec['Max Frequency'].fillna(cpuspec['Base Frequency'])\n```", "```py\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nplt.figure(figsize=(13,13))\nsns.heatmap(cpuspec.drop(['Gen'],axis=1),cmap='Blues')\nplt.xticks(fontsize=16)\nplt.show()\n```", "```py\nimport seaborn as sns\n\nrow_colors = cpuspec['Gen'].map({7:'#a2ecec',8:'#ecaabb'}) # map color values to generation\nsns.clustermap(cpuspec.drop(['Gen'],axis=1),standard_scale=True,cmap='Blues',row_colors=row_colors);\n```", "```py\nfrom scipy.cluster import hierarchy\nfrom scipy.spatial import distance\nimport seaborn as sns\n\ndef pairwise_clustermap(df,method='average',metric='cityblock',figsize=(13,13),cmap='viridis',**kwargs):\n    correlations_array = np.asarray(df.corr())\n\n    row_linkage = hierarchy.linkage(\n    distance.pdist(correlations_array), method=method)\n\n    col_linkage = hierarchy.linkage(\n    distance.pdist(correlations_array.T), method=method)\n\n    g = sns.clustermap(correlations, row_linkage=row_linkage, col_linkage=col_linkage, \\\n    method=method, metric=metric, figsize=figsize, cmap=cmap,**kwargs)\n    return g\n```", "```py\nimport matplotlib.pyplot as plt\n# Source image downloaded under CC0 license: Free for personal and commercial use. No attribution required.\n# Source image address: https://pixabay.com/en/rose-pink-blossom-bloom-flowers-693155/\nimg = plt.imread('ch04.img/mpldev_ch04_rose.jpg')\nplt.imshow(img)\n```", "```py\n# create a copy because the image object from `plt.imread()` is read-only\nimgcopy = img.copy() \nimgcopy[img<160] = 0\nimgcopy[img>=160] = 255\nplt.imshow(imgcopy)\nplt.show()\n```", "```py\nfrom keras.datasets import mnist\n```", "```py\n(X_train,y_train),(X_test,y_test) = mnist.load_data()\n```", "```py\nfor d in X_train, y_train, X_test, y_test:\n    print(d.shape)\n```", "```py\n(60000, 28, 28)\n(60000,)\n(10000, 28, 28)\n(10000,)\n```", "```py\nplt.imshow(X_train[123], cmap='gray_r')\n```", "```py\nimport pandas as pd\n# downloaded from kaggle \"Cryptocurrency Market Data\" dataset curated by user jvent\n# Source URL: https://www.kaggle.com/jessevent/all-crypto-currencies\ncrypt = pd.read_csv('crypto-markets.csv')\nprint(crypt.shape)\ncrypt.head()\n```", "```py\nfrom matplotlib.dates import date2num\nbtc = crypt[crypt['symbol']=='BTC'][['date','open','high','low','close']].set_index('date',drop=False)\nbtc['date'] = pd.to_datetime(btc['date'], format='%Y-%m-%d').apply(date2num)\nbtc.index = pd.to_datetime(btc.index, format='%Y-%m-%d')\nbtc = btc['2017-12-01':'2017-12-31']\nbtc = btc[['date','open','high','low','close']]\n```", "```py\nimport matplotlib.pyplot as plt\nfrom matplotlib.dates import WeekdayLocator, DayLocator, DateFormatter, MONDAY\nfrom mpl_finance import candlestick_ohlc\n# from matplotlib.finance import candlestick_ohlc deprecated in 2.0 and removed in 2.2\nfig, ax = plt.subplots()\n\ncandlestick_ohlc(ax,btc.values,width=0.8)\nax.xaxis_date() # treat the x data as dates\nax.xaxis.set_major_locator(WeekdayLocator(MONDAY)) # major ticks on the Mondays\nax.xaxis.set_minor_locator(DayLocator()) # minor ticks on the days\nax.xaxis.set_major_formatter(DateFormatter('%Y-%m-%d'))\n\n# Align the xtick labels\nplt.setp(ax.get_xticklabels(), horizontalalignment='right')\n\n# Set x-axis label\nax.set_xlabel('Date',fontsize=16) \n\n# Set y-axis label\nax.set_ylabel('Price (US $)',fontsize=16) \nplt.show()\n```", "```py\npip3 install --user https://github.com/matplotlib/mpl_finance/archive/master.zip\n```", "```py\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\n\nx = np.linspace(-2, 2, 60)\ny = np.linspace(-2, 2, 60)\nx, y = np.meshgrid(x, y)\nr = np.sqrt(x**2 + y**2)\nz = np.cos(r)\nsurf = ax.plot_surface(x, y, z, rstride=2, cstride=2, cmap='viridis', linewidth=0)\n```", "```py\nfrom mpl_toolkits.basemap import Basemap\nimport matplotlib.pyplot as plt\n\n# Initialize a Basemap object\n# Use orthogonal spherical projection\n# Adjust the focus by setting the latitude and longitude\nmap = Basemap(projection='ortho', lat_0=20, lon_0=80)\n\n# To shade terrain by relief. This step may take some time.\nmap.shadedrelief()\n\n# Draw the country boundaries in white\nmap.drawcountries(color='white')\nplt.show()\n```", "```py\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\n```", "```py\n# Downloaded from the Climate Change Knowledge portal by the World Bank Group\n# Source URL: http://climate4development.worldbank.org/open/#precipitation\nworld_pr = gpd.read_file('futureB.ppt.totals.median.shp')\nworld_pr.head()\n```", "```py\n# Downloaded from thematicmapping.org\n# Source URL http://thematicmapping.org/downloads/world_borders.php\nworld_borders = gpd.read_file('TM_WORLD_BORDERS_SIMPL-0.3.shp')\nworld_borders.head()\n```", "```py\n# Initialize an figure and an axes as the canvas\nfig,ax = plt.subplots()\n\n# Plot the annual precipitation data in ax\nworld_pr.plot(ax=ax,column='ANNUAL')\n\n# Draw the simple worldmap borders\nworld_borders.boundary.plot(ax=ax,color='#cccccc',linewidth=0.6)\n\nplt.show()\n```"]