- en: Embedding Matplotlib in Qt 5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are several GUI libraries available, and one widely used library is Qt.
    In this book, we will be using Qt 5, the latest major version of this library.
    Unless explicitly mentioned, we are referring to Qt 5 when we simply state Qt
    throughout the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: We will follow a similar progression to that in [Chapter 5](b069fa19-b6c3-4558-acf4-fcc22b4786c1.xhtml),
    *Embedding Matplotlib in GTK+3*, and we will present similar examples but this
    time written in Qt.
  prefs: []
  type: TYPE_NORMAL
- en: We believe that this method will allow us to directly compare the libraries,
    and it has the advantage of not leaving the *How would I write something with
    library X?* question unanswered.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will learn how to:'
  prefs: []
  type: TYPE_NORMAL
- en: Embed a Matplotlib figure into a Qt widget
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Embed a figure and navigation toolbar into a Qt widget
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use events to update a Matplotlib plot in real time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use QT Designer to draw a GUI and then use it with Matplotlib in a simple Python
    application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will begin by giving an introduction to the library.
  prefs: []
  type: TYPE_NORMAL
- en: A brief introduction to Qt 5 and PyQt 5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Qt is a cross-platform application development framework widely used for graphical
    programs (GUI) and also for non-GUI tools.
  prefs: []
  type: TYPE_NORMAL
- en: Qt was developed by Trolltech (now owned by Nokia), and it's probably best known
    for being the foundation of the **K Desktop Environment** (**KDE**) for Linux.
  prefs: []
  type: TYPE_NORMAL
- en: The Qt toolkit is a collection of classes made to simplify the creation of programs.
    Qt is more than just a GUI toolkit. It includes components for abstractions of
    network sockets, threads, Unicode, regular expressions, SQL databases, SVG, OpenGL,
    and XML. It also has a fully functional web browser, help system, multimedia framework,
    and rich collection of GUI widgets.
  prefs: []
  type: TYPE_NORMAL
- en: Qt is available on several platforms, particularly Unix/Linux, Windows, macOS
    X, and also some embedded devices. As it uses native APIs of the platform to render
    the Qt controls, applications developed with Qt have a look and feel that fits
    the running environment (without looking like something alien in it).
  prefs: []
  type: TYPE_NORMAL
- en: Though written in C++, Qt can also be used in several other programming languages
    through language bindings available for Ruby, Java, Perl, and also Python with
    PyQt.
  prefs: []
  type: TYPE_NORMAL
- en: PyQt 5 is available for both Python 2.x and 3.x, but in this book, we will consistently
    use Python 3 in all our code. PyQt 5 has over 620 classes and 6,000 functions
    and methods. Before we go into some examples, it is important to know the difference
    between Qt 4/PyQt 4 and Qt 5/PyQt 5.
  prefs: []
  type: TYPE_NORMAL
- en: Differences between Qt 4 and PyQt 4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: PyQt is a comprehensive set of Python bindings for the Qt framework. However, PyQt
    5 is not backward compatible with PyQt 4\. It is noteworthy that PyQt 5 does not
    support any part of the Qt API that are marked as deprecated or obsolete in Qt
    v5.0\. However, it is possible that some of these are included accidentally. If
    included, they *are* considered bugs and will be removed when found.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are familiar with Qt 4 or have read the first edition of this book,
    one thing to note is that the signals and slots of are no longer supported. Therefore,
    the following are not implemented in PyQt 5:'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtScript`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QObject.connect()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QObject.emit()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SIGNAL()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SLOT()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Also, there is a modification in `disconnect()` as it no longer takes arguments
    and will disconnect all connections to the `QObject` instance when invoked.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, new modules have been introduced, such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtBluetooth`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtPositioning`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Enginio`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s start with a very simple example—calling a window. Again for best performance,
    copy the code, paste it in a file, and run the script on the Terminal. Our codes
    are optimized for running on a Terminal only:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/7588ada9-d7d9-4146-8bb1-f5b67dce764d.png)'
  prefs: []
  type: TYPE_IMG
- en: The syntax is very similar to what you see in [Chapter 5](b069fa19-b6c3-4558-acf4-fcc22b4786c1.xhtml), *Embedding
    Matplotlib in GTK+3*. Once you know how to use one particular GUI library fairly
    well (such as GTK+3), it is very easy to adapt to a new one readily. The code
    is very similar to that in GTK+3 and the logic follows as well. `QApplication`
    manages the GUI application's control flow and main settings. It's the place where
    the main event loop is executed, processed and dispatched. It is also responsible
    for application initialization and finalization and handling most of the system-wide
    and application-wide settings. Since `QApplication` handles the entire initialization
    phase, it must be created before any other objects related to the UI are created.
  prefs: []
  type: TYPE_NORMAL
- en: The `qApp.exec_()` command enters the Qt main event loop. Once `exit()` or `quit()`
    is called, it returns the relevant return code. Until the main loop is started,
    nothing is displayed on the screen. It's necessary to call this function as the
    main loop handles all events and signals coming from both the application widgets
    and the window system; essentially, no user interaction can take place before
    it is called.
  prefs: []
  type: TYPE_NORMAL
- en: 'Readers may wonder why there is an underscore in `exec_();`. The reason is
    simple: `exec()` is a reserved word in Python hence the addition of the underscore
    to the `exec()` Qt method. Wrapping it inside `sys.exit()` allows the Python script
    to exit with the same return code, informing the environment how the application
    ended (whether successfully or not).'
  prefs: []
  type: TYPE_NORMAL
- en: For more experienced readers, you will find something abnormal in the preceding
    code. While we were instantiating the `QApplication` class, we were required to
    parse `sys.argv` (an empty list in this case) to the constructor of `QApplication`.
    At least I found it unexpected when I first used PyQt, but this is required as
    the instantiation invokes the constructor of the C++ class `QApplication`, and
    it uses `sys.argv` to initialize the Qt application. Parsing `sys.argv` during
    `QApplication` instantiation is a convention in Qt and it is something be aware
    of. Also every PyQt 5 application must create an application object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Again, let''s try to another one in OOP style:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code creates two buttons, and each button will invoke an individual
    function—print `Hello world` once or print `Hello World` five times in the Terminal.
    Readers should be able to grasp the event handling system from the code easily.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/addd7eec-dc3d-4c38-9ab5-0ce2c4faf4e7.png)'
  prefs: []
  type: TYPE_IMG
- en: This is another implementation of the two buttons example from [Chapter 5](https://cdp.packtpub.com/matplotlib_for_python_developers__second_edition/wp-admin/post.php?post=375&action=edit#post_362), *Embedding
    Matplotlib in GTK+3*, and the goal of this example is to demonstrate the signal
    handling approach in PyQt 5 in comparison with GTK+3\. Readers should find this
    fairly similar as we intentionally write it in a way more similar to the example
    in GTK+3.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s try to embed a Matplotlib figure in a Qt window. Be aware that unlike
    the example in the previous chapter, this figure will be refreshed every second!
    Therefore, we also use the `QtCore.QTimer()` function in here and invoke the `update_figure()`
    function as an event-action pair:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Again, the figure in this example will randomize the data and update the figure
    every 1 second through `QTimer`, shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/46a8be92-2ec5-464a-832b-d46b191de1a1.png)'
  prefs: []
  type: TYPE_IMG
- en: Introducing QT Creator / QT Designer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The four preceding figures are screenshots of the PyQt 5 window, which will
    refresh itself every second.
  prefs: []
  type: TYPE_NORMAL
- en: For simple examples, designing the GUI in the Python code can be good enough,
    but for more complex applications, this solution does not scale.
  prefs: []
  type: TYPE_NORMAL
- en: There are some tools to help you design the GUI for Qt, and one of the most
    commonly used tools was QT Designer. In the first edition of this book, this section
    was about GUI making with QT Designer. Since the late QT4 development, QT Designer
    has merged with QT Creator. In the following example, we would learn how to open
    the secret QT Designer in QT Creator and create a UI file.
  prefs: []
  type: TYPE_NORMAL
- en: Similar to Glade, we can design the user interface part of the application using
    the on-screen form and drag-and-drop interface. Then we can connect the widgets
    with the backend code, where we develop the logic of the application.
  prefs: []
  type: TYPE_NORMAL
- en: 'First of all, let us show you how to open QT Designer in QT Creator. When you
    open QT Creator, you will see the following interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0a97bbe9-7a6e-428d-8d67-c82f04d25895.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The tricky part is this: Do not create the project by clicking on the New File
    or Project button in the Creator. Instead, create a New Project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9bdc8606-c103-4b4d-a4c2-f8cca343a861.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select Qt in Files and Classes and Qt Designer Form in the middle panel:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/375d6696-bf0f-49f5-a910-c5a59e86367f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'There is a range of template selections, such as Widget or Main Window. In
    our case, we pick Main Window and simply follow through the remaining steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3c04934e-c10b-42c3-afef-e3322fff65e5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'And eventually, we will reach the QT Designer interface. Everything you work
    on here will be put in your desired folder as a UI file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/994c10ae-9971-44ad-b8d2-0614edde9ac6.png)'
  prefs: []
  type: TYPE_IMG
- en: Embedding Matplotlib in a GUI made with QT Creator / QT Designer.
  prefs: []
  type: TYPE_NORMAL
- en: To quickly demonstrate how to embed a Matplotlib figure in Qt 5 using QT Creator,
    let's use the former example and combine it with the scripts generated by QT Creator.
  prefs: []
  type: TYPE_NORMAL
- en: 'First of all, adjust the Geometry of the MainWindow at the lower right panel;
    change the Width and Height to 300x300:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2bd8cd6c-1bb6-41b4-9438-2298cf4936c6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After that, drag a Widget from Container in the left panel to the MainWindow in
    the middle. Resize it until it fits well in the MainWindow:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/eac1a19b-7034-4c84-a057-1cf1aa509dff.png)'
  prefs: []
  type: TYPE_IMG
- en: 'That is it for the basic design! Now save it as a UI file. When you view the
    UI file, it should display something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This file is in XML format, and we need to convert it to a Python file. This
    can be done simply by using this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'And now we will have a Python file like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Note that this is just the framework for the GUI; we still have to add some
    things in order to make it work.
  prefs: []
  type: TYPE_NORMAL
- en: 'We must add `init()` to initialize the `UiMainWindow`, as well as link the
    `DynamicCanvas` to the widget in the middle of the `MainWindow`. Here it goes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'We have added only five lines of code in here. We can simply replace the class `ApplicationWindow` with
    this, and here is the outcome:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/40b85b90-afe5-479d-96fa-f9e6febca9cd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'And here is the complete code generating the preceding figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: GUI design by using QT Creator/ QT Designer has enough material for a book on
    its own. Therefore, in this chapter, we aimed to show you just a glimpse of GUI
    design through PyQt 5\. Upon finishing this chapter, the readers should now understand
    how to embed a figure in a QWidget, use the layout manager to pack a figure in
    a QWidget, create a timer, react to events and update a Matplotlib graph accordingly,
    and use QT Designer to draw a simple GUI for Matplotlib embedding.
  prefs: []
  type: TYPE_NORMAL
- en: We are now ready to learn another GUI library, wxWidgets.
  prefs: []
  type: TYPE_NORMAL
