- en: Embedding Matplotlib in wxWidgets Using wxPython
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter will explain how we can use Matplotlib in the wxWidgets framework,
    particularly using wxPython bindings.
  prefs: []
  type: TYPE_NORMAL
- en: 'The contents of this chapter are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: A brief introduction to wxWidgets and wxPython
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A simple example of embedding Matplotlib in wxWidgets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extending the previous example to include the Matplotlib navigation toolbar
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to update a Matplotlib plot in real time using the wxWidgets framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to design a GUI with wxGlade and embed a Matplotlib figure in it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's start with an overview of the features of wxWidgets and wxPython.
  prefs: []
  type: TYPE_NORMAL
- en: A brief introduction to wxWidgets and wxPython
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the most important features of wxWidgets is cross-platform portability;
    it currently supports Windows, macOS X, Linux (with the X11, Motif, and GTK+ libraries),
    OS/2, and several other operating systems and platforms (including an embedded
    version that is currently under development).
  prefs: []
  type: TYPE_NORMAL
- en: wxWidgets can best be described as a native mode toolkit because it provides
    a thin API abstraction layer across platforms and uses platform-native widgets
    under the hood, as opposed to emulating them. Using native controls gives wxWidgets
    applications a natural and familiar look and feel. On the other hand, introducing
    an additional layer can result in a slight performance penalty, although this
    is unlikely to be noticed in the kind of applications we will commonly develop.
  prefs: []
  type: TYPE_NORMAL
- en: wxWidgets is not restricted to GUI development. It's more than just a graphics
    toolkit, providing a whole set of additional facilities, such as database libraries,
    an inter-process communication layer, networking functionalities, and so on. Though
    it's written in C++, there are several bindings for many commonly used programming
    languages. Among them is a Python binding provided by wxPython.
  prefs: []
  type: TYPE_NORMAL
- en: wxPython (available at [http://www.wxpython.org/](http://www.wxpython.org/))
    is a Python extension module that provides a set of bindings to the Python language
    from the wxWidgets library. This extension module allows Python programmers to
    create instances of wxWidgets classes and to invoke methods of those classes.
  prefs: []
  type: TYPE_NORMAL
- en: It is a great time to introduce wxPython because wxPython 4 was released a year
    ago. The latest version of wxPython is 4.0.1 to date (April 2018), and it is compatible
    with both Python 2 and Python 3.
  prefs: []
  type: TYPE_NORMAL
- en: Beginning in 2010, project Phoenix is an effort to clean up the wxPython implementation
    and to make it compatible with Python 3\. As one can imagine, wxPython was entirely
    rewritten with a focus on performance, maintainability, and extensibility.
  prefs: []
  type: TYPE_NORMAL
- en: Let us walk through the most basic example of using wxPython!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/d4cc4e5e-3505-4253-8d28-4079cb9ae172.png)'
  prefs: []
  type: TYPE_IMG
- en: Following on from the preceding example, there is one very important thing for
    beginners.
  prefs: []
  type: TYPE_NORMAL
- en: '`wx.Frame` and `wx.Window()` are very different. `wx.Window` in wxWidgets is
    the base class from which all visual elements are derived, such as buttons and
    menus; we always refer to a program window as `wx.Frame` in wxWidgets.'
  prefs: []
  type: TYPE_NORMAL
- en: The syntax for constructing a `wx.Frame` is `wx.Frame(Parent, ID, Title)`. When
    specifying `Parent` as `None`, as shown just now, we are essentially saying that
    the frame is a top-level `window`.
  prefs: []
  type: TYPE_NORMAL
- en: There is also an **ID system** in wxWidgets. Various controls and other parts
    of wxWidgets need an ID. Sometimes, the ID is provided by users; alternatively,
    it has a predefined value. However, the value of the ID is unimportant in most
    cases (such as the preceding example), and we can use `wx.ID_ANY` as the ID of
    an object, to tell wxWidgets to assign an ID automatically. Remember that all automatically
    assigned IDs are negative, and user-defined IDs should always be positive to avoid
    clashing with them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let us explore an example written in the OOP style that requires event
    handling—the `Hello world` button example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The output looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2b24a4cb-87f0-4f55-a26b-d7f99fea8619.png)'
  prefs: []
  type: TYPE_IMG
- en: As readers may observe, all three GUI libraries that we have discussed here
    have a similar syntax. Therefore, getting familiar with just one of them lets
    you switch easily among them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The layout managers for wxWidgets are `sizer` widgets: they are the containers
    for widgets (including other sizers) that will handle the visual arrangement of
    the widgets'' dimensions according to our configuration. `BoxSizer` takes one
    parameter, its orientation. In this case, we pass the constant `wx.VERTICAL` to
    have widgets laid out in a column; however, there is also the constant `wx.HORIZONTAL`
    if we need a row of widgets:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We are now able to add our `FigureCanvas` object to the `sizer`. The arguments
    of the `Add()` function are really important:'
  prefs: []
  type: TYPE_NORMAL
- en: The first parameter is a reference to the object to be added.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Then, we have the second parameter proportion. This is used to express how
    much of the additional free space should be assigned to this widget. Often, the
    widgets on a GUI don''t take up all the space, so there is some extra space available.
    This space is redistributed to all the widgets based on the proportion value of
    each widget with respect to all the widgets present in the GUI. Let''s take an
    example: if we have three widgets respectively with the proportion set to `0`,
    `1`, and `2`, then the first (with the proportion set to `0`) will not change
    at all. The third (the proportion set to 2) will change twice more than the second
    (proportion `1`). In the book example, we set it to `1`, so we declare that the
    widget should take one slot of the free space available when resizing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The third parameter is a combination of flags to further configure widget behavior
    in the sizer. It controls borders, alignment, separation between widgets, and
    expansions. Here we declare that the `FigureCanvas` should expand when the window
    is resized.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let us try an example to embed a Matplotlib figure (polar plot) into the wxWidgets-powered
    GUI:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7839a8db-0781-4cff-90dc-9a34b946bd2f.png)'
  prefs: []
  type: TYPE_IMG
- en: We have shown how to embed a Matplotlib figure into the GUI; however, we have
    yet to demonstrate the interaction between Matplotlib and wxWidgets. It can be
    achieved easily by adding a button and a binding (`Bind`) a function to the button.
    This will update the figure each time the users click on it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s walk through one important example showcasing how to update the plot
    by clicking a button! Although we are using the same figure, the underlying update
    methodology is different. Here we will update the figure through a click event
    instead of an auto-timer as shown in [Chapter 6](94590894-fac7-4931-a15e-c7ec328446aa.xhtml),
    *Embedding Matplotlib in Qt 5*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/535ca0e7-3eba-4638-90f3-52be4b822c30.png) ![](img/551048e3-cd55-4f93-a2d9-708e260b336f.png)![](img/93b02621-4318-45ce-8c04-89ff832ec693.png)
    ![](img/478742a7-0ba1-4e9f-829d-3f2b74b63978.png)'
  prefs: []
  type: TYPE_IMG
- en: By clicking on the Start Radar! button, we invoke the function `update_fun`
    and redraw a new graph every time.
  prefs: []
  type: TYPE_NORMAL
- en: Embedding Matplotlib in a GUI from wxGlade
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For very simple applications with limited GUIs, we can design the interface
    from inside the application source code. Once the GUI becomes more complex, this
    solution is not acceptable and we need a tool to support us in the GUI design.
    One of the most well-known tools for this activity in wxWidgets is wxGlade.
  prefs: []
  type: TYPE_NORMAL
- en: wxGlade is an interface design program written in Python using wxPython, and
    this allows it to run on all platforms where these two are available.
  prefs: []
  type: TYPE_NORMAL
- en: The philosophy is similar to Glade, the famous GTK+ GUI designer, and the look
    and feel are very similar as well. wxGlade is a program that helps us to create
    wxWidgets or wxPython user interfaces, but it is not a full-featured code editor;
    it's just a designer, and the code it generates does nothing more than display
    the created widgets.
  prefs: []
  type: TYPE_NORMAL
- en: 'Although project Phoenix and wxPython 4 are relatively new, they are both supported
    by wxGlade. wxGlade can be downloaded from sourceforge, and one can easily download
    the zipped file, unzip it, and run wxGlade with the **`python3` **command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: And here comes the user interface!
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6f2ae096-da93-4e00-b024-50e7dd2fecd9.png)'
  prefs: []
  type: TYPE_IMG
- en: Here is a breakdown of the three main windows in *Figure 5*. The upper left
    window is the main Palette window. The first button of the first row (Windows)
    is the button to create a frame as a basis of everything. The lower left window
    is the Properties window, which lets us display and edit the properties of applications,
    windows, and controls. The window on the right is the Tree window. It enables
    us to visualize the structure. It allows editing the structure of the project,
    with its application, windows, sizers, and controls. By choosing an item in the Tree window,
    we can edit its corresponding properties in the Properties window.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us click on the button to Add a Frame. This will be followed by this small
    window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dfade9ca-1daf-49ac-b009-7c0bf2dbdde8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select the base class as wxFrame; and here we will generate a Design window
    as shown in the following screenshot. From here, we can start to click and add
    buttons and features that we like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3a3e8e5a-5c10-489f-b96f-b25aee9e662d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let us first create a container for the code we have shown previously. Before
    we click on any buttons, let us revisit the essential elements needed for the
    preceding GUI:'
  prefs: []
  type: TYPE_NORMAL
- en: Frame
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vertical box (`wx.BoxSizer`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Button
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'So it''s very straightforward; let''s click on the sizer button in the Palette window
    and then click on the Design window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/aad979d8-9169-4776-9441-b9066bc58781.png)'
  prefs: []
  type: TYPE_IMG
- en: 'From the Tree window, we can see the structure of our GUI. We have a frame
    containing a sizer of two slots. However, we want a vertical box instead of a
    horizontal one; this can be modified in the Properties window when we click on
    sizer_2:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5c26ba1d-803e-481e-8181-4274fad5b641.png)'
  prefs: []
  type: TYPE_IMG
- en: Now let's add a button to slot 2! This can be done by simply clicking on Button in
    the Palette window, then clicking on the slot in the lower part of the Design window.
    However, the button doesn't look very nice from there. It's on the left-hand side
    of the lower panel. This can be altered by selecting _button1 in the Tree window
    and modifying the alignment details in the Layout tab of the Properties window.
  prefs: []
  type: TYPE_NORMAL
- en: 'In here, we have selected wxEXPAND and wxALIGN_CENTER, which indicate that
    it has to expand and fill the width of the frame; this also ensures that it aligns
    at the center of the slot at all times:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/177dc6d5-cf86-4c02-a609-12ae272d962b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'For now, the frame is all set. Let''s export the code by choosing File and Generate
    Code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2e52f081-98d1-4a91-a106-81e76ab0fe51.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Upon clicking on Generate Code, a file will be saved in the desired folder
    (where the user saved the `wxWidget` file) and here is a code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code provides the GUI on its own. However, it lacks some key
    functions to make everything work. Let''s quickly expand on that to see how it
    works:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are now able to develop wxWidgets applications and then embed Matplotlib
    in them. To be specific, readers should be able to embed a Matplotlib figure in
    a wxFrame, use a sizer to embed both the figure and navigation toolbar in a wxFrame,
    update a plot through interaction, and use wxGlade to design a GUI for Matplotlib
    embedding.
  prefs: []
  type: TYPE_NORMAL
- en: We are now ready to move further and see how to integrate Matplotlib into the
    web.
  prefs: []
  type: TYPE_NORMAL
