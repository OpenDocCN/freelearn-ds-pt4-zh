["```py\n# The official Python 3.6.5 runtime is used as the base image\nFROM python:3.6.5-slim\n# Disable buffering of output streams\nENV PYTHONUNBUFFERED 1\n# Create a working directory within the container\nRUN mkdir /app\nWORKDIR /app\n# Copy files and directories in the current directory to the container\nADD . /app/\n# Install Django and other dependencies\nRUN pip install -r requirements.txt\n```", "```py\nDjango==2.0.4\nMatplotlib==2.2.2\nstockstats==0.2.0\nseaborn==0.8.1\n```", "```py\nSuccessfully built 018e75992e59\nSuccessfully tagged django:latest\n```", "```py\ndjango django-admin startproject --template=https://github.com/arocks/edge/archive/master.zip --extension=py,md,html,env crypto_stats\n```", "```py\ndocker run -v \"$(pwd)\":/app django django-admin startproject --template=https://github.com/arocks/edge/archive/master.zip --extension=py,md,html,env crypto_stats\n```", "```py\ndocker run -v \"$(pwd)\":/app -p 8000:8000 -it django bash\ncd crypto_stats\npip install -r requirements.txt\n```", "```py\ncd src\ncp crypto_stats/settings/local.sample.env crypto_stats/settings/local.env\n```", "```py\npython manage.py migrate\npython manage.py createsuperuser\n```", "```py\npython manage.py runserver 0.0.0.0:8000\n```", "```py\ndocker exec -it 377bfb2f3db4 bash\n```", "```py\ndocker ps -a\n```", "```py\ncd /app/crypto_stats/src\npython manage.py startapp bitcoin\n```", "```py\nfrom django.shortcuts import render\nfrom django.http import HttpResponse\n\n# Create your views here.\nfrom io import BytesIO\nimport matplotlib\nmatplotlib.use('Agg')\nimport matplotlib.pyplot as plt\n\ndef test_view(request):\n    # Create a new Matplotlib figure\n    fig, ax = plt.subplots()\n\n    # Prepare a simple line chart\n    ax.plot([1, 2, 3, 4], [3, 6, 9, 12])\n\n    ax.set_title('Matplotlib Chart in Django') \n\n    plt.tight_layout()\n\n    # Create a bytes buffer for saving image\n    fig_buffer = BytesIO()\n    plt.savefig(fig_buffer, dpi=150)\n\n    # Save the figure as a HttpResponse\n    response = HttpResponse(content_type='image/png')\n    response.write(fig_buffer.getvalue())\n    fig_buffer.close()\n\n    return response\n```", "```py\nfrom django.urls import path\n\nfrom . import views\n\napp_name = 'bitcoin'\nurlpatterns = [\n    path('test/', views.test_view),\n]\n```", "```py\n...\nimport profiles.urls\nimport accounts.urls\n# Import your app's url patterns here\nimport bitcoin.urls\nfrom . import views\n\n...\n\nurlpatterns = [\n    path('', views.HomePage.as_view(), name='home'),\n    path('about/', views.AboutPage.as_view(), name='about'),\n    path('users/', include(profiles.urls)),\n    path('admin/', admin.site.urls),\n    # Add your app's url patterns here\n    path('bitcoin/', include(bitcoin.urls)),\n    path('', include(accounts.urls)),\n]\n...\n```", "```py\n... A bunch of import statements\n\ndef get_bitcoin_dataset():\n    \"\"\"Obtain and parse a quandl bitcoin dataset in Pandas DataFrame     format\n     Quandl returns dataset in JSON format, where data is stored as a \n     list of lists in response['dataset']['data'], and column headers\n     stored in response['dataset']['column_names'].\n\n     Returns:\n     df: Pandas DataFrame of a Quandl dataset\"\"\"\n\n    # Input your own API key here\n    api_key = \"\"\n\n    # Quandl code for Bitcoin historical price in BitStamp exchange\n    code = \"BCHARTS/BITSTAMPUSD\"\n    base_url = \"https://www.quandl.com/api/v3/datasets/\"\n    url_suffix = \".json?api_key=\"\n\n    # We want to get the data within a one-year window only\n    time_now = datetime.datetime.now()\n    one_year_ago = time_now.replace(year=time_now.year-1)\n    start_date = one_year_ago.date().isoformat()\n    end_date = time_now.date().isoformat()\n    date = \"&start_date={}&end_date={}\".format(start_date, end_date)\n\n    # Fetch the JSON response \n    u = urlopen(base_url + code + url_suffix + api_key + date)\n    response = json.loads(u.read().decode('utf-8'))\n\n    # Format the response as Pandas Dataframe\n    df = pd.DataFrame(response['dataset']['data'], columns=response['dataset']['column_names'])\n\n    # Convert Date column from string to Python datetime object,\n    # then to float number that is supported by Matplotlib.\n    df[\"Datetime\"] = date2num(pd.to_datetime(df[\"Date\"], format=\"%Y-%m-%d\").tolist())\n\n    return df\n```", "```py\ndef candlestick_ohlc(ax, quotes, width=0.2, colorup='k', colordown='r',\n alpha=1.0):\n    \"\"\"\n    Parameters\n    ----------\n    ax : `Axes`\n    an Axes instance to plot to\n    quotes : sequence of (time, open, high, low, close, ...) sequences\n    As long as the first 5 elements are these values,\n    the record can be as long as you want (e.g., it may store volume).\n    time must be in float days format - see date2num\n    width : float\n        fraction of a day for the rectangle width\n    colorup : color\n        the color of the rectangle where close >= open\n    colordown : color\n        the color of the rectangle where close < open\n    alpha : float\n        the rectangle alpha level\n    Returns\n    -------\n    ret : tuple\n        returns (lines, patches) where lines is a list of lines\n        added and patches is a list of the rectangle patches added\n    \"\"\"\n    OFFSET = width / 2.0\n    lines = []\n    patches = []\n    for q in quotes:\n        t, open, high, low, close = q[:5]\n        if close >= open:\n            color = colorup\n            lower = open\n            height = close - open\n        else:\n            color = colordown\n            lower = close\n            height = open - close\n\n        vline = Line2D(\n                   xdata=(t, t), ydata=(low, high),\n                   color=color,\n                   linewidth=0.5,\n                   antialiased=True,\n        )\n        rect = Rectangle(\n                     xy=(t - OFFSET, lower),\n                     width=width,\n                     height=height,\n                     facecolor=color,\n                     edgecolor=color,\n        )\n        rect.set_alpha(alpha)\n        lines.append(vline)\n        patches.append(rect)\n        ax.add_line(vline)\n        ax.add_patch(rect)\n        ax.autoscale_view()\n\n    return lines, patches\n```", "```py\ndef bitcoin_chart(request):\n    # Get a dataframe of bitcoin prices\n    bitcoin_df = get_bitcoin_dataset()\n\n    # candlestick_ohlc expects Date (in floating point number), Open, High, Low, Close columns only\n    # So we need to select the useful columns first using DataFrame.loc[]. Extra columns can exist, \n    # but they are ignored. Next we get the data for the last 30 trading only for simplicity of plots.\n    candlestick_data = bitcoin_df.loc[:, [\"Datetime\",\n                                          \"Open\",\n                                          \"High\",\n                                          \"Low\",\n                                          \"Close\",\n                                          \"Volume (Currency)\"]].iloc[:30]\n\n    # Create a new Matplotlib figure\n    fig, ax = plt.subplots()\n\n    # Prepare a candlestick plot\n    candlestick_ohlc(ax, candlestick_data.values, width=0.6)\n\n    ax.xaxis.set_major_locator(WeekdayLocator(MONDAY)) # major ticks on the mondays\n    ax.xaxis.set_minor_locator(DayLocator()) # minor ticks on the days\n    ax.xaxis.set_major_formatter(DateFormatter('%Y-%m-%d'))\n    ax.xaxis_date() # treat the x data as dates\n\n    # rotate all ticks to vertical\n    plt.setp(ax.get_xticklabels(), rotation=90, horizontalalignment='right') \n\n    ax.set_ylabel('Price (US $)') # Set y-axis label\n\n    plt.tight_layout()\n\n    # Create a bytes buffer for saving image\n    fig_buffer = BytesIO()\n    plt.savefig(fig_buffer, dpi=150)\n\n    # Save the figure as a HttpResponse\n    response = HttpResponse(content_type='image/png')\n    response.write(fig_buffer.getvalue())\n    fig_buffer.close()\n\n    return response\n```", "```py\nfrom django.urls import path\n\nfrom . import views\n\napp_name = 'bitcoin'\nurlpatterns = [\n    path('30/', views.bitcoin_chart),\n]\n```", "```py\n# FuncFormatter to convert tick values to Millions\ndef millions(x, pos):\n    return '%dM' % (x/1e6)\n\ndef bitcoin_chart(request):\n    # Get a dataframe of bitcoin prices\n    bitcoin_df = get_bitcoin_dataset()\n\n    # candlestick_ohlc expects Date (in floating point number), Open, High, Low, Close columns only\n    # So we need to select the useful columns first using DataFrame.loc[]. Extra columns can exist, \n    # but they are ignored. Next we get the data for the last 30 trading only for simplicity of plots.\n    candlestick_data = bitcoin_df.loc[:, [\"Datetime\",\n                                          \"Open\",\n                                          \"High\",\n                                          \"Low\",\n                                          \"Close\",\n                                          \"Volume (Currency)\"]].iloc[:30]\n\n    # Convert to StockDataFrame\n    # Need to pass a copy of candlestick_data to StockDataFrame.retype\n    # Otherwise the original candlestick_data will be modified\n    stockstats = StockDataFrame.retype(candlestick_data.copy())\n\n    # 5-day exponential moving average on closing price\n    ema_5 = stockstats[\"close_5_ema\"]\n    # 10-day exponential moving average on closing price\n    ema_10 = stockstats[\"close_10_ema\"]\n    # 30-day exponential moving average on closing price\n    ema_30 = stockstats[\"close_30_ema\"]\n    # Upper Bollinger band\n    boll_ub = stockstats[\"boll_ub\"]\n    # Lower Bollinger band\n    boll_lb = stockstats[\"boll_lb\"]\n    # 7-day Relative Strength Index\n    rsi_7 = stockstats['rsi_7']\n    # 14-day Relative Strength Index\n    rsi_14 = stockstats['rsi_14']\n\n    # Create 3 subplots spread across three rows, with shared x-axis. \n    # The height ratio is specified via gridspec_kw\n    fig, axarr = plt.subplots(nrows=3, ncols=1, sharex=True, figsize=(8,8),\n                             gridspec_kw={'height_ratios':[3,1,1]})\n\n    # Prepare a candlestick plot in the first axes\n    candlestick_ohlc(axarr[0], candlestick_data.values, width=0.6)\n\n    # Overlay stock indicators in the first axes\n    axarr[0].plot(candlestick_data[\"Datetime\"], ema_5, lw=1, label='EMA (5)')\n    axarr[0].plot(candlestick_data[\"Datetime\"], ema_10, lw=1, label='EMA (10)')\n    axarr[0].plot(candlestick_data[\"Datetime\"], ema_30, lw=1, label='EMA (30)')\n    axarr[0].plot(candlestick_data[\"Datetime\"], boll_ub, lw=2, linestyle=\"--\", label='Bollinger upper')\n    axarr[0].plot(candlestick_data[\"Datetime\"], boll_lb, lw=2, linestyle=\"--\", label='Bollinger lower')\n\n    # Display RSI in the second axes\n    axarr[1].axhline(y=30, lw=2, color = '0.7') # Line for oversold threshold\n    axarr[1].axhline(y=50, lw=2, linestyle=\"--\", color = '0.8') # Neutral RSI\n    axarr[1].axhline(y=70, lw=2, color = '0.7') # Line for overbought threshold\n    axarr[1].plot(candlestick_data[\"Datetime\"], rsi_7, lw=2, label='RSI (7)')\n    axarr[1].plot(candlestick_data[\"Datetime\"], rsi_14, lw=2, label='RSI (14)')\n\n    # Display trade volume in the third axes\n    axarr[2].bar(candlestick_data[\"Datetime\"], candlestick_data['Volume (Currency)'])\n\n    # Label the axes\n    axarr[0].set_ylabel('Price (US $)')\n    axarr[1].set_ylabel('RSI')\n    axarr[2].set_ylabel('Volume (US $)')\n\n    axarr[2].xaxis.set_major_locator(WeekdayLocator(MONDAY)) # major ticks on the mondays\n    axarr[2].xaxis.set_minor_locator(DayLocator()) # minor ticks on the days\n    axarr[2].xaxis.set_major_formatter(DateFormatter('%Y-%m-%d'))\n    axarr[2].xaxis_date() # treat the x data as dates\n    axarr[2].yaxis.set_major_formatter(FuncFormatter(millions)) # Change the y-axis ticks to millions\n    plt.setp(axarr[2].get_xticklabels(), rotation=90, horizontalalignment='right') # Rotate x-tick labels by 90 degree\n\n    # Limit the x-axis range to the last 30 days\n    time_now = datetime.datetime.now()\n    datemin = time_now-datetime.timedelta(days=30)\n    datemax = time_now\n    axarr[2].set_xlim(datemin, datemax)\n\n    # Show figure legend\n    axarr[0].legend()\n    axarr[1].legend()\n\n    # Show figure title\n    axarr[0].set_title(\"Bitcoin 30-day price trend\", loc='left')\n\n    plt.tight_layout()\n\n    # Create a bytes buffer for saving image\n    fig_buffer = BytesIO()\n    plt.savefig(fig_buffer, dpi=150)\n\n    # Save the figure as a HttpResponse\n    response = HttpResponse(content_type='image/png')\n    response.write(fig_buffer.getvalue())\n    fig_buffer.close()\n\n    return response\n```", "```py\n{% block container %}\n<!-- Benefits of the Django application -->\n<a name=\"about\"></a>\n\n<div class=\"container\">\n  <div class=\"row\">\n    <div class=\"col-lg-8\">\n      <h2>Bitcoin pricing trend</h2>\n      <img src=\"img/\" alt=\"Bitcoin prices\" style=\"width:100%\">\n      <p><a class=\"btn btn-primary\" href=\"#\" role=\"button\">View details &raquo;</a></p>\n    </div>\n    <div class=\"col-lg-4\">\n      <h2>Heading</h2>\n      <p>Donec sed odio dui. Cras justo odio, dapibus ac facilisis in, egestas eget quam. Vestibulum id ligula porta felis euismod semper. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa.</p>\n      <p><a class=\"btn btn-primary\" href=\"#\" role=\"button\">View details &raquo;</a></p>\n    </div>\n  </div>\n</div>\n\n{% endblock container %}\n```"]