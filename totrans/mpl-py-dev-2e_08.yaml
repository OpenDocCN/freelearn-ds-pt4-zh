- en: Integrating Matplotlib with Web Applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Web-based applications (web apps) offer multi-level advantages. First, users
    can enjoy a unified experience across platforms. Second, since an installation
    process is not required, users can enjoy a simpler workflow. Lastly, from the
    perspective of developers, the development cycle can be simplified as less platform-specific
    code has to be maintained. Given these advantages, more and more applications
    are being developed online.
  prefs: []
  type: TYPE_NORMAL
- en: Owing to the popularity and flexibility of Python, it makes sense for web developers
    to use Python-based web frameworks such as Django and Flask to develop web applications.
    In fact, Django and Flask ranked 6th and 13th out of 175 respectively in terms
    of popularity, according to [http://hotframeworks.com/](http://hotframeworks.com/).
    These frameworks are *batteries included*. From user authentication, user administration,
    and content management to API design, these frameworks have got them all covered.
    The code base is closely reviewed by the open source community such that sites
    that were developed using these frameworks are protected against common attacks,
    such as SQL injection, cross-site request forgery, and cross-site scripting.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we are going to learn how to develop a simple site that displays
    the price of Bitcoin. Examples based on Django  will be covered. We will use Docker
    18.03.0-ce, and Django 2.0.4 for demonstration. Let's begin by going through the
    steps of initializing a Docker-based development environment.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Docker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Docker allows developers to run applications in self-contained and lightweight
    containers. Since its introduction in 2013, Docker has quickly gained popularity
    among developers. At the center of its technology, Docker uses the resource isolation
    methods of the Linux kernel instead of a full-blown virtualization hypervisor
    to run applications.
  prefs: []
  type: TYPE_NORMAL
- en: This enables easier development, packaging, deployment, and management of code.
    Therefore, all code development work in this chapter will be conducted using a
    Docker-based environment.
  prefs: []
  type: TYPE_NORMAL
- en: Docker for Windows users
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are two ways to install Docker on Windows: the aptly named Docker for
    Windows package, and Docker Toolbox. I recommend stable versions of the Docker
    Toolbox because Docker for Windows requires Hyper-V support in 64-bit Windows
    10 Pro. Meanwhile, Docker for Windows is not supported by older versions of Windows.
    Detailed installation instructions can be found at [https://docs.docker.com/toolbox/toolbox_install_windows/](https://docs.docker.com/toolbox/toolbox_install_windows/),
    but we will also cover the important steps here.'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, download Docker Toolbox from the following link: [https://github.com/docker/toolbox/releases](https://github.com/docker/toolbox/releases).
    Choose the file with the name `DockerToolbox-xx.xx.x-ce.exe`, where `x` refers
    to the latest version numbers:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5b2481e4-15e3-4773-8857-70a68bb5f567.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, run the downloaded installer. Follow the default instructions of each
    prompt to install:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/68bda216-8509-443e-983d-34dcc30d1d3e.png)'
  prefs: []
  type: TYPE_IMG
- en: Windows might ask you for permission to make certain changes. It is normal,
    and make sure you allow the changes to happen.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, once the installation is complete, you should be able to locate Docker
    Quickstart Terminal in the Start menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/22c6c3b3-51f5-4351-a2ac-b3ba3a4e1e83.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the icon to launch the Docker Toolbox Terminal, which begins an initialization
    process. When the process is complete, the following terminal will be shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fb2879b8-18b6-4986-91dd-9a2a111858ac.png)'
  prefs: []
  type: TYPE_IMG
- en: Docker for Mac users
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For Mac users, I recommend the Docker CE for Mac (stable) app, which is available
    at [https://store.docker.com/editions/community/docker-ce-desktop-mac](https://store.docker.com/editions/community/docker-ce-desktop-mac).
    In addition, a full installation guide can be found via the following link: [https://docs.docker.com/docker-for-mac/install/](https://docs.docker.com/docker-for-mac/install/).
  prefs: []
  type: TYPE_NORMAL
- en: 'The installation process of Docker CE for Mac is arguably simpler than for
    its Windows counterpart. Here are the major steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, double-click on the downloaded `Docker.dmg` file to mount the image.
    When you see the following popup, drag and drop the Docker icon on the left to
    the Applications folder on the right:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/cc00110a-9fb4-43a6-b6f2-aa17b92743d9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, in your Applications folder or Launchpad, locate and double-click on
    the Docker app. You should be able to see a whale icon in the top status bar if
    Docker was successfully launched:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2d5fb604-2f21-4bef-9a35-b9551dc3eef0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, open the Terminal app in the Applications | Utilities folder. Type
    `docker info`, followed by *Enter* to check whether Docker is installed properly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e255ba06-af04-4976-ba33-1f5c5d7e4a12.png)'
  prefs: []
  type: TYPE_IMG
- en: More about Django
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Django is a popular web framework that is designed to simplify the development
    and deployment of web applications. It includes loads of boilerplate code for
    everyday tasks, such as database model management, frontend templating, session
    authentication, and security. Django was built around the **Model-Template-View**
    (**MTV**) design pattern.
  prefs: []
  type: TYPE_NORMAL
- en: The model is perhaps the most critical component of MTV. It refers to how you
    represent your data in terms of different tables and attributes. It also abstracts
    away the nitty-gritty details of different database engines such that the same
    model can be applied to SQLite, MySQL, and PostgreSQL. Meanwhile, the model layer
    of Django would expose engine-specific parameters, such as `ArrayField` and `JSONField`
    in PostgreSQL, for fine-tuning of your data representation.
  prefs: []
  type: TYPE_NORMAL
- en: The template is similar to the role of a view in the canonical MTV framework.
    It handles the presentation of data to the users. In other words, it doesn't handle
    the logic of how the data was generated.
  prefs: []
  type: TYPE_NORMAL
- en: The view in Django is responsible for handling a user's request, and the subsequent
    logic of returning a response. It sits between the model layer and the template
    layer. A view determines what kind of data should be fetched from the model and
    how to process the data for the template.
  prefs: []
  type: TYPE_NORMAL
- en: 'The key selling points of Django are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Development speed**: Loads of key components are provided; this reduces the
    number of repetitive tasks in a development cycle. For instance, it takes mere
    minutes to build a simple blog using Django.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Security**: Best practices of web security are included in Django. The risks
    of hacks such as SQL injection, cross-site scripting, cross-site request forgery,
    and clickjacking are greatly reduced. Its user authentication system uses the
    PBKDF2 algorithm with a salted SHA256 hash, which is recommended by NIST. Other
    state-of-the-art hash algorithms, such as Argon2, are also available.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Scalability**: The MTV layers of Django use a shared-nothing architecture.
    If a certain layer is the bottleneck of the web application, just throw more hardware
    to it; Django will take advantage of the additional hardware for each of the layers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Django development in Docker containers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To keep things tidy, let's create an empty directory named `Django` to host
    all the files. Inside the `Django` directory, we need to define the content of
    a container by creating a `Dockerfile` using our favorite text editor. A `Dockerfile` defines
    the base image of a container as well as the commands that are necessary to compile
    an image.
  prefs: []
  type: TYPE_NORMAL
- en: For more information about Dockerfile, please visit [https://docs.docker.com/engine/reference/builder/](https://docs.docker.com/engine/reference/builder/).
  prefs: []
  type: TYPE_NORMAL
- en: 'We will use Python 3.6.5 as our base image. Please copy the following code
    to your Dockerfile. A series of additional commands define the working directory
    and the initiation process:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'As you may notice, we also need a text file, `requirements.txt`, to define
    any package dependencies in our project. Please add the following content to the `requirements.txt` file
    in the folder where the project is present:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can run `docker build -t django` in the terminal to build the image.
    It takes up to several minutes before the process is complete:'
  prefs: []
  type: TYPE_NORMAL
- en: Please make sure you are currently located in the same project folder before
    running the command.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/99b24f91-28c0-4404-b0d9-e9ed1982a87e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following message will be shown if the building process is complete. The
    exact hash code at the end of the `Successfully built ...` message could be different:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Starting a new Django site
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will now create a new Docker container using the `docker run` command. The
    `-v "$(pwd)":/app` parameter creates a bind-mount of the current directory to
    `/app` in the container. Files in the current directory are shared between the
    host and the guest systems.
  prefs: []
  type: TYPE_NORMAL
- en: 'The second untagged parameter `django` defines the image that we use for the
    creation of a container. The rest of the command string is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This is passed to the guest container for execution. It creates a new Django
    project named `crypto_stats` using the edge template by Arun Ravindran ([https://django-edge.readthedocs.io/en/latest/](https://django-edge.readthedocs.io/en/latest/)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Upon successful execution, you should be able to see the following files and
    directories if you go inside the newly created `crypto_stats` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ce85ce17-fff8-4bf1-83d7-a7ad9f454c72.png)'
  prefs: []
  type: TYPE_IMG
- en: Installation of Django dependencies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `requirements.txt` file in the `crypto_stats` folder defines the Python
    package dependencies of our Django project. To install these dependencies, please
    issue the following `docker run` command.
  prefs: []
  type: TYPE_NORMAL
- en: The `-p 8000:8000` parameter exposes port `8000` from the guest to the host
    machine. The `-it` parameter creates a pseudo-terminal with `stdin` support to
    allow an interactive terminal session.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are again using the `django` image, but this time we launch a Bash Terminal
    shell instead:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: You should make sure that you are still in your root project folder (that is, `Django`)
    when you issue the command.
  prefs: []
  type: TYPE_NORMAL
- en: 'The chain of commands would produce the following results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/183d2d48-3040-439f-bd55-6459f01a66bc.png)'
  prefs: []
  type: TYPE_IMG
- en: Django environment setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Sensitive environment variables, such as Django''s `SECRET_KEY` ([https://docs.djangoproject.com/en/2.0/ref/settings/#std:setting-SECRET_KEY](https://docs.djangoproject.com/en/2.0/ref/settings/#std:setting-SECRET_KEY)),
    should be kept in a private file that is excluded from version control software.
    For simplicity, we can just use the sample from the project template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we can use `manage.py` to create a default SQLite database and the superuser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The `migrate` command initializes the database models, including user authentication,
    admin, user profiles, user sessions, content types, and thumbnails.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `createsuperuser` command will ask you a series of questions for the creation
    of a superuser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/533006a6-da8b-49b8-8c0d-d5bccd54502f.png)'
  prefs: []
  type: TYPE_IMG
- en: Running the development server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Launching the default development server is very simple; in fact, it takes
    only a single line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The `0.0.0.0:8000` parameter will tell Django to serve the website to all addresses
    at port `8000`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In your host machine, you can now launch your favorite browser and go to `http://localhost:8000`
    to see your site:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c5a99622-ec6d-41b6-86b6-44d0c3d7ff24.png)'
  prefs: []
  type: TYPE_IMG
- en: The look of the site is decent, isn't it?
  prefs: []
  type: TYPE_NORMAL
- en: Showing Bitcoin prices using Django and Matplotlib
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have now established a fully fledged website backbone using just a few commands.
    I hope you will appreciate the simplicity of using Django for web development.
    Now, I will demonstrate how we can integrate Matplotlib charts into a Django site,
    which is the key topic of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Django app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An app in the Django ecosystem refers to an application that handles a specific
    function within a site. For instance, our default project comes with the profile
    and account apps already. With the terminology clarified, we are set to build
    an app to display the latest price of bitcoin.
  prefs: []
  type: TYPE_NORMAL
- en: 'We should keep our development server running in the background. When the server
    detects any changes to our code base, it will reload automatically to reflect
    the changes. Therefore, right now, we need to launch a new Terminal and attach
    to the running server container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The strange-looking numbers before `bash` refer to the ID of the container.
    We can find the ID from the terminal that holds the running server:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e4bba061-76af-4b7f-8b59-e6b3833a7929.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Alternatively, we can get the IDs of all running containers by issuing the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The `docker exec` command helps you go back to the same Bash environment as
    the development server. We can now start a new app:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the host computer''s project directory, we should be able to see a new
    `bitcoin` folder inside `crypto_stats/src/`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b2ab9c7d-d86b-4ce8-af7c-3b26f15e6b70.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating a simple Django view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I will demonstrate the workflow of creating a Django view via a simple line
    chart.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the newly created bitcoin app folder, you should be able to find `views.py`,
    which stores all the views within the app. Let''s edit it and create a view that
    outputs a Matplotlib line chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Since Tkinter is not available inside our server container, we need to switch
    the Matplotlib graphical backend from the default TkAgg to Agg by calling `matplotlib.use('Agg')`
    first.
  prefs: []
  type: TYPE_NORMAL
- en: '`matplotlib.use(''Agg'')` must be called right after the line `import matplotlib` and
    before any other function calls of Matplotlib.'
  prefs: []
  type: TYPE_NORMAL
- en: The function `test_view` (request) expects a Django `HttpRequest` object ([https://docs.djangoproject.com/en/2.0/ref/request-response/#django.http.HttpRequest](https://docs.djangoproject.com/en/2.0/ref/request-response/#django.http.HttpRequest))
    as input, and outputs a Django `HttpResponse` object ([https://docs.djangoproject.com/en/2.0/ref/request-response/#django.http.HttpResponse](https://docs.djangoproject.com/en/2.0/ref/request-response/#django.http.HttpResponse)).
  prefs: []
  type: TYPE_NORMAL
- en: To import a Matplotlib plot to the `HttpResponse` object, we need to save the
    plot to an intermediate `BytesIO` object first, which can be found in the `io`
    package ([https://docs.python.org/3/library/io.html#binary-i-o](https://docs.python.org/3/library/io.html#binary-i-o)).
    The `BytesIO` object acts as a buffer of the binary image file, such that `plt.savefig`
    can write a PNG file directly into it.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we create a new `HttpResponse()` object with the `content_type` parameter
    set to `image/png`. The binary content inside the buffer is exported to the `HttpResponse()`
    object via `response.write(fig_buffer.getvalue())`. Finally, the buffer is closed
    to free up the temporary memory.
  prefs: []
  type: TYPE_NORMAL
- en: To direct users to this view, we need to create a new file called `urls.py`
    inside the `{Project_folder}/crypto_stats/src/bitcoin` folder.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The line `path('test/', views.test_view)` states that all URLs with suffix `test/` 
    will be directed to the `test_view`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to add our app''s `url` patterns to the global patterns as well. Let''s
    edit `{Project_folder}/crypto_stats/src/crypto_stats/urls.py`, and add the two
    lines commented as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The line `path('bitcoin/', include(bitcoin.urls)),` states that every URL that
    begins with [http://<your-domain>/bitcoin](http://%3Cyour-domain/bitcoin) would
    be directed to the bitcoin app.
  prefs: []
  type: TYPE_NORMAL
- en: Wait for a few seconds until the development server reloads. You can now head
    to [http://localhost:8000/bitcoin/test/](http://localhost:8000/bitcoin/test/)
    to see your plot.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/99e179ea-dfce-41fe-9964-cb70c7ef4e74.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating a Bitcoin candlestick view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we are going to fetch the historical prices of Bitcoin from
    the Quandl API. Please note that we do not guarantee the accuracy, completeness,
    or validity of the visualizations presented; nor are we responsible for any errors
    or omissions that may have occurred. The data, visualizations, and analyses are
    provided on an *as is* basis for educational purposes only, without any warranties
    of any kind. Readers are advised to conduct their own independent research into
    individual cryptocurrencies before making a investment decision.
  prefs: []
  type: TYPE_NORMAL
- en: If you are not familiar with Quandl, it is a financial and economic data warehouse
    that stores millions of datasets from hundreds of publishers. Before you can use
    the Quandl API, you would need to register an account on its website ([https://www.quandl.com](https://www.quandl.com)).
    A free API access key can be obtained by following the instructions in this link [https://docs.quandl.com/docs#section-authentication](https://docs.quandl.com/docs#section-authentication).
    I will cover more about Quandl and APIs in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Now, remove the existing `views.py` file from the `crypto_stats/src/bitcoin`
    folder. Copy `views1.py` from this chapter's code repository to `crypto_stats/src/bitcoin`,
    and rename it as `views.py`. I will explain each part of `views1.py` accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: 'The historical bitcoin prices data in the Bitstamp exchange can be found here:
    [https://www.quandl.com/data/BCHARTS/BITSTAMPUSD-Bitcoin-Markets-bitstampUSD](https://www.quandl.com/data/BCHARTS/BITSTAMPUSD-Bitcoin-Markets-bitstampUSD).
    The corresponding unique identifier for our target dataset is `BCHARTS/BITSTAMPUSD`.
    Although an official Python client library is available from Quandl, we are not
    going to use that for the sake of demonstrating the general procedures of importing
    JSON data. The function `get_bitcoin_dataset` uses nothing more than `urllib.request.urlopen`
    and `json.loads` to fetch the JSON data from the API. Finally the data is processed
    into a pandas DataFrame for our further consumption.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Remember to specify your own API key at this line:  `api_key = ""`.
  prefs: []
  type: TYPE_NORMAL
- en: The `Date` column in `df` is recorded as a series of Python strings. Although
    Seaborn can use string-formatted dates in some functions, Matplotlib cannot. To
    make the dates malleable to data processing and visualizations, we need to convert
    the values to float numbers that is supported by Matplotlib. Therefore, I have
    used `matplotlib.dates.date2num` to perform the conversion.
  prefs: []
  type: TYPE_NORMAL
- en: Our data frame contains the opening and closing price, as well as the highest
    and lowest price per trading day. None of the plots we described thus far are
    able to describe the trend of all these variables in a single plot.
  prefs: []
  type: TYPE_NORMAL
- en: In the financial world, candlestick plot is almost the default choice for describing
    price movements of stocks, currencies, and commodities over a time period. Each
    candlestick consists of the body that describes the opening and closing prices,
    and extended wicks that illustrate the highest and lowest prices, in one particular
    trading day. If the closing price is higher than the opening price, the candlestick
    is often colored black. Conversely, the candlestick would be colored red if the
    closing is lower. Traders can then infer the opening and closing prices based
    on the combination of color and the boundary of candlestick body.
  prefs: []
  type: TYPE_NORMAL
- en: In the following example, we are going to prepare a candlestick chart of bitcoin
    in the last 30 trading days of our data frame. The `candlestick_ohlc` function
    was adapted from the deprecated `matplotlib.finance` package. It plots the time,
    open, high, low, and close as a vertical line ranging from low to high. It further
    uses a series of colored rectangular bars to represent the open-close span.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The `bitcoin_chart` function handles the actual processing of user requests
    and the output of `HttpResponse`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '`ax.xaxis.set_major_formatter(DateFormatter(''%Y-%m-%d''))` is useful for the
    conversion of floating point numbers back to dates.'
  prefs: []
  type: TYPE_NORMAL
- en: Like the first Django view example, we need to modify our urls.py to direct
    the URLs to our `bitcoin_chart` view.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Voila! You can look at the bitcoin candlestick plot by going to `http://localhost:8000/bitcoin/30/`.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d2616a8d-0e10-4c28-a726-986aa922e1be.png)'
  prefs: []
  type: TYPE_IMG
- en: Integrating more pricing indicators
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The candlestick plot in the current form is a bit bland. Traders would usually
    overlay stock indicators such as **average true range** (**ATR**), Bollinger band,
    **commodity channel index** (**CCI**), **exponential moving average** (**EMA**),
    **moving average convergence divergence** (**MACD**), **relative strength index**
    (**RSI**), and other various stats for technical analysis.
  prefs: []
  type: TYPE_NORMAL
- en: Stockstats ([https://github.com/jealous/stockstats](https://github.com/jealous/stockstats))
    is a great package for calculating the preceding indicators/stats and much more.
    It wraps around pandas DataFrames and generate that stats on the fly when they
    are accessed.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we can convert a pandas DataFrame to a stockstats DataFrame
    via `stockstats.StockDataFrame.retype()`. A plethora of stock indicators can then
    be accessed by following the pattern `StockDataFrame["variable_timeWindow_indicator"]`.
    For example, `StockDataFrame['open_2_sma']` would give us 2-day simple moving
    average on opening price. Shortcuts may be available for some indicators, so please
    consult the official documentation for more information.
  prefs: []
  type: TYPE_NORMAL
- en: The file `views2.py` in our code repository contains the code to create an extended
    Bitcoin pricing view. You can copy `views2.py` from this chapter's code repository
    to `crypto_stats/src/bitcoin`, and rename it as `views.py`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the important changes to our previous code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Again, remember to specify your own API key at the line inside `get_bitcoin_dataset(): 
    api_key = ""`.
  prefs: []
  type: TYPE_NORMAL
- en: The modified `bitcoin_chart` view would create three subplots that are spread
    across three rows, with a shared *x* axis. The height ratio between the subplots
    is specified via `gridspec_kw`.
  prefs: []
  type: TYPE_NORMAL
- en: The first subplot would display a candlestick chart as well as various stock
    indicators from the `stockstats` package.
  prefs: []
  type: TYPE_NORMAL
- en: The second subplot displays the **relative strength index** (**RSI**) of bitcoin
    across the 30-day window.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the third subplot displays the volume (USD) of Bitcoin. A custom `FuncFormatter
    millions` is used to convert the *y* axis values to millions.
  prefs: []
  type: TYPE_NORMAL
- en: You can now go to the same link at [http://localhost:8000/bitcoin/30/](http://localhost:8000/bitcoin/30/)
    to view the complete chart.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2bb2dd45-be87-4286-ab8e-08e8b26093d9.png)'
  prefs: []
  type: TYPE_IMG
- en: Integrating the image into a Django template
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To display the chart in our home page, we can modify the home page template
    at `{Project_folder}/crypto_stats/src/templates/home.html`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We would need to modify the lines after the comment sentence `<!-- Benefits
    of the Django application -->` to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Basically, our `bitcoin_chart` view is loaded as an image through the line `<img
    src="img/" alt="Bitcoin prices" style="width:100%">`. I have also reduced the
    number of columns in the container section from 3 to 2, and adjusted the size
    of the first column by setting the class to  `col-lg-8` instead.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you go to the home page (that is, `http://localhost:8000`), you will see
    the following screen when you scroll to the bottom:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d802a17d-36f4-431d-8928-437e70197d26.png)'
  prefs: []
  type: TYPE_IMG
- en: There are a few caveats of this implementation. First, each page visit would
    incur an API call to Quandl, so your free API quota will be consumed quickly.
    A better way would be to fetch the prices daily and record the data in a proper
    database model.
  prefs: []
  type: TYPE_NORMAL
- en: Second, the image output in its current form is not integrated into the app-specific
    template. This is out of the scope of this Matplotlib-focused book. However, interested
    readers can refer to the instructions in the online documentation ([https://docs.djangoproject.com/en/2.0/topics/templates/](https://docs.djangoproject.com/en/2.0/topics/templates/)).
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, the images are static. There are third-party packages such as `mpld3`
    and Plotly that can turn a Matplotlib chart into an interactive Javascript-based
    chart. The use of these packages may further enhance the user experience.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned about a popular framework made to simplify the
    development and deployment of web applications, called Django. You further learned
    about integrating Matplotlib charts into a Django site.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will cover some useful techniques to customize figure
    aesthetics for effective storytelling.
  prefs: []
  type: TYPE_NORMAL
