["```py\nCountry,Time,Sex,Age,Value\nUnited Kingdom,1950,Male,0-4,2238.735\nUnited States of America,1950,Male,0-4,8812.309\n```", "```py\n{\n \"population\": [\n {\n \"Country\": \"United Kingdom\",\n \"Time\": 1950,\n \"Sex\", \"Male\",\n \"Age\", \"0-4\",\n \"Value\",2238.735\n },{\n \"Country\": \"United States of America\",\n \"Time\": 1950,\n \"Sex\", \"Male\",\n \"Age\", \"0-4\",\n \"Value\",8812.309\n },\n ]\n}\n```", "```py\nGET https://www.quandl.com/api/v3/datasets/{Quandl code}/data.json\n```", "```py\nfrom urllib.request import urlopen\nimport json\nimport time\nimport pandas as pd\n\ndef get_bigmac_codes():\n    \"\"\"Get a pandas DataFrame of all codes in the Big Mac index dataset\n\n    The first column contains the code, while the second header\n    contains the description of the code.\n\n    E.g. \n    ECONOMIST/BIGMAC_ARG,Big Mac Index - Argentina\n    ECONOMIST/BIGMAC_AUS,Big Mac Index - Australia\n    ECONOMIST/BIGMAC_BRA,Big Mac Index - Brazil\n\n    Returns:\n        codes: pandas DataFrame of Quandl dataset codes\"\"\"\n\n    codes_url = \"https://www.quandl.com/api/v3/databases/ECONOMIST/codes\"\n    codes = pd.read_csv(codes_url, header=None, names=['Code', 'Description'], \n                        compression='zip', encoding='latin_1')\n\n    return codes\n\ndef get_quandl_dataset(api_key, code):\n    \"\"\"Obtain and parse a quandl dataset in pandas DataFrame format\n\n    Quandl returns dataset in JSON format, where data is stored as a \n    list of lists in response['dataset']['data'], and column headers\n    stored in response['dataset']['column_names'].\n\n    E.g. {'dataset': {...,\n             'column_names': ['Date',\n                              'local_price',\n                              'dollar_ex',\n                              'dollar_price',\n                              'dollar_ppp',\n                              'dollar_valuation',\n                              'dollar_adj_valuation',\n                              'euro_adj_valuation',\n                              'sterling_adj_valuation',\n                              'yen_adj_valuation',\n                              'yuan_adj_valuation'],\n             'data': [['2017-01-31',\n                       55.0,\n                       15.8575,\n                       3.4683903515687,\n                       10.869565217391,\n                       -31.454736135007,\n                       6.2671477203176,\n                       8.2697553162259,\n                       29.626894343348,\n                       32.714616745128,\n                       13.625825886047],\n                      ['2016-07-31',\n                       50.0,\n                       14.935,\n                       3.3478406427854,\n                       9.9206349206349,\n                       -33.574590420925,\n                       2.0726096168216,\n                       0.40224795003514,\n                       17.56448458418,\n                       19.76377270142,\n                       11.643103380531]\n                      ],\n             'database_code': 'ECONOMIST',\n             'dataset_code': 'BIGMAC_ARG',\n             ... }}\n\n    A custom column--country is added to denote the 3-letter country code.\n\n    Args:\n        api_key: Quandl API key\n        code: Quandl dataset code\n\n    Returns:\n        df: pandas DataFrame of a Quandl dataset\n\n    \"\"\"\n    base_url = \"https://www.quandl.com/api/v3/datasets/\"\n    url_suffix = \".json?api_key=\"\n\n    # Fetch the JSON response \n    u = urlopen(base_url + code + url_suffix + api_key)\n    response = json.loads(u.read().decode('utf-8'))\n\n    # Format the response as pandas Dataframe\n    df = pd.DataFrame(response['dataset']['data'], columns=response['dataset']['column_names'])\n\n    # Label the country code\n    df['country'] = code[-3:]\n\n    return df\n\nquandl_dfs = []\ncodes = get_bigmac_codes()\n\n# Replace this with your own API key\napi_key = \"INSERT-YOUR-KEY-HERE\" \n\nfor code in codes.Code:\n    # Get the DataFrame of a Quandl dataset\n    df = get_quandl_dataset(api_key, code)\n\n    # Store in a list\n    quandl_dfs.append(df)\n\n    # Prevents exceeding the API speed limit\n    time.sleep(2)\n\n# Concatenate the list of data frames into a single one \nbigmac_df = pd.concat(quandl_dfs)\nbigmac_df.head()\n```", "```py\nimport urllib\nimport json\nimport pandas as pd\nimport time\nfrom urllib.request import urlopen\n\ndef get_gdp_dataset(api_key, country_code):\n    \"\"\"Obtain and parse a quandl GDP dataset in pandas DataFrame format\n    Quandl returns dataset in JSON format, where data is stored as a \n    list of lists in response['dataset']['data'], and column headers\n    stored in response['dataset']['column_names'].\n\n    Args:\n        api_key: Quandl API key\n        country_code: Three letter code to represent country\n\n    Returns:\n        df: pandas DataFrame of a Quandl dataset\n    \"\"\"\n    base_url = \"https://www.quandl.com/api/v3/datasets/\"\n    url_suffix = \".json?api_key=\"\n\n    # Compose the Quandl API dataset code to get GDP per capita (constant 2000 US$) dataset\n    gdp_code = \"WWDI/\" + country_code + \"_NY_GDP_PCAP_KD\"\n\n   # Parse the JSON response from Quandl API\n   # Some countries might be missing, so we need error handling code\n   try:\n       u = urlopen(base_url + gdp_code + url_suffix + api_key)\n   except urllib.error.URLError as e:\n       print(gdp_code,e)\n       return None\n\n   response = json.loads(u.read().decode('utf-8'))\n\n   # Format the response as pandas Dataframe\n   df = pd.DataFrame(response['dataset']['data'], columns=response['dataset']['column_names'])\n\n   # Add a new country code column\n   df['country'] = country_code\n\n   return df\n\napi_key = \"INSERT-YOUR-KEY-HERE\" #Change this to your own API key\n\nquandl_dfs = []\n\n# Loop through all unique country code values in the BigMac index DataFrame\nfor country_code in bigmac_df.country.unique():\n    # Fetch the GDP dataset for the corresponding country \n    df = get_gdp_dataset(api_key, country_code)\n\n    # Skip if the response is empty\n    if df is None:\n        continue\n\n    # Store in a list DataFrames\n    quandl_dfs.append(df)\n\n    # Prevents exceeding the API speed limit\n    time.sleep(2)\n\n# Concatenate the list of DataFrames into a single one \ngdp_df = pd.concat(quandl_dfs)\ngdp_df.head()\n```", "```py\nWWDI/EUR_NY_GDP_PCAP_KD HTTP Error 404: Not Found \nWWDI/ROC_NY_GDP_PCAP_KD HTTP Error 404: Not Found \nWWDI/SIN_NY_GDP_PCAP_KD HTTP Error 404: Not Found \nWWDI/UAE_NY_GDP_PCAP_KD HTTP Error 404: Not Found\n```", "```py\nmerged_df = pd.merge(bigmac_df[(bigmac_df.Date == \"2017-01-31\")], gdp_df[(gdp_df.Date == \"2016-12-31\")], how='inner', on='country')\nmerged_df.head()\n```", "```py\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# seaborn.regplot() returns a matplotlib.Axes object\nax = sns.regplot(x=\"Value\", y=\"dollar_price\", data=merged_df, fit_reg=False)\n# We can modify the axes labels just like other ordinary\n# Matplotlib objects\nax.set_xlabel(\"GDP per capita (constant 2000 US$)\")\nax.set_ylabel(\"BigMac index (US$)\")\nplt.show()\n```", "```py\nsns.set(style=\"whitegrid\")\nax = sns.regplot(x=\"Value\", y=\"dollar_price\", data=merged_df)\nax.set_xlabel(\"GDP per capita (constant 2000 US$)\")\nax.set_ylabel(\"BigMac index (US$)\")\n# Label the country codes which demonstrate extreme BigMac index\nfor row in merged_df.itertuples():\n    if row.dollar_price >= 5 or row.dollar_price <= 2:\n     ax.text(row.Value,row.dollar_price+0.1,row.country)\nplt.show()\n```", "```py\nfrom scipy.stats import linregress\n\nax = sns.regplot(x=\"Value\", y=\"dollar_price\", data=merged_df)\nax.set_xlabel(\"GDP per capita (constant 2000 US$)\")\nax.set_ylabel(\"BigMac index (US$)\")\n\n# Calculate linear regression parameters\nslope, intercept, r_value, p_value, std_err = linregress(merged_df.Value, merged_df.dollar_price)\n\ncolors = []\nfor row in merged_df.itertuples():\n    if row.dollar_price > row.Value * slope + intercept:\n        # Color markers as darkred if they are above the regression line\n        color = \"darkred\"\n    else:\n        # Color markers as darkblue if they are below the regression line\n        color = \"darkblue\"\n\n    # Label the country code for those who demonstrate extreme BigMac index\n    if row.dollar_price >= 5 or row.dollar_price <= 2:\n        ax.text(row.Value,row.dollar_price+0.1,row.country)\n\n    # Highlight the marker that corresponds to China\n    if row.country == \"CHN\":\n        t = ax.text(row.Value,row.dollar_price+0.1,row.country)\n        color = \"yellow\"\n\n    colors.append(color)\n\n# Overlay another scatter plot on top with marker-specific color\nax.scatter(merged_df.Value, merged_df.dollar_price, c=colors)\n\n# Label the r squared value and p value of the linear regression model.\n# transform=ax.transAxes indicates that the coordinates are given relative to the axes bounding box, \n# with 0,0 being the lower left of the axes and 1,1 the upper right.\nax.text(0.1, 0.9, \"$r^2={0:.3f}, p={1:.3e}$\".format(r_value ** 2, p_value), transform=ax.transAxes)\n\nplt.show()\n```", "```py\n# seaborn.jointplot() returns a seaborn.JointGrid object\ng = sns.jointplot(x=\"Value\", y=\"dollar_price\", data=merged_df)\n\n# Provide custom axes labels through accessing the underlying axes object\n# We can get matplotlib.axes.Axes of the scatter plot by calling g.ax_joint\ng.ax_joint.set_xlabel(\"GDP per capita (constant 2000 US$)\")\ng.ax_joint.set_ylabel(\"BigMac index (US$)\")\n\n# Set the title and adjust the margin\ng.fig.suptitle(\"Relationship between GDP per capita and BigMac Index\")\ng.fig.subplots_adjust(top=0.9)\nplt.show()\n```", "```py\npip install beautifulsoup4\n```", "```py\npip install requests\n```", "```py\nimport requests\nfrom bs4 import BeautifulSoup\n\n# Specify the url\nurl = \"https://www.bls.gov/emp/ep_table_001.htm\"\n\n# Query the website and get the html response\nresponse = requests.get(url)\n\n# Parse the returned html using BeautifulSoup\nbs = BeautifulSoup(response.text)\n\n# Select the table header by CSS selector\nthead = bs.select(\"#bodytext > table > thead\")[0]\n\n# Select the table body by CSS selector\ntbody = bs.select(\"#bodytext > table > tbody\")[0]\n\n# Make sure the code works\nprint(thead)\n```", "```py\n<thead> \n<tr> \n<th scope=\"col\"><p align=\"center\" valign=\"top\"><strong>Educational attainment</strong></p></th> \n<th scope=\"col\"><p align=\"center\" valign=\"top\">Unemployment rate (%)</p></th> \n<th scope=\"col\"><p align=\"center\" valign=\"top\">Median usual weekly earnings ($)</p></th> \n</tr> \n</thead>\n```", "```py\n# Get the column names\nheaders = []\n\n# Find all header columns in <thead> as specified by <th> html tags\nfor col in thead.find_all('th'):\n   headers.append(col.text.strip())\n\n# Dictionary of lists for storing parsed data\ndata = {header:[] for header in headers}\n```", "```py\nimport pandas as pd\n\n# Parse the rows in table body\nfor row in tbody.find_all('tr'):\n    # Find all columns in a row as specified by <th> or <td> html tags\n    cols = row.find_all(['th','td'])\n\n    # enumerate() allows us to loop over an iterable, \n    # and return each item preceded by a counter\n    for i, col in enumerate(cols):\n        # Strip white space around the text\n        value = col.text.strip()\n\n        # Try to convert the columns to float, except the first column\n        if i > 0:\n            value = float(value.replace(',','')) # Remove all commas in string\n\n        # Append the float number to the dict of lists\n        data[headers[i]].append(value)\n\n# Create a data frame from the parsed dictionary\ndf = pd.DataFrame(data)\n\n# Show an excerpt of parsed data\ndf.head()\n```", "```py\nimport matplotlib\nmatplotlib.use('SVG') # Change to SVG backend\nimport matplotlib.pyplot as plt\nimport textwrap # Standard library for text wrapping\n\n# Create a figure\nfig, ax = plt.subplots(figsize=(6,7))\n\n# Create a list of x ticks positions\nind = range(df.shape[0])\n\n# Plot a bar chart of median usual weekly earnings by educational attainments\nrects = ax.barh(ind, df[\"Median usual weekly earnings ($)\"], height=0.5)\n\n# Set the x-axis label\nax.set_xlabel('Median weekly earnings (USD)')\n\n# Label the x ticks\n# The tick labels are a bit too long, let's wrap them in 15-char lines\nylabels=[textwrap.fill(label,15) for label in df[\"Educational attainment\"]]\nax.set_yticks(ind)\nax.set_yticklabels(ylabels)\n\n# Give extra margin at the bottom to display the tick labels\nfig.subplots_adjust(left=0.3)\n\n# Save the figure in SVG format\nplt.savefig(\"test.svg\")\n```", "```py\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport textwrap\nimport requests\nimport pandas as pd\nfrom bs4 import BeautifulSoup\n# Import Matplotlib radio button widget\nfrom matplotlib.widgets import RadioButtons\n\nurl = \"https://www.bls.gov/emp/ep_table_001.htm\"\nresponse = requests.get(url)\nbs = BeautifulSoup(response.text)\nthead = bs.select(\"#bodytext > table > thead\")[0]\ntbody = bs.select(\"#bodytext > table > tbody\")[0]\n\nheaders = []\nfor col in thead.find_all('th'):\n    headers.append(col.text.strip())\n\ndata = {header:[] for header in headers}\nfor row in tbody.find_all('tr'):\n    cols = row.find_all(['th','td'])\n\n    for i, col in enumerate(cols):\n        value = col.text.strip()\n        if i > 0:\n            value = float(value.replace(',','')) \n        data[headers[i]].append(value)\n\ndf = pd.DataFrame(data)\n\nfig, ax = plt.subplots(figsize=(6,7))\nind = range(df.shape[0])\nrects = ax.barh(ind, df[\"Median usual weekly earnings ($)\"], height=0.5)\nax.set_xlabel('Median weekly earnings (USD)')\nylabels=[textwrap.fill(label,15) for label in df[\"Educational attainment\"]]\nax.set_yticks(ind)\nax.set_yticklabels(ylabels)\nfig.subplots_adjust(left=0.3)\n\n# Create axes for holding the radio selectors.\n# supply [left, bottom, width, height] in normalized (0, 1) units\nbax = plt.axes([0.3, 0.9, 0.4, 0.1])\nradio = RadioButtons(bax, ('Weekly earnings', 'Unemployment rate'))\n\n# Define the function for updating the displayed values\n# when the radio button is clicked\ndef radiofunc(label):\n  # Select columns from dataframe depending on label\n  if label == 'Weekly earnings':\n    data = df[\"Median usual weekly earnings ($)\"]\n    ax.set_xlabel('Median weekly earnings (USD)')\n  elif label == 'Unemployment rate':\n    data = df[\"Unemployment rate (%)\"]\n    ax.set_xlabel('Unemployment rate (%)')\n\n  # Update the bar heights\n  for i, rect in enumerate(rects):\n    rect.set_width(data[i])\n\n  # Rescale the x-axis range\n  ax.set_xlim(xmin=0, xmax=data.max()*1.1)\n\n  # Redraw the figure\n  plt.draw()\nradio.on_clicked(radiofunc)\n\nplt.show()\n```", "```py\n# Import Matplotlib radio button widget\nfrom matplotlib.widgets import RadioButtons\n\n# Create axes for holding the radio selectors.\n# supply [left, bottom, width, height] in normalized (0, 1) units\nbax = plt.axes([0.3, 0.9, 0.4, 0.1])\nradio = RadioButtons(bax, ('Weekly earnings', 'Unemployment rate'))\n\n# Define the function for updating the displayed values\n# when the radio button is clicked\ndef radiofunc(label):\n    # Select columns from dataframe, and change axis label depending on selection\n    if label == 'Weekly earnings':\n        data = df[\"Median usual weekly earnings ($)\"]\n        ax.set_xlabel('Median weekly earnings (USD)')\n    elif label == 'Unemployment rate':\n        data = df[\"Unemployment rate (%)\"]\n        ax.set_xlabel('Unemployment rate (%)')\n\n    # Update the bar heights\n    for i, rect in enumerate(rects):\n        rect.set_width(data[i])\n\n    # Rescale the x-axis range\n    ax.set_xlim(xmin=0, xmax=data.max()*1.1)\n\n    # Redraw the figure\n    plt.draw()\n\n# Attach radiofunc to the on_clicked event of the radio button\nradio.on_clicked(radiofunc)\n```", "```py\n# Import the interactive backend for Jupyter Notebook\n%matplotlib notebook\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport textwrap\n\nfig, ax = plt.subplots(figsize=(6,7))\nind = range(df.shape[0])\nrects = ax.barh(ind, df[\"Median usual weekly earnings ($)\"], height=0.5)\nax.set_xlabel('Median weekly earnings (USD)')\nylabels=[textwrap.fill(label,15) for label in df[\"Educational attainment\"]]\nax.set_yticks(ind)\nax.set_yticklabels(ylabels)\nfig.subplots_adjust(left=0.3)\n\n# Show the figure using interactive notebook backend\nplt.show()\n```", "```py\nsudo apt-get install ffmpeg\n```", "```py\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```", "```py\nbrew install ffmpeg\n```", "```py\nimport textwrap \nimport matplotlib.pyplot as plt\nimport random\n# Matplotlib animation module\nfrom matplotlib import animation\n# Used for generating HTML video embed code\nfrom IPython.display import HTML\n\n# Adapted from previous example, codes that are modified are commented\nfig, ax = plt.subplots(figsize=(6,7))\nind = range(df.shape[0])\nrects = ax.barh(ind, df[\"Median usual weekly earnings ($)\"], height=0.5)\nax.set_xlabel('Median weekly earnings (USD)')\nylabels=[textwrap.fill(label,15) for label in df[\"Educational attainment\"]]\nax.set_yticks(ind)\nax.set_yticklabels(ylabels)\nfig.subplots_adjust(left=0.3)\n\n# Change the x-axis range\nax.set_xlim(0,7600)\n\n# Add a text annotation to show the current year\ntitle = ax.text(0.5,1.05, \"Median weekly earnings (USD) in 2017\", \n bbox={'facecolor':'w', 'alpha':0.5, 'pad':5},\n transform=ax.transAxes, ha=\"center\")\n\n# Animation related stuff\nn=30 #Number of frames\n\ndef animate(frame):\n    # Simulate 5% annual pay rise \n    data = df[\"Median usual weekly earnings ($)\"] * (1.05 ** frame)\n\n    # Update the bar heights\n    for i, rect in enumerate(rects):\n        rect.set_width(data[i])\n\n    # Update the title\n    title.set_text(\"Median weekly earnings (USD) in {}\".format(2016+frame))\n\n    return rects, title\n\n# Call the animator. Re-draw only the changed parts when blit=True. \n# Redraw all elements when blit=False\nanim=animation.FuncAnimation(fig, animate, blit=False, frames=n)\n\n# Save the animation in MPEG-4 format\nanim.save('test.mp4')\n\n# OR--Embed the video in Jupyter Notebook\nHTML(anim.to_html5_video())\n```"]