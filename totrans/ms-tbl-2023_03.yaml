- en: Using Tableau Prep Builder
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Tableau Prep Builder was introduced with version 2018.1 of Tableau Desktop,
    but what can we use Tableau Prep Builder (henceforth referred to in this chapter
    as *Prep*) for? The core purpose of the tool is data preparation. The good news
    is, Prep is fully compatible with Tableau Desktop, and also with Tableau Server.
    That means you can execute jobs in Prep to clean your data with the click of a
    button. Additionally, Prep is as visual as its big brother, Tableau Desktop, meaning
    that you can see every step of data preparation in a fully visual format.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, let’s dive into the **Graphical User Interface** (**GUI**) and be
    amazed by another high-end product, which will allow you to get initial data insights,
    enabling you to decide faster whether your dataset is worth analysis. Prep will
    pave the way for an even smoother Tableau Desktop experience.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, the following topics will be discussed:'
  prefs: []
  type: TYPE_NORMAL
- en: Connecting to data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Prep GUI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data quality
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Additional options with Prep
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exporting data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In order to get started, we need to load data. How to do so in Prep will be
    described in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting to data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are familiar with Tableau Desktop, Prep will be an easy game for you.
    The handling and interfaces are very similar, and connecting to data, if the connector
    is available in Prep, works the same whether it’s a text file, a database, or
    an extract. At first sight, you might not even notice a difference between Prep
    and the Tableau Desktop GUIs, which provides the handy advantage that you can
    start prepping right away.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get started, begin by opening Prep and click on **+** to open a file. The
    following screen will appear:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18435_03_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.1: Connecting to data'
  prefs: []
  type: TYPE_NORMAL
- en: From the preceding screenshot, we can see that you can choose the type of data
    you want to connect to in the search bar. Just as in Tableau, the repertoire of
    Prep includes multiple databases.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let’s connect to a dataset with a practical exercise. For this exercise,
    we need the following dataset: [https://www.kaggle.com/airbnb/boston](https://www.kaggle.com/airbnb/boston).
    Please download `calendar.csv`, `listings.csv`, and `reviews.csv`. Alternatively,
    download them from the repository associated with this chapter on Tableau Public:
    [https://github.com/PacktPublishing/Mastering-Tableau-2023-Fourth-Edition/tree/main/Chapter03](https://github.com/PacktPublishing/Mastering-Tableau-2023-Fourth-Edition/tree/main/Chapter03).'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we are going to start with the `calendar.csv` file. Add it to the empty
    Prep canvas by making a connection with a text file, followed by the selection
    of your `.csv` file. You will now see the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of a cell phone  Description automatically generated](img/B18435_03_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.2: Input data'
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations—you’ve just made your first Prep connection. Here, you can manipulate
    and visualize your connected dataset as required!
  prefs: []
  type: TYPE_NORMAL
- en: In the following section, I will describe the GUI in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: The Prep GUI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: User experience is an important topic, not only when you build a dashboard but
    also when you use other aspects of Tableau. One of the biggest selling points
    of Tableau is and has always been the ease of using the GUI, and it is only one
    of the reasons Tableau is a much-loved tool by its customers.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Prep GUI has two important canvases to look at. Right after you have connected
    data to Prep, the workspace will split into several parts:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application  Description automatically generated](img/B18435_03_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.3: Prep workspace sections'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s look at what we can see from the preceding screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '**A**: The connection pane, showing you the input files available at the location
    selected.'
  prefs: []
  type: TYPE_NORMAL
- en: '**B**: The flow pane, which shows your current Prep flow. This always starts
    with an input step.'
  prefs: []
  type: TYPE_NORMAL
- en: '**C**: The input pane settings, which give you several options to configure
    your input.'
  prefs: []
  type: TYPE_NORMAL
- en: '**D**: The input pane samples, showing the fields you moved to the connection
    pane, including sample values.'
  prefs: []
  type: TYPE_NORMAL
- en: In the input pane (**C**), you can use the wildcard union (multiple files) function
    to add multiple files from the same directory. Also, you can limit the sample
    set that Prep will print in order to increase performance. In the input pane samples
    (**D**), you can select and deselect the fields you want to import and change
    their data types. The data type options are, for example, strings, dates, or numbers.
  prefs: []
  type: TYPE_NORMAL
- en: 'The second GUI is the profile pane. Once you’ve selected the input data needed,
    click on the **+** in the flow pane and select **Add: Clean Step**. Now the profile
    pane will appear with the data grid:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18435_03_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.4: Cleaning data'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the preceding screenshot, the profile pane shows every column from the data
    source in two sections. The upper sections show aggregates. For example, column
    2, **date**, shows the number of rows per date in a small histogram. The columns
    can all be sorted by clicking on the sort icon (a mini bar chart that appears
    when your mouse is hovering over a column) next to the column name and by selecting
    one item. Let’s take, for example, **True**, in **available** (column 3). All
    related features will be highlighted:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18435_03_05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.5: Visual filtering'
  prefs: []
  type: TYPE_NORMAL
- en: 'This gives you the chance to get some insights into the data before we even
    start to clean it up. In the following screenshot, each row is shown as it is
    in the data source in the lower part of the profile pane:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18435_03_06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.6: Data overview'
  prefs: []
  type: TYPE_NORMAL
- en: So far we have seen that, after loading data in Prep, visual filters can be
    applied by clicking on a field or bar in one of the columns. The lower pane will
    always show the data source of the selection made at the row level. Next, we will
    continue by adding more data sources.
  prefs: []
  type: TYPE_NORMAL
- en: Getting to know Prep
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s start with a practical example:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next to the `calendar.csv` file, connect to the following files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`listings.csv`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`reviews.csv`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, drag them onto the flow pane:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18435_03_07.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.7: Multiple tables input'
  prefs: []
  type: TYPE_NORMAL
- en: Can you answer the following questions?
  prefs: []
  type: TYPE_NORMAL
- en: How many listings use the word “beach” in their description?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is the percentage of condominiums that are marked with “exact location”?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On which day were the most reviews entered?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Without a tool like Prep, it is much more difficult to find the solution to
    these types of questions. Prep makes our data analytics journey much faster and
    easier and that is exactly the reason why I encourage you to spend the additional
    time and learn Prep as well as Tableau Desktop!
  prefs: []
  type: TYPE_NORMAL
- en: 'Solutions can be found in the workbook associated with this chapter at the
    following link: [https://public.tableau.com/profile/marleen.meier](https://public.tableau.com/profile/marleen.meier).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here you see, as an example, I used the **sort** function on **date** in order
    to answer the third question: *On which day were the most reviews entered?*'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18435_03_08.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.8: Sorting by date'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, sorting this field ordered the dates by the number of entries,
    thus making it very simple to answer the question, *on which day were the most
    reviews entered?* After the first few clicks, it already starts to feel natural,
    doesn’t it?
  prefs: []
  type: TYPE_NORMAL
- en: 'All the changes you made to the dataset can be traced back on the left side
    of the profile pane. But don’t forget to add a proper name to each step: this
    will make it much easier for others, and yourself, to understand your process.'
  prefs: []
  type: TYPE_NORMAL
- en: So, let’s continue on to the data quality features of Prep.
  prefs: []
  type: TYPE_NORMAL
- en: Data quality
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Prep comes with lots of different features. Sometimes, you might use many different
    tools to prepare your dataset in order to get it in the shape you desire. Other
    times, you might just run an aggregation (one feature) and be done. It really
    depends on the dataset itself and the expected output. The fact is, the closer
    your Prep output data is to what you need for your Tableau Desktop visualization,
    the more efficiently VizQL will run on Tableau Desktop. Fewer queries in Tableau
    Desktop means faster generation of dashboards.
  prefs: []
  type: TYPE_NORMAL
- en: 'To me, the best part about Prep is that it can handle a huge amount of data.
    Sometimes, I even use it for datasets I don’t want to visualize in Tableau Desktop,
    just to get a quick overview of, for example, how many rows contain a specific
    word, how many columns are needed, what happens to the date range if I filter
    a particular value, and so on! Within a few minutes, I have insights that would
    have taken me much more time to get with database queries or Excel functions.
    I hope that by the end of this chapter, you will be able to cut your time spent
    data prepping in half (at least). We will divide the prepping features into five
    subcategories: cleaning, unions and joins, aggregating, pivoting, and scripting.
    Let’s start with cleaning data!'
  prefs: []
  type: TYPE_NORMAL
- en: Cleaning data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have seen the following canvas before in the *The Prep GUI* section. To
    create the cleaning step, the user can simply click on **+** next to the input
    and select **Add: Clean Step**. During the cleaning step, multiple operations
    can be performed, such as filtering or creating a calculated field. Also note
    the recommendations Prep gives you:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18435_03_09.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.9: Recommendations'
  prefs: []
  type: TYPE_NORMAL
- en: Prep analyzes the column content and proposes changes that might fit the data.
    The column **listing_url**, for example, is being recognized as a web page and
    therefore Prep recommends you change it to the data role URL. The second, third,
    and several more recommendations after **listing_url** are to remove certain columns.
    This is probably the case because the column does not contain any data or contains
    only a small amount of data. The list goes on.
  prefs: []
  type: TYPE_NORMAL
- en: This feature can be very useful, especially for unfamiliar datasets. My way
    of working would be to look at the recommendations, check whether they make sense,
    and execute the change—or not. Don’t blindly trust these recommendations, but
    they can point out data flaws you might have missed otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: Data is often messy, involving null values, typos from manual entries, different
    formatting, changes in another system, and so on. As a consequence, you will have
    to sort out the mess before you can get reliable results from an analysis or a
    dashboard. This section will show you how to clean data at the column level.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once a value is selected within your clean step, you have the option to **Keep
    Only**, **Exclude**, **Edit Value**, or **Replace with Null**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18435_03_10.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.10: Quick access'
  prefs: []
  type: TYPE_NORMAL
- en: None of these changes will change the data source itself. Prep is like an in-between
    step, or a filter between the original data source and your Tableau Desktop. Excluding
    a value, using the option you can see in Figure 3.10, will only remove it from
    Prep. However, if used later on as input for Tableau Desktop, there won’t be an
    option to add that specific value back in. This option will remain in Prep only.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another slightly hidden option is to click on the ellipses (**...**) next to
    the column headers (as shown in *Figure 3.11*) and select **Clean**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18435_03_11.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.11: More options'
  prefs: []
  type: TYPE_NORMAL
- en: 'This **Clean** functionality operates based on the data type of the column.
    In the preceding screenshot, the data type is a string (indicated by the **Abc**
    icon). For other data types, the option will be grayed out since **Clean** is
    only available for strings. The option allows you to make use of eight more cleaning
    features:'
  prefs: []
  type: TYPE_NORMAL
- en: Make Uppercase
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make Lowercase
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remove Letters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remove Numbers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remove Punctuation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Trim Spaces
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remove Extra Spaces
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remove All Spaces
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The data type can be changed just above each column header; you will find a
    symbol above the column name, which can be changed by clicking on it, just like
    in Tableau Desktop:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18435_03_12.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.12: Changing Data Type'
  prefs: []
  type: TYPE_NORMAL
- en: This comes in handy in case Prep misinterprets the data type of a column. A
    wrongly assigned data type can have an effect on the calculation you perform on
    it and how Tableau Desktop would visualize the column.
  prefs: []
  type: TYPE_NORMAL
- en: In the upcoming section, we will practice combining multiple datasets. You might
    want to combine, for example, order data with shipment data (using a join) or
    append 2020 sales data to your 2019 sales dataset (using a union). To find out
    how, read on!
  prefs: []
  type: TYPE_NORMAL
- en: Unions and joins
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will now join the three datasets, so that we may analyze and visualize them
    together. The nature of the three datasets (`listings.csv`, `reviews.csv`, and
    `calendar.csv`) requires a join but not a union. However, I will still walk you
    through the steps of a union in order for you to know when you need it!
  prefs: []
  type: TYPE_NORMAL
- en: Adding unions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A union in Tableau is the appending of data to an existing dataset. Imagine
    you have two Excel files. Both have the exact same header, but one contains data
    from 2019, and the other data from 2020\. If you union the 2020 data to the 2019
    data, you append the rows of the 2020 files to add them underneath the rows of
    the 2019 files. To perform a union, both datasets need to have almost the same
    layout/header. Why almost? You will see in the following exercise:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To begin this exercise, your Prep flow pane should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_03_13.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.13: Flow pane'
  prefs: []
  type: TYPE_NORMAL
- en: Add a clean step by clicking **+** next to the **listings** dataset.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can change the color of each step according to your preferences by right-clicking
    on a step and selecting **Edit Color**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Select the column **host_identity_verified** and filter on **True**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_03_14.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.14: Filtering on True'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, create a calculated field, called `DatasetA_ID`, containing just a string,
    `''A''`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_03_15.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.15: Creating a calculated field'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a second cleaning step from the same listings data and filter this time
    on **True** in the **host_identity_verified** column:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_03_16.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.16: Filtering on True'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a calculated field, `DatasetB_ID`, containing just a string, `''B''`,
    using the same process shown in *Figure 3.15*. Renaming the steps by right-clicking
    and hitting **Rename** helps to keep track of the applied changes. Your flow should
    look like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_03_17.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.17: Visual flow'
  prefs: []
  type: TYPE_NORMAL
- en: 'You have now created two datasets that can be combined using a union, without
    changing the original data. Union the two by either selecting **Union** after
    clicking on **+** next to **Dataset A** or by dragging one step over the other
    (**Dataset B** over **Dataset A** or vice versa):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_03_18.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.18: Union'
  prefs: []
  type: TYPE_NORMAL
- en: 'Check whether all fields match by clicking on **Union 1** and looking at the
    input details at the bottom left of the screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_03_19.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.19: Visual check'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the preceding screenshot, you can see that on the left, you have information
    about the union. From top to bottom: the **Inputs** and their respective colors
    (these are the same as in the flow pane), the **Resulting Fields**, showing 2
    mismatching fields, and finally, the **Mismatched Fields** themselves: **DatasetA_ID**
    and **DatasetB_ID**. The colors next to each mismatched field show that our **DatasetB_ID**
    field does not exist in **DatasetA**, and the **DatasetA_ID** field does not exist
    in **DatasetB**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In this case, we know that those columns can be appended even despite the different
    naming conventions. A better name for both fields would have been **Dataset_ID**
    (you can go a few steps back and try this out). Prep will not show any mismatches
    then. But for us here, we can go ahead and drag and drop one field on top of the
    other to merge them and thereby give Prep the permission to view them as one column:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_03_20.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.20: Merge'
  prefs: []
  type: TYPE_NORMAL
- en: 'See how the **Resulting Fields** now show 0 mismatches, and how both dataset
    colors are now represented in the bar underneath the column header:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_03_21.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.21: Color coding'
  prefs: []
  type: TYPE_NORMAL
- en: Rename by selecting and right-clicking the union step from **Union 1** to **listings2**,
    and add a description by selecting and right-clicking the union step and hitting
    **Add Description** if you like—all the extra effort you make now will help you
    later with replication, documentation, and explanation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Congratulations; your first union was a success. We first split the original
    listings dataset in to two and then combined them again into one. Stacking data
    with the same layout on top of each other, as we’ve done here, is a typical task
    for unions.
  prefs: []
  type: TYPE_NORMAL
- en: Wildcard unions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Instead of dragging one data input on top of another, as we did in the previous
    section, you can also tell Prep which files to union from a pre-defined directory.
    Oftentimes, departments have a shared location in which they store, for example,
    Excel files that are named something such as **Jan2023Revenue**, **Feb2023Revenue**,
    **Mar2023Revenue**, and so on. If you come across such a scenario, you can do
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Connect Prep to any one file that you want to use.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the input data icon and select the **Tables** tab. You can now see
    that you can create a union given a certain condition:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_03_22.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.22: The Tables menu view'
  prefs: []
  type: TYPE_NORMAL
- en: 'I will select all matching filenames in that same directory that start with
    something (*****) and end with **2023Revenue.xlsx**, and as you can see, Jan,
    Feb, and March will all be included, and you can even filter the input by using
    the **File** and **Worksheet** filter, and clicking **Apply** when you are done::'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_03_23.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.23: Filtering the unions'
  prefs: []
  type: TYPE_NORMAL
- en: This is the wildcard union feature. It is really powerful! Try it out and see
    for yourself.
  prefs: []
  type: TYPE_NORMAL
- en: Adding joins
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now, we will continue to work in the same flow pane and focus on a join. As
    a quick refresher, a join appends data horizontally. As a rule of thumb, unions
    increase the number of rows and joins change the number of columns:'
  prefs: []
  type: TYPE_NORMAL
- en: Drag **listings2** onto **reviews** until the **Join** option appears.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_03_24.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.24: Join'
  prefs: []
  type: TYPE_NORMAL
- en: Select **listing_id** from **reviews** and **id** from **listings2** for your
    join. Please note that you can change the join type by clicking on the Venn diagram
    under **Join Type**:![](img/B18435_03_25.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 3.25: Visual check join'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: What the preceding overview tells us is that all `68,275` rows of the **reviews**
    dataset were matched to a row in the **listing2** dataset. However, we do have
    `756` mismatches from the **listing2** dataset. Our total **Join Result** is therefore
    `68,275` rows. But it is likely that not all listings have reviews and therefore
    we can safely assume that our join worked as expected.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Another check could be to change the join to a full outer join and dive deeper
    into the data later in Tableau Desktop. In order to get to a full outer join,
    simply click on the outer edge of the two circles:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_03_26.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.26: Full join'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to check immediate results, simply right-click on, for example,
    the join symbol (represented by the Venn diagram icon, as shown in the following
    screenshot), and you’ll be able to check the data in Tableau Desktop by selecting
    **Preview in Tableau Desktop**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_03_27.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.27: Preview'
  prefs: []
  type: TYPE_NORMAL
- en: We can also rename the step; let’s change our join’s name to `lis&rev`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By now, we’ve seen how to clean data, and how to use unions and joins. The union
    part taught us how to append data vertically or underneath each other. The join
    part allowed us to combine data horizontally or next to each other. More specifically,
    we were able to combine the listings with their respective reviews. Instead of
    having two datasets, we have created one that allows us to look up a listing review,
    and in the same row, view all the data regarding the listing itself, like the
    type of listing, number of bedrooms, whether it has an ocean view, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s continue next with the aggregation step.
  prefs: []
  type: TYPE_NORMAL
- en: Aggregating
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An aggregation is used when you want to change the granularity of your data.
    In our dataset, we have one row per review. However, we want to see if hosts that
    have been in the Airbnb business in Boston longer have more reviews compared to
    hosts that started more recently. In order to do so, we need to get an aggregated
    number of reviews per year that the host started offering listings. The **host_since**
    field will give us helpful information as well as the **reviewer_id** field. For
    the latter, we will count the distinct reviewers that left reviews. Let’s do it!
  prefs: []
  type: TYPE_NORMAL
- en: 'Our current flow pane looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18435_03_28.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.28: Flow pane'
  prefs: []
  type: TYPE_NORMAL
- en: 'To aggregate the number of reviews, please take the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, click on the **+** sign next to **lis&rev** and choose **Aggregate**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_03_29.png)Figure 3.29: Aggregate'
  prefs: []
  type: TYPE_NORMAL
- en: This will open a window entitled **Aggregate 1**. Our goal is to see how many
    people reviewed accommodation per year from when the host started offering listings;
    therefore, take the following actions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using the search field in the **Additional Fields** pane, as can be seen on
    the left in *Figure 3.30*, add the **host_since** field to **Grouped Fields**
    by dragging and dropping.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the **reviewer_id** to **Aggregated Fields**, also by dragging and dropping.
    Note that the default aggregation is **SUM**, as indicated by the arrow on the
    right:![](img/B18435_03_30.png)
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 3.30: Aggregated fields'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Change the **reviewer_id** aggregation by clicking on **SUM** under **Aggregated
    Fields**, and change it to **Count Distinct**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_03_31.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.31: Count Distinct'
  prefs: []
  type: TYPE_NORMAL
- en: This will change the default aggregation, **Sum** (where every review is counted),
    to **Count Distinct**, which counts the distinct reviewer ID aggregation. This
    will allow us to focus on how many different reviewers left reviews. This is just
    an arbitrary choice; feel free to try out the other aggregations and see how the
    data changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let’s have a look at the Tableau Desktop preview by right-clicking on the **Aggregate**
    step on our flow pane and selecting **Preview in Tableau Desktop**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18435_03_32.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.32: Host chart'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the preceding screenshot, we can see the distinct count of reviews per **host_since**
    date. Of course, in this specific example, Tableau Desktop could also count the
    reviews per **host_since** date if those were the only fields dragged onto the
    view without the help of Prep. But a benefit of aggregating prior to importing
    the data into Tableau Desktop is that you have less data to import; hence, it’s
    possible to achieve better performance. If you want to continue analyzing the
    dataset in either Prep or Tableau Desktop, you can now ask further questions,
    such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Which type of accommodation has the highest discount for staying a week rather
    than a day?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is there a correlation between the size of the accommodation and the monthly
    price?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How many hosts (as a percentage) have more than one listing?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Good luck and happy dashboard building!
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll finish this section here and look back at a graph consisting of only
    9 datapoints, which we created by aggregating the almost 64,000 rows of **reviewer_id**
    data by the year that the host started offering the listing. The graph tells a
    story; 64,000 individual rows of data don’t. That is why it is so important to
    always reduce your data, and aggregate it if possible. In the next section, we
    will talk about another important feature: pivoting.'
  prefs: []
  type: TYPE_NORMAL
- en: Pivoting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Do you recognize a situation where you drag and drop your fields onto your Tableau
    Desktop row and column shelves but somehow the visualization doesn’t do what you
    want? Chances are that you have to turn your data, or better, pivot it. If data
    that you expect to be in one column, spread over multiple rows, appears in multiple
    columns instead, it’s a case for pivoting. The following example will showcase
    a need for pivoting.
  prefs: []
  type: TYPE_NORMAL
- en: 'For our pivot example, we will make use of another dataset. You can find it
    at [https://github.com/PacktPublishing/Mastering-Tableau-2023-Fourth-Edition/blob/main/Chapter03/Excel_Pivot.xlsx](https://github.com/PacktPublishing/Mastering-Tableau-2023-Fourth-Edition/blob/main/Chapter03/Excel_Pivot.xlsx).
    The dataset is very simple and looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18435_03_33.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.33: Excel input'
  prefs: []
  type: TYPE_NORMAL
- en: 'It has three different colors that were observed on five different days, *x*
    amount of times. This data is a typical example of when pivoting is helpful to
    tidy up the data because multiple columns have the same purpose—**B**, **C**,
    and **D** are all observations. If you wanted to visualize this table, it could
    look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Chart, line chart  Description automatically generated](img/B18435_03_34.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.34: Pivot I'
  prefs: []
  type: TYPE_NORMAL
- en: But you might be wondering, since the color scheme already indicates which color
    has been observed, wouldn’t it be better to put all three lines in one graph?
    With separate lines per color, within one line chart? Let’s accomplish this!
  prefs: []
  type: TYPE_NORMAL
- en: 'Begin by connecting the `PivotDataSet` to Prep, then follow these steps to
    pivot the data:'
  prefs: []
  type: TYPE_NORMAL
- en: 'From Prep, connect to the Excel file we just created and add **PivotDataSet**
    to the flow pane, click on the **+** next to the input data step, and select **Pivot**.
    A new step called **Pivot 1** will appear:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_03_35.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.35: Adding a Pivot step'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the **Pivot 1** step in the flow pane, and *Figure 3.36* will appear
    at the bottom of your Prep window. Select all three colors from the **Fields**
    pane shown in **Step I**, and drag them onto the **Pivoted Fields** pane, as shown
    in **Step II**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_03_36.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.36: Pivot steps'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, have a look at the **Pivot Results** pane, as shown in **Step III** of
    the preceding screenshot, and rename **Pivot1 Names** to **Colors** and **Pivot1
    Values** to **Observations** by right-clicking and selecting **Rename**. Now click
    the **+** next to **Pivot 1**, and voilà, we now have a clean table, called **Clean
    1**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_03_37.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.37: Pivot results'
  prefs: []
  type: TYPE_NORMAL
- en: 'Remember our problem from the beginning? Our line chart can now be created
    in a different way, as shown in *Figure 3.38*. Note that **Colors** is a dimension
    now and the **Observations** are their own field, compared to before when they
    were located under the column header of each color:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Chart, line chart  Description automatically generated](img/B18435_03_38.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.38: Pivoted line chart'
  prefs: []
  type: TYPE_NORMAL
- en: This is a simple use case for pivoting, but the technique here can be transferred
    to any other dataset. Prep has a built-in recommendation feature. Whenever you
    see a light bulb in the upper-right corner of a column, check it out and see if
    the recommendation applies to your needs.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18435_03_39.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.39: Trim spaces'
  prefs: []
  type: TYPE_NORMAL
- en: In this case, Tableau recommends we remove all leading and trailing spaces,
    which is exactly what we need! As demonstrated here, it’s always worth checking
    the recommendations.
  prefs: []
  type: TYPE_NORMAL
- en: Perfect; you are all set with the main Prep functionality. However, you might
    be wondering what you are supposed to do if you require any further preparation.
    No problem; Prep has you covered. Scripting is the newest addition to Prep and
    the most powerful of all; it is virtually limitless! Continue reading to explore
    Prep’s scripting feature.
  prefs: []
  type: TYPE_NORMAL
- en: Scripting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The script functionality that we will discuss next is one of the features more
    recently added to Tableau. We will discuss it next because a programming language
    like `Python` or `R` gives you endless flexibility. If you ever reach the boundaries
    of Prep’s offerings, you can fall back on scripting and write your own code to
    do exactly what you want.
  prefs: []
  type: TYPE_NORMAL
- en: In order to make use of it, you have to connect to Python (or R), outside of
    Tableau first. The following steps are based on the instructions from [https://help.tableau.com/current/prep/en-us/prep_scripts_TabPy.htm](https://help.tableau.com/current/prep/en-us/prep_scripts_TabPy.htm)
    for Python or [https://help.tableau.com/current/prep/en-us/prep_scripts._R.htm](https://help.tableau.com/current/prep/en-us/prep_scripts._R.htm)
    for R.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this exercise, we will be using the Boston Airbnb dataset, more specifically
    the `calendar` table. Download this dataset from [https://www.kaggle.com/airbnb/boston](https://www.kaggle.com/airbnb/boston)
    and connect to the `calendar` table in Prep:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of a cell phone  Description automatically generated](img/B18435_03_40.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.40: Calendar dataset'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s take a step back and connect Python to Prep:'
  prefs: []
  type: TYPE_NORMAL
- en: Download and install `Python` from [python.org](http://python.org) (or download
    and install `R` from [https://www.r-project.org/](https://www.r-project.org/)).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Download and install `TabPy` by executing the following command in your terminal
    or on the command line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Alternatively, if using `R`, open `R` and execute:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open `TabPy` on the command line/terminal by entering the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Or, in the R GUI, type:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Back in Prep, click on **+** on the right-hand side of the calendar table and
    add a **Clean Step**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a calculated field called **PythonTest** (use **RTest**instead if you’ve
    chosen to experiment with `R`) with a string value, `"Test"`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_03_41.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.41: PythonTest'
  prefs: []
  type: TYPE_NORMAL
- en: Now, click on **+** on the right-hand side of the **Clean 1** step and add **Script**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By selecting the **Script** step, the **Settings** pane at the bottom (see *Figure
    3.42*) will give you an option to connect to **Rserve** or **TabPy****. Rserve**
    is the Tableau server for `R` and `TabPy` is the Tableau server for Python.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Choose your connection type by selecting **Rserve** or **Tableau Python (TabPy)
    Server**. Then open **Help** | **Settings and Performance** | **Manage Analytics
    Extension Connection**. In the upcoming window, connect Prep to `TabPy` by using
    **localhost** and **Port 9004** (if using R, connect to Rserve by selecting it
    under **Connection type** and using **localhost** and **Port 6311** in the same
    popup), and click **Sign In**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If using an SSL-encrypted Rserve server, **Port 4912** is the default port.![](img/B18435_03_42.png)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Figure 3.42: TabPy Server'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Next, if experimenting with Python, create a `.py` file containing the following
    code and make sure the indentation is exactly the same:![](img/B18435_03_43.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 3.43: The .py file'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Alternatively, create a `.R` file containing the following code:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The script we just created is written to change an existing column in Prep and
    rename every row from `Test` to `Python` or `R`, depending on which language you’ve
    chosen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We’ll continue with the Python script. Back in Prep, browse for the `.py` file
    we just created and add the function name to the Prep interface. I called the
    file `PrepTableau.py` and the function name is `ChangeString`, as defined in the
    preceding step:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_03_44.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.44: Adding a function'
  prefs: []
  type: TYPE_NORMAL
- en: 'Observe that the **PythonTest** column has changed from **Test** to **Python**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_03_45.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.45: PythonTest'
  prefs: []
  type: TYPE_NORMAL
- en: Our little experiment worked! And even though we used a very simplistic example,
    it shows that the scripting feature works, and you can just follow your creativity
    with what else you might be able to do by using scripting. Examples include everything
    from calculating an inverse normal distribution to machine learning with sentiment
    analysis or clustering.
  prefs: []
  type: TYPE_NORMAL
- en: 'You might have noticed that we did not import `pandas` in the script itself,
    but still used a `pandas` DataFrame. This is due to the fact that the `pandas`
    import comes with `TabPy`. You can see this in your command line/terminal after
    opening `TabPy`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18435_03_46.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.46: Importing pandas on the command line'
  prefs: []
  type: TYPE_NORMAL
- en: If you want to use other libraries in your script, you can install them by using
    `pip` `install` on your command line/terminal. You only have to restart `TabPy`
    afterward and you will be able to use them too. Remember, always open `TabPy`
    on the terminal/command line first, or else Prep can’t execute the script.
  prefs: []
  type: TYPE_NORMAL
- en: At the time of writing, Prep does not support a script as input yet—you could,
    however, use a dummy `.csv` file as a workaround and add a script to the flow
    immediately after it.
  prefs: []
  type: TYPE_NORMAL
- en: Additional options with Prep
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section will discuss some smaller standalone, very powerful, and new Prep
    features. Some of you might have been using Prep since the very first release.
    With each release and each additional user and feedback given, Tableau was able
    to create a priority list of features that stakeholders—like you and I—really
    wished to see. The upcoming topics are some of the best examples. None of these
    features were present in the initial release but have made the product so much
    better, more valuable, and more complete. You are able now to save part of your
    flow and reuse it, write back your data to an external database, refresh parts
    of your dataset, and schedule flows with the Tableau Data Management add-on. Let’s
    take a closer look and start with the “insert flow” function.
  prefs: []
  type: TYPE_NORMAL
- en: Insert Flow
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'An option in Prep is to add an existing flow to your own flow. For example,
    say someone already worked on the Boston Airbnb dataset and created a flow of
    the highlighted steps only:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18435_03_47.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.47: Save to File'
  prefs: []
  type: TYPE_NORMAL
- en: 'You could save the steps you wish to insert into your flow by right-clicking
    and selecting **Save to File**, as shown in *Figure 3.47*. These steps could be
    inserted back into your flow by right-clicking on the canvas, selecting **Insert
    Flow**, and browsing your `.tfl` files for the previously downloaded file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18435_03_48.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.48: Insert Flow'
  prefs: []
  type: TYPE_NORMAL
- en: 'This functionality is very convenient to share work and reuse already created
    steps. Next, we will look into another functionality that will allow you to refresh
    the data used in your Prep flow: incremental refresh.'
  prefs: []
  type: TYPE_NORMAL
- en: Incremental refresh
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Prep 2020.2 saw the introduction of the incremental refresh feature. After completing
    a flow and adding an output, you can decide whether you want a full or incremental
    refresh, and which field you want to use as an indicator. Imagine you have a dataset
    of infections per day of a particular disease. By the end of every day, you want
    to add the new data, which comes from a health ministry database, to your dataset.
    So, what are you going to do?
  prefs: []
  type: TYPE_NORMAL
- en: Typically, you would load the whole dataset, all of it, after the newest datapoints
    were added. But nothing changes about the datapoints older than that day; they
    will remain the same and you loaded them before already. Therefore, it is a waste
    of resources to reload the whole dataset. An incremental refresh will only load
    new datapoints and add them to the existing data, which has been built up over
    many days. You can imagine how much time and effort this will save. It is a much
    more sustainable way to keep your data up to date than a full refresh.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are going to look at an example in the following workflow. It is important
    that an **Output** step is part of the flow:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18435_03_49.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.49: Incremental refresh'
  prefs: []
  type: TYPE_NORMAL
- en: 'To add the incremental refresh, take the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the data input step and scroll down the **Settings** tab until you
    see the **Incremental Refresh** option. Then, check the **Enable incremental refresh**
    box:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_03_50.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.50: Set up Incremental Refresh'
  prefs: []
  type: TYPE_NORMAL
- en: After you click on the **Enable incremental refresh** box, a dropdown will appear.
    This dropdown contains all fields that Prep finds useful as an indicator for a
    data refresh. Select, for example, the **date**field**.** It is the perfect field
    to use since as soon as a new date is added to the original data source, the refresh
    will start.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Prep will also ask you for the output field that will represent the **date**
    column in the output. In our case, it is still **date**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_03_51.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.51: Select an output field'
  prefs: []
  type: TYPE_NORMAL
- en: 'After everything is set up, click on the **Output** step again and note how
    you can now select the type of refresh, full or incremental, you prefer for this
    flow by clicking on the drop-down menu on the **Run Flow** option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_03_52.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.52: Refresh options'
  prefs: []
  type: TYPE_NORMAL
- en: You just learned how to set up your data refresh—full as well as incremental.
    This will help you with the sustainable usage of compute resources and to always
    have your data up to date. Next, we will introduce another Tableau feature worth
    investigating—Bulk rename.
  prefs: []
  type: TYPE_NORMAL
- en: Bulk rename
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This feature is a real time-saver! Simply select as many columns as you want
    to rename, right-click, and select **Rename Fields**. A new view will open that
    allows you to add a prefix or suffix to every selected column or you can replace
    specific text in each of them:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18435_03_53.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.53: Bulk rename in action'
  prefs: []
  type: TYPE_NORMAL
- en: You could then also leverage the **Find Text** function or automatically rename
    all new fields that might come in at a later stage, e.g., because IT added an
    additional column to your dataset.
  prefs: []
  type: TYPE_NORMAL
- en: Tableau Prep Conductor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With **Tableau Prep Conductor**, you can publish your Prep flows to Tableau
    Server, schedule them to run at a certain time, and always have refreshed data.
    The conductor is available in the Tableau Data Management add-on and doesn’t ship
    with Tableau Desktop or Prep.
  prefs: []
  type: TYPE_NORMAL
- en: For more information, please check [https://www.tableau.com/products/add-ons/data-management](https://www.tableau.com/products/add-ons/data-management).
  prefs: []
  type: TYPE_NORMAL
- en: Exporting data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Last, but not least, we may want to export our data. We have seen before that
    a right-click on a symbol in the flow pane offers the possibility to preview the
    data in Tableau Desktop:'
  prefs: []
  type: TYPE_NORMAL
- en: If you want a flow to run according to a schedule or save it to a location,
    it’s best to use **Add** | **Output****.**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After you do this, the following screen will appear:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_03_54.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.54: Save to file'
  prefs: []
  type: TYPE_NORMAL
- en: The user now has the option to save the data to a file, and also to save it
    in Hyper file format as `.hyper`, as `.xlsx` (new in Tableau 2021.1), or as a
    `.csv` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Another option is to publish the newly generated data source directly to Tableau
    Server and make it available to other users. For this option, select **Publish
    as a data source** instead of **Save to File** from the dropdown.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A third option to save Prep output has been added to Tableau 2020.3: writing
    the resulting data to an external database. If you want to do so, select the **Database**
    table option from the dropdown. At the time of writing, seven databases are compatible
    with the write-back functionality, but more will be added based on user demand:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_03_55.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.55: Save to external database'
  prefs: []
  type: TYPE_NORMAL
- en: Since the Tableau release 2022.3, you can write back to CRM Analytics too. To
    do this, you need a Salesforce account and the according license. Therefore, we
    will not discuss this option further, but if you are a Salesforce Analytics user,
    check this out!
  prefs: []
  type: TYPE_NORMAL
- en: This section has shown us how to save our work and, even more so, the output
    of our Prep flows. To me, the ability to save output to an external database is
    the best new feature, because it is the easiest way to share my output in a structured
    and organized way with others. So not only I but also other users can work with
    the prepped data, saving additional work. The flow can then be reused not only
    by me but by anyone.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We started this chapter with an introduction to Prep. We looked at the GUI
    and how we can connect data to it. After that, we did some exercises regarding
    data preparation. This can be divided into five parts: data cleaning, unions and
    joins, aggregating, pivoting, and scripting. We also considered several additional
    options to improve the usefulness of your data, including inserting steps from
    other flows, and incremental refreshes. To round out this chapter on Prep, we
    looked at exporting data. Here, we saw that the new dataset can be saved as a
    file or data extract, written back to an external database, or pushed directly
    to Tableau Server.'
  prefs: []
  type: TYPE_NORMAL
- en: Just like Tableau Desktop, Prep is very much self-explanatory and highly visual.
    Colors, symbols, and highlights make it easy to get used to this extract, transform,
    and load tool, which is invaluable for preparing your data before manipulating
    it on the main Tableau interface!
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we’ll continue our exploration of data in Tableau. We’ll
    explore how to prepare data for Tableau by looking at joins, blends, and data
    structures.
  prefs: []
  type: TYPE_NORMAL
- en: Learn more on Discord
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To join the Discord community for this book – where you can share feedback,
    ask questions to the author, and learn about new releases – follow the QR code
    below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://packt.link/tableau](https://packt.link/tableau)'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/QR_Code2044012316175764640.png)'
  prefs: []
  type: TYPE_IMG
