- en: Learning about Joins, Blends, and Data Structures
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Connecting Tableau to data often means more than connecting to a single table
    in a single data **source**. You may need to use Tableau to join multiple tables
    from a single data source. For this purpose, we can use joins, which combine a
    dataset row with another dataset’s row if a given key value matches. You can also
    join tables from disparate data sources or union data with a similar metadata
    structure.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes, you may need to merge data that does not share a common row-level
    key, meaning if you were to match two datasets on a row level like in a join,
    you would duplicate data because the row data in one dataset is of much greater
    detail (for example, cities) than the other dataset (which might contain countries).
    In such cases, you will need to blend the data. This functionality allows you
    to, for example, show the count of cities per country without changing the city
    dataset to a country level.
  prefs: []
  type: TYPE_NORMAL
- en: Also, you may find instances when it is necessary to create multiple connections
    to a single data source in order to pivot the data in different ways. This is
    possible by manipulating the data structure, which can help you achieve data analysis
    from different angles using the same dataset. It may be required to discover answers
    to questions that are difficult or simply not possible with a single data structure.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will discuss the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Relationships
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Joins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Blends
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding data structures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In version 2020.2, Tableau added functionality that will allow you to join or
    blend without specifying one of the two methods. It is called **relationships**.
    We will start this chapter off by explaining this new feature before we investigate
    the details of joins, blends, and more.
  prefs: []
  type: TYPE_NORMAL
- en: Relationships
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Although this chapter will primarily focus on joins, blends, and the manipulation
    of data structures, let’s begin with an introduction to **relationships**: a new
    functionality available since Tableau 2020.2, and one that the Tableau community
    has been waiting a long time for. It is the new default option in the data canvas;
    therefore, we will first investigate **relationships**, which belong to the **logical
    layer of the data model,** before diving deeper into the join and union functionalities
    that operate on the **physical layer**.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To read all about the physical and logical layers of Tableau’s data model,
    visit the Tableau help pages: [https://help.tableau.com/current/online/en-us/datasource_datamodel.htm](https://help.tableau.com/current/online/en-us/datasource_datamodel.htm).'
  prefs: []
  type: TYPE_NORMAL
- en: For now, you can think of the logical layer as being able to count smarter.
    Imagine a customer table with unique customer names and an order table with hundreds
    of recorded orders. In a logical layer, a customer name with multiple orders (thus
    multiple rows of order and customer IDs in the order table) will be counted as
    one customer because the logical layer is smart and it recognizes the customer
    name, while the physical layer would count one customer for each order and hence
    it would count the same customer as multiple customers if they ordered multiple
    times. You could only solve this by counting distinct values (which is not required
    when using the logical layer).
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following screenshot, you can see the data source canvas, with two datasets
    combined in a relationship on the left-hand side and the same datasets combined
    using a **join** on the right-hand side. Please note that relationships only show
    a line between the tables (**Orders**, **People**, and **Returns**) whereas joins
    indicate the type of join by two circles:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18435_04_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.1: Relationships and joins on the data source canvas'
  prefs: []
  type: TYPE_NORMAL
- en: A key difference is that the preview of the data, at the bottom, will show only
    data from the selected table in relationships, compared to all data when using
    joins. This makes sense because the granularity of data can change in relationships,
    depending on the fields you are using in your dashboard. Joins, however, have
    a fixed level of granularity, which is defined by the type of join and join clauses
    you choose.
  prefs: []
  type: TYPE_NORMAL
- en: 'Relationships are the default for Tableau Desktop 2020.2 and higher. However,
    if you still want to make use of the join functionality, you can drag a dataset
    into the data source canvas, click on the drop-down arrow, and select **Open…**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18435_04_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.2: From relationship to join canvas'
  prefs: []
  type: TYPE_NORMAL
- en: This will open the dataset as you used to see it in the data pane in Tableau
    in versions before 2020.2 and you will be able to use joins the old way, as we
    will describe in the *Joins* section.
  prefs: []
  type: TYPE_NORMAL
- en: 'The line between two datasets in a relationship (based on the logical layer)
    is called a **noodle** due to its al dente spaghetti looks **–** yum! Tableau
    detects a relationship as soon as you drag in the second data source to the data
    source canvas, but you can add more key columns or remove and adjust them if needed
    by clicking on the noodle itself:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18435_04_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.3: Relationship keys'
  prefs: []
  type: TYPE_NORMAL
- en: If you open older dashboards in Tableau 2020.2 or later versions, you will see
    that the joined data will be shown as **Migrated**. This is intentional. Just
    click on the migrated data source and Tableau will switch from the logical to
    the physical layer, meaning you will see the join-based data source canvas instead
    of the relationship canvas.
  prefs: []
  type: TYPE_NORMAL
- en: Looking at the worksheet, you will notice differences as well. You will see
    that in the new relationshipslayout, the columns are divided by table name first
    and then split into **Dimensions** and **Measures** per data source, while in
    a join, the columns are divided into **Dimensions** and **Measures** and split
    by table name.
  prefs: []
  type: TYPE_NORMAL
- en: To conclude on relationships, the new data source layout makes it a lot easier
    to combine datasets and you do not have to decide upfront if you want to join
    or blend. People that are used to the old data source pane might have to get used
    to the new flexibility a bit, but for new Tableau users, it will be much easier
    to work with different datasets from the start. Nevertheless, we will still cover
    joins next, especially because the functionality is still part of Tableau in the
    physical layer.
  prefs: []
  type: TYPE_NORMAL
- en: Joins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book assumes basic knowledge of joins, specifically inner, left-outer,
    right-outer, and full-outer joins. If you are not familiar with the basics of
    joins, consider taking W3Schools’ SQL tutorial at [https://www.w3schools.com/sql/default.asp](https://www.w3schools.com/sql/default.asp).
    The basics are not difficult, so it won’t take you long to get up to speed.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows three related datasets:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18435_04_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.4: Related datasets'
  prefs: []
  type: TYPE_NORMAL
- en: To better understand what Tableau does to your data when joining multiple tables,
    let us explore join queries.
  prefs: []
  type: TYPE_NORMAL
- en: Join queries
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following screenshot is a representation of the joined datasets in *Figure
    4.4*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18435_04_05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.5: Join culling'
  prefs: []
  type: TYPE_NORMAL
- en: The preceding screenshot represents an inner join between the **Orders** and
    **Returns** tables, connected through an inner join on the common key, **Order
    ID**. **Orders** and **People** are joined on the common key **Region**.
  prefs: []
  type: TYPE_NORMAL
- en: To better understand what has just been described, we will continue with a join
    culling exercise. We will look at the SQL queries generated by Tableau when building
    a simple view using these two tables, which will show us what Tableau does under
    the hood while we simply drag and drop.
  prefs: []
  type: TYPE_NORMAL
- en: 'Please follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Locate and download the workbook associated with this chapter from [https://public.tableau.com/profile/marleen.meier/](https://public.tableau.com/profile/marleen.meier/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Join Culling** worksheet and click on the **Sample - EU Superstore
    Join** data source.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From the menu, select **Help**, then **Settings and Performance**, and then
    **Start Performance Recording**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_04_06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.6: Start Performance Recording'
  prefs: []
  type: TYPE_NORMAL
- en: 'Drag **People** to the **Rows** shelf and place **Sales** on the **Text** shelf:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_04_07.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.7: Drag and drop'
  prefs: []
  type: TYPE_NORMAL
- en: Stop the recording with **Help**, then **Settings and Performance**, and finally,
    **Stop Performance Recording**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the resulting **Performance Summary** dashboard, drag the time slider to
    `0.0000` and select both green bars: **Executing Query**. Now you see the two
    SQL queries generated by Tableau:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_04_08.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.8: Performance recording'
  prefs: []
  type: TYPE_NORMAL
- en: 'So far, we have connected Tableau to our dataset, then we created a very simple
    worksheet, showing us the number of sales for people. But, for Tableau to show
    the people’s names and the sales amount, it needs to get data from two different
    tables: **Orders** and **People**. The performance recording in *Figure 4.8* shows
    how long each step of building the dashboard took and which query was sent to
    the database. Since we first dragged a dimension and then a measure into the worksheet,
    we see two queries. The second query combines both dragged piles; therefore, we
    will focus on the latter. Let’s look at it in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Note that an inner join was generated between the tables. This was a view behind
    the scenes of Tableau’s **join feature**.
  prefs: []
  type: TYPE_NORMAL
- en: Now that the technical details have been discussed, let us look at joins in
    the dashboards themselves.
  prefs: []
  type: TYPE_NORMAL
- en: Join calculations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In Tableau, it is possible to join two files based on a calculation. You would
    use this functionality to resolve mismatches between two data sources. The calculated
    join can be accessed in the dropdown of each join.
  prefs: []
  type: TYPE_NORMAL
- en: 'See the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18435_04_09.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.9: Create Join Calculation...'
  prefs: []
  type: TYPE_NORMAL
- en: 'As an example, imagine a dataset that contains one column for **First Name**,
    and another column for **Last Name**. You want to join it to a second dataset
    that has one column called **Name**, containing the first and last name. One option
    to join those two datasets is to create a **Join Calculation** like the following
    in the first dataset:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Now, select the **Name** column in the second dataset and your keys should be
    matching!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to know more about calculated joins, please check the Tableau help
    pages: [https://help.tableau.com/current/pro/desktop/en-us/joining_tables.htm#use-calculations-to-resolve-mismatches-between-fields-in-a-join](https://help.tableau.com/current/pro/desktop/en-us/joining_tables.htm#use-calculations-to-resolve-mismatches-between-fields-in-a-join).'
  prefs: []
  type: TYPE_NORMAL
- en: Spatial joins
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In Tableau 2018.2, **spatial joins** were added. What this means is that you
    can join spatial fields from MapInfo tables and Shape, Esri, KML, TopoJSON, and
    GeoJSON files. You can also use CSV or Excel files and translate the data into
    spatial data by using the Tableau `MAKEPOINT`function (see *Chapter 12**, Leveraging
    Advanced Analytics*). In practice, imagine two datasets, one about the location
    of basins, indicated by a spatial field, and a second dataset containing the locations
    of waterfowl sightings, also in a spatial column. Tableau allows you to join the
    two, which is very hard to do otherwise because most programs don’t support spatial
    data.
  prefs: []
  type: TYPE_NORMAL
- en: To join on spatial columns, you have to select the **Intersects** field from
    the **Join** dropdown, only visible when working with spatial data.
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information on joining spatial files in Tableau, read the following
    resources from Tableau:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://help.tableau.com/current/pro/desktop/en-us/maps_spatial_join.htm](https://help.tableau.com/current/pro/desktop/en-us/maps_spatial_join.htm)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.tableau.com/about/blog/2018/8/perform-advanced-spatial-analysis-spatial-join-now-available-tableau-92166](https://www.tableau.com/about/blog/2018/8/perform-advanced-spatial-analysis-spatial-join-now-available-tableau-92166)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://help.tableau.com/current/pro/desktop/en-us/maps_spatial_join.htm](https://help.tableau.com/current/pro/desktop/en-us/maps_spatial_join.htm)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://help.tableau.com/current/pro/desktop/en-us/examples_spatial_files.htm](https://help.tableau.com/current/pro/desktop/en-us/examples_spatial_files.htm)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Alternatively to a horizontal join, you might need a vertical join, also called
    a **union**. A typical union use case is visualizing data that is stored in multiple
    files or tables over time. You might have a daily report, in which the column
    structure is the same but collected as a new file every day, stored in a monthly
    or yearly folder.
  prefs: []
  type: TYPE_NORMAL
- en: Combining those files gives so much more insight than looking at them one at
    a time! You will be able to analyze trends and daily or yearly changes or perform
    a year-to-date analysis. Thus, we will continue with an in-depth explanation of
    unions in Tableau next.
  prefs: []
  type: TYPE_NORMAL
- en: Unions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes you might want to analyze data with the same metadata structure that
    is stored in different files – for example, sales data from multiple years, different
    months, or countries. Instead of copying and pasting the data, you can union it.
    We already touched upon this topic in *Chapter 3*, *Using Tableau Prep Builder*,
    but a union is basically where Tableau will append new rows of data to existing
    columns with the same header. For the following exercise, we will use FIFA data
    (from the PlayStation game, not the World Cup). The data is from Kaggle ([https://www.kaggle.com/datasets/stefanoleone992/fifa-22-complete-player-dataset?resource=download](https://www.kaggle.com/datasets/stefanoleone992/fifa-22-complete-player-dataset?resource=download))
    and ships in multiple CSVs; each CSV contains data for one year and male/female
    are split too.
  prefs: []
  type: TYPE_NORMAL
- en: 'For our analysis, we want to combine all the files into one. Hence, we need
    to union, by taking the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Download the CSV files from GitHub ([https://github.com/PacktPublishing/Mastering-Tableau-2023-Fourth-Edition/tree/main/Chapter04](https://github.com/PacktPublishing/Mastering-Tableau-2023-Fourth-Edition/tree/main/Chapter04))
    or Kaggle ([https://www.kaggle.com/datasets/stefanoleone992/fifa-22-complete-player-dataset?resource=download](https://www.kaggle.com/datasets/stefanoleone992/fifa-22-complete-player-dataset?resource=download)).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the dashboard belonging to this chapter, open the **Connect to data** pane,
    and click on **Text file**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_04_10.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.10: Text file'
  prefs: []
  type: TYPE_NORMAL
- en: Locate the downloaded FIFA data on your machine and connect to any one of the
    files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create the union by dragging and dropping **a second file** from the left pane
    on top of the **initial file** until the word **Union** appears, a sign that when
    dropping the data now, the data will be used for a union:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Graphical user interface, application, Word'
  prefs: []
  type: TYPE_NORMAL
- en: Description automatically generated](img/B18435_04_11.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.11: Union'
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternatively, click on the arrow of the primary dataset and select **Convert
    to Union…**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_04_12.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.12: Convert to Union...'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following popup (*Figure 4.13*), the user has the option to select all
    the data tables that should be part of the union individually by dragging and
    dropping or by using a **Wildcard** union, which includes all tables in a certain
    directory based on the naming convention—a ***** represents any character. `players*`
    will include any file that starts with `players`. Respectively, `female*` will
    include all files starting with `female`, and `*` will include all files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_04_13.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.13: Edit Union...'
  prefs: []
  type: TYPE_NORMAL
- en: 'Unions are used to combine data that is similar and can be appended underneath
    each other. They are most often used for multiple data files where each has a
    different date stamp, a different region, a different manager, and so forth. By
    using a union, you want to make the dataset more complete. We saw that Tableau
    allows unions by dragging and dropping, as well as right-clicking on the initial
    data source. We also talked about unions that combine one or more other datasets,
    using drag and drop or wildcards. *Figure 4.14* presents a typical union example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18435_04_14.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.14: Union'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us look at the aspects we need to remember:'
  prefs: []
  type: TYPE_NORMAL
- en: Unions append data in creating additional rows.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A union should contain datasets that have many common columns.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unions should only be used for same-structured data stored across multiple data
    sources.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keep an eye on performance when using unions. With each additional dataset in
    the union, you will increase the complexity of Tableau’s VizQL.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Since you just became a union expert, it’s time to move on to the next feature
    Tableau offers: **blending**! Blending helps you to combine datasets that have
    a different level of granularity. Think *one-to-many*relationships between datasets.
    One dataset has a unique key per row; the other has multiple rows per key. To
    avoid duplicating rows in the first-mentioned dataset, Tableau deployed blending,
    long before relationships were part of the software package.'
  prefs: []
  type: TYPE_NORMAL
- en: Blends
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Relationships make data blending a little less needed and it can be seen as
    legacy functionality. But for the sake of completeness and for older Tableau versions
    (below 2020.2), let’s consider a summary of data blending in the following sections.
    In a nutshell, data blending allows you to merge multiple disparate data sources
    into a single view. Understanding the following four points will give you a grasp
    of the main points regarding data blending:'
  prefs: []
  type: TYPE_NORMAL
- en: Data blending is typically used to merge data from multiple data sources. Although
    as of Tableau 10, joins are possible between multiple data sources, there are
    still cases when data blending is the only feasible option to merge data from
    two or more sources. In the following sections, we will see a practical example
    that demonstrates such a case.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data blending requires a shared dimension. A date dimension is often a viable
    candidate for blending multiple data sources.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data blending aggregates and then matches. On the other hand, joining matches
    and then aggregates.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data blending does not enable dimensions from a secondary data source. Attempting
    to use dimensions from a secondary data source will result in a * or null in the
    view. There is an exception to this rule, which we will discuss later, in the
    *Adding secondary dimensions* section.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now that we have introduced relationships, joins, and unions, I would like
    to shift your focus a bit to data structures within your workbook. You might have
    set up the perfect join or union, started dragging and dropping fields onto your
    workbook canvas, used a filter, used a calculated field, and then received some
    unexpected results. Tableau is behaving, just not the way you like it. Why might
    that be?! The order of operation here is key. It is essential to know when which
    filter will be applied and how this affects your data. Therefore, next in line:
    the order of operations.'
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the order of operations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Isn’t a data blend the same thing as a left join? This is a question that new
    Tableau authors often ask. The answer, of course, is no, but let us explore the
    differences. The following example is simple, even lighthearted, but does demonstrate
    profound consequences that can result from incorrect aggregation resulting from
    an erroneous join.
  prefs: []
  type: TYPE_NORMAL
- en: We will explore in which order aggregation happens in Tableau. This will help
    you understand how to use blends and joins more effectively.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this example, we will use the following data:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18435_04_15.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.15: Pants and shirts sales'
  prefs: []
  type: TYPE_NORMAL
- en: 'In these tables, two people are listed: **Tanya** and **Zhang**. In one table,
    these people are members of the **Salesperson** dimension, and in the other, they
    are members of the **Sales Associate** dimension. Furthermore, **Tanya** and **Zhang**
    both sold $200 in pants and $100 in shirts. Let us explore new ways Tableau could
    connect to this data to better understand joining and data blending.'
  prefs: []
  type: TYPE_NORMAL
- en: When you look at the spreadsheets associated with this exercise, you will notice
    additional columns. These columns will be used in a later exercise.
  prefs: []
  type: TYPE_NORMAL
- en: 'Please take the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In the workbook associated with this chapter, right-click on the `Pants` data
    source and look at the data by clicking **View data**. Do the same for the `Shirts`
    data source.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `Join` data source by right-clicking on it and selecting **Edit Data
    Source**, and observe the join between the **Pants** and **Shirts** tables using
    **Salesperson/Sales Associate** as the common key:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_04_16.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.16: Join'
  prefs: []
  type: TYPE_NORMAL
- en: 'On the **Pants** worksheet, select the **Pants** data source and place **Salesperson**
    on the **Rows** shelf and **Pants Amount** on the **Text** shelf:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_04_17.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.17: Setting up the worksheet'
  prefs: []
  type: TYPE_NORMAL
- en: 'On the **Shirts** worksheet, select the **Shirts** data source and place **Sales
    Associate** on the **Rows** shelf and **Shirt Amount** on the **Text** shelf:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_04_18.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.18: Shirts'
  prefs: []
  type: TYPE_NORMAL
- en: 'On the **Join** worksheet, select the **Join** data source and place **Salesperson**
    on the **Rows** shelf. Next, double-click **Pants Amount** and **Shirt Amount**
    to place both on the view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_04_19.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.19: Join'
  prefs: []
  type: TYPE_NORMAL
- en: 'On the **Blend – Pants Primary** worksheet, select the **Pants** data source
    and place **Salesperson** on the **Rows** shelf and **Pants Amount** on the **Text**
    shelf:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_04_20.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.20: Blend pants'
  prefs: []
  type: TYPE_NORMAL
- en: Stay on the same worksheet and select the `Shirts` data source from the data
    source pane on the left and double-click on **Shirt Amount**. Click **OK** if
    an error message pops up.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select **Data** from the menu bar, then **Edit Blend Relationships…**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_04_21.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.21: Edit Blend Relationships...'
  prefs: []
  type: TYPE_NORMAL
- en: In the resulting dialog box, select `Pants` as the **Primary data source** and
    `Shirts` as the **Secondary data source**, then click on the **Custom** radio
    button, as shown in *Figure 4.22*, then click **Add…**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the left column, select **Salesperson**, and in the right column, select
    **Sales Associate**. The left column represents data from the **Primary data source**
    and the right column represents all the data available in the **Secondary data
    source**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Remove all other links, if any, and click **OK**. The results in the dialog
    box should match what is displayed in the following screenshot:![](img/B18435_04_22.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 4.22: Blend Relationships'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'A little recap of what we have done so far: we are working with three data
    sources: **Pants**, **Shirts**, and **Join**, where **Join** consists of **Pants**
    and **Shirts**. We have also created a blend with **Pants** being the primary
    data source and we connected them by using **Salesperson** and **Sales Associate**
    as keys.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Do not get confused by the name **Blend Relationships**. This has nothing to
    do with the logical layer relationships. It is just the name of the pop-up window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Going back to the exercise, continue with the following steps:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'On the `Blend` `–` `Shirts` `Primary` worksheet, select the **Shirts** data
    source and place **Sales Associate** on the **Rows** shelf and **Shirt Amount**
    on the **Text** shelf:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_04_23.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.23: Blend Shirts – Primary'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the same workbook, select the `Pants` data source, make sure the chain icon
    next to **Salesperson** is connected/red, and double-click **Pants Amount** to
    add it to the view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_04_24.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.24: Finalizing the worksheet'
  prefs: []
  type: TYPE_NORMAL
- en: 'Place all five worksheets on a dashboard. Format and arrange as desired. Now
    let us compare the results between the five worksheets in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_04_25.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.25: Comparison'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the preceding screenshot, the **Join** worksheet has double the expected
    results. Why? Because a join first matches the common key (in this case, **Salesperson/Sales
    Associate**) and then aggregates the results. The more matches found on a common
    key, the worse the problem will become. If multiple matches are found on a common
    key, the results will grow exponentially. Two matches will result in squared results,
    three will give cubed results, and so forth. This exponential effect is represented
    graphically in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18435_04_26.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.26: Join'
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, the blend functioned more efficiently, but before the blend
    could function properly, we had to edit the data relationship so that Tableau
    could connect the two data sources using the **Salesperson** and **Sales Associate**
    fields. If the two fields had been identically named (for example, **Salesperson**),
    Tableau would have automatically provided an option to blend between the data
    sources using those fields.
  prefs: []
  type: TYPE_NORMAL
- en: The results for the `Blend Pants – Primary` and `Blend Shirts – Primary` worksheets
    are correct. There is no exponential effect. Why? Because data blending first
    aggregates the results from both data sources, and then matches the results on
    a common dimension.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this case, it is **Salesperson/Sales Associate**, as demonstrated in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18435_04_27.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.27: Blending results'
  prefs: []
  type: TYPE_NORMAL
- en: What we saw in this exercise is that joins can change the data structure, so
    be careful when using them and be very aware of which columns are a suitable key.
    Also, do checks before and after joining your data, which can be as easy as counting
    rows and checking if this is the expected result.
  prefs: []
  type: TYPE_NORMAL
- en: Blending has advantages and disadvantages; adding dimensions, for example, is
    not that straightforward. But we will explore more details regarding secondary
    dimensions in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Adding secondary dimensions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Data blending, although particularly useful for connecting disparate data sources,
    has limitations. The most important limitation to be aware of is that data blending
    does not enable dimensions from a secondary data source. There is an exception
    to this limitation; that is, there is one way you can add a dimension from a secondary
    data source. Let us explore this further.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are other fields besides **Salesperson**/**Sales Associate** and **Shirt
    Amount**/**Pants Amount** in the data sources. We will reference those fields
    in this exercise:'
  prefs: []
  type: TYPE_NORMAL
- en: In the workbook associated with this chapter, select the `Adding Secondary Dimensions`
    worksheet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Shirts** data source.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a relationship between the **Shirts** and **Pants** data sources for **Material
    Type**, taking the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Data** and then **Edit Relationships**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure that **Shirts** is the primary data source and **Pants** is the secondary
    data source.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Custom** radio button.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Add…**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Material Type** in both the left and right columns:![Graphical user
    interface, application
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Description automatically generated](img/B18435_04_28.png)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 4.28: Custom blend relationships'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click **OK** to return to the view.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Place **Material Type** on the **Rows** shelf.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the **Pants** data source and make sure that the chain-link icon next
    to **Material Type** in the **Data** pane is activated and that the chain-link
    icon next to **Salesperson** is deactivated. If the icon is a gray, broken chain
    link, it is not activated. If it is an orange, connected chain link, it is activated:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_04_29.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.29: Shirts and Pants'
  prefs: []
  type: TYPE_NORMAL
- en: 'Place **Material Cat** *before* **Material Type**, and **Fastener** *after*
    **Material Type** on the **Rows** shelf as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Table'
  prefs: []
  type: TYPE_NORMAL
- en: Description automatically generated](img/B18435_04_30.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.30: Secondary dimensions'
  prefs: []
  type: TYPE_NORMAL
- en: '**Material Cat** is a dimension from a secondary data source. Data blending
    does not enable dimensions from a secondary data source. Why does it work in this
    case? There are a few reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: There is a one-to-many relationship between **Material Cat** and **Material
    Type**; that is, each member of the **Material Type** dimension is matched with
    one and only one member of the **Material Cat** dimension.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The view is blended on **Material Type**, not **Material Cat**. This is important
    because **Material Type** is at a lower level of granularity than **Material Cat**.
    Attempting to blend the view on **Material Cat** will not enable **Material Type**
    as a secondary dimension.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Every member of the **Material Type** dimension within the primary data source
    also exists in the secondary data source.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fastener** is also a dimension from the secondary data source. In *Figure
    4.35*, it displays ***** in one of the cells, thus demonstrating that **Fastener**
    is not working as a dimension should; that is, it is not slicing the data, as
    discussed in *Chapter 1*, *Reviewing the Basics*. The reason an asterisk is displayed
    is that there are multiple **Fastener** types associated with **Wool**. **Button**
    and **Velcro** display because **Acrylic** and **Polyester** each have only one
    **Fastener** type in the underlying data.'
  prefs: []
  type: TYPE_NORMAL
- en: If you use blending, make sure that your main reason is to combine measures
    and that you do not need the dimensions on a detailed level. It is especially
    useful to know this before you create a dashboard, to prepare accordingly. Your
    data needs extra prepping (check *Chapter 3,* *Using Tableau Prep builder*) because
    neither a join nor a blend can bring you the expected data structure. Or you can
    make use of scaffolding, a technique that uses a helper data source—we will discuss
    this in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing scaffolding
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Scaffolding is a technique that introduces a second data source through blending
    to reshape and/or extend the initial data source. Scaffolding enables capabilities
    that extend Tableau to meet visualization and analytical needs that may otherwise
    be exceedingly difficult or altogether impossible. Joe Mako, who pioneered scaffolding
    in Tableau, tells a story in which he used the technique to recreate a dashboard
    using four worksheets. The original dashboard, which did not use scaffolding,
    required 80 worksheets painstakingly aligned pixel by pixel.
  prefs: []
  type: TYPE_NORMAL
- en: Among the many possibilities that scaffolding enables is extending Tableau’s
    forecasting functionality. Tableau’s native forecasting capabilities are sometimes
    criticized for lacking sophistication. Scaffolding can be used to address this
    criticism.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In the workbook associated with this chapter, select the `Scaffolding` worksheet
    and connect to the `World Indicators` data source.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Using Excel or a text editor, create a `Records` dataset. The following two-row
    table represents the `Records` dataset in its entirety:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Table'
  prefs: []
  type: TYPE_NORMAL
- en: Description automatically generated](img/B18435_04_31.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.31: Excel file'
  prefs: []
  type: TYPE_NORMAL
- en: Connect Tableau to the dataset.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To be expedient, consider copying the dataset directly from Excel by using *Ctrl*
    + *C* and pasting it directly into Tableau with *Ctrl* + *V*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a **Start Date** parameter in Tableau, with the settings seen in the
    following screenshot. Notice the highlighted sections in the screenshot by which
    you can set the desired display format:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_04_32.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.32: Display format'
  prefs: []
  type: TYPE_NORMAL
- en: Create another parameter named **End Date** with identical settings.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the **Data** pane, right-click on the **Start Date** and **End Date** parameters
    you just created and select **Show Parameter**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_04_33.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.33: Show Parameter'
  prefs: []
  type: TYPE_NORMAL
- en: 'Set the start and end dates as desired, for example, **2000** – **2027**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_04_34.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.34: Start and end dates'
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the **Records** data source and create a calculated field called **Date**
    with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Place the **Date** field on the **Rows** shelf.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Right-click on the **Date** field on the **Rows** shelf and select **Show Missing
    Values**. Note that all the dates between the start and end date settings now
    display:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_04_35.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.35: Show Missing Values'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a parameter named **Select Country A** with the settings shown in the
    following screenshot. Note that the list of countries was added with the **Add
    values from** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_04_36.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.36: Add from field'
  prefs: []
  type: TYPE_NORMAL
- en: Create another parameter named **Select Country B** with identical settings.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a parameter named **Select Country A Forecast** with the settings given
    in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_04_37.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.37: Edit parameter'
  prefs: []
  type: TYPE_NORMAL
- en: Create another parameter named **Select Country B Forecast** with identical
    settings.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the **Data** pane, right-click on the four parameters you just created (**Select
    Country A**, **Select Country B**, **Select Country A Forecast**, and **Select
    Country B Forecast**) and select **Show Parameter**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_04_38.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.38: Show Parameter'
  prefs: []
  type: TYPE_NORMAL
- en: 'Make sure that the **Date** field in the **World Indicators** data source has
    the orange chain-link icon deployed. This indicates it is used as a linking field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_04_39.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.39: Link'
  prefs: []
  type: TYPE_NORMAL
- en: 'Within the **World Indicators** dataset, create the following calculated fields:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **Calculated field name** | **Calculated field code** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| `Country A Population` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| `Country B Population` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Within the **Records** dataset, create the following calculated fields:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **Calculated field name** | **Calculated field code** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| `Actual/Forecast` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| `Country A Population` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| `Country A YOY Change` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| `Country B Population` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| `Country B YOY Change` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| `Country A-B Diff` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| `Country A-B % Diff` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Within the **Data** pane, right-click on **Country A YOY Change**, **Country
    B YOY Change**, and **Country A-B % Diff** and select **Default Properties** |
    **Number Format…** to change the default number format to **Percentage**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_04_40.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.40: Default Properties'
  prefs: []
  type: TYPE_NORMAL
- en: 'With the **Records** data source selected, place the **Actual/Forecast**, **Measure
    Values**, and **Measure Names** fields on the **Color**, **Text**, and **Columns**
    shelves, respectively:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Graphical user interface, table'
  prefs: []
  type: TYPE_NORMAL
- en: Description automatically generated](img/B18435_04_41.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.41: Forecast setup'
  prefs: []
  type: TYPE_NORMAL
- en: 'Adjust the **Measure Values** shelf so that the fields that display are identical
    to the following screenshot. Also, ensure that **Compute Using** for each of these
    fields is set to **Table (down)**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Graphical user interface, table'
  prefs: []
  type: TYPE_NORMAL
- en: Description automatically generated](img/B18435_04_42.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.42: Compute Using'
  prefs: []
  type: TYPE_NORMAL
- en: So, what have we achieved so far? We created a duplicated data structure that
    allows us to compare two countries in two separate columns, even though the data
    is in one column in the original dataset. This setup allows us to ask more advanced
    questions.
  prefs: []
  type: TYPE_NORMAL
- en: 'To demonstrate this, let us ask, “*When will India’s population overtake China’s?*”
    You can set the parameters as desired—I chose 0.45% and 1.20% as the average yearly
    growth rates, but feel free to choose any parameter you think works best for a
    country. In *Figure 4.48*, you see that with a growth rate of 0.45% and 1.20%
    for China and India, respectively, India will have more inhabitants than China
    by 2024\. You can observe this by looking at the columns **Country A Population**
    and **Country B Population**. Everything in orange is a forecast, while everything
    in blue is actual data from our dataset:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18435_04_43.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.43: Forecast dashboard'
  prefs: []
  type: TYPE_NORMAL
- en: We are obviously already many years ahead; can you use this dashboard to figure
    out the actual average growth rate for China and India from 2012 to 2020 if I
    tell you that the population in 2020 was 1,439,323,776 in China and 1,380,004,385
    in India? Share your results on Tableau Public with the tag **#MasteringTableau**!
  prefs: []
  type: TYPE_NORMAL
- en: One key to this exercise is data scaffolding. Data scaffolding produces data
    that does not exist in the data source. The **World Indicators** dataset only
    includes dates from 2000 to 2012 and obviously, the **Records** dataset does not
    contain any dates. By using the **Start Date** and **End Date** parameters coupled
    with the calculated **Date** field, we were able to produce any set of dates desired.
    We had to blend the data, rather than join or union, to keep the original data
    source intact and create all additional data outside of **World Indicators** itself.
  prefs: []
  type: TYPE_NORMAL
- en: The actual data scaffolding occurred upon selecting **Show Missing Values**
    from the **Date** field dropdown after it was placed on the **Rows** shelf. This
    allowed every year between **Start Date** and **End Date** to display, even when
    there were no matching years in the underlying data. *Chapter 6*, *Utilizing OData,
    Data Densification, Big Data, and Google BigQuery*, will explore something remarkably
    similar to data scaffolding, data densification, in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us look at a few of the calculated fields in more depth to better understand
    how forecasting works in this exercise:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Calculated field: `Actual/Forecast`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code determines whether data exists in the **World Indicators**
    dataset. If the date is after 2012, no data exists and thus `Forecast` is returned.
  prefs: []
  type: TYPE_NORMAL
- en: 'Calculated field: `Country A Population`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: If forecasting is necessary to determine the value (that is, if the date is
    after 2012), the `ELSE` portion of this code is exercised. The `PREVIOUS_VALUE`
    function returns the value of the previous row and multiplies the results by the
    forecast and then adds the previous row.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s look at an example in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `Previous Row Value (PRV)` | 1,000 |'
  prefs: []
  type: TYPE_TB
- en: '| `Forecast (F)` | 0.01 |'
  prefs: []
  type: TYPE_TB
- en: '| `PRV * F` | 10 |'
  prefs: []
  type: TYPE_TB
- en: '| `Current Row Value` | 1,010 |'
  prefs: []
  type: TYPE_TB
- en: 'One important thing to note in the `Country A Population` calculated field
    is that the forecast is quite simple: multiply the previous population by a given
    forecast number and tally the results. Without changing the overall structure
    of the logic, this section of code could be modified with more sophisticated forecasting.'
  prefs: []
  type: TYPE_NORMAL
- en: These exercises have shown that with a few other tricks and techniques, blending
    can be used to great effect in your data projects. Finally, we will talk about
    data structures in general such that you will better understand why Tableau is
    doing what it is doing and how you can achieve your visualization goals.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding data structures
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The right data structure is not easily definable. True, there are ground rules.
    For instance, tall data is generally better than wide data. A wide dataset with
    lots of columns can be difficult to work with, whereas the same data structured
    in a tall format with fewer columns but more rows is usually easier to work with.
  prefs: []
  type: TYPE_NORMAL
- en: But this is not always the case! Some business questions are more easily answered
    with wide data structures. And that is the crux of the matter. Business questions
    determine the right data structure. If one structure answers all questions, great!
    However, your questions may require multiple data structures. The **pivot** feature
    in Tableau helps you adjust data structures on the fly to answer different business
    questions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before beginning this exercise, make sure you understand the following points:'
  prefs: []
  type: TYPE_NORMAL
- en: Pivoting in Tableau is limited to Excel, text files, and Google Sheets; otherwise,
    you must use Custom SQL or Tableau Prep
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A pivot in Tableau is referred to as *unpivot* in database terminology
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As a business analyst for a hospital, you are connecting Tableau to a daily
    snapshot of patient data. You have two questions:'
  prefs: []
  type: TYPE_NORMAL
- en: How many events occur on any given date? For example, how many patients check
    in on a given day?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How much time expires between events? For example, what is the average stay
    for patients in the hospital for multiple days?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To answer these questions, take the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In the starter workbook associated with this chapter, select the `Time Frames`
    worksheet, and within the **Data** pane, select the **Patient_Snapshot** data
    source.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the dropdown in the **Marks** card and select **Bar** as the chart
    type.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Right-click in the **Data** pane to create a parameter named **Select Time
    Frame** with the settings displayed in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_04_44.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.44: Parameter'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on the parameter we just created and select **Show Parameter**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Right-click in the **Data** pane to create a calculated field called **Selected
    Time Frame** with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Drag the following fields to the associated shelves and define them as directed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| Field name | Shelf directions |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Patient Type | Drag to the **Filter** shelf and check **Inpatient**. |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Check-in Date | Drag to the **Filter** shelf and select **Range of dates**.
    Also, right-click on the resulting filter and select **Show Filter**. |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Check-in Date | Right-click and drag to the **Columns** shelf and select
    **MDY**. |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Selected Time Frame | Right-click and drag to the **Rows** shelf and select
    **AVG**. |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Selected Time Frame | Right-click and drag to the **Color** shelf and select
    **AVG**. Set colors as desired. |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: 'After these actions, your worksheet should look like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Chart, bar chart'
  prefs: []
  type: TYPE_NORMAL
- en: Description automatically generated](img/B18435_04_45.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.45: Initial dashboard'
  prefs: []
  type: TYPE_NORMAL
- en: 'Right-click on the **Avg Selected Time Frame** axis and select **Edit Axis…**,
    as shown in the following figure. Then, delete the title:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_04_46.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.46: Edit Axis...'
  prefs: []
  type: TYPE_NORMAL
- en: 'Select **Worksheet** | **Show Title**. Edit the title by inserting the parameter
    **Select Time Frame**, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_04_47.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.47: Add parameter'
  prefs: []
  type: TYPE_NORMAL
- en: The data structure was ideal for the first part of this exercise. You were able
    to create the visualization quickly. The only section of moderate interest was
    setting up the **Selected Time Frame** calculated field with the associated parameter.
  prefs: []
  type: TYPE_NORMAL
- en: 'This allows the end user to choose which time frame they would like to view:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18435_04_48.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.48: Dashboard'
  prefs: []
  type: TYPE_NORMAL
- en: But what happens if you need to find out how many people were involved in a
    type of event per day?
  prefs: []
  type: TYPE_NORMAL
- en: 'This question is rather difficult to answer using the current data structure
    because we have one row per patient with multiple dates in that row. In *Figure
    4.49*, you can see the difference: the right-hand side is our current data structure,
    and the left-hand side is the data structure that will make it easier to count
    events per day:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18435_04_49.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.49: Patient data structure'
  prefs: []
  type: TYPE_NORMAL
- en: 'Therefore, in the second part of this exercise, we will try a different approach
    by pivoting the data:'
  prefs: []
  type: TYPE_NORMAL
- en: In the starter workbook associated with this chapter, select the `Events Per
    Date` worksheet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Data** pane, right-click the **Patient_Snapshot** data source and choose
    **Duplicate**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename the duplicate **Events**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Right-click on the **Events** data source and choose **Edit Data Source...**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_04_50.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.50: Edit Data Source...'
  prefs: []
  type: TYPE_NORMAL
- en: 'Take the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select all five of the date fields with *Shift* or *Ctrl* + click.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the drop-down option for any of the selected fields and choose **Pivot**:![](img/B18435_04_51.png)
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 4.51: Pivot'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The pivot will turn rows and columns around and we will get a data structure
    just like in *Figure 4.49* on the left-hand side. Rename the pivoted fields **Event
    Type** and **Event Date**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the `Events Per Date` worksheet and place the following fields on the
    associated shelves and define as directed:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **Field name** | **Shelf directions** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| `Event Date` | Right-click and drag to the **Rows** shelf and select **MDY**
    |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| `Event Type` | Place after **Event Date** on the **Rows** shelf |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| `Patient Type` | Right-click and select **Show Filter** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| `Number of Records` | Drag to the **Columns** shelf |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: From this, your worksheet should look like the following:![Chart, bar chart
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Description automatically generated](img/B18435_04_52.png)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 4.52: Events per Date'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The original data structure was not well suited to this exercise; however,
    after duplicating the data source and pivoting, the task of counting events per
    day was quite simple since we were able to achieve this by using only three fields:
    **Event Date**, **Number of Records**, and **Event Type**. That is the main takeaway.
    If you find yourself struggling to create a visualization to answer a seemingly
    simple business question, consider pivoting.'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We began this chapter with an introduction to relationships, followed by a discussion
    on joins, and discovered the queries Tableau uses to generate the respective data.
    Unions come in handy if identically formatted data, stored in multiple sheets
    or data sources, needs to be appended.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we reviewed data blending to clearly understand how it differs from joining.
    We discovered that the primary limitation in data blending is that no dimensions
    are allowed from a secondary source; however, we also discovered that there are
    exceptions to this rule. We also discussed scaffolding, which can make data blending
    surprisingly fruitful.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we discussed data structures and learned how pivoting can make difficult
    or impossible visualizations easy. Having completed our second data-centric discussion,
    in the next chapter, we will discuss table calculations, partitioning, and addressing.
  prefs: []
  type: TYPE_NORMAL
- en: Learn more on Discord
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To join the Discord community for this book – where you can share feedback,
    ask questions to the author, and learn about new releases – follow the QR code
    below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://packt.link/tableau](https://packt.link/tableau)'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/QR_Code2044012316175764640.png)'
  prefs: []
  type: TYPE_IMG
