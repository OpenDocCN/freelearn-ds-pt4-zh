- en: Utilizing OData, Data Densification, Big Data, and Google BigQuery
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Many questions that Tableau newbies have are not related to data preparation,
    joins, unions, data blending, or data structures, but rather, some of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: How can I remove null dates from the view?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why does a table calculation display numbers that don’t exist in the underlying
    data?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How does Tableau work with big data?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Will Tableau still perform well if I query millions of rows?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This chapter will answer all of the above. As always, the Tableau help pages
    provide an excellent resource too. Some useful links to explore these topics further
    are:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Data densification: [https://help.tableau.com/current/pro/desktop/en-us/predictions_generated_marks.htm](https://help.tableau.com/current/pro/desktop/en-us/predictions_generated_marks.htm)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Big data: [https://www.tableau.com/solutions/big-data](https://www.tableau.com/solutions/big-data)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In this chapter, we will discuss the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Using the OData connector
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data densification
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Domain completion
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Domain padding
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Big data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google BigQuery
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will start this chapter by introducing the OData connector. The city of Chicago
    makes data publicly available, just like other cities, countries, or public bodies.
    Check it out; you will be surprised how much data you can find online. In our
    case, we are extra lucky because the city of Chicago uses OData, which makes it
    even easier to analyze because Tableau has a direct connector to OData. Let’s
    get started.
  prefs: []
  type: TYPE_NORMAL
- en: Using the OData connector
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The exercises in this chapter can be followed by downloading the workbook associated
    with this chapter at [https://public.tableau.com/profile/marleen.meier](https://public.tableau.com/profile/marleen.meier).
    The following steps explain how datasets from the web can be loaded directly into
    Tableau by using an OData endpoint – in this case, provided by the city of Chicago:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigate to [https://data.cityofchicago.org/Public-Safety/Crimes-2001-to-Present/ijzp-q8t2](https://data.cityofchicago.org/Public-Safety/Crimes-2001-to-Present/ijzp-q8t2)
    and select the **More** icon (indicated by an ellipsis, **…**), followed by the
    **Access Data via OData** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_06_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.1: Chicago Data Portal'
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy the **OData Endpoint** URL and open Tableau Desktop:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_06_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.2: OData'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the **Data Source** pane, search for `OData`, and select the **OData** option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_06_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.3: OData connector'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the **Server** field, copy in the **OData** endpoint from the Chicago Crime
    website. Authentication is not necessary, so select **Sign In** to get started:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_06_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.4: Server name'
  prefs: []
  type: TYPE_NORMAL
- en: Start building your dashboard!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we have the data connection all set up, we can continue with our first
    real exercise about data densification. Knowing about data densification will
    help you to troubleshoot if you see unexpected data output in your dashboard and
    will help you set up your visualization the right way to achieve your goals without
    having to troubleshoot at all.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing data densification
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Data densification is a largely undocumented aspect of Tableau that can be useful
    in many circumstances but can also be confusing when encountered unexpectedly.
    This section will provide information about data densification with the intent
    of dispelling confusion and providing the Tableau author with sufficient knowledge
    to use this feature to their advantage. Data densification, in its simplest form,
    is the addition of datapoints to a view that doesn’t exist in the underlying dataset.
    This topic can be a bit confusing at first.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you would like to read more about it, please check the following article:
    [https://towardsdatascience.com/data-densification-in-tableau-93c0a6bfcc5f](https://towardsdatascience.com/data-densification-in-tableau-93c0a6bfcc5f)'
  prefs: []
  type: TYPE_NORMAL
- en: 'To begin understanding data densification, four terms should be defined: data
    densification, sparse data, domain completion, and domain padding. In addition
    to the definitions, each term will be discussed in detail by using examples to
    help improve understanding:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Data densification**: Displays datapoints for which there are no corresponding
    underlying data (by using, for example, domain completion or domain padding)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sparse data**: A dataset that is missing multiple datapoints (think Swiss
    cheese)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Domain completion**: Making sparse data dense – domain completion is a data
    densification method that uses table calculations to fill the missing gaps, available
    in Tableau when two or more dimensions are in the view'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Domain padding**: Adding datapoints to a sparse dataset – domain padding
    is a data densification method, available through the **Show Missing Values**
    feature in range piles (e.g., date and bin dimensions)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The definitions should be clear now; let’s continue with hands-on exercises.
  prefs: []
  type: TYPE_NORMAL
- en: Domain completion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are two types of data densification: domain completion and domain padding.
    **Domain completion** is the more complex of the two and can be deployed cleverly
    to solve sparse data issues, but may also appear unexpectedly and prove a challenge
    to address.'
  prefs: []
  type: TYPE_NORMAL
- en: Grasping domain completion requires a good understanding of **dimensions** and
    **measures** – discrete and continuous –and **partitioning** and **addressing**
    within table calculations. If you need a refresher on those topics, please review
    *Chapter 1*, *Reviewing the Basics* (for **dimensions** and **measures**), and
    *Chapter 5*, *Introducing Table Calculations* (for **partitioning** and **addressing**)
    before you continue to the next exercise.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s consider how domain completion can be deployed, when it’s helpful,
    and when it can be a problem.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying domain completion
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Domain completion can be activated in numerous and sometimes surprising and
    confusing ways. Adjusting the arrangement of pills on shelves, toggling dimensions
    between discrete and continuous, switching view types on the **Marks** card, adjusting
    partitioning, addressing, and other changes can impact domain completion activation.
    Although examples for every activation possibility will not be covered in this
    book, a review of typical domain completion scenarios should prove helpful.
  prefs: []
  type: TYPE_NORMAL
- en: Activating domain completion in a crosstab
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The following steps will guide you through an example of domain completion.
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigate to [https://public.tableau.com/profile/marleen.meier](https://public.tableau.com/profile/marleen.meier)
    to locate and download the workbook associated with this chapter or use the OData
    endpoint as described in the section *Using the OData connector*:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the worksheet entitled `DC` `-` `Crosstab` in the starter workbook.
    Please note that this worksheet is not present in the solutions workbook. Due
    to the unique user OData connection, it is not possible to save this page with
    my credentials.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure that **Analysis** | **Table Layout** | **Show Empty Rows** and **Show
    Empty Columns** are both *deselected*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `Chicago` `Crime` dataset, create a calculated field named **Index**
    with the code `INDEX()`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a **Location Description** filter to view only a few locations – for example,
    all the ones beginning with `AIRPORT`. Then place **Location Description** on
    the **Rows** shelf.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Place **Date** on the **Columns** shelf. Leave it at the **YEAR** aggregation
    and change it to a discrete value. Note that, as shown in the following screenshot,
    the view is sparsely populated:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_06_05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.5: Crosstab'
  prefs: []
  type: TYPE_NORMAL
- en: 'Place **Index** on the **Detail** shelf on the **Marks** card. Note that in
    the following screenshot, the view now reflects domain completion – that is, the
    view is fully populated:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_06_06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.6: Crosstab II'
  prefs: []
  type: TYPE_NORMAL
- en: 'Right-click on **YEAR(Date)** and select **Continuous**. Note that data densification
    is deactivated:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_06_07.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.7: Crosstab III'
  prefs: []
  type: TYPE_NORMAL
- en: Reset **YEAR(Date)** to **Discrete** and then right-click on **Index** and select
    **Edit Table Calculation**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the resulting dialog box, select **Specific Dimensions** and then observe
    the results for each of the following selections:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **Select Specific Dimension** | **Data Densification Activated/Deactivated**
    |'
  prefs: []
  type: TYPE_TB
- en: '| `Location Description` | Activated |'
  prefs: []
  type: TYPE_TB
- en: '| `Year of Date` | Activated |'
  prefs: []
  type: TYPE_TB
- en: '| `Location Description` and `Year of Date` | Deactivated |'
  prefs: []
  type: TYPE_TB
- en: '| No selection | Deactivated |'
  prefs: []
  type: TYPE_TB
- en: 'The preceding exercise illustrates the following rule for deploying domain
    completion:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Given a crosstab with discrete dimensions on the* **Rows** *and* **Columns**
    *shelves, utilizing a table calculation (in this case, the* **Index** *field)
    in which at least one dimension (but not all dimensions) is addressed activates
    domain completion*.'
  prefs: []
  type: TYPE_NORMAL
- en: 'A key term in the preceding rule may have been confusing: addressed. Partitioning
    and addressing were covered in *Chapter 5*, *Introducing Table Calculations*,
    but will be defined again here to ensure understanding of this rule. Consider
    the following from the Tableau documentation ([https://help.tableau.com/current/pro/desktop/en-us/calculations_tablecalculations.htm](https://help.tableau.com/current/pro/desktop/en-us/calculations_tablecalculations.htm)):'
  prefs: []
  type: TYPE_NORMAL
- en: The dimensions that define how to group the calculation, that is, that define
    the scope of the data it is performed on, are called **partitioning fields**.
    The table calculation is performed separately within each partition. The remaining
    dimensions, upon which the table calculation is performed, are called **addressing
    fields**, and determine the direction of the calculation.
  prefs: []
  type: TYPE_NORMAL
- en: 'When editing a table calculation, you can choose to select/deselect specific
    dimensions. When a dimension is selected, that dimension is used to address the
    table calculation. When a dimension is not selected, the dimension is used to
    partition the table calculation. The following screenshot of a **Table Calculation**
    editing dialog box demonstrates addressing on **Location Description** and partitioning
    on **Year of Date**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18435_06_08.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.8: Table Calculation'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will now look at the remaining steps involved in activating domain completion
    in a crosstab:'
  prefs: []
  type: TYPE_NORMAL
- en: Duplicate the worksheet from the previous exercise, `DC – Crosstab`. Name the
    new worksheet `DC – Crosstab II`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on **Index** and select **Compute Using** | **Cell**. Note that
    the view is sparsely populated.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select **Analysis** | **Table Layout** | **Show Empty Columns**. The view is
    now fully populated:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_06_09.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.9: Crosstab'
  prefs: []
  type: TYPE_NORMAL
- en: 'This exercise illustrates the following rules for deploying domain completion:'
  prefs: []
  type: TYPE_NORMAL
- en: Given a view with discrete dimensions (blue) on the **Rows** and **Columns**
    shelves, selecting **Compute Using** | **Cell** deactivates domain completion.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Given a view with discrete dimensions (blue) on the **Rows** and **Columns**
    shelves, selecting **Analysis** | **Table Layout** | **Show Empty Rows/Columns**
    activates domain completion.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Setting **Compute Using** to **Cell** may raise a question: what about the
    other **Compute Using** options, such as **Table (across)** and **Table (down)**?
    These options are all variations of partitioning and addressing.'
  prefs: []
  type: TYPE_NORMAL
- en: Activating domain completion through view types
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'We will now investigate activating domain completion through view types:'
  prefs: []
  type: TYPE_NORMAL
- en: Duplicate the worksheet from the previous exercise, `DC – Crosstab II`. Name
    the new worksheet `DC – View Types`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Remove **Index** from the **Marks** view card and deselect **Analysis** | **Table
    Layout** | **Show Empty Columns**. The view is now sparsely populated.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Change the **Marks** type from **Automatic** to **Line**. The view is now fully
    populated with more marks:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_06_10.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.10: View types'
  prefs: []
  type: TYPE_NORMAL
- en: Choose each view type option on the **Marks** card and observe which view types
    activate domain completion and which do not.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The preceding exercise illustrates the following rule for deploying data completion:'
  prefs: []
  type: TYPE_NORMAL
- en: Given a view with discrete dimensions on the **Rows** and **Columns** shelves,
    selecting the **Line**, **Area**, and **Polygon** view types from the **Marks**
    view card activates domain completion.
  prefs: []
  type: TYPE_NORMAL
- en: The usefulness of domain completion
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Domain completion can be useful in many circumstances – for example, instead
    of filling in missing values manually, whenever you want to use a parameter, or
    when performing explanatory analysis. In fact, you may have gleaned some uses
    from the previous exercises even though they were designed merely for illustration
    purposes. The following exercise demonstrates using domain completion to display
    no data for cells without a value in a sparsely populated view.
  prefs: []
  type: TYPE_NORMAL
- en: Labeling nulls
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let us look at the following steps to begin the exercise:'
  prefs: []
  type: TYPE_NORMAL
- en: Duplicate the worksheet from the previous exercise, `DC – View Types`. Name
    the new worksheet `DC – Labeling Nulls`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adjust the duplicated worksheet so that the view type is set to **Text**. Also,
    ensure that only **Location Description** and **Year** are deployed on the view.
    Be sure to leave **Location Description** on the **Filters** shelf so that a few
    locations are displayed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a calculated field named **No Data** with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Place **Ward** and **No Data** on the **Text** shelf. Note that the text `No`
    `Data` does not display:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_06_11.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.11: Labeling nulls'
  prefs: []
  type: TYPE_NORMAL
- en: 'Place **Index** on the **Detail** shelf. Note that the text **No Data** does
    display. The domain completion portion of the exercise is now complete but consider
    making the visualization more appealing by utilizing a shape:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_06_12.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.12: Labeling nulls, with additional formatting'
  prefs: []
  type: TYPE_NORMAL
- en: I hope this exercise has given you a practical example of how domain completion
    works. Quite literally, you can think of domain completion as auto-filling the
    URL you start typing into your browser search bar. But what if you want to get
    rid of it altogether? We’ll discuss this in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Removing unwanted domain completion
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'After being made aware of domain completion, a user will no longer be confused
    when unwanted marks are displayed in the view. But knowing how to remove those
    unwanted marks from the display can be a challenge. The following exercise shows
    a scenario of undesired domain completion and how to address the problem. The
    goal of the exercise is to display each year that a given crime has been reported
    with an accompanying filter to adjust the crimes that display based on the number
    of years that data is available:'
  prefs: []
  type: TYPE_NORMAL
- en: In the workbook associated with this chapter, navigate to the `DC – Year Count`
    worksheet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `Chicago Crime` dataset in the **Data** pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Place **Description** on the **Filter** shelf and select **AGG PO HANDS NO/MIN
    INJURY**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Place **Description** and **Date** on the **Rows** shelf, make **YEAR(Date)**
    discrete, and put **Ward** on the **Text** shelf. Format as desired. Note the
    missing value for **2001**, as shown in the following screenshot:![](img/B18435_06_13.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 6.13: Year Count'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This is not an instance of data densification since the dataset has a row for
    **2001**, despite the value for **Ward** being empty in that year. Therefore,
    **2001** has a null value.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To remove the fields containing null values, click on the drop-down menu associated
    with **SUM(Ward)** and select **Filter**. In the resulting dialog box, select
    **Special** | **Non-null values**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_06_14.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.14: Filtering non-null values'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a table calculation named `Year` `Count` with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If you put the **Description** pill on the **Filters** shelf in *step 3*, please
    remove it for the following steps.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Place a discrete instance of **Year Count** on the **Columns** shelf. Note
    that the resulting number, **6411** (note, you may see a different number as the
    dataset is constantly updated), represents every column in the view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_06_15.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.15: Year count'
  prefs: []
  type: TYPE_NORMAL
- en: 'Right-click on **Year Count** and select **Compute Using** | **Date**. It appears
    as if the scenario discussed in *step 4* has returned. However, although the issue
    looks the same in the view, the underlying problem differs. **Year Count** is
    a table calculation and has caused domain completion. So, this time, we see one
    row for each year in the whole dataset, even though, for example, the combination
    of **$300 AND UNDER** and **2001** does not exist in the dataset. We see every
    year because of the table calculation **Year Count**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_06_16.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.16: Year count domain completion'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on **Year Count** and select **Edit Table Calculation**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the resulting dialog box, select **Specific Dimensions**. Make sure that
    **Description** and **Year of Date** are both checked and, by dragging and dropping,
    placed in the order shown in *Figure 6.17*. Leave **At the level** at **Deepest**
    and set **Restarting every** to **Description**. **Sort order** can remain as
    **Specific Dimensions**, and if you check the **Show calculation assistance**
    box, you will see yellow highlighters in the visualization, indicating the datapoints
    related to the selection:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_06_17.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.17: Specific Dimensions'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have more than one value for **Year Count**, complete the exercise by
    moving **Year Count** from the **Columns** shelf to the **Filters** shelf. Format
    as desired (this allows you to filter on dimensions with the same number of rows
    in the partition):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_06_18.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.18: Completing the Year Count worksheet'
  prefs: []
  type: TYPE_NORMAL
- en: The relevant section in the preceding rule for this exercise is “a table calculation
    in which at least one dimension is addressed (but not all dimensions) activates
    domain completion.” The domain completion occurred when first deploying **Year
    Count**, which is a table calculation. Upon changing the addressing and partitioning
    of **Year Count** so that all dimensions were addressed (that is, no dimensions
    were partitioned), the issue was resolved.
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations, you can cross domain completion off your “to learn” list. As
    mentioned in the introduction to this chapter, next in line is domain padding.
    You will want to know how to use domain padding because it helps you when working
    with dates and bins.
  prefs: []
  type: TYPE_NORMAL
- en: Domain padding
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The second type of data densification is known as **domain padding**. We will
    now consider how domain padding is deployed and when it’s useful.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying domain padding
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You may recall that one of the ways to deploy domain completion is **Analysis**
    | **Table Layout** | **Show Empty Rows**/**Columns**. The same is true of domain
    padding, as illustrated in the following exercise. This exercise demonstrates
    how to toggle domain padding on and off:'
  prefs: []
  type: TYPE_NORMAL
- en: In the workbook associated with this chapter, select **Data** | **New Data Source**
    and connect to the `Sample` `Superstore` Excel workbook that ships with Tableau.
    It is located in **My Tableau Repository** | **Datasources+**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the resulting instance of the **Data Source** page, double-click on **Orders
    and Returns**. This will cause a relationship to be created on the field **Order
    ID**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the data source `Superstore – Returns`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the worksheet entitled `DP` `–` `Show` `Missing` `Values` and select
    the **Superstore –** `Returns` data source that was just created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Place **Ship Mode** and **State** on the **Rows** shelf. Next, place **Region**
    on the **Filters** shelf and select **West**. Lastly, put **SUM(Sales)** on the
    **Text** shelf. Note that, for example, **Wyoming** only appears for **Standard
    Class** shipping mode:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_06_19.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.19: Show Missing Values'
  prefs: []
  type: TYPE_NORMAL
- en: 'Select **Analysis** | **Table Layout** | **Show Empty Rows**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_06_20.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.20: Show Missing Values II'
  prefs: []
  type: TYPE_NORMAL
- en: 'And you can see domain padding in action. All states that have a value in some
    year or some region are showing now, even the ones that were filtered by **Region:
    West**. Now, the filter simply removes the **Sales** amount but does show all
    possible states.'
  prefs: []
  type: TYPE_NORMAL
- en: It was necessary to point to a live data source, such as the instance of **Superstore**
    that ships with Tableau, because using an extract would not, in this case, activate
    domain padding, even if **Analysis** | **Table Layout** | **Show Empty Rows**
    was selected. The functionality gets lost as soon as you activate an extract.
  prefs: []
  type: TYPE_NORMAL
- en: The usefulness of domain padding
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Domain padding is often useful when working with dates with gaps. Such gaps
    occur when some dates have associated values and some dates do not. As shown in
    the following example, returns do not occur every day in the `Superstore` dataset.
    Since a visualization that displays dates with gaps could be confusing, it might
    be helpful to fill in those gaps.
  prefs: []
  type: TYPE_NORMAL
- en: Using domain padding to fill in date gaps
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'We will now try to fill in the date gaps:'
  prefs: []
  type: TYPE_NORMAL
- en: In the workbook associated with this chapter, navigate to the worksheet entitled
    `DP – Filling Date Gaps`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `Superstore – Returns` data source that was created in the previous
    exercise.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Place a discrete instance of **MDY(Order Date)** on the **Columns** shelf and
    place **Sales** on the **Rows** shelf. Note that every mark in the view is equally
    spaced, regardless of the length of time between dates:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_06_21.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.21: Filling Date Gaps'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on **MDY**(**Order Date**) and select **Show Missing Values**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Right-click on **SUM(Sales)** on the **Rows** shelf and select **Format**.
    In the resulting **Format** window, choose the **Pane** tab and select **Marks:
    Show at Default Value**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_06_22.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.22: Filling Date Gaps II'
  prefs: []
  type: TYPE_NORMAL
- en: Note that the distance between marks is now based on the length of time between
    dates. All dates with no value are displayed with **Sales** values of zero.
  prefs: []
  type: TYPE_NORMAL
- en: Problems of domain padding
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Since domain padding can be toggled on or off through specific commands in Tableau
    (that is, **Show Missing Values** and **Show Empty Rows/Columns**), it’s typically
    not a problem. There are a few scenarios, however, when domain padding may cause
    confusion, one of which is covered in the following example.
  prefs: []
  type: TYPE_NORMAL
- en: From a domain-padded visualization to a crosstab
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s have a look at creating a crosstab from a domain-padded visualization:'
  prefs: []
  type: TYPE_NORMAL
- en: In the workbook associated with this chapter, navigate to the worksheet entitled
    `DP – From Viz to Crosstab`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `Superstore – Returns` data source.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on **Discount** in the data pane and select **Create** | **Bins**.
    In the resulting dialog box, choose a bin size of **0.05**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Place the newly created **Discount (bin)** dimension on the **Columns** shelf.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on **Discount (bin)** and ensure that **Show Missing Values** is
    selected.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Right-click and drag the **Discount** field from the **Data** pane to the **Rows**
    shelf. Select **CNT** as the measure. Note that some of the bins have no values.
    For example, as shown in the following screenshot, the **0.35** bin has no associated
    value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_06_23.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.23: From Viz to Crosstab'
  prefs: []
  type: TYPE_NORMAL
- en: 'Duplicate the sheet as a crosstab by right-clicking on the worksheet tab and
    selecting **Duplicate as Crosstab**. Note that **Show Missing Values** is still
    activated:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_06_24.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.24: From Viz to Crosstab II'
  prefs: []
  type: TYPE_NORMAL
- en: 'Complete the exercise by right-clicking on **Discount (bin)** and deselecting
    **Show Missing Values**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_06_25.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.25: From Viz to Crosstab III'
  prefs: []
  type: TYPE_NORMAL
- en: Utilizing **Show Missing Values** for bins or dates is often helpful in a visualization
    but may not be helpful in a crosstab view. This is especially true if there are
    many rows or columns without values. It would make it harder for a human to digest
    the amount of data and, since often associated with not being important, it is
    most of the time better to exclude missing values in crosstabs – simply to keep
    a better overview.
  prefs: []
  type: TYPE_NORMAL
- en: A special case of data densification will appear when working with predictive
    modeling. That’s why we will discuss this next.
  prefs: []
  type: TYPE_NORMAL
- en: Data densification in predictive modeling
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Besides trendlines and forecasts (accessible via the **Analytics** pane), Tableau
    Desktop currently supports three types of predictive modeling as built-in functions.
    More can be added by using, for example, a Python integration (see *Chapter 15*,
    *Integrating Programming Languages*). Linear regression, regularized linear regression,
    and Gaussian process regression are the ones you can currently choose from. Those
    can be called by using the `Model_Quantile` and `Model_Percentile` functions in
    a calculated field.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18435_06_26.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.26: Built-in prediction functions'
  prefs: []
  type: TYPE_NORMAL
- en: Given the `DP - Show Missing Values Prediction` worksheet in the **solutions**
    dashboard accompanying this chapter, you can see the `Superstore Count(Orders)`
    given each day in October 2020 and the respective daily 50% quantile.
  prefs: []
  type: TYPE_NORMAL
- en: For more information on built-in predictive analytics and `Model_Quantile`,
    please check [https://help.tableau.com/current/pro/desktop/en-us/predictions_overview.htm](https://help.tableau.com/current/pro/desktop/en-us/predictions_overview.htm).
  prefs: []
  type: TYPE_NORMAL
- en: 'Some days don’t show data:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18435_06_27.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.27: Missing values'
  prefs: []
  type: TYPE_NORMAL
- en: But we can enable data densification to complete the view.
  prefs: []
  type: TYPE_NORMAL
- en: Turn on **Show Missing Values** by right-clicking on **DAY(Order Date)** on
    the **Columns** shelf.
  prefs: []
  type: TYPE_NORMAL
- en: 'Select **Analysis** | **Infer Properties from Missing Values** and see the
    completed prediction:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18435_06_28.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.28: Data densification'
  prefs: []
  type: TYPE_NORMAL
- en: I hope data densification has become a bit clearer now. It is a powerful feature
    and should be discussed more often. Spread the word! Data densification will enhance
    your visualizations (see *Figure 6.28*), interpolate datapoints for you, and can
    even be used in calculations – a non-existing number will suddenly be there –
    how cool! Our journey, however, will continue, and the topic we will discuss next
    is working with big data.
  prefs: []
  type: TYPE_NORMAL
- en: Tableau and big data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Perhaps the first challenge of big data is defining it adequately. It’s a term
    so widely used as to be almost meaningless. For example, some may refer to data
    exceeding 1,048,576 rows as big data (which is the row limit in Microsoft 365,
    Excel 2019, Excel 2016, Excel 2013, Excel 2010, and Excel 2007), while others
    would only apply the term to datasets in the multiple-petabyte range. Definitions
    found on Wikipedia ([https://en.wikipedia.org/wiki/Big_data](https://en.wikipedia.org/wiki/Big_data))
    are so broad as to encompass both of these examples.
  prefs: []
  type: TYPE_NORMAL
- en: True, it is probably simplistic to consider data that merely exceeds Excel’s
    row limitation as big data; nevertheless, from the perspective of an individual
    for whom Excel is the traditional data-processing application, the preceding definition
    fits.
  prefs: []
  type: TYPE_NORMAL
- en: Talking about big data goes hand in hand with parallel processing. For Tableau
    and working with big data, it is very important to know the partitions that your
    IT team has put in place for parallel processing. It could be, for example, the
    **YEAR**, **MONTH**, and **DAY** columns. If you use those columns that are also
    used as partitions in the database, your Tableau dashboard will perform so much
    better than trying to query on a random field in the dataset. So, first, put filters
    in place—preferably partitions. Then, build your dashboard on a subset of the
    data. Once you are all done, load the data you need and check the performance
    again. More information regarding performance is given in *Chapter 13*, *Improving
    Performance*.
  prefs: []
  type: TYPE_NORMAL
- en: Many organizations opt for a cloud-based solution, such as AWS, Azure, or GCP.
    Within **Google Cloud Platform** (**GCP**), you will find BigQuery, which we will
    use for the next exercise.
  prefs: []
  type: TYPE_NORMAL
- en: Building a visualization with Google BigQuery
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One big data solution is BigQuery from Google, next to many others from providers
    like Amazon, Alibaba, Azure, IBM, etc. For this section of the book, we have randomly
    chosen BigQuery, which you can test for free if you have a Gmail account. Other
    providers offer free tier accounts too. Since we are working with the cloud, you
    don’t have to install anything, which makes Google Cloud a good platform for an
    exercise in this book.
  prefs: []
  type: TYPE_NORMAL
- en: To build a visualization with Google BigQuery, you will need to first set up
    access to BigQuery. The following exercise will point you in the right direction.
    Once you have set up access to BigQuery, you will be able to connect to the BigQuery
    sample datasets. In the remainder of the exercise, you will build a visualization
    while connected to BigQuery.
  prefs: []
  type: TYPE_NORMAL
- en: Assuming you have a good internet connection, the performance will likely exceed
    what you experience when working with a local copy of an extracted data source
    of a similar size.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s have a look at how we can use Google BigQuery in our Tableau dashboard:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to your Google account, navigate to [https://cloud.google.com/bigquery/](https://cloud.google.com/bigquery/),
    and follow the provided instructions to try **BigQuery** for free.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the workbook associated with this chapter, navigate to the `BigQuery` worksheet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press *Ctrl* + *D* to connect to a data source. In the resulting window, select
    **Google BigQuery** and, when prompted, provide your Gmail login information.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the **Data Source** page, choose any billing project you have set up when
    registering on GCP. In my case, it’s called `BigDataProject`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then select the `publicdata` project, the `samples` dataset, and the `natality`
    table. This data is available to everyone and hence you should see it too.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The **natality** table provides birth demographics for the United States from
    1969 to 2008:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_06_29.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.29: BigQuery'
  prefs: []
  type: TYPE_NORMAL
- en: In the **Data** pane, double-click **natality(Count).**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Data** pane, drag **Month** to the **Columns** shelf, and set it
    to **Discrete**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the *y* axis, **Count of natality**, and select **Edit Axis**.
    Deselect **Include Zero**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Format as desired. This visualization displays the number of infants born in
    each month from 1969 to 2008:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_06_30.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.30: BigQuery visualization'
  prefs: []
  type: TYPE_NORMAL
- en: Knowing the fields on which the big data engine is partitioned will help a lot
    when facing performance issues. If, for example, your data is partitioned by **Year**,
    always try to make use of this field in filters and calculations. *Chapter 13*,
    *Improving Performance*, contains more information on this topic.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, BigQuery allows us to visualize datasets containing millions
    of records quickly and easily.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We began this chapter with a discussion of data densification and discovered
    that there are two types of data densification: domain completion and domain padding.
    When reviewing these two types of data densification, we learned how each can
    be deployed, when each is useful, and when each can be problematic. Next, we explored
    big data with a walk-through of an example of how to use Tableau to connect to
    Google BigQuery.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next chapter, we will explore another functionality: level of detail
    calculations. Although table calculations remain an important part of everyday
    Tableau usage, we will discover how level of detail calculations can easily accomplish
    tasks that were previously only possible through complex table calculations.'
  prefs: []
  type: TYPE_NORMAL
- en: Learn more on Discord
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To join the Discord community for this book – where you can share feedback,
    ask questions to the author, and learn about new releases – follow the QR code
    below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://packt.link/tableau](https://packt.link/tableau)'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/QR_Code2044012316175764640.png)'
  prefs: []
  type: TYPE_IMG
