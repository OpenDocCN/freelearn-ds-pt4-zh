- en: Going Beyond the Basics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The assumption behind this chapter is that the you are familiar with basic chart
    types such as bar, line graph, treemap, pie, and area, and that you have used
    Tableau to build multiple charts. The intention of this chapter is to focus on
    how to improve visualization types you may already use on a regular basis, as
    well as introducing chart types with which you may be unfamiliar but that are,
    nonetheless, widely useful. I will then introduce you to Tableau Exchange, a platform
    that contains extensions, accelerators, and connectors, which offer some more
    exotic chart types.
  prefs: []
  type: TYPE_NORMAL
- en: Perhaps the most useful part of this chapter is not contained in the book at
    all but, rather, in the workbook associated with the chapter. Be sure to download
    that workbook (the link will be provided in the following section) to check out
    a wide range of visualization types.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will explore the following visualization types and topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Improving popular visualizations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Custom background images
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tableau Exchange
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extensions
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Accelerators
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Connectors
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Keep in mind that the content of your dashboard is the most important, but if
    you can have the same content with a nicer design, go for the nicer design. There
    is such a thing as **Beauty Bias** and **Design Driven Consumption**. You want
    to sell your product – make it look good! I hope the next sections will help you
    find your path and eventually make you a better dashboard designer.
  prefs: []
  type: TYPE_NORMAL
- en: Improving popular visualizations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most popular visualizations are popular for good reason. Basic bar charts and
    line graphs are familiar, intuitive, and flexible and are thus widely used in
    data visualization. Other less basic visualizations such as bullet graphs and
    Pareto charts may not be something you use every day but are nonetheless useful
    additions to a data analyst’s toolbox. And while these are all good, they could
    do more. In this section, we will explore ideas for how to tweak, extend, and
    even overhaul a few popular chart types.
  prefs: []
  type: TYPE_NORMAL
- en: Bullet graphs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The bullet graph was invented by Stephen Fewand communicated publicly in 2006
    through his book *Information Dashboard Design: The Effective Visual Communication
    of Data*. Stephen Few continues to be a strong voice in the data visualization
    space through his books and his blog, [www.perceptualedge.com](http://www.perceptualedge.com).
    Bullet graphs communicate efficiently and intuitively by packing a lot of information
    into a small space while remaining attractive and easy to read. Understandably,
    they have gained much popularity and are utilized for many purposes, as can be
    seen through a web search. The following two exercises communicate the basics
    of bullet graphs and how to improve on those basics. That is not to say that I
    have improved on the bullet graph in this chapter! The intent is merely to relay
    how this important visualization type can be more effectively used in Tableau.
    Let’s get started.'
  prefs: []
  type: TYPE_NORMAL
- en: Using bullet graphs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following steps will teach you the basics of a bullet graph:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to [https://public.tableau.com/profile/marleen.meier](https://public.tableau.com/profile/marleen.meier)
    to locate and download the workbook associated with this chapter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the worksheet entitled `Bullet Graph` and select the `CoffeeChain`
    data source.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Place these fields on their respective shelves: **Profit** on **Columns**,
    **Market** on **Rows**, and **BudgetProfit** on **Detail** in the **Marks** card.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the *x* axis and select **Add Reference Line**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From the upper left-hand corner of the **Edit Reference Line, Band or Box**
    dialog box, select **Line**. Also, set **Scope** to **Per Cell**, **Value** to
    **SUM(Budget Profit)** as **Average**, and **Label** to **None**. Click **OK**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_08_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.1: Reference line'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s add another reference line. This time, as an alternative method, click
    on the **Analytics** pane and drag **Reference Line** onto your worksheet. (You
    could obviously repeat the method in *Step 4* instead.)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Within the dialog box, select **Distribution** and set **Scope** to **Per Cell**.
    Set **Value** to **Percentages** with **90,95,100** and **Percent of** to **SUM(Budget
    Profit)**. Set **Label** to **None**. Click **OK**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_08_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.2: Percentiles'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a calculated field called `Profit to Budget Profit Ratio` with the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create another calculated field called `Quota Met?` with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Right-click on **Profit to Budget Profit Ratio** and select **Default Properties**
    | **Number Format** | **Percentage**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Place **Profit to Budget Profit Ratio** on the **Label** shelf in the **Marks**
    cardand **Quota Met?** on the **Color** shelf in the **Marks** card:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_08_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.3: Preliminary bullet graph'
  prefs: []
  type: TYPE_NORMAL
- en: 'As you survey our results thus far, you will notice that there are some important
    aspects to this visualization. For example, the reference lines and the colored
    bars clearly delineate when a quota was met and missed. Furthermore, the percentages
    communicate how close the actual profit was to the budgeted profit for each market.
    However, there are also some problems to address:'
  prefs: []
  type: TYPE_NORMAL
- en: The percentage associated with the **South** market is partially obscured.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The background colors represented by the reference distribution are obscured.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The colors of the bars are not intuitive. Orange is set to **True**, which signifies,
    in this case, the markets that made the quota. However, psychologically speaking,
    orange is a warning color used to communicate problems and, therefore, would be
    more intuitively associated with those markets that failed to make the quota.
    Furthermore, these colors are not easily distinguishable when presented in grayscale.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The words **False** and **True** in the legend are not immediately intuitive.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the upcoming steps, we will address those issues and show you possible solutions.
  prefs: []
  type: TYPE_NORMAL
- en: Bullet graphs – beyond the basics
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To address the problems with the graph in the previous section, take the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Continuing from the previous exercise, access the **Data** pane on the left-hand
    portion of the screen, right-click on **Quota Met?**, and adjust the calculation
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This calculation will create the string `Quota Met` if the profit is higher
    than the budgeted profit, or the string `Quota Missed` if the profit isn’t higher
    than the budgeted profit. These two strings can be used as a legend and are more
    intuitive than the previous **True** and **False**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a calculated field named `Greater of Profit or Budget Profit` with the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This calculation will show the profit amount if it is more than the budgeted
    amount, or the budgeted amount if the profit is smaller. This will help us to
    always show the bigger amount of the two.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Place **Greater of Profit or Budget Profit** on the **Columns** shelf after
    **Profit**. Also, right-click on the pill and select **Dual Axis**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the axis for **Greater of Profit or Budget Profit** and select
    **Synchronize Axis**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Within the **Marks** card, select the pane labeled **All** and set the mark
    type to **Bar**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_08_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.4: Marks card'
  prefs: []
  type: TYPE_NORMAL
- en: Remove **Measure Names** from the **Color** shelf.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Within the **Marks** card, select the pane labeled **AGG(Greater of Profit or
    Budget Profit)**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Color** shelf and set **Opacity** to **0%**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Within the **Marks** card, select the pane labeled **SUM(Profit)**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Remove **AGG(Profit to Budget Profit Ratio)** from the **Marks** card and note
    that the percentage labels are no longer obscured.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the **Color** shelf and select **Edit Colors**. Within the resulting
    dialog box, complete the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click on **Quota Met** and set the color to white.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click on **Quota Missed** and set the color to black.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: After you have clicked **OK** for each dialog box and returned to the main screen,
    once again click on the **Color** shelf, and select black for **Border**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Size** shelf to narrow the width of the bars by dragging the
    slider to the left.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Right-click on the **Profit** axis and select **Edit Reference Line**. Then
    set **Value** to **90%,95%,100% of Average Budget Profit**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_08_05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.5: Reference line'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the same window, moving down to the **Formatting** section, set the **Fill**
    color to **Grey Light**. Click the **Fill Below** checkbox and the **Reverse**
    checkbox. Note that the background colors are now more easily distinguishable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_08_06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.6: Background colors'
  prefs: []
  type: TYPE_NORMAL
- en: 'Right-click on the axis labeled **Greater of Profit or Budget Profit** and
    deselect **Show Header**. You may wish to make some additional tweaks, but our
    result looks as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_08_07.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.7: Improved bullet graph'
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that each of the aforementioned problems has now been addressed:'
  prefs: []
  type: TYPE_NORMAL
- en: The percentage numbers are no longer obscured.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The background colors are easier to distinguish due to having narrowed the bars.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The color of the bars is more intuitive. Furthermore, using black, white, and
    gray has circumvented any readability problems arising from color blindness or
    grayscale print.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The words **False** and **True** in the legend have been replaced with the more
    descriptive terms **Quota Met** and **Quota Missed**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By completing this section, you will have learned how tweaks can improve your
    visualization and the type of graph you choose. You can do this whenever the current
    choices you have made do not tell the full story yet. In addition to that, it
    is also a selling point. Your users like a nice design and clear dashboards. By
    improving your visualization with more advanced techniques, you will be able to
    improve your storytelling and marketing.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will continue to add complexity to known **visualizations**.
    This time we will create pie and donut charts and eventually combine the two.
  prefs: []
  type: TYPE_NORMAL
- en: Pies and donuts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Pie charts are normally frowned upon in data visualization circles. They simply
    have too many drawbacks. For instance, pie charts don’t utilize space well on
    a rectangular screen. Treemaps fit much better. Also, the number of slices that
    are reasonable on a pie chart is fairly limited, perhaps six to eight at best.
    Once again, treemaps are superior because they can be sliced at a finer level
    of granularity while remaining useful. Lastly, when using pie charts, it can be
    difficult to discern which of two similarly sized slices is the largest. Treemaps
    are no better in this regard; however, if the viewer understands that treemap
    sorting is from the top left to the bottom right, that knowledge can be used to
    distinguish size differences. Of course, bar charts circumvent that particular
    problem entirely, since the eye can easily distinguish widths and heights but
    struggles with angles (pie charts) and volume (treemaps).
  prefs: []
  type: TYPE_NORMAL
- en: Despite these drawbacks, because of their popularity, pie charts will likely
    continue to be widely used in data visualization for years to come. People like
    them because they are different than the old, boring bar chart. Users are familiar
    with pie charts and they do not require any explanation and are a way to show
    proportions – just not the best way in my opinion. For the pessimistic Tableau
    author, the best course of action is to grin and bear it. But for one willing
    to explore and push frontier boundaries, good uses for pie charts can be discovered.
    The following exercise is one contribution to that exploration.
  prefs: []
  type: TYPE_NORMAL
- en: Pies and donuts on maps
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Occasionally, there is a need (or perceived need) to construct pie charts atop
    a map. The process is not difficult (as you will see in the following exercise),
    but there are some shortcomings that cannot be easily overcome. We will discuss
    those shortcomings after the exercise.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Within the workbook associated with this chapter, navigate to the worksheet
    entitled `Pie Map` and select the `Superstore` data source.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Data** pane, double-click on **State** to create a map of the United
    States.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Place **Sales** on the **Color** shelf. Click on the **Color** shelf and change
    the **Palette** to **Grey**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_08_08.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.8: Edit Colors'
  prefs: []
  type: TYPE_NORMAL
- en: 'Drag an additional copy of **Latitude (generated)** on the **Rows** shelf by
    holding *Ctrl* for Windows and *Command* for Mac and simultaneously dragging the
    pill to create two rows, each of which displays a map:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_08_09.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.9: Latitude'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the **Marks** card, you will notice that there are now three panes: **All**,
    **Latitude (generated)**, and **Latitude (generated) (2)**. Click on **Latitude
    (generated) (2)** and set the mark type to **Pie**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_08_10.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.10: Marks card panes'
  prefs: []
  type: TYPE_NORMAL
- en: Place **Category** on the **Color** shelf and **Sales** on the **Size** shelf.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To complete the visualization, right-click on the second instance of **Latitude
    (generated)** in the **Rows** shelf and select **Dual Axis**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_08_11.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.11: Pie map'
  prefs: []
  type: TYPE_NORMAL
- en: 'Can you see issues in the visualization? Two should be immediately apparent:'
  prefs: []
  type: TYPE_NORMAL
- en: First, the smaller pies are difficult to see. Clicking on the drop-down menu
    for the **Size** legend and selecting **Edit Sizes** could partially address this
    problem, but pies in smaller states such as **Rhode Island** will continue to
    be problematic.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Second, many states have the same light-gray background despite widely varying
    sales amounts.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The following approach will address these issues while also adding additional
    functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Pies and donuts – beyond the basics
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following are the steps required to create a tile grid map with both a
    pie and donut chart on top of the map. By combining the different methods, we
    will be able to show more information at once without overloading the view:'
  prefs: []
  type: TYPE_NORMAL
- en: Within the workbook associated with this chapter, navigate to the worksheet
    entitled `Altered Pie Map` and select the `Superstore` data source.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create the following calculated fields:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **Name** | **Code** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| `Category State Sales` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| `State Max` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| `Top Selling Category per State` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We need those first two **Level of Detail** (**LOD**) calculations and the last
    calculation to show the sales per category, while also showing the best-selling
    category per state.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Within the **Marks** card, set the mark type to **Pie**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Within the **Data** pane, select the **States** data source.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click the chain link next to **State** in the **Data** pane to use **State**
    as a blended field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_08_12.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.12: Linking dimensions'
  prefs: []
  type: TYPE_NORMAL
- en: Drag **Column** to the **Columns** shelf and **Row** to the **Rows** shelf.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Superstore** data source, place **Category** on the **Color** shelf
    and **Sales** on the **Angle** shelf.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Place **State** on **Detail** in the **Marks** card.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Size** shelf and adjust the size as desired.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At this point, you should see a rough map of the United States made up of pie
    charts. Next, we will further enhance the graphic by changing the pies into donuts:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_08_13.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.13: Map'
  prefs: []
  type: TYPE_NORMAL
- en: Return to the **States** data source and place another instance of **Row** on
    the **Rows** shelf.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Marks** card, select **Row (2)** and change the view type to **Circle**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From the **Superstore** dataset, place **Top Selling Category per State** on
    the **Color** shelf:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_08_14.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.14: Map II'
  prefs: []
  type: TYPE_NORMAL
- en: 'Place **Sales** on the **Label** shelf. Right-click on the instance of **Sales**
    you just placed on the **Label** shelf and select **Format**. Make the following
    adjustments in the **Format** window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the **Numbers** formattingto **Currency (Custom)** with **0** decimal places
    and **Display Units** set to **Thousands (K)**:![](img/B18435_08_15.png)
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 8.15: Formatting'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Set **Alignment** to **Middle Centre**, as shown in the following screenshot,
    so that the numbers are centered over the circles:![](img/B18435_08_16.png)
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 8.16: Alignment'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the **Rows** shelf, right-click on the second instance of **Row** and select
    **Dual Axis**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on an instance of the **Row** axis and select **Synchronize Axis**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Within the **Row (2)** instance on the **Marks** card, make sure that **Size**
    exceeds the **Size** of the **Row** instance in the **Marks** card to show the
    pie chart as an outer ring.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Within the **Row (2)** and **Row** instances of the **Marks** card, click on
    the **Color** shelf and select **Edit Colors**. Adjust the color settings as desired
    so that the color of the overlaying circle (the hole of the donut) can be distinguished
    from the underlying colors and yet continues to recognize which **Category** sold
    best. I selected the following:![](img/B18435_08_17.png)
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 8.17: Color selection'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Also, within the **Color** shelf, set **Border** to the desired color. I used
    white. I also used white as the color for **Label**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on each axis and deselect **Show Header**. Select **Format** | **Lines**
    and set **Grid Lines** to **None**. Make other formatting changes as desired:![](img/B18435_08_18.png)
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 8.18: Tile grid map'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: At first glance, the visualization may look peculiar. It’s called a **tile grid
    map** and although it’s fairly new to the data visualization scene, it has begun
    to see usage at media outlets such as NPR. In the right setting, a tile grid map
    can be advantageous. Let’s consider a couple of advantages the preceding exercise
    gives us.
  prefs: []
  type: TYPE_NORMAL
- en: First, the grid layout in combination with the **Log Sales** calculated field
    creates a map immediately evident as being the United States, while ensuring that
    the sizing of the various pie charts changes only moderately from greatest to
    least. Thus, each slice of each pie is reasonably visible; for example, the District
    of Columbia sales is as easily visible as California sales.
  prefs: []
  type: TYPE_NORMAL
- en: Second, the end user can clearly see the top-selling category for each state
    via the color of the inner circle (that is, the hole of the donut). This was accomplished
    with the LOD calculations. Thanks to the LOD, we were able to differentiate the
    best-selling category from the other two. Since all three categories live in the
    same column, you need to use an LOD calculation. You can refer to *Chapter 7*,
    *Practicing Level of Detail Calculations*, for more details on LOD calculations.
    The result is an information-dense visualization that uses pie charts in a practical,
    intuitive manner.
  prefs: []
  type: TYPE_NORMAL
- en: This section demonstrated some more creative approaches to show data from different
    angles in the same visualization. Next, we will continue to discuss another advanced
    visualization, Pareto charts.
  prefs: []
  type: TYPE_NORMAL
- en: Pareto charts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the late 19^(th) century, an Italian economist named Vilfredo Pareto observed
    that 80% of the land in Italy was owned by 20% of the people. As he looked around,
    he observed this mathematical phenomenon in many unexpected places. For example,
    he noted that 80% of the peas in his garden were produced from 20% of the peapods.
    As a result, the 80/20 rule has found its way into the popular vernacular. You
    can leverage this principle to create a clear visual hierarchy by emphasizing
    the most crucial elements or focal points. You can also use it as a tool for prioritization
    – what are your 20% most important tasks, datasets, and data quality issues? Work
    on those first. By giving priority you can focus your attention and ensure effective
    communication. But all of this requires another whole book. Let us focus first
    on how we can visualize an 80/20 phenomenon in Tableau. In the following exercise,
    we’ll discuss how to build a basic Pareto chart and then how to expand that chart
    to make it even more useful.
  prefs: []
  type: TYPE_NORMAL
- en: Using Pareto charts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Of course, not every dataset is going to adhere to the 80/20 rule. Accordingly,
    the following exercise considers loan data from a community bank where 80% of
    the loan balance is not held by 20% of the bank’s customers. Nonetheless, a Pareto
    chart can still be a very helpful analytical tool.
  prefs: []
  type: TYPE_NORMAL
- en: 'Take the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Within the workbook associated with this chapter, navigate to the worksheet
    entitled `Pareto - Basic` and select the `Bank data source`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the **Data** pane, change **Account #** to **Dimension**. Place **Account
    #** on the **Columns** shelf and **Current Loan Balance** on the **Rows** shelf.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Fit** drop-down menu and choose **Entire View**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Right-click on the **Account #** pill and select **Sort**. Set **Sort By**
    to **Field**, **Sort Order** to **Descending**, **Field Name** to **Current Loan
    Balance**, and **Aggregation** to **Sum**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_08_19.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.19: Sorting'
  prefs: []
  type: TYPE_NORMAL
- en: 'Right-click on **SUM(Current Loan Balance)** **Δ** located on the **Rows**
    shelf and select **Add Table Calculation**. Choose the settings as shown in the
    following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_08_20.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.20: Table Calculation I'
  prefs: []
  type: TYPE_NORMAL
- en: 'Drag an instance of **Account #** to the **Detail** shelf.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Color** shelf and set **Border** to **None**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Right-click on the instance of **Account #** that is on the **Columns** shelf
    and select **Measure** | **Count (Distinct)**. Note that a single vertical line
    displays:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_08_21.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.21: Pareto displaying a single vertical line'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once again, right-click on the instance of **CNTD(Account #)** on the **Columns**
    shelf and select **Add Table Calculation**. Configure the settings as shown in
    the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_08_22.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.22: Table Calculation II'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the **Analytics** tab in the upper left-hand corner of the screen and
    perform the following two steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag **Constant Line** to **Table** | **SUM(Current Loan Balance)** **Δ**
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: In the resulting dialog box, select **Constant** and set **Value** to **0.8**,
    as shown in the following screenshot:![](img/B18435_08_23.png)
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 8.23: Constant Line'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Repeat the previous step with the following differences:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Drag **Constant Line** to **Table** | **CNTD(Account #)**'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: In the resulting dialog box, select **Constant** and set **Value** to **0.2**
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Drag **Current Loan Balance** to the **Rows** shelf. Place it to the right
    of the **SUM(Current Loan Balance) Δ** that is currently on the **Rows** shelf.
    Note that the axis is affected by a single loan with a much larger balance than
    the other loans:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_08_24.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.24: Pareto Basic'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on the **Current Loan Balance** axis and select **Edit Axis**. In
    the resulting dialog box, set **Scale** to **Logarithmic** and close the window.
    This addresses the problem of the single large loan affecting the axis and thus
    obscuring the view of the other loans.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Within the **Marks** card, select the second instance of **SUM(Current Loan
    Balance) Δ** and set the mark type to **Bar**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_08_25.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.25: Select Bar'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on **SUM(Current Loan Balance) Δ** on the **Rows** shelf and select
    **Dual Axis**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Right-click on the **% of Total Running Sum of Current Loan Balance** axis
    and select **Move Marks Card to Front**. Change the colors, tooltips, and formatting
    as desired:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_08_26.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.26: Pareto chart'
  prefs: []
  type: TYPE_NORMAL
- en: There are positive aspects of this visualization to consider. First, the end
    user can quickly gain an initial understanding simply by observing both portions
    of the graph in conjunction with the values on the axes. The *y* axis on the left,
    for example, shows the percentage of each current loan in regard to the total
    amount of current loans, presented in a running sum such that we end up at 100%.
    The *y* axis on the right side shows the amount of those same loans. The *x* axis
    simply presents us with the unique account IDs or numbers. We can see that in
    this example, 20% of the accounts hold almost 60% of the loans and around 50%
    of the accounts hold 80% of the loans. Those are the two cross points of the red
    line and the two reference lines. Furthermore, the end user can hover the cursor
    over any part of the curve and see the resulting tooltip.
  prefs: []
  type: TYPE_NORMAL
- en: However, there are ways this visualization could be improved. For example, adding
    parameters to the two reference lines and rewording the axis labels to be less
    verbose would be quick ways to add additional value. Therefore, in the next exercise,
    we’ll see if we can go a little beyond the current visualization.
  prefs: []
  type: TYPE_NORMAL
- en: Pareto charts – beyond the basics
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In the previous exercise, we had to take a closer look in order to figure out
    what percentage of accounts account for how many loans. The following steps will
    show us how to create a parameter that will help us to spot the intersection:'
  prefs: []
  type: TYPE_NORMAL
- en: Duplicate the sheet from the previous exercise and name the duplicate **Pareto
    - Improved**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Remove both reference lines by selecting them and dragging them out of the worksheet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag **SUM(Current Loan Balance) Δ** (the table calculation) from the **Rows**
    shelf to the **Data** pane. When prompted, name the field **Running % of Balance**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create and display a parameter with the following settings. This parameter
    will allow us to set any given value between 0 and 100%, and we will be able to
    see that area on the Pareto visualization in color:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_08_27.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.27: Editing the parameter'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on the newly created parameter and select **Show Parameter**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create the following calculated fields:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **Name** | **Code** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| `Running % of Loans` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| `Pareto Split` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| `Pareto Split (label)` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The configuration that will result in the coloring of a selected area on the
    Pareto chart needs some extra attention; therefore, we created three calculations.
    With the help of those, we can change the color of parts of the visualization
    and add some explanatory text, as well as labels.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **All** portionof the **Marks** card.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Drag **Pareto Split** to the **Detail** shelf. Click on the drop-down menu
    to the left of the **Pareto Split** pill on the **Marks** card and select **Color**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Graphical user interface'
  prefs: []
  type: TYPE_NORMAL
- en: Description automatically generated](img/B18435_08_28.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.28: Pareto Split to Color'
  prefs: []
  type: TYPE_NORMAL
- en: Select the **Running % of Balance Δ** portion of the **Marks** card. Set the
    mark type to **Line**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Drag **Pareto Split (label)** to the **Label** shelf. Note that the expected
    label does not display:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![A picture containing diagram'
  prefs: []
  type: TYPE_NORMAL
- en: Description automatically generated](img/B18435_08_29.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.29: Pareto chart with no label'
  prefs: []
  type: TYPE_NORMAL
- en: To address this, first click on the **Label** shelf and select **Allow labels
    to overlap other marks**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, right-click **Pareto Split (label)** on the **Marks** card and select
    **Compute Using | Account #**. Now you will see the label:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![A picture containing diagram'
  prefs: []
  type: TYPE_NORMAL
- en: Description automatically generated](img/B18435_08_30.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.30: Pareto chart with label'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the **Analytics** tab in the upper left-hand corner of the screen and
    perform the following two steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag **Reference Line** to **Table | Δ Running % of Balance**:![A picture containing
    diagram
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Description automatically generated](img/B18435_08_31.png)Figure 8.31: Reference
    line'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the resulting dialog box, select **% of Balance** from the **Value** drop-down
    menu and set **Label** to **None**:![A picture containing diagram
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Description automatically generated](img/B18435_08_32.png)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 8.32: Reference line II'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Change the colors, tooltips, and formatting as desired:![A picture containing
    diagram
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Description automatically generated](img/B18435_08_33.png)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 8.33: Pareto improved'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: As you will see in the screenshot, the end user now has a single parameter slider
    (in the top-right corner) that moves the horizontal reference line on the chart.
    As the end user moves the reference line, the text updates to display the loan
    and balance percentages. The colors also update as the end user adjusts the parameter
    to vertically communicate the percentage of loans under consideration. We were
    able to achieve this by creating the calculated fields `Pareto Split` and `Pareto
    Split (Label)`, which perform calculations on the data in the view in combination
    with the parameter.
  prefs: []
  type: TYPE_NORMAL
- en: The next section discusses a very powerful and still rarely used feature that
    will take your dashboards to the next level! Imagine a street view with houses
    in Tableau, whereby hovering over each house you will be able to see the rental/purchase
    price, the size, and maybe other characteristics. You can’t imagine how to achieve
    this in Tableau? Well, continue reading! We will discuss diverse examples of maps,
    images, and even games like chess and darts in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Custom background images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Custom background images in Tableau open a world of potential. Imagine the ability
    to visualize any space. Possibilities encompass sports, health care, engineering,
    architecture, interior design, and much, much more. Despite this wealth of potential,
    background images in Tableau seem to me to be underutilized. Why? Part of the
    reason is because of the difficulty of generating datasets that can be used with
    background images.
  prefs: []
  type: TYPE_NORMAL
- en: Like the tile grid map discussed before, background images require a grid layout
    to pinpoint *x* and *y* coordinates. In the following section, we will address
    how to use Tableau to create a grid that can be superimposed on an image to instantly
    identify locations associated with *x* and *y* coordinates, and relatively quickly
    produce datasets that can be accessed by Tableau for visualization purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Creating custom polygons
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Geographic areas for which Tableau natively provides polygons include country,
    state/province, county, and postcode/zip code. This means, for example, that a
    filled map can easily be created for the countries of the world. Simply copy a
    list of countries and paste that list into Tableau. Next, set the view type in
    Tableau to **Filled Map** and place the country list on the **Detail** shelf.
    Tableau will automatically draw polygons for each of those countries.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, special mapping needs may arise that require polygons to be drawn
    for areas that are not typically included on maps. For example, an organization
    may define sales regions that don’t follow the usual map boundaries. Lastly, mapping
    needs may arise for custom images. A Tableau author may import an image of a basketball
    court or football pitch into Tableau and draw polygons to represent particular
    parts of the playing area. To create a filled map for each of these examples,
    for which Tableau does not natively provide polygons, custom polygons must be
    created.
  prefs: []
  type: TYPE_NORMAL
- en: Drawing a square around Null Island
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this section, we will start with the basics by drawing a simple square around
    the mythical Null Island, which is located at the intersection of the prime meridian
    and the equator.
  prefs: []
  type: TYPE_NORMAL
- en: We will progress to a more robust example that requires drawing polygons for
    every city in Texas. There is an option in Tableau that allows an author to **Show
    Data at Default Position** for unknown locations. Selecting this option will cause
    Tableau to set latitude and longitude coordinates of 0 (zero) for all unknown
    locations, thus creating a symbol on the world map 1,600 kilometers off the western
    coast of Africa. Tableau developers affectionately refer to this area as Null
    Island.
  prefs: []
  type: TYPE_NORMAL
- en: 'Null Island even has its own YouTube video: [https://youtu.be/bjvIpI-1w84](https://youtu.be/bjvIpI-1w84).'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this exercise, we will draw a square around Null Island:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Recreate the following dataset in Excel:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '|  | **A** | **B** | **C** |'
  prefs: []
  type: TYPE_TB
- en: '| **1** | **Point** | **Latitude** | **Longitude** |'
  prefs: []
  type: TYPE_TB
- en: '| **2** | 0 | -1 | -1 |'
  prefs: []
  type: TYPE_TB
- en: '| **3** | 1 | -1 | 1 |'
  prefs: []
  type: TYPE_TB
- en: '| **4** | 2 | 1 | 1 |'
  prefs: []
  type: TYPE_TB
- en: '| **5** | 3 | 1 | -1 |'
  prefs: []
  type: TYPE_TB
- en: '| **6** | 4 | -1 | -1 |'
  prefs: []
  type: TYPE_TB
- en: 'Copy and paste the dataset into Tableau. By doing so, a new data source called
    `Clipboard_...` will appear:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![A picture containing diagram'
  prefs: []
  type: TYPE_NORMAL
- en: Description automatically generated](img/B18435_08_34.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.34: Null Island coordinates'
  prefs: []
  type: TYPE_NORMAL
- en: Remove all fields from the worksheet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Convert **Point** to a dimension. This can be accomplished by either right-clicking
    on **Point** and selecting **Convert to Dimension**, or by dragging it to the
    dimensions portion of the **Data** pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click on **Latitude** and **Longitude**. It doesn’t matter in which order;
    Tableau will automatically place **Longitude** on the **Columns** shelf and **Latitude**
    on the **Rows** shelf.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select **Map** | **Background Maps** | **Streets**. You might have to zoom
    out a bit to see the land line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![A picture containing diagram'
  prefs: []
  type: TYPE_NORMAL
- en: Description automatically generated](img/B18435_08_35.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.35: Locating Null Island'
  prefs: []
  type: TYPE_NORMAL
- en: 'Change the view type to **Line**, and drop **Point** on the **Path** shelf.
    You should see the following results:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![A picture containing diagram'
  prefs: []
  type: TYPE_NORMAL
- en: Description automatically generated](img/B18435_08_36.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.36: Locating Null Island II'
  prefs: []
  type: TYPE_NORMAL
- en: Go back to your Excel file, switch the rows containing data for points 1 and
    2, and copy the data again into Tableau.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Follow *Steps 2–7* and observe the resulting image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![A picture containing diagram'
  prefs: []
  type: TYPE_NORMAL
- en: Description automatically generated](img/B18435_08_37.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.37: Incorrectly delineating Null Island'
  prefs: []
  type: TYPE_NORMAL
- en: This interesting but incorrect image occurred because of incorrect point ordering.
    As a rule of thumb, when determining point order, select an order that would make
    sense if you were physically drawing the polygon. If you cannot draw the desired
    polygon on a sheet of paper using a given point order, neither can Tableau.
  prefs: []
  type: TYPE_NORMAL
- en: It is likely that you found completing this exercise in Tableau relatively easy.
    The challenge is in getting the data right, particularly the polygon points. A
    useful (and free) tool to generate polygon data can be found at [http://powertoolsfortableau.com/tools/drawing-tool](http://powertoolsfortableau.com/tools/drawing-tool).
    This is one of many tools created by InterWorks that are helpful to address common
    Tableau challenges.
  prefs: []
  type: TYPE_NORMAL
- en: We will use it next to show which books in our library are available and which
    aren’t.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an interactive bookshelf using polygons
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'I am not very good at drawing myself, but I always loved the fancy polygon
    backgrounds I saw on Tableau Public, having shapes of all kinds, and being able
    to have Tableau interact with them, color them depending on a measure, or link
    an action to a specific area. Did you know, for example, that the continents can
    be reshaped to build the shape of a chicken? Well, Niccolo Cirone made a Tableau
    dashboard out of it, using polygons: [https://www.theinformationlab.co.uk/2016/06/01/polygons-people-polygon-ize-image-tableau/](https://www.theinformationlab.co.uk/2016/06/01/polygons-people-polygon-ize-image-tableau/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Do you want to build fancy dashboards too but your drawing skills are mediocre,
    just like mine? Don’t worry! This section will give you the tools to achieve it
    anyway. InterWorks has developed a tool similar to painting by numbers – the perfect
    application to build polygons without drawing too much yourself. You can find
    it here: [https://cbistudio.interworks.com](https://cbistudio.interworks.com).
    All you need to do is find an image, upload it to the tool, and start drawing
    along the lines.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For this exercise, I searched for an image of a bookshelf on the internet.
    You can do the same and find an image for this exercise or download the image
    I used, which can be downloaded here: [https://github.com/PacktPublishing/Mastering-Tableau-2023-Fourth-Edition/Chapter08/bookshelf.png](https://github.com/PacktPublishing/Mastering-Tableau-2023-Fourth-Edition/Chapter08/bookshelf.png):'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the free drawing tool from InterWorks and select the **Images** option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![A picture containing diagram'
  prefs: []
  type: TYPE_NORMAL
- en: Description automatically generated](img/B18435_08_38.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.38: CBI Studio'
  prefs: []
  type: TYPE_NORMAL
- en: Upload your image and select **Polygon** in the **I’M CREATING** section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now start at the edge of one book and click. An orange dot will appear. Now
    go to the next edge of the same book and click again. A line will be drawn along
    that edge of the book and the coordinates automatically appear in the list on
    the right-hand side:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![A picture containing diagram'
  prefs: []
  type: TYPE_NORMAL
- en: Description automatically generated](img/B18435_08_39.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.39: Drawing tool'
  prefs: []
  type: TYPE_NORMAL
- en: 'The last dot of a book should be on top of the first dot (which is bigger than
    the rest). Hitting the first dot again will finalize the first polygon, which
    is indicated by a green color:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![A picture containing diagram'
  prefs: []
  type: TYPE_NORMAL
- en: Description automatically generated](img/B18435_08_40.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.40: Finalizing the polygon'
  prefs: []
  type: TYPE_NORMAL
- en: The next dot you set somewhere else will get a different shape ID and, hence,
    can be distinguished as a different shape by Tableau later on. And remember, move
    along the outside of a book and avoid crossing lines.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When you are done outlining the books, download the data in `.csv` format and
    save the file to be used as a data source in Tableau. I did so, and in addition,
    I added **Name** and **Available** columns. You can see, furthermore, the unique
    shape ID, the point ID (the order in which you clicked on the screen), and *x*
    and *y* as a representation of the location within the image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![A picture containing diagram'
  prefs: []
  type: TYPE_NORMAL
- en: Description automatically generated](img/B18435_08_41.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.41: Excel'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, load the data in Tableau and place **X** on **Columns** and **Y** on
    **Rows**. Can you recognize the bookshelf yet? I only used four books for this
    exercise; therefore, not all show up:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![A picture containing diagram'
  prefs: []
  type: TYPE_NORMAL
- en: Description automatically generated](img/B18435_08_42.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.42: Bookstore'
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we can add the image to Tableau, we need the coordinates of the outermost
    points for the Tableau settings. Simply go back to the drawing tool and measure
    the edges. Note down the **X** and **Y** coordinates for the four edges. It might
    not be exactly the corners but the below values can be roughly translated to height
    = `400` and width = `648`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_08_43.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.43: Drawing tool'
  prefs: []
  type: TYPE_NORMAL
- en: 'Back in Tableau, click on **Map** | **Background Image** and select **The bookstore….**
    In the following popup, define a name and upload the image you used in the drawing
    tool. Also fill in the coordinates for the **X** and **Y** fields to represent
    the edges of the image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_08_44.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.44: Edit Background Image'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on **Options** and select **Always Show Entire Image**. Then close this
    window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_08_45.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.45: Edit Background Image options'
  prefs: []
  type: TYPE_NORMAL
- en: 'Your image should appear on your worksheet now, with matching dots surrounding
    the books:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_08_46.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.46: Bookshelf with dots'
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a surrounding line instead of dots, change the mark type to **Line**
    and place **Shape Id** on **Detail** and **Point Id** on **Path**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_08_47.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.47: Bookshelf with lines'
  prefs: []
  type: TYPE_NORMAL
- en: To create a polygon, change the mark type to **Polygon** and set **Opacity**
    in the **Color** shelf to **0%**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In addition, you can add a tooltip with the book name and availability after
    placing both fields on the **Detail** shelf:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_08_48.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.48: Edit tooltip'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you hover over the books, you can see the name as well as the availability:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_08_49.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.49: Using a tooltip'
  prefs: []
  type: TYPE_NORMAL
- en: The best part about polygons is that they fill the whole area. In this example,
    no matter where you hover or click, the complete back of the book is covered because
    we drew an area rather than a point or a certain default shape. And this comes
    with endless options; imagine a big library where every book is a polygon, and
    you can connect live data to the polygon dataset with the up-to-date availability
    of any book. Aside from books, you can draw anything. What I have seen most in
    Tableau are floor plans, supermarket shelves, office layouts, shapes split into
    parts… polygons really allow you to get creative with your visualizations.
  prefs: []
  type: TYPE_NORMAL
- en: If you don’t have an image at hand and you want to draw something very specific
    to your dashboard, you can use paid or free software like Adobe Illustrator Draw,
    Sketch, Sketsa SVG Editor, Boxy SVG, Gravit Designer, Vecteezy Editor, Vectr,
    Method Draw, Inkpad, iDesign, Affinity Designer, macSVG, Chartist.js, Plain Pattern,
    Inkscape, and many others.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us take our dashboard one step further before we move on:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on **Name** | **Aliases…**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Change the book as shown here and click **OK**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_08_50.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.50: Picking another book'
  prefs: []
  type: TYPE_NORMAL
- en: Remove the **X** and **Y** axis of `The Bookstore` worksheet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open a dashboard tab and call it **The Bookstore**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_08_51.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.51: URL'
  prefs: []
  type: TYPE_NORMAL
- en: 'Drag `The Bookstore` worksheet into the upper part of the dashboard and the
    **Web Page** object into the bottom half. Type into the URL popup: [https://en.wikipedia.org/wiki/](https://en.wikipedia.org/wiki/).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Web Page Object** and click on the arrow; choose **Add URL Action…**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_08_52.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.52: Add URL Action…'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the **Actions** window, add **Name** to the URL by selecting this field
    from the arrow dropdown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_08_53.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.53: Description filter'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click **OK** and select the different books to see the Wikipedia entry changing
    in your dashboard:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_08_54.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.54: Wikipedia'
  prefs: []
  type: TYPE_NORMAL
- en: I am sure you have a ton of ideas by now about what to do with polygons. Perhaps
    you would like to analyze a game of chess? We will do that next!
  prefs: []
  type: TYPE_NORMAL
- en: Analyzing a game of chess in Tableau
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this exercise, we will use Inkscape. But instead of drawing something in
    one of the tools, transforming it into polygons, and loading it in Tableau, we
    will create the code for an SVG file in Tableau, load it in Inkscape to see if
    it worked, then transform it into polygons, and load the converted version with
    *x* and *y* coordinates back into Tableau to analyze a game of chess. By creating
    an SVG file yourself, you will be able to recognize which **X** and **Y** coordinates
    Tableau needs, and thus, you will always be able to transform SVGs.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an SVG file in Tableau
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this section, we will use Tableau to generate the XML required to construct
    an SVG file that can be opened with the vector graphic tool Inkscape, which is
    open source and is, thus, available free of charge. Visit [inkscape.org](http://inkscape.org)
    to download the latest version. We will also need the `Chessboard.png` image,
    available on the Packt GitHub page: [https://github.com/PacktPublishing/Mastering-Tableau-2023-Fourth-Edition/Chapter08/Chessboard.png](https://github.com/PacktPublishing/Mastering-Tableau-2023-Fourth-Edition/Chapter08/Chessboard.png).
    Please download that one as well.'
  prefs: []
  type: TYPE_NORMAL
- en: Usually, polygons show their power even more when used in non-linear drawings.
    Our chessboard, however, is a good example in this case, because we will create
    the locations used by Tableau ourselves – creating a square is easier than a more
    complex shape because we can work with increments. Note that a grid with 10 rows
    and 10 columns is used in the following examples, which of course generates a
    grid of 100 cells. This will perform satisfactorily in Inkscape. However, if a
    large cell count is required, a professional graphics tool such as Adobe Illustrator
    may be required.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a grid
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The following exercise serves multiple purposes. The first purpose is to demonstrate
    how to use Tableau to create a grid. This chapter provides another opportunity
    to use data scaffolding, which was discussed in *Chapter 4*, *Learning about Joins,
    Blends, and Data Structures*. The difference is that in that chapter, dates were
    used for scaffolding purposes, whereas in the following section, bins are utilized.
    Additionally, this exercise requires many table calculations that will help reinforce
    the lessons learned in *Chapter 5*, *Introducing Table Calculations*. Lastly,
    this exercise makes use of data densification, which was discussed in *Chapter
    6*, *Utilizing OData, Data Densification, Big Data, Google BigQuery.*
  prefs: []
  type: TYPE_NORMAL
- en: 'To get started, take the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open a new Tableau workbook and name the first sheet **Header**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Using Excel or a text editor, create a **Records** dataset. The following two-row
    table represents the **Records** dataset in its entirety:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_08_55.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.55: Excel'
  prefs: []
  type: TYPE_NORMAL
- en: 'Connect Tableau to the **Records** dataset:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For convenience, consider copying the dataset using *Ctrl* + *C* and pasting
    it directly into Tableau using *Ctrl* + *V*.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Tableau will likely consider **Records** a measure. Drag **Records** to the
    **Dimensions** portion of the **Data** pane.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Create two parameters. Name one `Overall Pixel Count` and the other `Rows Down/Columns
    Across`. The settings for both are as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Data type: **Integer**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Allowable values: **All**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Show both parameters. Set **Rows Down/Columns Across** to `10` and **Overall**
    **Pixel Count** to `1,000`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_08_56.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.56: Showing the parameter'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a calculated field named `Concatenate Header` with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note that entering line breaks in the **Calculated Field** dialog box may make
    the results difficult to extract from Tableau. In other words, remove all line
    breaks.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now we have created a skeleton or template that will help us create multiple
    locations in order to draw a grid in Tableau.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Place the newly created calculated field on the **Text** shelf.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the toolbar, choose to fit to **Entire View** to view the results; you can
    see that the parameters fill in **STR([Overall Pixel Count])** from **Concatenate
    Header**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_08_57.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.57: Concatenate Header'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new worksheet named **Location Codes**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create the following calculated fields:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **Name** | **Code** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| `Rows Down/Columns Across` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| `Which Column?` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| `Which Row?` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| `Grid Size` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| `X` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| `Y` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| `Count` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| `Decicount` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| `Location Codes` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| `Concatenate Locations` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The created calculated fields will be used in the next steps to create a table
    of values, similar to the table of values that we generated in the drawing tool.
    Only now, we will do it ourselves and use SVG code instead of longitude and latitude
    values.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Right-click on **Count** and select **Create** | **Bins**. In the resulting
    dialog box, set **Size of bins** to **1**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_08_58.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.58: Count bin'
  prefs: []
  type: TYPE_NORMAL
- en: 'Right-click on **Decicount** and select **Create** | **Bins**. In the resulting
    dialog box, set **Size of bins** to **1**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_08_59.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.59: Count bin II'
  prefs: []
  type: TYPE_NORMAL
- en: Place **Count (bin)**, **Decicount (bin)**, **Location Codes**, **X**, and **Y**
    on the **Rows** shelf. Be sure to place those fields in the order listed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If your fields are green (meaning continuous), right-click on each field on
    the **Rows** shelf and set it to **Discrete**. Then:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on **Count (bin)** and **Decicount (bin)** and ensure that **Show
    Missing Values** is selected
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Right-click on **Location Codes** and select **Compute Using** | **Table (Down)**
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Set the **Compute Using** value for **X** to **Count (bin)**
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Set the **Compute Using** value for **Y** to **Decicount (bin)**![](img/B18435_08_60.png)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Figure 8.60: Location Codes worksheet'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Place **Concatenate Locations** on the **Text** shelf.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the instance of **Concatenate Locations** you just placed on
    the **Text** shelf and select **Edit Table Calculations**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At the top of the resulting dialog box, note that there are four options under
    **Nested Calculations**: **Grid Size**, **Which Column?**, **Which Row?**, and
    **Location Codes**. Set the **Compute Using** definition for each as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Nested Calculations**: **Grid Size** > **Compute Using**: **Table (down)**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Nested Calculations**: **Which Column?** > **Compute Using: Specific Dimensions**:
    **Decicount (bin)** > **move this dimension to the top**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Nested Calculations**: **Which Row?** > **Compute Using: Specific Dimensions**:
    **Count (bin)** > **move this dimension to the top**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Nested Calculations**: **Location Codes** > **Compute Using**: **Table (down)**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the toolbar, choose **Fit Width** to view the results; you can already see
    that multiple rows have been created. Those rows will later be used to draw a
    grid:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_08_61.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.61: Fit width'
  prefs: []
  type: TYPE_NORMAL
- en: Now, create a new worksheet named **Lines**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create the following calculated fields:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **Name** | **Compute Using Setting** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| `H Then V` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| `HLine` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| `VLine` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| `X1` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| `Y1` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| `X2` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| `Y2` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, place the following fields on the **Rows** shelf in the following order:
    **Count (bin)**, **Decicount (bin)**, **H Then V**, **HLine**, **VLine**, **Grid
    Size**, **Which Column?**, **X1, Y1**, **X2**, and **Y2**. Note that each should
    be cast as discrete.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on **Count(bin)** and **Decicount(bin)** and set each to **Show**
    **Missing Values**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Right-click on each of the remaining fields on the **Rows** shelf and select
    **Edit Table Calculations**. Set the **Compute Using** definition of each field
    as shown in the following table:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **Name** | **Nested Calculations** | **Compute Using Setting** |'
  prefs: []
  type: TYPE_TB
- en: '| `H Then V` | `N/A` |'
  prefs: []
  type: TYPE_TB
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `HLine` | `N/A` |'
  prefs: []
  type: TYPE_TB
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `VLine` | `N/A` |'
  prefs: []
  type: TYPE_TB
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `Grid Size` | `Grid Size` |'
  prefs: []
  type: TYPE_TB
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `Grid Size` | `Which Column?` |'
  prefs: []
  type: TYPE_TB
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `X1, Y1, X2, Y2` | `H Then V` |'
  prefs: []
  type: TYPE_TB
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `X1, Y1, X2, Y2` | `Grid Size` |'
  prefs: []
  type: TYPE_TB
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `X1, Y1, X2, Y2` | `Which Column?` |'
  prefs: []
  type: TYPE_TB
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `X1, Y1, X2, Y2` | `VLine` |'
  prefs: []
  type: TYPE_TB
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that some of the fields include nested table calculations. In such cases,
    the **Table Calculation** dialog box will include an extra option at the top entitled
    **Nested Calculations**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_08_62.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.62: Nested calculation'
  prefs: []
  type: TYPE_NORMAL
- en: '**X1**, **X2**, **Y1**, and **Y2** need to be configured for four nested calculations.
    Start by opening the **X1** table calculation and then selecting **H Then V**
    from the **Nested Calculations** dropdown, and set **Compute Using** to **Count
    (bin)**. Then, in the same window, select **Grid Size** from the dropdown and
    enter the corresponding **Compute Using** setting. After all four dropdowns have
    been set, continue with **X2** and do the same.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Filter **H Then V** to display only **1** and **2**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a calculated field called `Concatenate Lines` with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This calculation will create a new string by including the fields **X1**, **X2**,
    **Y1**, and **Y2**. By doing so we multiply one row of code by as many rows as
    we want, each with a specific combination of **X1**, **X2**, **Y1**, and **Y2**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Place **Concatenate Lines** on the **Text** shelf. Your worksheet should look
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_08_63.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.63: Concatenate Lines'
  prefs: []
  type: TYPE_NORMAL
- en: Export the code from the three worksheets just created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Exporting the code from the three worksheets can be tricky since Tableau may
    try to input additional quotes for string values. I found the following approach
    works best:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Select **1** in the **Count (bin)** Rows
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Press *Ctrl* + *A* (*Command* + *A* for Mac) to select all the contents of the
    worksheet.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Hover the cursor over the selected text in the view and pause until the tooltip
    command buttons appear.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **View Data** icon at the right-hand side of the tooltip.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: In the resulting **View Data** dialog box, select **Export All**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the CSV file using the same name as each worksheet; for instance, the data
    exported from the `Header` worksheet will be named `Header.csv`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat the steps for the remaining worksheets **Header** and **Location Codes**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Open an instance of your favorite text editor and save it as `Grid and LocationCodes.svg`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Copy the data from the previously exported and saved `Header.csv` and paste
    it into `Grid and LocationCodes.svg`. Be sure not to include the header information;
    include only the XML code. For example, in the next screenshot, don’t copy row
    **1**, only copy row **2**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_08_64.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.64: Excel'
  prefs: []
  type: TYPE_NORMAL
- en: 'Using Excel, copy the required data from `Location.csv` and paste it into `Grid
    and LocationCodes.svg`. The required data only includes the column labeled `Concatenate
    Locations`. Do not include the other columns or the header. Include only the XML
    code. For example, in the following screenshot, we only copy column **F**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_08_65.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.65: Excel II'
  prefs: []
  type: TYPE_NORMAL
- en: Using Excel, copy the required data from `Lines.csv` and paste it into `Grid
    and LocationCodes.svg`. Again, the required data only includes the column labeled
    `Concatenate Lines`. Do not include the other columns or the header, only the
    XML code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Lastly, complete the SVG file by entering the `</svg>` closing tag. The full
    code has been added for your convenience on the **Generated SVG Code** tab:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_08_66.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.66: Full code'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, open the SVG file in Inkscape ([https://inkscape.org/](https://inkscape.org/))
    and observe the grid:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Image15955.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.67: Inkscape II'
  prefs: []
  type: TYPE_NORMAL
- en: 'If for some reason your code does not create a grid or you instead want to
    use the version that I created, you can find the SVG file together with all the
    other datasets on the following GitHub page: [https://github.com/PacktPublishing/Mastering-Tableau-2023-Fourth-Edition/blob/main/Chapter08/GridandLocationCodes.svg](https://github.com/PacktPublishing/Mastering-Tableau-2023-Fourth-Edition/blob/main/Chapter08/GridandLocationCodes.svg).'
  prefs: []
  type: TYPE_NORMAL
- en: We will cover an example of how to use the grid for a polygon data source in
    Tableau in the next exercise.
  prefs: []
  type: TYPE_NORMAL
- en: Using a grid to generate a dataset
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Skilled chess players will complete a game in about 40 moves. In chess tournaments,
    data is routinely captured for each game, which provides opportunities for data
    visualization. In this exercise, we will use data from a chess game to visualize
    how often each square of a chessboard is occupied:'
  prefs: []
  type: TYPE_NORMAL
- en: Within the workbook associated with this chapter, navigate to the worksheet
    entitled `Chessboard`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download the `Chessboard.png` pictures from this book’s GitHub repository if
    you haven’t done so yet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the SVG file created in the previous exercise in Inkscape.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you did not complete the previous exercise, you can copy the XML code located
    on the dashboard, entitled **Generated SVG Code**, in the solution workbook associated
    with this chapter. Paste that code into a text editor and save it with an SVG
    extension, then open the file with Inkscape.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Within **Inkscape**, press *Ctrl* + *A* (*Command* + *A* for Mac) to select
    all. Group the selection using *Ctrl* + *G* (*Command* + *G* for Mac).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Inkscape** menu, select **Layer** | **Layers and Objects**. The keyboard
    shortcut is *Shift* + *Ctrl* + *L* (*Shift* + *Command* + *L* for Mac).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Within the **Layers** palette that displays on the right-hand side of the screen,
    press the **+** icon to create a layer. Name the layer `Chessboard`. Then, create
    another layer named `Grid`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_08_68.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.68: Layers'
  prefs: []
  type: TYPE_NORMAL
- en: Click on any line or number in the view. Right-click on that same line or number
    and select **Move to layer**. Choose the **Grid** layer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **File** | **Import** and choose the `Chessboard.png` image.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_08_69.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.69: Image import'
  prefs: []
  type: TYPE_NORMAL
- en: 'Make sure that the image is placed on the **Chessboard** layer so that the
    location code numbers are not obscured. Position the chessboard image such that
    location code **81** is centered over the top left-hand square of the chessboard.
    Since the chessboard is only composed of 64 squares, it will not encompass all
    100 squares that the grid provides:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![A picture containing text, electronics, screenshot, display'
  prefs: []
  type: TYPE_NORMAL
- en: Description automatically generated](img/Image15984.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.70: Chessboard'
  prefs: []
  type: TYPE_NORMAL
- en: At this point, you can generate a dataset based on how often each location is
    occupied. For example, you might note that for one game, position 81 was occupied
    for 40 moves, in which case the player may simply have never moved that rook.
    However, in another game the position may be occupied for only 10 moves, perhaps
    indicating the player performed a castle early in the game. The point of layering
    the chess game and the square file was to identify which square belongs to which
    field on a chess board.
  prefs: []
  type: TYPE_NORMAL
- en: Visualizing a chess game
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this exercise, we will take a look at a dataset generated from a chess game
    and discover how to visualize the results based on the work done in the previous
    exercises. The following are the steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Within the workbook associated with this chapter, navigate to the worksheet
    entitled `Chessboard` and select the `Chessboard` data source.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In order to follow the next step, you will need to download the assets associated
    with this chapter. To do so, simply follow the link to the GitHub repository for
    this book: [https://github.com/PacktPublishing/Mastering-Tableau-2023-Fourth-Edition/tree/main/Chapter08](https://github.com/PacktPublishing/Mastering-Tableau-2023-Fourth-Edition/tree/main/Chapter08).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Right-click on the `Chessboard` data source and select **Edit Data Source**
    in order to examine the dataset.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the dialog box asking **Where is the data file?**, steer to the `Chessboard.xlsx`
    file provided with the assets associated with this chapter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The table named **Board Grid** contains each location code and the **X** and
    **Y** coordinates associated with each location code. This dataset was taken from
    the **Location Codes** worksheet created earlier in this chapter. The table named
    **Squares Occupied** contains the fields **Location Code** and **Moves Occupied**.
    **Board Grid** and **Squares Occupied** are connected using a left join on **Location
    Code**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_08_71.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.71: Join'
  prefs: []
  type: TYPE_NORMAL
- en: On the `Chessboard` worksheet, select **Map** | **Background Images** | **Chessboard**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the resulting dialog box, click **Add Image** to add a background image.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Fill out the **Edit Background Image** dialog box as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_08_72.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.72: Chessboard background image'
  prefs: []
  type: TYPE_NORMAL
- en: 'Place the fields **X**, **Y** (both as **Dimension**), and **Location Code**
    on the **Columns**, **Rows**, and **Detail** shelves respectively, and the **Moves
    Occupied** field on **Color** while selecting the **Marks** type **Density**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_08_73.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.73: Chessboard background image II'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on the **X** and **Y** axes and set both to **Fixed**, with a **Fixed
    start** value of **0** and a **Fixed end** value of **875**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Edit the **Y** axis and set it to **Reversed**. Do not reverse the **X** axis.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This last step was performed because the data has been structured to mirror
    the **X** and **Y** coordinate setup that is the default in most graphic tools.
    In these tools, the upper left-hand corner is where **X** and **Y** both equal
    **0**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Adjust **Color**, **Size**, **Shape**, and so on as desired:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_08_74.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.74: Chessboard'
  prefs: []
  type: TYPE_NORMAL
- en: In the screenshot, the brighter the circle, the more frequently this space was
    occupied for a move. The darker the circle, the less frequently it was occupied.
    By hovering over a field, the amount of occupation will show as well.
  prefs: []
  type: TYPE_NORMAL
- en: To recap, we started off by creating an SVG file. We did so by creating three
    different code types, `Header`, `Location Codes`, and `Lines`, according to the
    standards of an SVG file. We then copied those three code pieces into a text editor
    program and saved them as an SVG file. Then we downloaded the Inkscape application
    and opened the SVG file to check and see the result of our work, a 10-by-10 square
    field.
  prefs: []
  type: TYPE_NORMAL
- en: We added an image of a chessboard to Inkscape and aligned the two. Now we can
    see which square number will be associated with which chessboard field. Just like
    in the bookshelf example, it is necessary to identify the shape ID, that is, the
    chessboard field ID. Based on the chessboard field IDs, we were able to generate
    a second dataset containing the number of moves for which a field was occupied.
    By joining the `Board Grid` dataset with the `Occupied Moves` dataset, we got
    ourselves a use case. We added a background image of a chessboard to Tableau and
    on top of it, we drew squares and colored and also sized them, depending on the
    number of moves those fields were occupied for during the chess games. The numbers
    are very specific to each game, of course, but by collecting the data for multiple
    games, we are able to visually analyze chess strategies and maybe even tell who
    the better player was. If you like chess, feel free to try it out and compare
    the different visual results per game, or see whether you usually end up with
    the same pattern and whether this is also true for your opponent.
  prefs: []
  type: TYPE_NORMAL
- en: Talking about games, in the next exercise, we will visualize a dartboard. This
    exercise will be shorter than the chess one. Follow along with the steps and learn
    more about polygons.
  prefs: []
  type: TYPE_NORMAL
- en: Creating polygons on a background image
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Utilizing shapes on specific points of a visualization was sufficient for the
    previous exercise, but sometimes it may be advantageous to use polygons to outline
    shapes. In this section, we will utilize polygons on a background image, and unlike
    with the books, we will fill out the areas such that the background image is not
    needed (as much) anymore.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the required steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Within the workbook associated with this chapter, navigate to the worksheet
    entitled `Dashboard - Polygon` and select the `Dartboard_W_Polygon` data source.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you did not already do so when completing the previous exercise, download
    the images provided on GitHub. Unzip the contents to a directory of your choosing.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Select **Map** | **Background Images** | **Dartboard - Polygon**. In the **Background
    Images** dialog box, select **Add Image**. Fill out the dialog box as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_08_75.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.75: Dartboard background image'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a parameter with the following configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_08_76.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.76: Parameter'
  prefs: []
  type: TYPE_NORMAL
- en: 'This parameter will be used to either switch between player 1: **Matthew**
    and player 2: **David** or show the dart hits of both.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Display the parameter created in the previous step by right-clicking on it at
    the bottom of the **Data** pane and selecting **Show Parameter Control**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a calculated field called `Total Hits` with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, create a calculated field called `Case` with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Set the **Marks** card to **Polygon**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Survey the **Data** pane to ensure that **Point** and **Shape** are both dimensions
    (blue color). The other fields are measures:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_08_77.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.77: Dimensions and measures'
  prefs: []
  type: TYPE_NORMAL
- en: 'Place the fields **X**, **Y**, **Point**, **Shape**, and **Case** on their
    respective shelves:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_08_78.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.78: Dartboard polygon'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on each axis and set the **Range** from **0** to **650.**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the **Color** shelf and select **Edit Colors**. Adjust the color as
    desired. One possibility is represented in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_08_79.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.79: Custom Diverging'
  prefs: []
  type: TYPE_NORMAL
- en: 'Your final worksheet should look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18435_08_80.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.80: Final dartboard polygon'
  prefs: []
  type: TYPE_NORMAL
- en: The final dashboard shows a dartboard with different colors. The gray color
    means that this area has not been hit during the game, whereas the redder the
    color of a field is, the more often it has been hit. By using the parameter, you
    can compare Matthew’s score with David’s, or you can show the total hits, like
    in the preceding screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: You may have noticed that the curved sections of the polygons in this exercise
    aren’t quite perfect. Look, for example, at the triple ring and double ring areas
    surrounding the bullseye; you can see that the area is not 100% even. That’s simply
    the nature of working with points on a Cartesian grid in Tableau. This means that
    Tableau is based on a grid structure, so every curve we draw will still be many
    small lines connecting dots on a grid layout. The more dots you have and the shorter
    the lines between the dots, the more likely you will draw curves evenly. But if
    you followed along with the bookshelf exercise, you can see that a lot of effort
    has to go into such a background image. Nevertheless, I believe that polygons
    are absolutely worth it. Here we used fun exercises that might not add value to
    your day-to-day job, but think about a picture-perfect landing page that you designed
    in a different program. By using polygons, you can make the design elements clickable
    and interactive.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next topic is a little bit different from the rest of this chapter. Have
    you heard about Tableau Exchange yet? Tableau Exchange is a newer edition to the
    Tableau universe that combines three products: extensions, accelerators, and connectors.
    Interested? Continue with the next section!'
  prefs: []
  type: TYPE_NORMAL
- en: Tableau Exchange
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To access Tableau Exchange, go to this website: [https://exchange.tableau.com](https://exchange.tableau.com).'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18435_08_81.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.81: Tableau Exchange'
  prefs: []
  type: TYPE_NORMAL
- en: Accelerators and extensions can also be accessed from within Tableau Server
    and/or Tableau Desktop. Let us dive right into Tableau Exchange and see what it
    has to offer!
  prefs: []
  type: TYPE_NORMAL
- en: Tableau extensions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Extensions are the oldest product and are accessible from the **Object** pane
    on your Tableau dashboard. Basically, extensions allow you to use third-party
    tools directly in Tableau. Some selected extensions are available at [https://extensiongallery.tableau.com](https://extensiongallery.tableau.com),
    and the list is always growing.
  prefs: []
  type: TYPE_NORMAL
- en: Please be aware that Tableau does not provide support or guarantees/security
    measures for extensions. Those APIs are built by external parties and should be
    treated as such. Check with your IT security team first if you want to use them
    at work.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s have a look at one example from Infotopics – a Sankey chart extension.
  prefs: []
  type: TYPE_NORMAL
- en: Using an extension
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the associated workbook, create a new sheet called `Show me More` and select
    the `Coffee Chain` dataset. Now reproduce the following worksheet layout by adding
    **Type** to **Columns**, **Product Type** to **Rows**, and **Profit** to the **Text**
    shelf:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18435_08_82.png)Figure 8.82: Show me More'
  prefs: []
  type: TYPE_NORMAL
- en: We want to utilize a Sankey chartfor this worksheet, which is a kind of flow
    chart that shows, based on the size of flow-lines, how much of a given measure
    and a given dimension flows into a second given dimension. In this case, we want
    to know how much **Profit** from **Regular** type products comes from **Coffee**,
    **Espresso**, **Herbal Tea**, or **Tea**, and how much **Profit** can be associated
    with the **Decaf** types.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s say you know how to build a Sankey chart using calculated fields, but
    it is time-consuming. Instead, there is an **extension** to do so. The following
    are the steps required to use the extension and ultimately save us time when building
    a Sankey chart:'
  prefs: []
  type: TYPE_NORMAL
- en: In the associated workbook, open a **Dashboard** tab and call it `Show me More
    DB`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Drag the **Show me More DB** sheet onto the dashboard. Now also drag the **Extension**
    object onto the dashboard:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_08_83.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.83: Extension'
  prefs: []
  type: TYPE_NORMAL
- en: 'From Tableau 2021.1, you will see the following pop-up window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_08_84.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.84: Extension Gallery'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the **Extension Gallery** search for the **Show Me More 2.0** extension.
    Click on it and select **Add to Dashboard** on the next screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_08_85.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.85: Show Me More 2'
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, select **Get started** and choose the **Sankey Diagram** visualization:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_08_86.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.86: Show Me More II'
  prefs: []
  type: TYPE_NORMAL
- en: 'After selecting the Sankey diagram, configure the variables as follows. There
    are many more options, as partly shown in *Figure 8.87*; feel free to test them
    out:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_08_87.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.87: Sankey diagram settings'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hit the **Ok** button, and voilà, you have your Sankey diagram:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_08_88.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.88: Sankey diagram'
  prefs: []
  type: TYPE_NORMAL
- en: Besides this Sankey chart, I would highly recommend you have a look at the extensions
    library. There are many extensions for multiple different use cases; some are
    free, some have to be paid for, but you can also build your own. It is worth taking
    a look! The next section will be dedicated to a special extension, which is the
    most advertised new feature in Tableau 2021.1, **Einstein Discovery**.
  prefs: []
  type: TYPE_NORMAL
- en: Accelerators
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This feature works on a more basic level: how to design, structure, and put
    together a dashboard. Accelerators are pre-defined dashboards from different sectors
    and with different focus points. Currently, there are over 100 available in multiple
    languages, catering to different departments, industries, and enterprise applications.
    Instead of starting from scratch, you can use an **Accelerator** dashboard by
    clicking on the links on your Tableau Desktop landing page, or Tableau Server:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18435_08_89.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.89: Tableau landing page'
  prefs: []
  type: TYPE_NORMAL
- en: 'In *Figure 8.89*, the two dashboards on the left always show on the Tableau
    Desktop landing page, and you are familiar with those already: the `Superstore`
    and the `World Indicators` datasets. Next to them you can see an icon of two people
    with a headset. That is the third accelerator dashboard that I loaded. But looking
    at the top right, in the red frame, you can see a hyperlink called **More Accelerators**;
    click on it.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Imagine that you want to use financial trading data and an accelerator dashboard
    to kick-start your project. Search for *trading*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18435_08_90.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.90: Search accelerator'
  prefs: []
  type: TYPE_NORMAL
- en: By clicking on the **Trading by Tableau** dashboard, a new Tableau workbook
    will open – with a fully built trading dashboard and, even better, data mapping
    capabilities, which means that you can replace the current data with different
    data without breaking the dashboard layout and pre-build functionality. The description
    in each of the accelerator dashboards contains the *data mapping possible* or
    *impossible* information.
  prefs: []
  type: TYPE_NORMAL
- en: 'When your new dashboard is open, you will see the following popup:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18435_08_91.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.91: Data mapper'
  prefs: []
  type: TYPE_NORMAL
- en: Click on **Get Started** and connect your desired dataset to the accelerator
    dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use this dataset as a test: [https://www.kaggle.com/datasets/georgezakharov/historical-data-on-the-trading-of-cryptocurrencies](https://www.kaggle.com/datasets/georgezakharov/historical-data-on-the-trading-of-cryptocurrencies).'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18435_08_92.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.92: Data mapper II'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once loaded, you can start mapping the fields one by one:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18435_08_93.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.93: Mapping data'
  prefs: []
  type: TYPE_NORMAL
- en: It is important to know that you do not have to map all fields; however, if
    visualizations in the workbook make use of an unmapped column, those instances
    will appear null.
  prefs: []
  type: TYPE_NORMAL
- en: After the mapping is done, your dashboard is ready to use! Sample-check that
    everything looks as desired and your job is done!
  prefs: []
  type: TYPE_NORMAL
- en: Great, isn’t it? Such a time-saver; I really enjoy this new feature in Tableau.
  prefs: []
  type: TYPE_NORMAL
- en: Connectors
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The last section that Tableau Exchange has to offer is **connectors**. Here
    you can find connectors to databases that are not listed in the **Connect** pane
    of your Tableau Desktop.
  prefs: []
  type: TYPE_NORMAL
- en: To sum up, Tableau Exchange is a platform where you can find various tools to
    enhance your data analysis and quickly derive meaningful insights. It offers Tableau
    accelerators, which are pre-built dashboards created by experts, extensions that
    offer functionality that is not native to Tableau, and connectors, which allow
    you to connect to databases that are not listed in the default pane. A true, free
    marketplace to jump-start your Tableau successes.
  prefs: []
  type: TYPE_NORMAL
- en: Einstein Discovery
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We discussed Tableau exchange in the previous section; however, one other similarly
    beyond-basics feature deserves some attention too. But before we continue, a bit
    of backstory. In August 2019 Tableau was acquired by Salesforce. Probably most
    of you know Salesforce and even work with it, but for all other readers, Salesforce
    is a cloud-native **Customer Relationship Management** (**CRM**) tool. Next to
    that, the company also developed an analytics portion, which allows Salesforce
    users to analyze data from a CRM system and other data sources.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting Salesforce to Tableau was possible long before the acquisition, but
    what’s new in Tableau 2021.1 is that the analytics piece of Salesforce is available
    for integration into Tableau, as an extension and in calculated fields. The Tableau
    community is very excited about this feature because of the built-in machine learning
    capability and real-time prediction power. This piece of software is called Einstein
    Discovery.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to make use of Einstein Discovery, you need a Salesforce license and,
    more specifically, the analytics license for Salesforce. The licensing details
    can be found here: [https://www.salesforce.com/editions-pricing/crm-analytics/](https://www.salesforce.com/editions-pricing/crm-analytics/).'
  prefs: []
  type: TYPE_NORMAL
- en: Now, to give you an idea of what Einstein Discovery can do for you, I will walk
    you through an imaginary use case. On a supply chain data dashboard, you discover
    that the shipment time can be improved, but you don’t know which factors cause
    the delays. In this instance, you might decide to use Einstein Discovery for its
    analysis capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: First, you drag the **Extensions** object onto the dashboard, just like we did
    with the **Show me More** extension. You then select the **Einstein Discovery**
    item, at which point a browser window will open to ask you to log in to Salesforce.
    After you have done so, you can select which model you want to use on your Tableau
    dashboard. The model (for example, a machine learning model) has to be prepared
    in Salesforce beforehand. Then, Einstein Discovery will be a part of your dashboard,
    and your worksheet will show the output from the model running in the background
    on Salesforce. In our example, the model will more easily be able to find the
    relevant variables used on your dashboard that are best suited to predict the
    time of delivery, and it will recommend actions you can take to improve the shipment
    time.
  prefs: []
  type: TYPE_NORMAL
- en: A video of the described use case and another use case can be viewed at [https://youtu.be/dMWuy6mVE_o](https://youtu.be/dMWuy6mVE_o).
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternatively, you can call a Salesforce model directly in a calculated field.
    How this works is described here: [https://help.tableau.com/current/pro/desktop/en-us/einstein_discovery_predictions.htm](https://help.tableau.com/current/pro/desktop/en-us/einstein_discovery_predictions.htm).'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to try out these new features, there is a way to test out the new
    Einstein capabilities if you do not have a Salesforce license yet. It is a longer
    process to set up but for those of you who do want to try, please check out this
    video for assistance: [https://youtu.be/ZReSwXK0reo](https://youtu.be/ZReSwXK0reo).'
  prefs: []
  type: TYPE_NORMAL
- en: Those are the cornerstones of the bespoke new Einstein features in Tableau 2021.1\.
    Going into detail on the functionality of the Salesforce platform is unfortunately
    out of the scope of this book, but if you have Salesforce in place, I would most
    certainly recommend that you set up the connection and test out running some models.
    Even if you do not use Salesforce, the licensing might change over time, so hopefully
    we can all run those models soon. For the time being, don’t worry, as we will
    discuss machine learning model integration in *Chapter 15*, *Integrating Programming
    Languages*.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We began this chapter by considering how to tweak popular visualization types.
    Specifically, we fine-tuned a bullet graph, considered a very different approach
    to using pie charts in mapping, and ended by tweaking a Pareto chart. Next, we
    turned our attention to custom background images, where we considered how to build
    a grid using XML to generate an SVG file, to expedite generated data for use with
    background images. Then, we completed the chapter by building polygons on a background
    image and had a quick excursion into the world of Tableau Exchange. We discussed
    accelerators, extensions, and connectors but also Einstein Discovery, which is
    a separate product sold by Salesforce.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are too many options to cover them all in this book but since you are
    an expert in replicating by now, I added more sheets with other visualizations
    to the solutions workbook for you to play with. You will find sheets with bar
    charts, stacked bar charts, diverging stacked bar charts, crosstabs, highlight
    tables, discrete highlight tables, trend lines, area charts, sparklines, combo
    charts, dual axis, histograms, box and whisker plots, scatterplots, filled maps,
    symbol maps, treemaps, tree bar charts, Gantt charts, KPI charts, funnel charts,
    jittered distribution, calendars, bump charts, slopegraphs, waterfall, target,
    and bar-in-bar charts. Always make sure to use the chart that is most suitable
    for your data and will add value to the story you try to tell. If you still need
    a little bit of help with deciding on the appropriate visualization technique,
    I advise you to look at the following dashboard published on Tableau Public: [https://public.tableau.com/en-us/gallery/visual-vocabulary](https://public.tableau.com/en-us/gallery/visual-vocabulary).
    This dashboard was made to show you which visualization type to use, depending
    on the data you have.'
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will turn our attention to mapping, where we will consider
    how to extend Tableau’s native mapping capabilities without ever leaving the interface,
    as well as how to extend Tableau’s mapping capabilities with other technology.
  prefs: []
  type: TYPE_NORMAL
- en: Learn more on Discord
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To join the Discord community for this book – where you can share feedback,
    ask questions to the author, and learn about new releases – follow the QR code
    below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://packt.link/tableau](https://packt.link/tableau)'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/QR_Code2044012316175764640.png)'
  prefs: []
  type: TYPE_IMG
