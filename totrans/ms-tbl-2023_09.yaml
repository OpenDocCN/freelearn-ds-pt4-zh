- en: Working with Maps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When I conduct Tableau classes and workshops for people who are using Tableau
    for the first time, I find that demonstrating **mapping** is always a big hit,
    sometimes resulting in murmurs of appreciation and surprise. People have told
    me on multiple occasions that Tableau’s mapping capability was the key feature
    that caused them to take notice of and consider Tableau’s offerings more seriously.
    Tableau’s out-of-the-box mapping capabilities are powerful and flexible. You may
    be surprised at how much you can accomplish without ever leaving the user interface.
    But these out-of-the-box capabilities are just the tip of the iceberg. With proper
    guidance (which I will attempt to provide in this chapter), you can expand beyond
    the native mapping functionality and explore techniques that will greatly enhance
    your workbooks’ functionality and aesthetics.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will discuss the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Extending Tableau’s mapping capabilities without leaving Tableau
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating custom polygons
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Heatmaps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dual axes and map layering
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extending Tableau mapping with other technology
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Swapping maps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Custom geocoding
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The default mapping capability of Tableau is a big selling point. Take any city,
    region, country, or other geographical location, place it on a Tableau worksheet,
    and you get a nice map; add a measure like **Sales** to the **Color** shelf and
    your map colors change according to sales figures. In the following section, we
    will go a step further and enhance this capability with the less obvious features
    Tableau has to offer, like measuring distances on a map and plotting additional
    data (for example, weather data) in the background.
  prefs: []
  type: TYPE_NORMAL
- en: Extending Tableau’s mapping capabilities without leaving Tableau
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In our everyday lives, a map can be helpful for better understanding the world
    around us. For instance, maps are often used on websites, television, or in printed
    media to present demographic information. In such instances, the mapping requirement
    is **static** since the immediate goal does not require movement. Some businesses
    only have static mapping requirements—for example, a retail chain might create
    a visualization that includes a map to better understand sales performance in
    a given region. In such cases, movement between locations is not a direct need.
  prefs: []
  type: TYPE_NORMAL
- en: 'Often, however, a map is needed to navigate from point A to point B. This kind
    of mapping requirement is more complicated, because it encompasses static needs
    (what restaurant is nearby?), but must also deliver additional information, such
    as routes and distances (how can I get to that restaurant?). These **dynamic**
    mapping needs assume that movement is *required* to fulfill a demand. Many businesses
    need to understand routes and mileage, that is, how to get from point A to point
    B and the distances involved. These dynamic mapping requirements can vary greatly
    but most of these needs share at least two things in common: routes and distances.'
  prefs: []
  type: TYPE_NORMAL
- en: In the following exercise, we will consider flight routes and associated distances
    in Australia. Specifically, we will cover how to extract longitude and latitude
    numbers from Tableau and use that information in conjunction with trigonometry
    to calculate the mileage between various points. Along the way, we will utilize
    data blending, table calculations, mapping, and **Level of Detail** (**LOD**)
    calculations for a robust exercise that touches on many advanced features.
  prefs: []
  type: TYPE_NORMAL
- en: 'Please take the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to [https://public.tableau.com/profile/marleen.meier](https://public.tableau.com/profile/marleen.meier)
    to locate and download the workbook associated with this chapter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the workbook and navigate to the `Map` worksheet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Transit Data** in the **Data** pane and double-click on **City**, then
    change **City** from **Detail** to **Label** in the **Marks** card.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the following screenshot, note that the cities **Mackay** and **Brisbane**
    are the only cities that display. This issue depends on your country setting,
    but the following is an example of an issue that may be encountered. If you see
    it, click on **14 unknown**, in the bottom-right corner:![](img/B18435_09_01.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 9.1: Australia'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Caveat: if you are in the **United States**, Melbourne in Florida will display.
    If you are in another country, you may get different results.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Select **Edit Locations...**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_09_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.2: Edit Locations…'
  prefs: []
  type: TYPE_NORMAL
- en: Change **Country/Region** to **Fixed** | **Australia**:![](img/B18435_09_03.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 9.3: Select Australia'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Australia** is now displayed on the map:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/B18435_09_04.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 9.4: Australia'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Navigate to the `Miles` worksheet and place the **Trip ID** and **City** fields
    on the **Rows** shelf, and **Latitude (generated)** and **Longitude (generated)**
    on the **Text** shelf, as seen in the following screenshot:![](img/B18435_09_05.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 9.5: Distances'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Your screen should look like the preceding screenshot. Note that the crosstab
    is pretty cluttered. Ideally, **Latitude** and **Longitude** should be displayed
    in separate columns. Unfortunately, we can’t do this with the generated latitude
    and longitude because, although they are listed under the **Measures** portion
    of the **Data** pane, Tableau doesn’t treat them as measures. In order to complete
    the exercise, we will need to be able to access the latitude and longitude coordinates
    from a separate data source.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To do this, begin by clicking on the `Map` worksheet tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the visualization and select **View Data**. Copy all the data
    in the **Summary** tab of the resulting dialog box, by selecting every cell and
    clicking **Copy**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close the dialog box and press *Ctrl* + *V* (*Command* + *V* for Mac) to create
    a new dataset in Tableau. Rename the resulting dataset (now called `Clipboard_[timestamp]`)
    to `Lat` `Long`. Also, name the worksheet `Lat``Long`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `Lat Long` worksheet, rename `Latitude` `(generated)` and `Longitude``(generated)`
    to `Lat` and `Long`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Return to the `Miles` worksheet and, within the `Transit Data` data source,
    create two calculated fields: one called `LAT`, containing the code `AVG([Lat
    Long].[Lat])`, and one called `LONG`, containing the code `AVG([Lat Long].[Long])`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Remove **Latitude (generated)** and **Longitude (generated)** from **Text**
    on the **Marks** card.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Place **Measure Names** on the **Columns** shelf and the **Filter** shelf and
    select **Lat** and **Long**. Also, place **Measure Values** on the **Text** shelf.
    Now, we have the ability to treat latitude and longitude as true measures.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create two more calculated fields: one called `Lookup``Lat`, containing the
    code `Lookup(Lat,-1)`, and one called `Lookup``Long`, containing the code `Lookup(Long,
    -1)`. Place the two newly created calculated fields on the **Measure Values**
    shelf.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a calculated field named `Great``Circle``Distance``Formula` with the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: For kilometers, change `3959` to `6378`. This number represents the radius of
    the Earth and it needs to be updated from miles to kilometers.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Place the newly created calculated field **Great Circle Distance Formula** on
    the **Measure Values** shelf.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Change the calculation for **Great Circle Distance Formula** so that it computes
    using **City** by clicking on the field itself and selecting **Compute Using:
    City**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Adjust the following calculations accordingly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **Name** | **Code** |'
  prefs: []
  type: TYPE_TB
- en: '| `Lookup Lat` |'
  prefs: []
  type: TYPE_TB
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `Lookup Long` |'
  prefs: []
  type: TYPE_TB
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Select the `Map` worksheet and set the **Marks** type to **Line**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Place **Trip ID** on the **Detail** shelf.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag **City** to the bottom of the **Marks** card view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Place the **Great Circle Distance Formula** field on the **Tooltip** shelf.
    Double-check that it is still set to **Compute Using: City**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Chart'
  prefs: []
  type: TYPE_NORMAL
- en: Description automatically generated](img/B18435_09_06.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.6: Australia distances'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create two more calculated fields, one called `Source City`, containing the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The second calculated field should be called `Destination City` and contain
    the following code:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use the newly created calculated fields to format as desired. In particular,
    notice that in the following screenshot, **Source City** is on the **Color** shelf
    and **Destination City** is used on the **Tooltip** shelf:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Chart'
  prefs: []
  type: TYPE_NORMAL
- en: Description automatically generated](img/B18435_09_07.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.7: Flights'
  prefs: []
  type: TYPE_NORMAL
- en: To sum up what we have done here, initially, we added a dataset to Tableau.
    We then needed to copy the latitudes and longitudes per city out of the workbook
    in order to create a second data source, which we then used as a blend to look
    up latitude and longitude values. With the help of LOD calculations, we could
    identify the source and destination cities, and lastly, we were able to measure
    the distance between cities by using the so-called great circle formula. Each
    color in the visualization represents a starting city; for example, all green
    lines measure distances from Perth to other cities. By hovering over a line, the
    source and destination city, as well as the distance measured in miles (or kilometers),
    will show.
  prefs: []
  type: TYPE_NORMAL
- en: If you wanted to analyze shipment routes or any other distances between two
    points, you now know exactly how to visualize this kind of data in Tableau.
  prefs: []
  type: TYPE_NORMAL
- en: '![Chart, diagram, radar chart'
  prefs: []
  type: TYPE_NORMAL
- en: Description automatically generated](img/B18435_09_08.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.8: U.S. Flight Departure Delays'
  prefs: []
  type: TYPE_NORMAL
- en: 'In *Figure 9.8*, you can see another, similar visualization, which is definitely
    worth checking out (try to replicate it!): [https://www.tableau.com/solutions/workbook/big-data-more-common-now-ever](https://www.tableau.com/solutions/workbook/big-data-more-common-now-ever).'
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will discuss how to leverage a combination of maps and
    polygons to further extend our Tableau toolbox.
  prefs: []
  type: TYPE_NORMAL
- en: Creating custom polygons
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Geographic areas for which Tableau natively provides polygons include worldwide
    airport codes, cities, countries, regions, territories, states, provinces, and
    some postcodes and second-level administrative districts (county-equivalents):
    U.S. area codes, **Core-Based Statistical Areas** (**CBSAs**), **Metropolitan
    Statistical Areas** (**MSAs**), congressional districts, and ZIP codes. This means,
    for example, that a filled map can easily be created for the countries of the
    world. Simply copy a list of the world’s countries (*Ctrl* + *C*) and paste that
    list into Tableau by pressing *Ctrl* + *V* while your mouse is located on an empty
    worksheet in Tableau Desktop. A new data source will be added to the top right
    under **Data**. Next, set the **View** type in Tableau to **Filled Map** and place
    the country list on the **Detail** shelf. Tableau will automatically draw polygons
    for each of those data points:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18435_09_09.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.9: Native polygons'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are some geographic types for which Tableau will not automatically provide
    polygons. These include telephone area codes. For these geographic types, Tableau
    will draw a symbol map but not a filled map, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Map  Description automatically generated](img/B18435_09_10.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.10: Filled map failed'
  prefs: []
  type: TYPE_NORMAL
- en: Even though the filled map **Marks** type is chosen, Tableau is not able to
    fill the map because the outlines of those areas are unknown to Tableau. Furthermore,
    special mapping needs may arise that require polygons to be drawn for areas that
    are not typically included on maps. For example, an organization may define sales
    regions that don’t follow the usual map boundaries. Or, a Tableau author may import
    an image of a basketball court or football pitch into Tableau and draw polygons
    to represent particular parts of the playing area. An alternative, which we discussed
    in more detail in *Chapter 8*, *Going Beyond the Basics*, could be mapping bookshelves
    in a store.
  prefs: []
  type: TYPE_NORMAL
- en: But other than drawing polygons yourself, there are also file types that support
    drawing polygons. One of those file types is `.shp`. In the next exercise, we
    will make use of such a file and create polygons for Texas.
  prefs: []
  type: TYPE_NORMAL
- en: Polygons for Texas
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'By processing an example of the aforementioned `.shp` file type, Tableau can
    create polygons. Let’s try this out and show the population of Texas as polygons
    on a map of Texas:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the **Texas Department of Transportation** page: [https://gis-txdot.opendata.arcgis.com/datasets/txdot-city-boundaries/explore?location=30.990445%2C-100.168292%2C6.68](https://gis-txdot.opendata.arcgis.com/datasets/txdot-city-boundaries/explore?location=30.990445%2C-100.168292%2C6.68).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the **Download** dropdown and download **Shapefile**:![](img/B18435_09_11.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 9.11: Texas data'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In your `download` directory, you should find multiple files:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/B18435_09_12.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 9.12: Texas city boundaries'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If you were to open a `.shp` file in a text editor, you would see the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/B18435_09_13.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 9.13: .shp in a text editor'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Luckily, Tableau has native capabilities to read `.shp` files. In the workbook
    associated with this chapter, navigate to the `City` `Limits` worksheet and select
    **Data** | **New Data Source** | **Text File**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Navigate to your `downloads` directory or the path where you saved the Texas
    shapefiles and select the `.shp` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_09_14.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.14: Loading a spatial file'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next screenshot, you can see how Tableau was able to read the `.shp`
    file and how it created an additional field called **Geometry** that indicates
    that we are looking at polygons and multipolygons in this file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_09_15.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.15: Geometry'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a new worksheet and drag **Geometry** onto the empty canvas:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_09_16.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.16: Adding geometry'
  prefs: []
  type: TYPE_NORMAL
- en: 'And look at that! Tableau created polygons around areas in Texas right away:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_09_17.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.17: Texas polygons'
  prefs: []
  type: TYPE_NORMAL
- en: Feel free to adjust the formatting via **Map** | **Background Maps** | **Dark**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Put the **City Nm** field on **Detail** and **Pop2010** on **Color** in the
    **Marks** card. (The color used in *Figure 9.17* is **Temperature Diverging**.)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Your worksheet should look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_09_18.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.18: Texas city boundaries'
  prefs: []
  type: TYPE_NORMAL
- en: You can see that we have a nice dark map now with polygons on top. The polygons
    define the area per city name (using the field **City Nm**) as published by the
    government of Texas. By placing the measure of the population in 2010 (using the
    field **Pop2010**) on the **Color** shelf, we can also see that the areas with
    red polygons had the highest number of inhabitants in 2010 and dark green the
    least.
  prefs: []
  type: TYPE_NORMAL
- en: You might not like the polygons or maybe you are wondering if a spatial file
    like a `.shp` will only allow you to use polygons. Luckily, the answer is we can
    change the map, no matter whether it’s a spatial file or not. I really like heatmaps
    to display geographical density, so let’s use them in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Heatmaps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I want to share a feature with you that was part of an earlier Tableau release
    and has proven to be very useful when working with geographical data. It is the
    **Marks** type **Density** with which you can create heatmaps. This new feature
    is not limited to maps; you can also use it for any other type of chart. However,
    it is most efficient for dense data where patterns cannot be spotted easily.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following steps will illustrate an example of creating a **heatmap**:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `Citylimits` tab in the workbook related to this chapter. If you did
    not complete the previous exercise, please open the `Citylimits` tab from the
    solutions workbook of this chapter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Duplicate the worksheet, and call it `City Limits (2)`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Set the **Marks** card type to **Density**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_09_19.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.19: Texas city density'
  prefs: []
  type: TYPE_NORMAL
- en: Click on **Color** in the **Marks** card and select any color you like. I chose
    **Density Gold Dark**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Decrease **Size** in the **Marks** card by dragging the slider to the left.
    Drag until you like the size of the circles on your map:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_09_20.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.20: Heatmap'
  prefs: []
  type: TYPE_NORMAL
- en: Heatmaps can show you a spatial concentration and are perfect for very dense
    datasets. In the preceding figure, you can see that we lost the surroundings of
    the city, the polygon structure; however, we can still see the densely populated
    areas and now every city has the same size, making it easier to compare smaller
    with bigger geographic locations. And we were able to prove that a spatial file
    does not need to be used with polygons.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Tableau 2020.4 release, another feature was added: map layers. What
    they are and what they are used for will be described in the next section.'
  prefs: []
  type: TYPE_NORMAL
- en: Dual axes and layering maps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You might recall that on many different occasions throughout the previous chapters,
    we used dual axes. A dual axis visualization can also be achieved with maps, and,
    even better, since the Tableau 2020.4 release, maps can be layered. We simply
    add another layer with the same structure (which, in this case, is a map), and
    per layer, we can display different data.
  prefs: []
  type: TYPE_NORMAL
- en: We will look at two exercises, the first one being about the use of dual axes
    and the second one including include map layers.
  prefs: []
  type: TYPE_NORMAL
- en: Using dual axes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need a dataset. I simply created one in Excel myself; feel free to
    create your own, copy what you see in the following screenshot, or download the
    file from this book’s GitHub repository ([https://github.com/PacktPublishing/Mastering-Tableau-2023-Fourth-Edition/blob/main/Chapter09/Freight.xlsx](https://github.com/PacktPublishing/Mastering-Tableau-2023-Fourth-Edition/blob/main/Chapter09/Freight.xlsx)).
    Name the file `freight`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Graphical user interface, application, table, Excel'
  prefs: []
  type: TYPE_NORMAL
- en: Description automatically generated](img/B18435_09_21.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.21: Excel'
  prefs: []
  type: TYPE_NORMAL
- en: Connect the new dataset to Tableau and open a new worksheet called `Dual-axis
    map`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Double-click on **Origin Country** and the following map will appear:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_09_22.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.22: Dual-axis map'
  prefs: []
  type: TYPE_NORMAL
- en: 'Change the **Marks** card type to a filled map and drag **Goods** onto the
    **Color** shelf:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_09_23.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.23: Dual-axis map II'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on **Longitude** in the **Columns** shelf, press *Ctrl* (or *Command*
    on Mac), and simultaneously move the field to its right. You should have copied
    a second copy of the **Longitude** field to the **Columns** shelf:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_09_24.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.24: Copying Longitude'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also see that the **Marks** card maintains two layers now, plus an
    additional **All** layer, just like dual axes on a bar chart would:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_09_25.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.25: Marks card'
  prefs: []
  type: TYPE_NORMAL
- en: 'On the bottom layer, replace **Goods** with **Origin** on the **Color** shelf
    and see how the second map now shows colored dots representing cities:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_09_26.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.26: Dual-axis map'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the right **Longitude** field in the **Columns** shelf and select **Dual
    Axis**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You created your first layered map! Each country’s color represents the types
    of goods it ships. The dots indicate the cities for train, ship, plane, or truck
    transport:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18435_09_27.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.27: Dual-axis map'
  prefs: []
  type: TYPE_NORMAL
- en: After completing the first basic exercise, we will move on to a more complex
    one, using the newer map layering functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Adding map layers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We want to visualize the transport routes with a line from the start to the
    destination city. We also want to show the time to delivery as well as the weight
    of the shipment. We will continue using the `freight` dataset from before; we
    just need to do some adjustments:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `freight` dataset does not have longitudes or latitudes, which are crucial
    for some of Tableau’s spatial calculated fields, like `MAKEPOINT`, which we will
    need later on. Open Google Maps and type in a city from the dataset, for example,
    `Lisbon`. In the URL, you will be able to find the longitude and latitude:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_09_28.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.28: Google Maps'
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy them and add them to a separate Excel sheet, as shown in the following
    screenshot, and call it `latlong`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Map'
  prefs: []
  type: TYPE_NORMAL
- en: Description automatically generated](img/B18435_09_29.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.29: Excel'
  prefs: []
  type: TYPE_NORMAL
- en: 'We needed to use a new Excel sheet because we have to create a spatial field
    for destinations as well as the origin. Since some cities are an origin as well
    as a destination, we will create two inner joins; both times, the initial `freight`
    Excel sheet will connect to the recently created `latlong` Excel sheet (if you
    downloaded the data from GitHub, the `latlong` table is the second tab in the
    `Freight.xlsx`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![A picture containing diagram'
  prefs: []
  type: TYPE_NORMAL
- en: Description automatically generated](img/B18435_09_30.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.30: Join'
  prefs: []
  type: TYPE_NORMAL
- en: 'The only difference will be that the first join is made on **Origin** and **City**
    and the second on **Destination** and **City**. Rename the **latlong** data sources
    by double-clicking on the name, to avoid confusion:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_09_31.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.31: Join II'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a new workbook and name it `4-layer map`. Create a calculated field called
    `Line`, with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The Tableau description shows that to make a point based on a spatial location,
    Tableau needs the longitude and latitude, or coordinates.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![A picture containing diagram'
  prefs: []
  type: TYPE_NORMAL
- en: Description automatically generated](img/B18435_09_32.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.32: MAKEPOINT'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create another calculated field called `Days to delivery`, with the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Double-click on **City** from the **Origin** file and a map will appear, but
    you will encounter **12 unknown**. Click on the error and then **Edit Locations…**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![A picture containing diagram'
  prefs: []
  type: TYPE_NORMAL
- en: Description automatically generated](img/B18435_09_33.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.33: Unknown cities'
  prefs: []
  type: TYPE_NORMAL
- en: 'You will see that Tableau uses **United Kingdom** (it might be different for
    you) as a default country to find every city, but Tableau is unsuccessful because
    we have cities all over Europe in our dataset. Instead of a **Fixed** location,
    use the **From field** option and select **Origin Country**. Now this field will
    be used as a country per city in our dataset:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![A picture containing diagram'
  prefs: []
  type: TYPE_NORMAL
- en: Description automatically generated](img/B18435_09_34.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.34: Origin Country'
  prefs: []
  type: TYPE_NORMAL
- en: 'Tableau automatically adds **Origin Country** to the view on the **Detail**
    shelf and displays the cities correctly now. You can also achieve the previous
    step by placing **Origin Country** on the **Detail** shelf directly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![A picture containing diagram'
  prefs: []
  type: TYPE_NORMAL
- en: Description automatically generated](img/B18435_09_35.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.35: Origin cities'
  prefs: []
  type: TYPE_NORMAL
- en: Since one of our goals is to draw lines between the **Origin** and **Destination**
    cities, it only makes sense to also add **Destination**, correct? Double-click
    on **Destination** to add it to the visualization.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We now have all **Origin** and **Destination** cities in our view, but we won’t
    be able to distinguish between them because they are all on the same layer. Therefore,
    drag the just-added **Destination** field from the **Detail** shelf to the upper-left
    corner of your view, until the **Add a Marks Layer** sign appears:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![A picture containing diagram'
  prefs: []
  type: TYPE_NORMAL
- en: Description automatically generated](img/B18435_09_36.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.36: Freight II'
  prefs: []
  type: TYPE_NORMAL
- en: 'You will now see that the **Marks** card shows two layers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application'
  prefs: []
  type: TYPE_NORMAL
- en: Description automatically generated](img/B18435_09_37.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.37: Marks'
  prefs: []
  type: TYPE_NORMAL
- en: Rename the `Destination` layer to `Destination` `Country` by double-clicking
    on the name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add another layer by dragging **Line** onto **Add a Marks Layer** and add **Days
    to Delivery** to **Color**. Name this layer `Line` and select the **Automatic**
    type from the **Marks** card dropdown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application'
  prefs: []
  type: TYPE_NORMAL
- en: Description automatically generated](img/B18435_09_38.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.38: Marks layer'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add another layer by dragging **City** onto **Add a Marks Layer** and call
    it `City (2)`. Add **Destination Country** to **Detail**. Select the **Automatic**
    type from the **Marks** card dropdown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Graphical user interface, application'
  prefs: []
  type: TYPE_NORMAL
- en: Description automatically generated](img/B18435_09_39.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.39: Marks layer'
  prefs: []
  type: TYPE_NORMAL
- en: 'Lastly, go back to the **Destination Country** layer, change **Destination
    Country** to **Detail**, and put **Weight** on **Color**. Select **Map** from
    the **Marks** card dropdown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application'
  prefs: []
  type: TYPE_NORMAL
- en: Description automatically generated](img/B18435_09_40.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.40: Marks layer'
  prefs: []
  type: TYPE_NORMAL
- en: 'Sort by dragging and dropping the layers in the following order: **Line**,
    **City**, **City (2)**, and **Destination Country**. Your worksheet should now
    look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![A picture containing diagram'
  prefs: []
  type: TYPE_NORMAL
- en: Description automatically generated](img/B18435_09_41.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.41: Map'
  prefs: []
  type: TYPE_NORMAL
- en: In order to make the visualization a bit easier to interpret, put **Origin**
    on the **Filters** shelf and select only a few origins of your choosing.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'And to distinguish the **Origin** from the **Destination**, open the **City**
    and **City (2)** map layers and change **City** and **City (Destination)** respectively
    from **Detail** to **Shape**. Select one shape for the **Origin** and another
    for the **Destination**, for example, filled circles for **Origin** and crosses
    for **Destination**. You can also color the shapes by clicking on the **Color**
    shelf:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![A picture containing diagram'
  prefs: []
  type: TYPE_NORMAL
- en: Description automatically generated](img/B18435_09_42.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.42: Final layered map'
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s look at what we have created. We can see that goods are being transported
    from every circle to a cross city. Both cities are connected by a yellow-to-red
    range colored line. More yellow-toned means that the delivery was fast, and more
    red-toned means that the delivery took longer. The destination country is colored
    in a turquoise-to-dark-blue color range. The darker the color, the more weight
    has been transported there. We can easily spot that Italy received the heaviest
    transport, coming from Istanbul and being delivered within 6 days. The slowest
    delivery was from Budapest to Warsaw, which took 26 days.
  prefs: []
  type: TYPE_NORMAL
- en: I hope that this exercise showed you the benefits of layered maps. Each layer
    allows you to use **Color**, **Shape**, **Size**, **Label**, and other **Marks**
    in its unique way, opening new paths for your analysis. In the next section, we
    will go even further and use external technology for maps in Tableau.
  prefs: []
  type: TYPE_NORMAL
- en: Extending Tableau mapping with other technology
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Next, we will consider how to extend Tableau’s mapping capabilities with other
    tools. Tableau’s developers were careful to create a mapping interface that is
    readily extensible. Some areas of this extensibility, such as connecting to a
    **Web Map Service** (**WMS**) server, are available directly from the interface;
    we’ll explore that next.
  prefs: []
  type: TYPE_NORMAL
- en: Using custom maps with a WMS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The easiest way to bring a custom map into Tableau is directly from Desktop.
    We need a properly formatted URL that points to a WMS server. Tableau Desktop
    can connect to any WMS server that supports the WMS 1.0.0, 1.1.0, or 1.1.1 standards.
  prefs: []
  type: TYPE_NORMAL
- en: A good place to find a list of such URLs is [http://directory.spatineo.com](http://directory.spatineo.com),
    which provides information on a ton of different mapping services.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following exercise was inspired by Jeffrey A. Shaffer’s article *Building
    weather radar in Tableau in under 1 minute*, which can be accessed here: [https://www.dataplusscience.com/TableauWeatherRadar.html](https://www.dataplusscience.com/TableauWeatherRadar.html).
    However, we will include a different map and our source is the *NASA Earth Observation*
    data ([https://neo.gsfc.nasa.gov/](https://neo.gsfc.nasa.gov/)). In this exercise,
    we will see that by plotting additional data—in the form of background images—underneath
    your dataset, you will be able to make better decisions for your business. For
    example, if your sales figures are dependent on good (or bad) weather or your
    production is at risk of close-by wildfires, you will be able to see this all
    in one Tableau dashboard:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the workbook associated with this chapter and navigate to the `WMS Server`
    worksheet via the Desktop.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `Superstore` data source.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Place **State/Province** on the **Detail** shelf.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Copy the [http://neo.gsfc.nasa.gov/wms/wms](http://neo.gsfc.nasa.gov/wms/wms)
    URL, then in Tableau, navigate to **Map** | **Background Maps** | **Add WMS Map**.
    Paste the URL and click **OK**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Graphical user interface, application'
  prefs: []
  type: TYPE_NORMAL
- en: Description automatically generated](img/B18435_09_43.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.43: Add WMS Map'
  prefs: []
  type: TYPE_NORMAL
- en: In the **Marks** card, set the **View** type to **Map**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the **Color** shelf to turn on **Border**, set the color to white,
    and set **Opacity** to **0%**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![A picture containing diagram'
  prefs: []
  type: TYPE_NORMAL
- en: Description automatically generated](img/B18435_09_44.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.44: Active fires map'
  prefs: []
  type: TYPE_NORMAL
- en: You can now see the active fires from the last month. But, by clicking on **Map**
    | **Background Layers**, more options will appear. Take a look at the left-hand
    side of your screen and select any other info domain you are interested in; how
    about **Average Land Surface Temperature**?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_09_45.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.45: Land Surface Temperature map'
  prefs: []
  type: TYPE_NORMAL
- en: 'Or **Cloud Fraction** (don’t forget to first deselect a map before you select
    a new one):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_09_46.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.46: Cloud Fraction map'
  prefs: []
  type: TYPE_NORMAL
- en: This feature will give you endless ways to analyze data related to geographic
    locations. Let’s say you own an online store. You could check if the sale of specific
    products is higher in specific areas, for example, umbrellas in rainy areas and
    sun protection in hotter regions. You can then continue to analyze if the market
    is already satisfied or if it makes sense to invest in marketing for those regions.
    Or maybe you want to move stock to regions where more sales are expected due to
    a weather change. Feel free to share your findings on Tableau Public and make
    sure to use the tag **#MasteringTableau**.
  prefs: []
  type: TYPE_NORMAL
- en: Before we proceed, here’s a note on tiling and zooming. Since high-resolution
    maps may be many gigabytes, it’s impractical to require you to download an entire
    map in order to zoom in on one small area. Tiles solve this problem by enabling
    multiple zoom levels. A zoom level of 0 results in a single tile (often a 256
    x 256-pixel PNG image) that displays the entire map. As the zoom levels increase,
    the number of map tiles increases exponentially. Also, a proportionally smaller
    section of the map displays; that is, as the zoom level increases, the area of
    the entire map that displays decreases and the total number of tiles required
    to fill the display remains constant. This helps control the amount of data downloaded
    at any given time.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we’ll explore Mapbox.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring Mapbox
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Mapbox provides custom maps and integrates natively with Tableau. To learn
    how to build your own custom maps, you can check out its website here: [https://www.mapbox.com/](https://www.mapbox.com/).
    Starting with Tableau 2019.3, multiple Mapbox styles are even available by default:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, application  Description automatically generated](img/B18435_09_47.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.47: Background Maps'
  prefs: []
  type: TYPE_NORMAL
- en: Next to that, Mapbox itself provides an extended mapping service with an accompanying
    web application that enables users to customize maps. This customizability encompasses
    fonts, colors, background images, and more. Mapbox provides basic services free
    of charge but, of course, more maps and greater bandwidth needs will require an
    upgrade with an accompanying fee.
  prefs: []
  type: TYPE_NORMAL
- en: 'This exercise will show you how to connect to **Mapbox**:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to [https://www.mapbox.com](https://www.mapbox.com) and create an account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After completing the signup and logging in to **Mapbox**, click on the **Studio**
    link:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Graphical user interface  Description automatically generated](img/B18435_09_48.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.48: Mapbox'
  prefs: []
  type: TYPE_NORMAL
- en: Click **New Style** and start creating a map. I chose **Monochrome** | **Dark**
    | **Customize Monochrome**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The Mapbox editor should open. Adjust the map based on your needs:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![A picture containing diagram'
  prefs: []
  type: TYPE_NORMAL
- en: Description automatically generated](img/B18435_09_49.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.49: Mapbox integration'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click **Share** (in the top-right corner) once you are done. Select **Third
    party** | **Tableau** and copy the URL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![A picture containing diagram'
  prefs: []
  type: TYPE_NORMAL
- en: Description automatically generated](img/B18435_09_50.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.50: Mapbox integration'
  prefs: []
  type: TYPE_NORMAL
- en: In the workbook associated with this chapter, navigate to the `Mapbox Classic`
    worksheet and select **Map** | **Background Maps** | **Add** **Mapbox Map**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a **Style Name** (I used `MasteringTableau`) and copy the URL. Click **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the `Superstore` data source, double-click on **State**, and select
    the **MasteringTableau** map style via the **Map** | **Background Maps** | **MasteringTableau**
    path:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![A picture containing diagram'
  prefs: []
  type: TYPE_NORMAL
- en: Description automatically generated](img/B18435_09_51.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.51: Background Maps'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, Tableau makes use of the map we previously created in Mapbox.
    Great! So, this means you can customize your map just the way you like it.
  prefs: []
  type: TYPE_NORMAL
- en: 'A manual on how to create custom maps and everything else you need to know
    about Mapbox can be found here: [https://docs.mapbox.com/studio-manual/guides/](https://docs.mapbox.com/studio-manual/guides/).'
  prefs: []
  type: TYPE_NORMAL
- en: Swapping maps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will now create a dashboard that allows the end user to choose between the
    various maps we just discussed. The technique used for this exercise is known
    as **sheet swapping**. However, a deeper dive into this technique is presented
    in *Chapter 11*, *Designing Dashboard and Best Practices for Visualizations*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s look at the necessary steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigate to the `MapSwap` sheet in the workbook associated with this chapter.
    Double-click on **State**. Set the **Marks** card view to **Map**, click on **Color**,
    set **Opacity** to **0%**, and lastly, set **Border** to **Automatic**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![A picture containing graphical user interface  Description automatically
    generated](img/B18435_09_52.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.52: Color'
  prefs: []
  type: TYPE_NORMAL
- en: 'Duplicate the **MapSwap** sheet twice:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![A picture containing diagram'
  prefs: []
  type: TYPE_NORMAL
- en: Description automatically generated](img/B18435_09_53.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.53: Duplicate MapSwap sheet'
  prefs: []
  type: TYPE_NORMAL
- en: Select the **MapSwap** sheet and navigate to **Map** | **Background Maps** |
    **Normal**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **MapSwap (2)** sheet and navigate to **Map** | **Background Maps**
    | **Dark**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **MapSwap (3)** sheet and navigate to **Map** | **Background Maps**
    | **Satellite**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a parameter called **Show Sheet** like so:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![A picture containing diagram'
  prefs: []
  type: TYPE_NORMAL
- en: Description automatically generated](img/B18435_09_54.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.54: Parameter'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on the parameter in the **Data** pane and select **Show Parameter**
    **Control**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a calculated field called `Show Sheet Filter` like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Select the `MapSwap` worksheet and place **Show Sheet Filter** on the **Filters**
    shelf. Select **Select from list** and **Normal**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![A picture containing diagram'
  prefs: []
  type: TYPE_NORMAL
- en: Description automatically generated](img/B18435_09_55.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.55: Sheet filter'
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the `MapSwap (2)` worksheet and place **Show Sheet Filter** on the **Filters**
    shelf. This time, select **Custom value list** and type `Dark`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, chat or text message  Description
    automatically generated](img/B18435_09_56.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.56: Custom value list'
  prefs: []
  type: TYPE_NORMAL
- en: Repeat the previous step on the `MapSwap (3)` sheet and type `Satellite` instead
    of `Dark`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a dashboard and call it `db_MapSwap`. Place a vertical container on the
    dashboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Place all three **MapSwap** sheets in the vertical container and hide their
    titles.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select a different map style and see how your map changes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Map  Description automatically generated](img/B18435_09_57.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.57: Swap map'
  prefs: []
  type: TYPE_NORMAL
- en: You might have seen a feature like dark/light or day/night backgrounds on your
    own computer or maybe on websites like YouTube or IDEs like PyCharm. With the
    **MapSwap** function, you can now offer the same comfort to your users on your
    Tableau dashboards.
  prefs: []
  type: TYPE_NORMAL
- en: Custom geocoding
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we close this chapter, I wanted to share a quick tip that I saw on LinkedIn
    some weeks ago. The post describing the following exercise came from Klaus Schulte,
    a German professor and 2018 *Iron Viz* Champion.
  prefs: []
  type: TYPE_NORMAL
- en: He shared that he had built a grid map by using custom geocoding. Let’s try
    to replicate it!
  prefs: []
  type: TYPE_NORMAL
- en: 'Download hex map data somewhere or create it yourself. For this exercise, you
    can use the hex map data from my Tableau Public or GitHub: [https://github.com/PacktPublishing/Mastering-Tableau-2023-Fourth-Edition/blob/main/Chapter09/hexmap.xlsx](https://github.com/PacktPublishing/Mastering-Tableau-2023-Fourth-Edition/blob/main/Chapter09/hexmap.xlsx).
    If you want to create it yourself, please review the polygon exercise in *Chapter
    8*, *Going Beyond the Basics*. You can create the file the same way we created
    the book polygons:'
  prefs: []
  type: TYPE_NORMAL
- en: Place the `hexmap` file in the `Mapsources` folder of your Tableau repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect Tableau Desktop to the default `Superstore` data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Double-click on **State/Province**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_09_58.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.58: Normal map'
  prefs: []
  type: TYPE_NORMAL
- en: Click on **State/Province** in the **Data** pane and select **Geographic Role**
    | **Hexmap.xlsx**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Map** | **Background Layers** and set the **Washout (%)** to `100%`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The result will look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18435_09_59.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.59: XX(will be *Figure 9.59*)'
  prefs: []
  type: TYPE_NORMAL
- en: 'So why this effort? Because a grid map distributes the states evenly, if you
    did this without it, you wouldn’t be able to distinguish between states in close
    proximity and would miss some far away:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18435_09_60.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.60: If no grid map'
  prefs: []
  type: TYPE_NORMAL
- en: Thank you Klaus for this great tip! By the way, a hex map is not only applicable
    to the U.S.. Try it with Europe, Africa, South America, or the **Asia-Pacific**
    (**APAC**) region as well! Whenever you work with variances in size, a grid map
    comes in handy.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we explored how to extend Tableau’s mapping capabilities without
    leaving the interface by capturing Tableau-generated latitude and longitude data
    and how to look this up on Google. We created polygons and a heatmap for Texas
    based on a `.shp` file as well as a dashboard with a dual map axis and another
    dashboard with 4 map layers. Next, we explored various ways to extend Tableau’s
    mapping using other technology. We connected to a WMS server and then explored
    the Mapbox offering, followed by an excursion to the world of polygons.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will explore using Tableau for presentations. Specifically,
    we will look at how to get the best images out of Tableau, how to effectively
    and efficiently use Tableau with PowerPoint, and how to use Tableau directly for
    presentations without relying on third-party tools.
  prefs: []
  type: TYPE_NORMAL
- en: Learn more on Discord
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To join the Discord community for this book – where you can share feedback,
    ask questions to the author, and learn about new releases – follow the QR code
    below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://packt.link/tableau](https://packt.link/tableau)'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/QR_Code2044012316175764640.png)'
  prefs: []
  type: TYPE_IMG
