- en: '2'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Network Analysis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, I am going to describe three different topics, but at a very
    high level: *graph theory*, *social network analysis*, and *network science*.
    We will begin by discussing some of the confusion around the word *network* and
    why that will probably remain confusing. Then, we will go over a tiny bit of the
    past and present of all three. Finally, we will dive into how network analysis
    has helped me and hopefully how it can help you. This isn’t a code-heavy chapter.
    This is a high-level introduction.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be discussed in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: The confusion behind networks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is this network stuff?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Resources for learning network analysis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Common network use cases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Advanced network use cases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting started with networks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The confusion behind networks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First, to reduce confusion, if you see me mention *NetworkX*, that is not a
    typo. That is a Python library we will be making heavy use of in this book. Python
    is a very popular programming language.
  prefs: []
  type: TYPE_NORMAL
- en: I have worked in **information technology** (**IT**) my entire career, and have
    even gone farther than that. During some points of my career, I pursued security
    certifications such as Security+ and CISSP for job requirements, and I have constantly
    worked with other IT professionals, such as network engineers. So, believe me
    when I tell you that I understand the awkwardness that is involved in discussing
    network science with people who view networks as primarily based on TCP/IP and
    subnets.
  prefs: []
  type: TYPE_NORMAL
- en: Networks are all around us and even inside of us. In fact, our brain is the
    most complex thing we have found in the universe, as discussed in the book *How
    to Create a Mind* (Kurzweil, 2012). Our brain comprises of hundreds of billions
    of cells interlinked through trillions of connections. What a complex network!
  prefs: []
  type: TYPE_NORMAL
- en: When I think of all that we have achieved with artificial neural networks and
    how well they do for translation, computer vision, and generation, I think they
    are impressive, but I am much more impressed with how these ultra-complex minds
    of ours naturally evolved, and how foolish we sometimes are even with all of that
    complexity.
  prefs: []
  type: TYPE_NORMAL
- en: Back to my point, *networks* are not just computer networks. Networks are comprised
    of relationships and information exchanges between things.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this book, when I talk about networks, I am talking about *graphs*. I am
    talking about the complex relationships between things. One of my favorite books
    on this subject, titled *Networks* (Newman, 2018), describes a few different kinds
    of networks, such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Technological networks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Internet
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Power grid
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Telephone networks
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Transportation networks
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Airline routes
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Roads
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Rail networks
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Delivery and distribution networks
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Information networks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: World wide web
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Citation networks
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Peer-to-peer networks
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Recommender networks
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Keyword indexes
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Dataflow networks
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Social networks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Social interaction networks
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Ego-centric networks
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Affiliation/collaboration networks
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Biological networks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Metabolic networks
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Protein-protein networks
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Genetic regulatory networks
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Drug interaction networks
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Brain networks
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Networks of neurons
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Networks of brain functionality connectivity
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Ecological networks
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Food webs
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Host-parasite networks
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Mutualistic networks
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Personally, my favorite networks are social networks (not social media companies),
    as they allow us to map out and understand a bit about the relationships between
    people, even on a massive scale. My *least* favorite networks are computer networks,
    as I am just not interested in subnet masking or different computer network architectures.
  prefs: []
  type: TYPE_NORMAL
- en: In this beautiful universe, graph theory, social network analysis, and network
    science give you the ability to investigate and interrogate relationships that
    many people don’t even notice or recognize.
  prefs: []
  type: TYPE_NORMAL
- en: In this book, you will see the words graphs and networks used interchangeably.
    They are essentially the same structures but often for different purposes. We
    use graphs in *NetworkX* for network analysis. Those graphs are also called **sociograms**
    when they are visualized for social network analysis. Yes, that is confusing.
    You will get through this confusion, I promise. To make my life easier, I tell
    myself that they are the same things with different names, sometimes used for
    different purposes.
  prefs: []
  type: TYPE_NORMAL
- en: What is this network stuff?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s break things down a little further. I want to discuss the differences
    between graph theory, social network analysis, and network science separately.
    I am going to keep this very high level so that we can get to building as soon
    as possible. There are probably dozens of books available on Amazon if you want
    to dive deeper into any of these, and I personally probably have 10 or so books
    and will buy more as soon as I notice a new one is out.
  prefs: []
  type: TYPE_NORMAL
- en: Graph theory
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There has been a lot of excitement about **graph theory** lately. I have noticed
    it the most in data science communities, but I have even seen database administrators
    and security professionals take an interest. Judging by the hype, one could assume
    that graph theory is something brand new, but it is actually *hundreds* of years
    old.
  prefs: []
  type: TYPE_NORMAL
- en: History and origins of graph theory
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The history and origins of graph theory began in 1735, 286 years ago. Back then,
    there was a puzzle called *The Seven Bridges of Königsberg*, where the goal was
    to find a way to cross every one of the seven bridges without crossing any bridge
    twice. In 1735, Swiss mathematician Leonhard Euler proved that the puzzle was
    unsolvable. There was simply no way to cross each of the bridges without traversing
    a bridge twice. In 1736, Euler wrote a paper on this proof, which became the first-ever
    paper in the history of graph theory.
  prefs: []
  type: TYPE_NORMAL
- en: In 1857, an Irish mathematician, William Rowan Hamilton, invented a puzzle called
    the Icosian game that involved finding a special type of path, later known as
    a Hamiltonian circuit.
  prefs: []
  type: TYPE_NORMAL
- en: Almost 150 years after Euler’s paper, in 1878, the term *graph* was introduced
    by James Joseph Sylvester in a paper published in *Nature*.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, in 1936, the very first textbook on graph theory, *Theory of Finite
    and Infinite Graphs*, was written by Hungarian mathematician Dénes Kőnig, 201
    years after Euler solved the seven bridges puzzle. In 1969, the definitive textbook
    on graph theory was written by American mathematician Frank Harary.
  prefs: []
  type: TYPE_NORMAL
- en: So, in other words, graph theory is not new.
  prefs: []
  type: TYPE_NORMAL
- en: Practical application of graph theory
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Currently, there is much interest in graph theory as it relates to finding optimal
    paths. This is valuable knowledge due to its application in routing data, products,
    and people from point A to point B. We can see this in action when mapping software
    finds the shortest path between a source and a destination location. I also use
    paths in troubleshooting production database and software problems, so there are
    more applications than transportation.
  prefs: []
  type: TYPE_NORMAL
- en: We will work with the shortest paths throughout this book. Keep reading!
  prefs: []
  type: TYPE_NORMAL
- en: Social network analysis
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Social network analysis** has not received anywhere near the amount of hype
    that graph theory has, and I think that is a shame. Social network analysis is
    the analysis of social networks – the social fabric – that we are all a part of.
    If you study social networks, you learn to understand people’s behaviors better.
    You can investigate who people interact with, who they hate, who they love, how
    drug addiction spreads, how white supremacists organize, how terrorists operate,
    how fraud is carried out, how malware spreads, how pandemics can be stopped, and
    on and on and on. There is math involved, but in my own research, I am most interested
    in uncovering social interaction. You can do social network analysis without writing
    out a single equation, so long as you understand what the techniques do, what
    assumptions they make, and how to tell whether they are working or not. Mathematically,
    I would say this is a friendly field, even if you are not mathematically inclined.
    However, mathematical prowess can be a superpower here, as it will allow you to
    dream up your own techniques that can be used to dissect networks and find insights.'
  prefs: []
  type: TYPE_NORMAL
- en: History and origins of social network analysis
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There is significant overlap between graph theory and social network analysis,
    as ideas such as the shortest path can be useful in a social network context for
    determining the number of handshakes it would take to get from where you are currently
    sitting to meeting the president, for instance. Or who would you have to meet
    in order to have a chance to meet your favorite celebrity?
  prefs: []
  type: TYPE_NORMAL
- en: However, in the 1890s, French sociologist David Émile Durkheim and German sociologist
    Ferdinand Tönnies foreshadowed the idea of social networks in their theories and
    research on social groups. Tönnies argued that social groups exist as ties that
    link individuals who share values and beliefs (community) or impersonal and instrumental
    social links (society). On the other hand, Durkheim gave a non-individualistic
    explanation, arguing that social phenomena arise when interacting individuals
    are part of a reality that is bigger than the properties of individual actors
    alone. I personally am intrigued by this idea, and I get a sense of this when
    I investigate where people are placed on a sociogram. Did the people create their
    position in a social network, or was some of it by chance, based on who they know
    and where their connections were already situated? For instance, if you are raised
    in certain parts of any country, you will likely inherit many of the sentiments
    shared by members of the community, but those sentiments may be much older than
    the living members of the community.
  prefs: []
  type: TYPE_NORMAL
- en: In the 1930s, major developments in social network analysis took place by several
    groups in psychology, anthropology, and mathematics working independently. Even
    90 years ago, social network analysis was already a multi-disciplinary topic.
    In the 1930s, Jacob Moreno was credited with creating the first sociograms to
    study interpersonal relationships, and people were so intrigued by these that
    one was printed in the New York Times in 1933\. He stated that “*Before the advent
    of sociometry, no one knew what the interpersonal structure of a group ‘precisely’
    looked like.*” Personally, whenever I visualize any social network that I have
    constructed for the first time, I feel that same intrigue. The network structure
    is a mystery until you first see it visualized, and it is always exciting to see
    it rendered for the first time.
  prefs: []
  type: TYPE_NORMAL
- en: In the 1970s, scholars worked to combine the different tracks and traditions
    of independent network research. Almost 50 years ago, people realized that independent
    research was going off in multiple directions, and there was an effort to bring
    it all together.
  prefs: []
  type: TYPE_NORMAL
- en: In the 1980s, theories and methods of social network analysis became pervasive
    among the social and behavioral sciences.
  prefs: []
  type: TYPE_NORMAL
- en: Practical application of social network analysis
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Social network analysis can be used to study the relationship between any social
    entities. The goal of social network analysis is to understand how social entities
    and communities interact. This can be at the individual level or even at the international
    level.
  prefs: []
  type: TYPE_NORMAL
- en: 'This can even be used against literature. For instance, here is a social network
    I constructed from the book *Alice’s Adventures* *in Wonderland*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.1 – Social network of Alice’s Adventures in Wonderland](img/B17105_02_001.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.1 – Social network of Alice’s Adventures in Wonderland
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a social network I constructed from the book *Animal Farm*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.2 – Social network of Animal Farm](img/B17105_02_002.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.2 – Social network of Animal Farm
  prefs: []
  type: TYPE_NORMAL
- en: These are the original sociograms from when I first created them, so they could
    use a bit of work, and we’ll work on cleaning them up a bit and analyzing them
    as part of this book.
  prefs: []
  type: TYPE_NORMAL
- en: I adore social network analysis more than graph theory or network science. I
    want to understand people. I want to stop bad people and make the world safer.
    I want to stop malware and make the internet safer. This powers everything for
    me, and so I spend a lot of my free time researching and doing social network
    analysis. This is my focus.
  prefs: []
  type: TYPE_NORMAL
- en: Network science
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Network science** is another fascination of mine. Network science is about
    understanding how networks form and the implications of how they form.'
  prefs: []
  type: TYPE_NORMAL
- en: History and origins of network science
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Like social network analysis, there is an overlap between the origins of graph
    theory and network science. To me, network science seems more about unifying various
    network disciplines and bringing everything under one roof, as data science is
    an attempt to unify various data disciplines. In fact, lately, I see network science
    emerging in use among data scientists, so I predict that, eventually, network
    science will be considered a subfield of data science.
  prefs: []
  type: TYPE_NORMAL
- en: In books I have read on network science, the same story of Euler's Seven Bridges
    is given as the origin of network science, which shows that graph theory is the
    origin of network science. However, there were a few key efforts in the 1990s
    that focused on mathematically describing different network topologies.
  prefs: []
  type: TYPE_NORMAL
- en: Duncan Watts and Steven Strogatz described the “small-world” network, where
    most nodes are not neighbors of each other but can reach each other in very few
    hops. Albert-László Barabási and Reka Albert discovered that small-world networks
    are not the norm in the real world and developed the scale-free network, where
    networks consist of a few hub nodes with many edges and many nodes with a few
    edges. This network topology would grow to maintain a constant ratio between the
    number of connections and all other nodes.
  prefs: []
  type: TYPE_NORMAL
- en: Practical application of network science
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The practical application of network science is also the practical application
    of graph theory and social network analysis. I feel that graph theory and social
    network analysis are part of network science, even if techniques are specialized
    for each subject. I personally do not differentiate, and I don’t think much about
    graph theory. I use techniques of graph theory and social network analysis when
    I do network science. When I do this via code, much of the mathematics of graph
    theory has been abstracted away, but I still very commonly use things such as
    shortest paths and centralities, the former from graph theory and the latter from
    social network analysis.
  prefs: []
  type: TYPE_NORMAL
- en: Resources for learning about network analysis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So, what is needed to begin a journey into network thinking? I’ll give a few
    suggestions just to help you get started, but be aware that by the time this book
    has been published, some of this might already be a bit outdated and new technologies
    and techniques may have emerged. This is not a complete list. It is the bare minimum.
    The first thing that you need is a curious mind. If you are willing to investigate
    the hidden networks that make up our existence, then you already have the first
    prerequisite. Still, let me give you some more suggestions.
  prefs: []
  type: TYPE_NORMAL
- en: Notebook interfaces
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'I do all of my network analysis in Jupyter Notebooks. You can download and
    install Jupyter via Anaconda at: [https://docs.anaconda.com/anaconda/install](https://docs.anaconda.com/anaconda/install).'
  prefs: []
  type: TYPE_NORMAL
- en: If you don’t want to install Jupyter, you can also use Google Colab without
    any installation. You can find and immediately start using Google Colab at [https://research.google.com/colaboratory](https://research.google.com/colaboratory).
  prefs: []
  type: TYPE_NORMAL
- en: 'Rather than a typical **Integrated Development Environment** (**IDE**) used
    for software development, a notebook interface allows you to write code in “cells”
    and then run them sequentially or re-run them. This is useful for research, as
    you can quickly experiment with data, doing exploratory data analysis and visualization
    in real time in your web browser. Here is what that looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The Bible is contained in the data file, so this will load the data and output
    a preview of the first five verses of the Bible.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.3 – pandas DataFrame of the Bible](img/B17105_02_003.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.3 – pandas DataFrame of the Bible
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s see in which verses `Eve` is mentioned in `genesis`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This will display a preview of the two verses in which `Eve` was mentioned:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.4 – Eve mentions in Genesis](img/B17105_02_004.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.4 – Eve mentions in Genesis
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s see how many times `Eve` is mentioned by name in the entire Bible:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Again, this will display a preview of verses:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.5 – Eve mentions in the entire Bible](img/B17105_02_005.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.5 – Eve mentions in the entire Bible
  prefs: []
  type: TYPE_NORMAL
- en: I have loaded the Bible dataset that I created and done a bit of wrangling and
    enrichment, and then I have created two additional cells that look for `Eve` in
    the book of Genesis and then in the entire Bible. If you look closely, you can
    see that I accidentally set `df` as a global variable, which is not good. I should
    fix that code. Oh well, next time. It works.
  prefs: []
  type: TYPE_NORMAL
- en: A notebook allows you to experiment with data and get really creative. There
    are pros and cons to notebooks, one of which I previously mentioned.
  prefs: []
  type: TYPE_NORMAL
- en: The pros are that you can very quickly and easily experiment on datasets, building
    out your code for loading, preprocessing, enrichment, and even **Machine Learning**
    (**ML**) model development. You can do a LOT with a notebook, very quickly. It
    is my favorite tool for initial exploration and development.
  prefs: []
  type: TYPE_NORMAL
- en: The cons are that notebook code has a deserved reputation for being quick and
    dirty code, not something that really belongs in production. Another problem is
    that notebooks can get disorganized, with notebooks on our laptops and Jupyter
    servers (SageMaker, Kubeflow, and so on), so things can quickly get out of hand
    and confusing.
  prefs: []
  type: TYPE_NORMAL
- en: I recommend using them to explore data and get innovative, but once you have
    something that works well, take that code into an IDE and build it out properly.
    My preferred IDE is currently Visual Studio Code but use whatever you are comfortable
    with. IDEs will be defined in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: You can download Visual Studio Code at [https://code.visualstudio.com/download](https://code.visualstudio.com/download).
  prefs: []
  type: TYPE_NORMAL
- en: IDEs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An IDE is a piece of software that is used for writing code. Examples of IDEs
    are Visual Studio Code, Visual Studio, PyCharm, IntelliJ, and many more. There
    are many different languages, and they often support multiple programming languages.
    Try a few and use whatever is most comfortable. If it slows you down too much
    for too long, it’s not the right one. However, there is typically a bit of a learning
    curve with any modern IDE, so be patient with yourself and with the software.
    If you want to learn more about available IDEs, just google `popular IDEs`. When
    getting started, I recommend setting some time aside to really learn how to use
    your chosen IDE. Watch videos and read the documentation. I typically do this
    every few years, but absolutely at the beginning.
  prefs: []
  type: TYPE_NORMAL
- en: Network datasets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can’t do network analysis without data. You either need to create data,
    or you need to go find some. Creating network datasets can be easier, simpler,
    and less manual than creating other types of datasets (for instance, ML training
    data), and it can be a good way to build domain knowledge quickly. Our own interests
    and curiosities can be more enjoyable to investigate than using someone else’s
    dataset. But so that you know, there are network datasets out there that you can
    start with while you get comfortable with the network analysis toolset:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.6 – Google search: network science datasets](img/B17105_02_006.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.6 – Google search: network science datasets'
  prefs: []
  type: TYPE_NORMAL
- en: All of them look a bit neglected and basic, other than the top link. They appear
    not to have been updated in several years.
  prefs: []
  type: TYPE_NORMAL
- en: Searching for social network analysis datasets gives slightly more interesting-looking
    datasets, which makes sense, as social network analysis is older than network
    science. However, the top link is the same. If you want some pre-made data, take
    a look at the Stanford website as well as `data.world`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.7 – Google search: social network analysis datasets](img/B17105_02_007.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.7 – Google search: social network analysis datasets'
  prefs: []
  type: TYPE_NORMAL
- en: Kaggle datasets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Kaggle is another decent place to look for data for just about anything. Kaggle
    is occasionally given unfair treatment by some people, who snub their noses at
    those who use Kaggle datasets because the data isn’t dirty like in the real world,
    but there is little difference between Kaggle data and the preceding datasets.
    They have all been scrubbed clean and are ready for you to practice with ML or
    network analysis tools. There are so many interesting datasets and problems to
    solve on Kaggle, and it is a great place to learn and build confidence. Use what
    helps you.
  prefs: []
  type: TYPE_NORMAL
- en: NetworkX and scikit-network graph generators
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this book, I will explain how to use the Python libraries *NetworkX* and
    *scikit-network*. I use NetworkX for graph construction and scikit-network for
    visualization. I do that because scikit-network has no real network analysis capabilities,
    but it renders network visualizations in **Scalable Vector Graphics** (**SVG**),
    which are much faster and bettee-looking than NetworkX visualizations. Both of
    these libraries also contain generators for several good practice networks. If
    you use them, you won’t get familiar with how to create a network from scratch,
    but it’s an OK place to start if you just want to experiment with a pre-built
    network:'
  prefs: []
  type: TYPE_NORMAL
- en: 'NetworkX: [https://networkx.org/documentation/stable/reference/generators.html](https://networkx.org/documentation/stable/reference/generators.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'scikit-network: [https://scikit-network.readthedocs.io/en/latest/tutorials/data/toy_graphs.html](https://scikit-network.readthedocs.io/en/latest/tutorials/data/toy_graphs.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: My recommendation is that you should just ignore the scikit-network loaders
    and get familiar with creating networks using NetworkX. It is just far superior,
    in my opinion. At this time, scikit-network is in no way a replacement for NetworkX,
    except for visualization.
  prefs: []
  type: TYPE_NORMAL
- en: Creating your own datasets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this book, I am going to show you how you can create your own datasets.
    Personally, I feel that this is the best approach, and this is what I do practically
    every time. Usually, I get an idea, write it on my whiteboard or in a notebook,
    figure out how to get the data, and then get to work. This typically takes a few
    days, and I’ll usually use an approach like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Come up with an idea.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run to a whiteboard or notebook and write it down.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go sit outside with a notebook and daydream about how I can get the data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set up some web scrapers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download the data after a day or two of scraping.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Extract entities from sentences and build an edge list dataframe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Construct the network.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Dive into network analysis.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Visualize the things that seem interesting.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Play with ego graphs to look into ego networks for additional perspective.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This is definitely a process, and it seems like a lot of steps, but over time,
    it all blends together. You have an idea, get data, do preprocessing, and then
    analyze and use the data. In a way, that isn’t very different from other data
    science workflows.
  prefs: []
  type: TYPE_NORMAL
- en: In this book, I will explain how to take raw data and convert it into network
    data.
  prefs: []
  type: TYPE_NORMAL
- en: There are lots of options for where you can get network data. None of them are
    wrong. Some of them just skip steps and make things easier so that you can practice
    with tools and techniques. That is perfectly fine. However, you should aim to
    become self-sufficient and comfortable working with dirty data. Data is really
    never clean, even if someone seems to have done a lot of cleanup activity. There’s
    usually more to do, even in my own datasets from my own GitHub. Text is messy.
    You will need to get comfortable playing in the dirt. For me, that is my favorite
    part—taking gnarly text data and converting it into a beautiful and useful network.
    I love it.
  prefs: []
  type: TYPE_NORMAL
- en: So, get familiar with everything we’ve talked about and go explore. Maybe even
    consider making the first network data repository that somehow succeeds in bringing
    everything together if you are feeling really ambitious.
  prefs: []
  type: TYPE_NORMAL
- en: NetworkX and articles
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Another thing I have found useful for learning about network science is the
    article links that are posted directly on the NetworkX documentation website.
    When they describe their functions, they typically provide a link to an article
    about the technique that was used to build the function. Here is an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.8 – NetworkX documentation: k_core algorithm](img/B17105_02_008.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.8 – NetworkX documentation: k_core algorithm'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you go to the NetworkX page for `k_core`, you can see clear documentation
    about the function, parameters, what it returns, and some notes. This isn’t even
    the best part. The best part is buried a little deeper. Scroll down, and you will
    often see something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.9 – NetworkX documentation: k-core article reference](img/B17105_02_009.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.9 – NetworkX documentation: k-core article reference'
  prefs: []
  type: TYPE_NORMAL
- en: Nice! There is an arXiv link!
  prefs: []
  type: TYPE_NORMAL
- en: It is so useful to be able to read about the research that led to `k_core`.
    It is also somewhat of a relief, to me personally, to find out that so much stuff
    is actually quite old, for instance, what I mentioned in terms of **Natural Language
    Processing** (**NLP**) history. We often hear that it is impossible to keep up
    with data science because things move so fast. That is only true if you are distracted
    by every shiny new thing. Focus on what you are trying to do, research ways to
    do what you want to do, and then build it. You shouldn’t only use newer techniques.
    New does not always, or even usually, mean better.
  prefs: []
  type: TYPE_NORMAL
- en: In the case of k_core, I was looking for a way to quickly throw away all nodes
    with one edge. In my first networks, I would write way too many lines of code
    to do that, trip over a list comprehension, or just write some nasty code that
    worked. However, I could have just done `nx.k_core(G, 2)`. That’s it. Problem
    solved.
  prefs: []
  type: TYPE_NORMAL
- en: So, read the documentation. Look for academic journal links if you want to learn
    more, and then build and build and build until you understand the technique.
  prefs: []
  type: TYPE_NORMAL
- en: You will find the same kinds of links for centralities or other topics on NetworkX.
    Just go explore. It’s good reading and inspiring stuff.
  prefs: []
  type: TYPE_NORMAL
- en: Very nice! This sets us up to learn more about the origins and use of centralities
    in network analysis.
  prefs: []
  type: TYPE_NORMAL
- en: Common network use cases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As I did in [*Chapter 1*](B17105_01.xhtml#_idTextAnchor014), *Introducing Natural
    Language Processing*, I will now also explain some of my own favorite use cases
    for working with network data. I mentioned at the beginning of the chapter that
    there are many different kinds of networks, but I personally prefer working with
    social networks and what I call *dataflow networks*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some of the uses I have for working with network data:'
  prefs: []
  type: TYPE_NORMAL
- en: Mapping production dataflows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mapping community interactions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mapping literary social networks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mapping historical social networks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mapping language
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mapping dark networks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I will start with dataflow networks, as that was the first use case I realized
    for network data and something that revolutionized how I work.
  prefs: []
  type: TYPE_NORMAL
- en: Mapping production dataflow
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As mentioned, this was the first idea that I had for my own use of network data.
    I have worked in software for over 20 years, and I have spent a significant amount
    of time “dissecting” production code. This isn’t for fun. This has serious use.
    In the past, I had been asked to “uplift” old production systems, which means
    taking an old production system, figuring out everything that runs on it (code,
    databases, and file reads/writes), and migrating everything over to a new server
    so that the old server could be retired. We call this the *de-risking* of production
    systems. In the end, this results in a lightning-fast new production system because
    this is usually old code placed on very new infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: 'In my old way, I would take an inventory of production systems by starting
    with `cron`, the orchestration of how things run on a server. Starting at `cron`
    allows you to get to the root of a process and see what scripts call additional
    scripts. Often, if you map this out, you’ll end up with something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 'cron:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`script_a.php >` `script_a.log`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`script_b.php >` `script_b.log`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`script_c.php >` `script_c.log`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`script_c.php` `uses script_d.php`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`script_c.php` `uses script_e.php`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'And on, and on, and on. That’s not what `cron` actually looks like, but that
    shows the direction of script calls and data writes. So, in the previous example,
    the code does the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`script_a.php` writes to the `script_a.log` logfile'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`script_b.php` writes to the `script_b.log` logfile'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`script_c.php` writes to the `script_c.log` logfile'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`script_c.php` launches another script, `script_d.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`script_c.php` launches another script, `script_e.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'I used to do this by hand, and it was very tedious and exact work, as it can
    be catastrophic if you miss anything because it won’t be migrated or tested on
    the new server, and that is a painful thing to discover on migration day. On a
    server with a couple of hundred scripts, it would take a few weeks to even build
    a script map, and a full map of the entire input and output of the entire server
    would take much longer than that. From the preceding example, a script map would
    look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 'cron:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`script_a.php`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`script_b.php`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`script_c.php`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`script_d.php`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`script_e.php`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: In a production environment, this can go very deep and be very nested. In 2017,
    I found another way to do this, using networks, and the script map would build
    itself using the nodes and edges constructed in the graph. This could be an exceptionally
    long discussion that I could write an entire book on – and I have thought about
    doing just that – but to save time, the new method takes roughly 10% of the amount
    of time as the old way and catches everything, as long as I am thorough in my
    source code analysis. I also do not have to maintain a mental image of what is
    going on in the server, as I have a graph visualization that I can visually inspect
    and a network that I can interrogate. Working 10 times faster, I can uplift many
    more servers in the same amount of time it used to take me to do a single one.
    I can also use this to quickly troubleshoot production problems once the network
    is built. Problems that used to take days to troubleshoot, now I can often do
    in minutes.
  prefs: []
  type: TYPE_NORMAL
- en: Another nice side effect is that if you want to re-engineer software and you
    use this approach, you can understand the inputs and outputs of everything on
    a server, and you can use that to find inefficiencies and come up with ideas on
    how to better build the software on a new platform. I have also done this, replacing
    SQL Server databases with Spark dataflows, and very successfully.
  prefs: []
  type: TYPE_NORMAL
- en: Mapping community interactions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: These days, I no longer uplift production systems and have moved on to more
    exciting work, so everything else I am going to describe comes from my own independent
    research, not from things I do at work. For my own research, I do a lot of social
    media scraping and analysis, as it gives me a way to understand the world around
    me. One thing I like to understand is how people in certain groups interact with
    each other and with others outside of their group.
  prefs: []
  type: TYPE_NORMAL
- en: For instance, I scrape dozens of data science-related Twitter accounts so that
    I can keep an eye on the latest occurrences in the data science and scientific
    communities. After initially scraping a few accounts, I extract user mentions
    and map all the interactions between them. This helps me find additional users
    that are worth scraping and add them to my scrapers, and then I repeat extracting
    user mentions and map all the interactions between them as well. I do this over
    and over and over, constantly building out social networks for anything I am interested
    in—data science, natural science, art, photography, and even K-pop. I find analyzing
    communities intriguing, and it’s one of my favorite things to do. This is one
    topic I will spend a great deal of time covering in this book because I have seen
    how useful this can be to research, and I have even used the results of this scraping
    to build highly customized ML training data so that I can automatically find even
    more of what I want! The results are a beautiful combination of NLP, social network
    analysis, and ML!
  prefs: []
  type: TYPE_NORMAL
- en: This is also useful for keeping an eye on trends and topics of discussion within
    communities. For instance, if there is a big data science conference coming up,
    there will suddenly be a lot of chatter on the topic, probably sharing similar
    hashtags. These hashtags can also be found by creating user-hashtag networks rather
    than user-user networks. This is excellent for watching trends come and go, especially
    if you add a time element to your network data.
  prefs: []
  type: TYPE_NORMAL
- en: Mapping literary social networks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another one of my favorite uses of networks is to take a literary piece, such
    as *Alice’s Adventures in Wonderland* or *Animal Farm,* and map out the social
    network of the book. I will discuss this in detail as part of this book. It is
    a bit more involved than what I do for social media, as the previous technique
    can be done with regex alone, and this technique requires NLP part-of-speech tagging
    or named-entity recognition. However, as a result, you end up with a social network
    of any piece of text that you can visually inspect to gain a better understanding
    of how characters interact.
  prefs: []
  type: TYPE_NORMAL
- en: Mapping historical social networks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can also use NLP (part-of-speech tagging and named-entity recognition) approaches
    to map out historical social networks, as long as you have text about an event
    or some kind of data that shows relationships between people. For instance, it
    is simple to build the social network of the entire Bible by doing what I described
    with literary social networks. There is quite a lot of cleanup involved, but the
    results are breathtaking if you are thorough. I would love to see researchers
    do this with other historical texts, as it may give us additional insights that
    we have never discovered before.
  prefs: []
  type: TYPE_NORMAL
- en: Mapping language
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Another cool use for networks is mapping language itself. This is something
    I discovered while playing around with the book *Pride and Prejudice* by Jane
    Austin. I wanted to see what would happen if I built a network of the interactions
    between every word in every sentence of her book. For instance, let''s take the
    following sentence from *Pride* *and Prejudice*:'
  prefs: []
  type: TYPE_NORMAL
- en: It is a truth universally acknowledged, that a single man in possession of a
    good fortune, must be in want of a wife.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s map this out using word sequence for setting up word relationships. If
    a word follows another word, then we say that there is a relationship between
    the two. Think of a relationship as an invisible line connecting two things. For
    the previous quote, we could map it out as such:'
  prefs: []
  type: TYPE_NORMAL
- en: it -> is
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: is -> a
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a -> truth
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: truth -> universally
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: universally -> acknowledged
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: acknowledged -> that
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: that -> a
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a -> single
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: single -> man
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: man -> in
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: in -> possession
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: possession -> of
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: of -> a
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a -> good
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: good -> fortune
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fortune -> must
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: must -> be
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: be -> in
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: in -> want
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: want -> of
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: of -> a
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a -> wife
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In networks, we call the connections between nodes **edges**. **Nodes** are
    the things that we are connecting. In this case, this is a word network, so words
    are nodes, and the connections between words are called edges. You can think of
    edges as lines between two things.
  prefs: []
  type: TYPE_NORMAL
- en: In the quoted sentence, you may notice that `a` has an edge with `truth`, `single`,
    `good`, and `wife`. `in` also has two edges, with `possession` and `want`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is another example using a song by the Smashing Pumpkins:'
  prefs: []
  type: TYPE_NORMAL
- en: Despite all my rage, I am still just a rat in a cage.
  prefs: []
  type: TYPE_NORMAL
- en: 'You could also map it out as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: despite -> all
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: all -> my
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: my -> rage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: rage -> i
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: i -> am
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: am -> still
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: still -> just
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: just -> a
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a -> rat
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: rat -> in
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: in -> a
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a -> cage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The letter `a` has an edge with both `rat` and `cage`.
  prefs: []
  type: TYPE_NORMAL
- en: If you do this with an entire book, you end up with a super-dense network, and
    it is nearly worthless to visualize it; however, analyzing the network is not
    worthless. If you look at the outer nodes of *Pride and Prejudice*, you will find
    Jane Austin’s least used words, which often make an amazing vocabulary list. If
    you look at the core words, they are typically bridge words, such as “a,” “the,”
    and “of.”
  prefs: []
  type: TYPE_NORMAL
- en: I also used this same technique for some research to see whether I could visually
    tell the difference between AI-generated text and human-generated text. Guess
    what? You can. If you use ML to generate text, it will choose the next word not
    because it is the most fitting but because it has the highest probability of being
    used. That’s great when you are trying to predict the next word in the sentence
    “Jack and Jill went up the ______”, but that is not great when you actually want
    to use it to create something truly original. We, humans, are more nuanced. If
    I wanted to transform that sentence into something really morbid, I could complete
    the sentence with the word “chimney.” I really doubt ML would choose chimney.
  prefs: []
  type: TYPE_NORMAL
- en: And visually, the networks look different between AI-generated text and human-generated
    text. When I did this back in 2019, the AI-generated network looked really jagged
    on the outside, with a much denser core, because it would choose higher-probability
    words. With humans, we are more nuanced, and the outer edge appeared softer. I
    was able to tell the difference between the two visually. Would more recent AI
    appear different? I encourage you to try this out if it interests you.
  prefs: []
  type: TYPE_NORMAL
- en: Mapping dark networks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This last one is a bit dark. Sometimes, when bad things happen in the world,
    I want to know what groups of people are planning. Dark networks are social networks
    of people who wish to do others harm, but there are different kinds of dark networks
    (related to crime, terror, hate, drugs, and so on). Even dangerous people will
    rally around certain social media hashtags, so they occasionally hint at what
    is about to happen. I will not go into great detail on the level of intelligence
    that can be gathered, but you can do what I discussed under *Mapping community
    interactions* and use that to keep an eye on things or find other people of interest.
    You can also use that to report social media posts that violate community guidelines
    and even escalate to law enforcement if you see something specific. Just know
    that if you do this kind of **Open Source Intelligence** (**OSINT**) gathering,
    it can have a nasty effect on your mood and mental health, so tread lightly. However,
    it can also be excellent research.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: When I am using this for OSINT, I typically start with a few people or things
    of interest and then gradually map out the social network that exists around them.
    However, this is not limited to dark networks. You could use this same technique
    for offense, defense, or just to follow your own curiosity. It is one useful way
    to study the interactions between people and organizations.
  prefs: []
  type: TYPE_NORMAL
- en: There are many uses for OSINT, and entire books have been written on the subject.
    However, the goal of OSINT is to use publicly available data to better understand
    or monitor something. For instance, you could use OSINT to research a company
    that you were interviewing at. Who is the owner? Who is interviewing me? Has the
    company been in the news? Was it a positive or negative story? What is the general
    consensus of the public about this company? Is it a legitimate company? What are
    ex-employees saying about it? What do they say on social media? Are most comments
    positive, negative, or neutral? There is so much you can learn about anything
    with the right set of questions and access to the internet.
  prefs: []
  type: TYPE_NORMAL
- en: Market research
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s consider a hypothetical situation: you have created a new product and
    would like to identify people who may find your product useful. I have done exactly
    this for my own needs.'
  prefs: []
  type: TYPE_NORMAL
- en: I have used social network analysis to build a map of people who are part of
    a community and have used the results for market research. For one topic of interest,
    I can see thousands of researchers from around the world, and if I were to create
    a product for that community, it would take little work to develop an outreach
    campaign that would effectively drive interest in my product. For this, I only
    used Twitter data and was able to identify thousands of people I may want to approach
    after only a few days of scraping and analysis.
  prefs: []
  type: TYPE_NORMAL
- en: Finding specific content
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This part is kind of a chicken-and-egg scenario. You need social media text
    in order to extract the social network data that exists in the text, and then
    you can use the social network to identify other accounts to scrape, further improving
    your data feeds. This is an iterative process. Identify, scrape, analyze, identify,
    scrape, analyze, and so on. You can further improve the analysis part by building
    NLP classifiers off the text you have scraped. Social network analysis will help
    you find important accounts, but your NLP classifiers will help you filter the
    noise to get relevant and focused content.
  prefs: []
  type: TYPE_NORMAL
- en: Creating ML training data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As mentioned, you can use the data feeds you scrape to create NLP classifiers,
    and you can use those classifiers to help you filter out noise, resulting in more
    focused content. You can then use that focused content to build even better classifiers.
    However, you must first create your initial classifiers, and the feeds that you
    create using a combination of NLP and network analysis will give you the rich,
    filtered data that you need to create useful training data. There is a process
    to this. It is time-consuming and takes a lot of work. I will explain this in
    *Chapter 14*, *Networks and Supervised* *Machine Learning*.
  prefs: []
  type: TYPE_NORMAL
- en: Specific and focused content feeds into classification training data, and trained
    classifiers will help identify additional useful content.
  prefs: []
  type: TYPE_NORMAL
- en: Advanced network use cases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In [*Chapter 1*](B17105_01.xhtml#_idTextAnchor014), *Introducing Natural Language
    Processing*, I specified several advanced use cases for NLP, such as language
    translation and text generation. However, while thinking about network analysis,
    my mind immediately asked, what would an advanced network use case even mean?
    This is all pretty advanced stuff. With NLP, you have simple tasks, such as tokenization,
    lemmatization, and simple sentiment analysis (positive or negative, hate speech
    or not hate speech), and you have advanced tasks. With networks, I can think of
    three potentially advanced use cases:'
  prefs: []
  type: TYPE_NORMAL
- en: Graph ML
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Knowledge graphs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Recommendation systems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: However, I don’t think of any of them as all that advanced. I think of them
    as just having different implementations from other things I have mentioned. Furthermore,
    just because something is more technically challenging does not make it advanced
    or more important. In fact, if it is more difficult and returns less useful results,
    that’s not ideal. That’s a time sink.
  prefs: []
  type: TYPE_NORMAL
- en: Graph ML
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'I have worked on graph ML projects and have primarily found that there are
    two approaches: use graph measures (centralities, local clustering coefficients,
    and so on) as features in training data or feed graph representation data directly
    to ML and let it figure things out. Graph metadata can be a powerful enrichment
    for your training data as it can give an additional perspective for a model to
    hook into, so I think this is really promising.'
  prefs: []
  type: TYPE_NORMAL
- en: However, in the past, when I have seen people attempting to use graph data directly
    in ML, often the graph knowledge was absent or weak. I wouldn’t recommend this
    approach until you are comfortable doing network analysis and ML separately. In
    ML, input data is easily as important (or more) than the model itself, so knowledge
    of networks should be present, but that is not always the case. Domain knowledge
    is important in data science. However, it is still extremely interesting stuff,
    so definitely check it out.
  prefs: []
  type: TYPE_NORMAL
- en: Recommendation systems
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Recommendation systems** are interesting, though I haven’t spent much time
    researching them; one concept is that if two people like similar things, they
    may also like other things that neither yet have in common. For instance, if you
    and I both like the bands Soundgarden, Smashing Pumpkins, and Nirvana, and I like
    The Breeders, and you like Stone Temple Pilots, it is quite likely that I’ll also
    like Stone Temple Pilots and you’ll also like The Breeders. If you want to explore
    recommendation systems, I encourage you to dive into the research. It’s just not
    one of my interests, as I primarily use networks for social network analysis,
    market research, and OSINT.'
  prefs: []
  type: TYPE_NORMAL
- en: However, there are downsides to recommendation systems that I would like to
    point out. These systems recommend things that we would probably like, but the
    results aren’t usually all that unexpected. Musically, it makes sense that I would
    probably like Stone Temple Pilots and that you’d like The Breeders, but I am personally
    more excited when I fall in love with something completely unexpected. I am hopeful
    that in the future, our recommendation systems will recommend food, music, and
    TV shows to us that we would not discover otherwise. I don’t want to live my life
    only experiencing similar things. I want the unexpected, as well.
  prefs: []
  type: TYPE_NORMAL
- en: Also, when we are only given things that we expect, we often end up reinforcing
    not-so-great things. For instance, if social media companies only show us stories
    that they think that we would like to see or that we are likely to engage with,
    we end up in an echo chamber, and this causes us to primarily associate with people
    who are just like us, who talk about the same things, and who agree upon the same
    things. That’s neither educational nor constructive. That causes polarization
    and can even lead to violence. It becomes a dangerous problem when people will
    only associate with those who are just like them and when they begin to demonize
    others who disagree with them, yet this happens all the time, and we are susceptible.
  prefs: []
  type: TYPE_NORMAL
- en: I’ll leave it up to you to decide what is a common versus advanced use of networks.
    In my mind, they’re all advanced, the implementation might just be different.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with networks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you want to jump into your first original network analysis project, you
    need to first think up something that you are curious about. With social network
    analysis, you are often looking to build a sociogram, a visual map of how humans
    interact. So, for your first network project, you could ask something such as
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: How do the characters from <book> interact with each other?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do the different animals in the book *Animal Farm* only interact with the same
    type of animals? Do humans only interact with certain types of animals, or do
    they interact with all types of animals?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What does the Twitterverse of my own town look like?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What does a network visualization of ingredients to meals look like? How does
    this differ for different regions in the world? What does a network visualization
    of ingredients to region look like?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What does the Twitter social network that exists around a certain politician
    look like? What does the friend map look like? What does the enemy map look like?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If I build an example dark network, what would be the optimal way to shatter
    it into pieces irreparably so that it would never be able to re-form if under
    constant attack?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If I build a network of my own infrastructure, and if I were to identify the
    structural weaknesses that could cause it to shatter into pieces if exploited,
    how could I best protect it now to prevent those types of attacks from disrupting
    the network?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: And these are just a few that I thought up in the last few minutes. The more
    you experiment and play with networks, the easier it will become for you to come
    up with your own research ideas, so just start with something simple and then
    become more ambitious over time. Some of these probably sound pretty complicated,
    but as long as you can get the data that you need, the network construction, analysis,
    and visualization are really not too difficult and have a lot of overlap.
  prefs: []
  type: TYPE_NORMAL
- en: In short, you need to find something that you are interested in and identify
    a relationship between those things. This could be as simple as who knows who,
    who likes who, who trusts who, who hates who, who works with who, what ingredients
    go into what meals, what infrastructure communicates with other infrastructure,
    what websites link to other websites, or what database tables can join against
    other database tables.
  prefs: []
  type: TYPE_NORMAL
- en: 'For my own independent research, I typically use Twitter data, as in my opinion,
    it is an NLP and network goldmine. And much of my work follows a repeatable process:'
  prefs: []
  type: TYPE_NORMAL
- en: Come up with a research topic.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Find a few Twitter accounts that are related to that topic.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scrape the accounts.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Analyze the scraped data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Extract network data.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Extract additional users to scrape.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Repeat *steps 3 and 4* as far as you want to go.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As mentioned, it’s repeatable. I’ll explain how to get started with scraping
    in [*Chapter 6*](B17105_06.xhtml#_idTextAnchor228), *Graph Construction and Cleaning*,
    and [*Chapter 7*](B17105_07.xhtml#_idTextAnchor261), *Whole Network Analysis*.
    Once you learn how to get data via scraping and **Application Programming Interfaces**
    (**APIs**), you will have access to more data than you can ever use. And for social
    network analysis, you will be able to follow the preceding example. Go slowly,
    and it will eventually become natural.
  prefs: []
  type: TYPE_NORMAL
- en: Example – K-pop implementation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'My daughters are into K-pop music. Frequently, during dinner, I’d hear about
    groups such as BLACKPINK, TWICE, and BTS, and I had no idea what my girls were
    talking about. Then, one day, I was trying to think up a topic of research for
    my LinkedIn challenge *#100daysofnetworks*, and I thought I should do something
    with K-pop, as I could relate with my daughters if I knew a bit more about it,
    and it’d give me a way to show my daughters a little more about data science.
    So, I came up with a process to turn this idea into a reality:'
  prefs: []
  type: TYPE_NORMAL
- en: I decided that I wanted to do some research into what the social network looked
    like around many of the most famous K-pop artists, and this should include music
    hubs and fan clubs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: I did about 30 minutes of Twitter lookups, hoping to identify a couple of dozen
    K-pop groups, music hubs, and fan clubs. I found about 30 of them and wrote them
    in a notebook.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: I added these 30 accounts to my Twitter scraper and then combined the data into
    a feed, `kpop.csv`. This makes it much easier for me to do all of my network data
    extraction and then analysis, with everything in one file. My scrapers run 24/7/365,
    so I always have fresh data available to explore.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After getting a few days’ worths of scraped data, I analyzed the feed, extracted
    network data (user mentions and hashtags), and identified a couple dozen more
    accounts to scrape.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: I repeated *steps 3 and 4* for about a month, and I now have a nice Twitter-centric
    social network of K-pop artists, music hubs, and fan clubs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: And now that I am currently actively scraping 97 K-pop-related accounts, I have
    fresh new media all the time for my daughters to enjoy, and I have interesting
    network data to use for further improving my skill.
  prefs: []
  type: TYPE_NORMAL
- en: So, for your own network research, find something that you are interested in
    and then get to work. Choose something that you are interested in. Research should
    not be boring. This book will show you how to take your research curiosity and
    turn it into results. We will go into graph construction, analysis, and visualization
    after we get through the next couple of chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We covered a lot of material in this short chapter. We discussed the confusion
    around the word *network*, went into the history and origins of graph theory,
    social network analysis, and network science, discussed resources for learning
    and practice, discussed some of my favorite network use cases, and finished by
    explaining how you can start formulating your own network research.
  prefs: []
  type: TYPE_NORMAL
- en: I hope this chapter gave you a rough idea of what all of this network stuff
    is. I know I did not go into great detail on the origins, and I mostly talked
    about social network analysis, but that is because that is my area of interest.
    I hope you now understand what networks can be used for, and I hope you understand
    that I have only scratched the surface. My goal was to ignite your curiosity.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, I will explain the tools used for NLP. We are going to
    gradually move past theory and into data science.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Barabási, A.L. (2014). *Linked*. Basic Books.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kurzweil, R. (2012). *How to Create a Mind*. Penguin Books.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Newman, M. (2018). *Networks*. Oxford University Press.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
