- en: '3'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Useful Python Libraries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, I’m going to introduce several of the Python libraries we will
    be using in this book. I will describe what they are and how to install them,
    and give examples of a few useful things you can do with them. You do not have
    to memorize all of the capabilities of every Python library that you use, or thoroughly
    understand the internals of every single function that you use. It is important
    that you understand what libraries are available, what overall capabilities they
    have, and what critically important timesavers are in the library (this will keep
    you coming back for more). Everyone’s use case is different, and there is no way
    to memorize everything. I recommend that you internalize this point as quickly
    as possible, and learn what you need to when you need it. Learn about the internals
    in as much depth as you need.
  prefs: []
  type: TYPE_NORMAL
- en: 'To keep this organized, I am separating software libraries by category. Here
    are the libraries we will discuss:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Python Library** | **Category** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `pandas` | Data Analysis and Processing |'
  prefs: []
  type: TYPE_TB
- en: '| `NumPy` | Data Analysis and Processing |'
  prefs: []
  type: TYPE_TB
- en: '| `Matplotlib` | Data Visualization |'
  prefs: []
  type: TYPE_TB
- en: '| `Seaborn` | Data Visualization |'
  prefs: []
  type: TYPE_TB
- en: '| `Plotly` | Data Visualization |'
  prefs: []
  type: TYPE_TB
- en: '| `NLTK` | Natural Language Processing |'
  prefs: []
  type: TYPE_TB
- en: '| `spaCy` | Natural Language Processing |'
  prefs: []
  type: TYPE_TB
- en: '| `NetworkX` | Network Analysis and Visualization |'
  prefs: []
  type: TYPE_TB
- en: '| `Scikit-Network` | Network Visualization (Better) |'
  prefs: []
  type: TYPE_TB
- en: '| `scikit-learn` | Machine Learning |'
  prefs: []
  type: TYPE_TB
- en: '| `Karate Club` | Machine Learning (Graph) |'
  prefs: []
  type: TYPE_TB
- en: '| `spaCy (Repeat)` | Machine Learning (NLP) |'
  prefs: []
  type: TYPE_TB
- en: Figure 3.1 – A table of Python libraries for NLP
  prefs: []
  type: TYPE_NORMAL
- en: It’s useful to break the libraries down this way, as it is logical. We need
    to first collect, process, and analyze data before we should do anything else.
    We should visualize the data as we analyze it. Certain libraries specialize in
    NLP. Other libraries specialize in network analysis and visualization. Finally,
    there are different libraries that are useful for different kinds of ML, and even
    non-ML-focused libraries often have ML capabilities, such as `spaCy`.
  prefs: []
  type: TYPE_NORMAL
- en: I am going to keep this very high level, as we will actually be using these
    libraries in upcoming chapters. This chapter covers the “what” and “why” questions
    about given libraries. Other chapters will cover how they may be used.
  prefs: []
  type: TYPE_NORMAL
- en: 'One final point before moving on: you do not need to memorize every aspect
    of any of these Python libraries. In software development and data science, skills
    are acquired piece by piece. Learn what is useful to you now, then if a library
    proves to be useful, learn more. Don’t feel guilty for only knowing small pieces.
    Knowledge is accumulated over time, not all at once.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Our sections for this chapter will be the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Using notebooks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data analysis and processing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data visualization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NLP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Network analysis and visualization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ML
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter will deal with a lot of the resources we will be using throughout
    the book.
  prefs: []
  type: TYPE_NORMAL
- en: 'All of the code can be found in the GitHub repository: [https://github.com/PacktPublishing/Network-Science-with-Python.](https://github.com/PacktPublishing/Network-Science-with-Python)'
  prefs: []
  type: TYPE_NORMAL
- en: Using notebooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is often easiest – and very useful – to do data analysis and prototyping
    using what we often affectionately just call **notebooks**. **Jupyter** defines
    the Jupyter notebook as a web-based interactive computing platform. I like that
    simple definition. Notebooks are essentially a series of “cells” that can contain
    code or text, which can be run individually or sequentially. This allows you to
    write code in a web browser, run the code while in the web browser, and see immediate
    results. For data analysis or experimentation, this immediate feedback is useful.
  prefs: []
  type: TYPE_NORMAL
- en: In this book, we use Jupyter Notebook. I recommend downloading and installing
    it from the Anaconda website. You can do so at [https://www.anaconda.com](https://www.anaconda.com).
  prefs: []
  type: TYPE_NORMAL
- en: In Jupyter, you can run code and see the immediate results of that code, whether
    the output be text, numeric, or a data visualization. You will see a lot of notebook
    use in this book, so I will keep this short.
  prefs: []
  type: TYPE_NORMAL
- en: '**Google Colab** is another option for working with notebooks, and you don’t
    have to install anything to use it. This can be an even easier way to work with
    notebooks, but it has its advantages and disadvantages. I recommend that you learn
    how to use both and choose the one that you like best, or that allows you to work
    well with others.'
  prefs: []
  type: TYPE_NORMAL
- en: You can check out Google Colab at [https://colab.research.google.com](https://colab.research.google.com).
  prefs: []
  type: TYPE_NORMAL
- en: Next, let’s explore the libraries we’ll use for data analysis.
  prefs: []
  type: TYPE_NORMAL
- en: Data analysis and processing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a number of useful libraries for working with data, and you will want
    to use different libraries and techniques at different points of the data life
    cycle. For instance, in working with data, it is often useful to start with **Exploratory
    Data Analysis** (**EDA**). Later on, you will want to do cleanup, wrangling, various
    transformations for preprocessing, and so on. Here are some of the available Python
    libraries and their uses.
  prefs: []
  type: TYPE_NORMAL
- en: pandas
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`pandas` is easily one of the most important libraries to use when doing anything
    with data in Python. Put simply, if you work with data in Python, you should know
    about `pandas`, and you should probably be using it. You can use it for several
    different things when working with data, such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Reading data from an assortment of file types or from the internet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: EDA
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Extract, Transform,** **Load** (**ETL**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Simple and quick data visualizations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: And much, much, more
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If there is one Python library that I would recommend to everyone on this planet
    – not just data professionals – it is `pandas`. Being able to make short work
    of data analysis outside of spreadsheets is liberating and powerful.
  prefs: []
  type: TYPE_NORMAL
- en: Setup
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you’re working in Jupyter or Google Colab notebooks, it’s very likely that
    `pandas` is already installed and that you can just start using it. However, if
    you need to follow the steps, you can follow the official installation guide:
    [https://pandas.pydata.org/docs/getting_started/install.html](https://pandas.pydata.org/docs/getting_started/install.html).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once it is installed, or if you suspect it is already installed, simply run
    this statement in your favorite notebook:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: If Python doesn’t complain about the library not being installed, you are all
    set.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to see what version of `pandas` you are using, run this statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: I can see that I am running version 1.3.4.
  prefs: []
  type: TYPE_NORMAL
- en: Starter functionality
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Reading data is my preferred way to help people get started with `pandas`. After
    all, data work is pretty boring if you don’t have any data to play with. In `pandas`,
    you typically work with a DataFrame, which resembles a data table or spreadsheet.
    A `pandas` DataFrame is a data object consisting of rows and columns.
  prefs: []
  type: TYPE_NORMAL
- en: 'To read a CSV file into a `pandas` DataFrame, you would do something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The data that I want to use is in a subdirectory of the current directory called
    data, in a file called `fruit.csv`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once it’s read into a DataFrame, you can preview the data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This will show a preview of the first five rows of the DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.2 – Simple pandas DataFrame](img/B17105_03_002.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.2 – Simple pandas DataFrame
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also read other datasets into `pandas`. For instance, if you already
    have `scikit-learn` installed, you could do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'That gives us *Figure 3**.3*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.3 – pandas DataFrame of the iris dataset](img/B17105_03_003.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.3 – pandas DataFrame of the iris dataset
  prefs: []
  type: TYPE_NORMAL
- en: '`pandas` doesn’t only read from CSV files. It is quite versatile, and it is
    also less error-prone than other ways of loading CSV files. For instance, I often
    find that `pandas` will have no problem.'
  prefs: []
  type: TYPE_NORMAL
- en: What is Spark?
  prefs: []
  type: TYPE_NORMAL
- en: Spark is a technology that is often used for processing large amounts of data.
    Spark is very useful for “big data” workloads. At a certain point, large amounts
    of data can become too much for tools such as `pandas`, and it is useful to know
    more powerful tools, such as Spark.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some of the other `pandas` `read_*` functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '`pd.read_clipboard()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pd.read_excel()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pd.read_feather()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pd.read_fwf()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pd.read_gbq()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pd.read_hdf()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pd.read_html()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pd.read_json()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pd.read_orc()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pd.read_parquet()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pd.read_pickle()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pd.read_sas()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pd.read_spss()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pd.read_sql()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pd.read_sql_query()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pd.read_sql_table()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pd.read_stata()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pd.read_table()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pd.read_xml()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This looks like a lot, and I personally do not have all of these memorized.
    I typically only use a handful of these, such as `read_csv`, `read_json`, and
    `read_parquet`, but `read_html` is occasionally useful at a pinch as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'For me, EDA and simple visualizations are what got me hooked on `pandas`. For
    instance, if you wanted to draw a histogram, you could do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure 3.4 – Petal width histogram](img/B17105_03_004.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.4 – Petal width histogram
  prefs: []
  type: TYPE_NORMAL
- en: '`pandas` can do much more than what I’ve shown. There are countless blog posts
    and books on doing data analysis with `pandas`. Whole books have been written
    about using `pandas`. I encourage you to buy a few and learn as much about this
    library as you can. The more you learn about `pandas`, the better you will be
    at working with data.'
  prefs: []
  type: TYPE_NORMAL
- en: Documentation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can learn more about `pandas` by visiting this website: [https://pandas.pydata.org/docs/getting_started/overview.html](https://pandas.pydata.org/docs/getting_started/overview.html).'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use this book as a reference to get more comfortable working with `pandas`,
    but there are also several online guides that will give hands-on practice, such
    as this: [https://pandas.pydata.org/docs/getting_started/intro_tutorials/01_table_oriented.html](https://pandas.pydata.org/docs/getting_started/intro_tutorials/01_table_oriented.html).'
  prefs: []
  type: TYPE_NORMAL
- en: NumPy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`pandas` is excellent for doing data analysis against DataFrames, `NumPy` is
    more general-purpose and consists of a wide variety of mathematical functions
    and transformations.'
  prefs: []
  type: TYPE_NORMAL
- en: But what’s the difference between it and `pandas`? That’s actually a good question
    because both libraries are often used together. Where you see `pandas`, you will
    often also see `NumPy`. After several years of using both, the way things typically
    happen is I’ll try to do something in `pandas`, find out that it’s not possible,
    and then find out that it’s possible in `NumPy`. The two libraries work well together,
    and they meet different needs.
  prefs: []
  type: TYPE_NORMAL
- en: With `pandas`, it’s always exciting to read a CSV file for the first time and
    plot a histogram. With `NumPy`, there’s no real exciting moment. It’s just useful.
    It’s a powerful and versatile tool, and it will save you in a pinch, 9 times out
    of 10, when `pandas` doesn’t do what you need to do.
  prefs: []
  type: TYPE_NORMAL
- en: Setup
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As with `pandas`, if you are working from within a notebook environment, `NumPy`
    is probably already installed. However, if you need to follow the steps, you can
    follow the official installation guide: [https://numpy.org/install/](https://numpy.org/install/).'
  prefs: []
  type: TYPE_NORMAL
- en: Starter functionality
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you want to play around with `NumPy` to get a feel for what it can do, please
    check out one of their quickstart tutorials, such as [https://numpy.org/doc/stable/user/quickstart.html](https://numpy.org/doc/stable/user/quickstart.html).
    In the tutorial, they explain some basic operations such as generating random
    numbers, reshaping arrays, printing arrays, and more.
  prefs: []
  type: TYPE_NORMAL
- en: Documentation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can learn a lot more about `NumPy` at [https://numpy.org/doc/stable/](https://numpy.org/doc/stable/).
    In this book, we will rely on `NumPy` at a pinch, as I described previously, when
    `pandas` or another library is unable to do something that we need. Often, there
    is a simple solution in `NumPy`. So, keep an eye out for our use of `NumPy`, and
    learn what the process is doing.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s move on from analysis and processing to the libraries we’ll use for visualizing
    our data.
  prefs: []
  type: TYPE_NORMAL
- en: Data visualization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are several Python libraries that can be used for data visualizations.
    **Matplotlib** is a good place to start, but other libraries such as **Seaborn**
    can create more attractive visualizations, and **Plotly** can create interactive
    visualizations.
  prefs: []
  type: TYPE_NORMAL
- en: Matplotlib
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`Matplotlib` is a Python library for data visualization. That’s it. If you
    have data, `Matplotlib` can probably be used to visualize it. The library is integrated
    directly into `pandas`, so if you use `pandas`, you likely also use `Matplotlib`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`Matplotlib` has a very steep learning curve and is not intuitive at all. I
    consider it a necessary evil if you are learning about Python data science. No
    matter how much data visualization I do with `Matplotlib`, it never becomes easy,
    and I memorize very little. I say all of this not to badmouth `Matplotlib`, but
    so that you will not feel negativity toward yourself if you struggle with the
    library. We all struggle with the library.'
  prefs: []
  type: TYPE_NORMAL
- en: Setup
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As with `pandas` and `NumPy`, if you are working from within a notebook environment,
    `Matplotlib` is probably already installed. However, if you need to follow the
    steps, you can follow the official installation guide: [https://matplotlib.org/stable/users/installing/](https://matplotlib.org/stable/users/installing/).'
  prefs: []
  type: TYPE_NORMAL
- en: Starter functionality
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you use `pandas` to do data visualization, you are already using `Matplotlib`.
    For instance, in the `pandas` discussion, we used this code to plot a histogram:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Simple visualizations such as bar charts can easily be done. They’re most easily
    done directly in `pandas`.
  prefs: []
  type: TYPE_NORMAL
- en: 'For instance, you could create a horizontal bar chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This would render a very simple data visualization.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.5 – Petal width horizontal bar chart](img/B17105_03_005.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.5 – Petal width horizontal bar chart
  prefs: []
  type: TYPE_NORMAL
- en: Documentation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `Matplotlib` tutorials section is probably the best place to start learning:
    [https://matplotlib.org/stable/tutorials/](https://matplotlib.org/stable/tutorials/).'
  prefs: []
  type: TYPE_NORMAL
- en: However, we will be making a lot of use of `pandas` and `Matplotlib` in this
    book, so you should pick up quite a bit of knowledge just from following along
    and practicing.
  prefs: []
  type: TYPE_NORMAL
- en: Seaborn
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`Seaborn` is essentially “pretty `Matplotlib`.” It is an extension of `Matplotlib`
    and produces more attractive data visualizations. The downside is that some things
    that were not remotely intuitive in `Matplotlib` are even less intuitive in `Seaborn`.
    It’s got a learning curve like `Matplotlib`, and the learning never sticks. I
    find myself googling the web every time I need to make a visualization.'
  prefs: []
  type: TYPE_NORMAL
- en: However, once you begin figuring things out, it’s not so bad. You start to remember
    the headaches you overcame, and powering through difficult things that should
    be simple (such as resizing visualizations) becomes slightly less aggravating
    over time.
  prefs: []
  type: TYPE_NORMAL
- en: 'The visualizations are aesthetically pleasing, much more than the `Matplotlib`
    default. It’s a lot of fun to just look through the `Seaborn` catalog of visualizations:
    [https://seaborn.pydata.org/examples/.](https://seaborn.pydata.org/examples/.)'
  prefs: []
  type: TYPE_NORMAL
- en: We will occasionally use `Seaborn` in this book, but we will mostly use `Matplotlib`
    and `scikit-network` for our visualizations. Do learn about the library, though.
    It is important.
  prefs: []
  type: TYPE_NORMAL
- en: Setup
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'I don’t remember whether notebooks come with `Seaborn` installed. It wouldn’t
    surprise me if they do by now. However, if you need to install `Seaborn`, you
    can follow the official installation guide: [https://seaborn.pydata.org/installing.html](https://seaborn.pydata.org/installing.html).'
  prefs: []
  type: TYPE_NORMAL
- en: Starter functionality
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`Seaborn` can do what `Matplotlib` can do, but better, and more prettily. For
    instance, let’s redo the histogram we previously created, and include the **Kernel
    Density** **Estimate** (**KDE**):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'This produces the following graph:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.6 – Seaborn petal width histogram with the KDE](img/B17105_03_006.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.6 – Seaborn petal width histogram with the KDE
  prefs: []
  type: TYPE_NORMAL
- en: The best way to get started with Seaborn is to just jump in. Get some data,
    then try to visualize it. Look through their example gallery for something applicable
    to your data, and then try to build the same thing. Copy their code at first,
    and experiment with parameters.
  prefs: []
  type: TYPE_NORMAL
- en: Documentation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can learn more about `Seaborn` from their website: [https://seaborn.pydata.org/](https://seaborn.pydata.org/).'
  prefs: []
  type: TYPE_NORMAL
- en: Plotly
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To be honest, we will not use `Plotly` very often in this book, but there is
    one chapter where we needed to use an interactive scatterplot, and `Plotly` had
    a visualization that was useful. However, it is still good to know about `Plotly`,
    as it can be a powerful tool when you need simple intractability for data visualization.
  prefs: []
  type: TYPE_NORMAL
- en: '`Plotly` advertises that it makes interactive, publication-quality graphs.
    That’s it. It essentially does what `Matplotlib` and `Seaborn` do but in an interactive
    way. Building interaction into `Matplotlib` is possible, but it is painful. With
    `Plotly`, it is easy and fast, and a joy to do.'
  prefs: []
  type: TYPE_NORMAL
- en: Setup
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To install `Plotly`, follow their official guide: [https://plotly.com/python/getting-started/#installation](https://plotly.com/python/getting-started/#installation).'
  prefs: []
  type: TYPE_NORMAL
- en: Starter functionality
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Their website has a very fun and interactive gallery to play with, to stimulate
    creative ideas. I recommend that you read through their getting started guide,
    and explore their examples. [https://plotly.com/python/getting-started/](https://plotly.com/python/getting-started/).
  prefs: []
  type: TYPE_NORMAL
- en: We will use `Plotly` in *sw*, *Unsupervised Machine Learning on* *Network Data.*
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.7 – Plotly interactive scatterplot](img/B17105_03_007.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.7 – Plotly interactive scatterplot
  prefs: []
  type: TYPE_NORMAL
- en: Documentation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can learn a lot more about `Plotly` at their website: [https://plotly.com/python/](https://plotly.com/python/).'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have covered some useful libraries for data visualization, let’s
    do the same but for NLP and working with text.
  prefs: []
  type: TYPE_NORMAL
- en: NLP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Moving on from data visualization to NLP, there are also several Python libraries
    that will be helpful to us in processing text. Each library has unique offerings
    as well as strengths and weaknesses, and the documentation should be read.
  prefs: []
  type: TYPE_NORMAL
- en: Natural Language Toolkit
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `NLTK` is an older Python library, and it is often better to use other libraries
    such as `spaCy` for things that used to be done with `NLTK`, such as named-entity
    recognition or part-of-speech tagging.
  prefs: []
  type: TYPE_NORMAL
- en: However, just because it is older doesn’t mean that it is obsolete. It is still
    very useful for analyzing text data, and it provides more linguistic capabilities
    than libraries such as `spaCy`.
  prefs: []
  type: TYPE_NORMAL
- en: Put simply, `NLTK` is a foundational library for doing NLP in Python, and you
    should not skip past it for more recent libraries and approaches.
  prefs: []
  type: TYPE_NORMAL
- en: Setup
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Installing `NLTK` is easy. Just follow the guide: [https://www.nltk.org/install.html](https://www.nltk.org/install.html).'
  prefs: []
  type: TYPE_NORMAL
- en: Starter functionality
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We’re going to use `NLTK` quite a bit in this book. When you are ready, jump
    into the next chapter and we’ll get started right away. Nothing really stands
    out as exciting to show off as starter functionality. NLP becomes more exciting
    the more you learn. It is a bit confusing in the beginning, to say the least.
  prefs: []
  type: TYPE_NORMAL
- en: Documentation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `NLTK` website is not very helpful as a learning tool, but you can see
    some code snippets and examples here: [https://www.nltk.org](https://www.nltk.org).'
  prefs: []
  type: TYPE_NORMAL
- en: These days, you will likely learn more about `NLTK` from blog posts (*TowardsDataScience*
    and others) than from the official `NLTK` website. Do a Google search for `nltk
    getting started` and you’ll find some helpful guides if you want to learn from
    other sources.
  prefs: []
  type: TYPE_NORMAL
- en: This book will be enough to help you get started with `NLTK`, but I do recommend
    learning from others who write about NLP. There is so much to learn and explore.
  prefs: []
  type: TYPE_NORMAL
- en: spaCy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`NLTK`. For instance, if you are doing named-entity recognition, part-of-speech
    tagging, or lemmatization, I recommend that you use `spaCy`, as it is quicker
    and simpler to get good results. However, the `NLTK` data loaders, stop words,
    tokenizers, and other linguistic offerings are still useful, and sometimes unmatched
    by `spaCy`. In my opinion, if you work with NLP in Python, you should learn about
    both `NLTK` and `spaCy`, not just `spaCy`. Learn about both, and remember where
    `spaCy` shines brighter than `NLTK`.'
  prefs: []
  type: TYPE_NORMAL
- en: Setup
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To install `spaCy`, please use the official installation guide: [https://spacy.io/usage#quickstart](https://spacy.io/usage#quickstart).'
  prefs: []
  type: TYPE_NORMAL
- en: Starter functionality
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You’re going to see `spaCy` used quite a bit in this book, especially for named-entity
    recognition, which is useful in graph construction. Feel free to skip ahead if
    you want to see it in use.
  prefs: []
  type: TYPE_NORMAL
- en: 'As an example, let’s install the language model, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'We can run this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'And this would output some NER results:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: How is it doing this, you might wonder? It’s MAGIC! Just kidding – it’s ML.
  prefs: []
  type: TYPE_NORMAL
- en: Documentation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Unlike `NLTK`, the `spaCy` documentation is thorough and helpful, and it looks
    modern. I recommend spending significant time on their website and learning about
    the capabilities. There is much more that can be done with `spaCy` than what we
    will cover in this book. To learn more, visit [https://spacy.io/usage/linguistic-features](https://spacy.io/usage/linguistic-features).
  prefs: []
  type: TYPE_NORMAL
- en: Network analysis and visualization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our next set of libraries is useful for analyzing and visualizing various types
    of networks. Network visualization is another form of data visualization but specifically
    for networks. It is very difficult and tedious to create useful network visualizations
    without network visualization software.
  prefs: []
  type: TYPE_NORMAL
- en: NetworkX
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`NetworkX`, and there is simply no better resource for doing network analysis
    in Python.'
  prefs: []
  type: TYPE_NORMAL
- en: There are other libraries that can be used for very simple network visualization.
    In this book, I disregard all of those and show how `NetworkX` and `scikit-network`
    can be used to both do good network analysis and make reasonably attractive network
    visualizations.
  prefs: []
  type: TYPE_NORMAL
- en: There are also other libraries that are useful alongside `NetworkX`, for community
    detection, or for analyzing the fragility of networks, for instance, but `NetworkX`
    is the core. My goal for writing this book is to spread awareness of network science
    and using networks in software development, and `NetworkX` is crucial for this.
    I want more software engineers to learn these skills.
  prefs: []
  type: TYPE_NORMAL
- en: Setup
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Please follow the official guide to installing `NetworkX`: [https://networkx.org/documentation/stable/install.html](https://networkx.org/documentation/stable/install.html).'
  prefs: []
  type: TYPE_NORMAL
- en: Starter functionality
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We’re going to do a lot of really cool stuff with `NetworkX`, but if you want
    to check that it is working, you can run this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'In a notebook, this should show a Python list of the first 10 nodes included
    in the *Les* *Miserables* graph:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Or, you could do this, to get a quick summary of the *Les* *Miserables* graph:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Documentation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The best way to learn about `NetworkX` is actually probably reading this book.
    There are very few books about using `NetworkX`. There are some blog posts, and
    a few of the guides on the `NetworkX` website can be helpful. There’s this one,
    but it assumes that you have an understanding of graphs: [https://networkx.org/documentation/stable/tutorial.html](https://networkx.org/documentation/stable/tutorial.html).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The website does have very detailed documentation on the different tools offered:
    [https://networkx.org/documentation/stable/reference/](https://networkx.org/documentation/stable/reference/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'My favorite part about their online resources is that they point to academic
    papers that were written about the functions that have been implemented. For instance,
    if you visit the page in the **Link Prediction** section about **Preferential
    Attachment**, you will see this block:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.8 – NetworkX reference](img/B17105_03_008.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.8 – NetworkX reference
  prefs: []
  type: TYPE_NORMAL
- en: On several occasions, I’ve enjoyed digging into the writing that has gone into
    the development of several algorithms. It is nice to know the background, and
    algorithms absolutely should not be used blindly. If you’re going to use a tool,
    learn how it works, and where it doesn’t work.
  prefs: []
  type: TYPE_NORMAL
- en: scikit-network
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`NetworkX` visualizations are slow, to the point that I will not teach them.
    They take a long time to render, even on a small network, and their appearance
    is bland and basic. `scikit-network` visualizations load very fast, on the other
    hand, as they are rendered SVGs. The visualizations load at a reasonable speed,
    even if you have hundreds or thousands of nodes.'
  prefs: []
  type: TYPE_NORMAL
- en: However, the notion that this is a package for the analysis of large graphs
    is not accurate at all. This is visualization software, at its core, even if it
    is capable of doing a bit more than that. It seems they have added some additional
    capabilities (such as **Graph Neural Networks** (**GNNs**)), but most documentation
    pages highlight visualization. Do take a look at their offerings on embeddings
    and community detection, though. It seems that they are working toward doing more
    than network visualization and that the library is evolving.
  prefs: []
  type: TYPE_NORMAL
- en: Setup
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To install `scikit-network`, please follow the official guide: [https://scikit-network.readthedocs.io/en/latest/first_steps.html](https://scikit-network.readthedocs.io/en/latest/first_steps.html).'
  prefs: []
  type: TYPE_NORMAL
- en: Starter functionality
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this book, we will only use `scikit-network` for network visualization, so
    if you’d like to get started with it, please take a look at some of their tutorials,
    such as [https://scikit-network.readthedocs.io/en/latest/tutorials/visualization/graphs.html](https://scikit-network.readthedocs.io/en/latest/tutorials/visualization/graphs.html).
    There are several tutorials you can use to learn more about the library.
  prefs: []
  type: TYPE_NORMAL
- en: Documentation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `scikit-network` documentation is pretty good and pretty well-organized.
    The simplicity of the documentation shows that it’s really not a very deep Python
    library. If you want to learn more, start here: [https://scikit-network.readthedocs.io/en/latest/](https://scikit-network.readthedocs.io/en/latest/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'You might be wondering why I only use this for visualization when it also offers
    capabilities for some ML, community detection, and other things. The reason is
    this: `NetworkX` and `KarateClub` also offer similar capabilities, and they do
    them better. For instance, `KarateClub` offers `NetworkX` provides the `scikit-network`
    provides functionality for calculating `NetworkX` does it better and more cleanly.'
  prefs: []
  type: TYPE_NORMAL
- en: That is why I only show how it can be used for visualization. The other capabilities
    haven’t shown to be better than those provided by `NetworkX` and `KarateClub`.
    It’s nothing personal. We all have our favorite tools.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we’ll talk about the libraries we can use for ML.
  prefs: []
  type: TYPE_NORMAL
- en: ML
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There is also a set of Python libraries for doing machine learning. Knowing
    the Python libraries and algorithms is not enough. Please learn as much as you
    can about the models and techniques you will use. There is always more to learn.
    Here are some of the libraries you will most likely frequently use.
  prefs: []
  type: TYPE_NORMAL
- en: scikit-learn
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`TensorFlow` and `PyTorch`, but we will not use them directly in this book.
    Just be aware that they are out there, and that you should learn about them as
    your ML skills improve.'
  prefs: []
  type: TYPE_NORMAL
- en: If you are learning about or doing ML in Python, you will very quickly run into
    `scikit-learn`. `scikit-learn` provides a treasure trove of ML models, data loaders,
    preprocessors, transformations, and much more. There are many books and blog posts
    about `scikit-learn`, including several that have been published by Packt. If
    you are interested in learning ML, you will be doing a lot of reading, and `scikit-learn`
    is an excellent place to start.
  prefs: []
  type: TYPE_NORMAL
- en: Setup
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you are working with notebooks, then `scikit-learn` is probably already
    installed. However, if you need to install it, please follow the official guide:
    [https://scikit-learn.org/stable/install.html](https://scikit-learn.org/stable/install.html).'
  prefs: []
  type: TYPE_NORMAL
- en: Starter functionality
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'ML is complicated, and it takes several steps to build and use a model. For
    now, just make sure that `scikit-learn` is installed and that you can see which
    version you are running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: For me, this shows that I am running version `1.0.2`. For the exercises in this
    book, we do not need to have an exact match, but for reproducibility in the real
    world, all versions of libraries should match when deploying anything.
  prefs: []
  type: TYPE_NORMAL
- en: Documentation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are more resources for `scikit-learn` than there are for probably every
    other Python library I’ve mentioned in this chapter. ML is a trendy topic, and
    there is a demand for books, blog posts, videos, and other instruction, so there
    is no shortage of resources to learn from. However, the `scikit-learn` documentation
    is the place to start.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `scikit-learn` starter guide can be found here: [https://scikit-learn.org/stable/getting_started.html](https://scikit-learn.org/stable/getting_started.html).'
  prefs: []
  type: TYPE_NORMAL
- en: The full user guide can be found at [https://scikit-learn.org/stable/user_guide.html](https://scikit-learn.org/stable/user_guide.html),
    and there is also an API reference at [https://scikit-learn.org/stable/modules/classes.html](https://scikit-learn.org/stable/modules/classes.html).
  prefs: []
  type: TYPE_NORMAL
- en: We will be doing a bit of supervised and unsupervised machine learning in this
    book, but we won’t go very far into the topic. There will be much more to learn
    if you are interested. This book will only scratch the surface of ML and hopefully
    will kick off an obsession.
  prefs: []
  type: TYPE_NORMAL
- en: Karate Club
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`NetworkX`. In other words, `Karate Club` bridges the gap between machine learning
    and graph analysis. It provides several useful unsupervised learning models that
    can be used for community detection as well as creating node embeddings from graphs
    that may be used in downstream supervised learning tasks. This is often referred
    to as graph machine learning, and there is a lot of excitement about using graphs
    and machine learning together, for instance, to predict new connections (who should
    be friends, who would like certain music or products, and so on).'
  prefs: []
  type: TYPE_NORMAL
- en: What’s the difference between this and `scikit-learn`? Well, `scikit-learn`
    can be used with any numeric data. `Karate Club` specializes in transforming graphs
    into numeric data through unsupervised machine learning. `Karate Club` outputs
    can be `scikit-learn` inputs, but rarely the other way around.
  prefs: []
  type: TYPE_NORMAL
- en: For `Karate Club` to be useful, you need graphs (`NetworkX`) and you need ML
    (`scikit-learn`, `TensorFlow`, `PyTorch`, and so on). `Karate Club` is not very
    useful by itself.
  prefs: []
  type: TYPE_NORMAL
- en: Karate Club is not yet supported by higher versions of Python, such as 3.10.
  prefs: []
  type: TYPE_NORMAL
- en: Setup
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To install `Karate Club`, follow the official guide: [https://karateclub.readthedocs.io/en/latest/notes/installation.html](https://karateclub.readthedocs.io/en/latest/notes/installation.html).'
  prefs: []
  type: TYPE_NORMAL
- en: Starter functionality
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There’s no starter functionality worth showcasing. ML is complicated and takes
    several steps to be of use. For now, let’s just verify that the library is installed
    and that we can see the version number:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: I can see that I am running version `1.3.0`.
  prefs: []
  type: TYPE_NORMAL
- en: Documentation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`Karate Club` provides an introductory guide at [https://karateclub.readthedocs.io/en/latest/notes/introduction.html](https://karateclub.readthedocs.io/en/latest/notes/introduction.html).
    Here, you can start to see how the library may be used. You will also likely notice
    some references to other libraries, such as `scikit-learn`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`Karate Club` has exemplary documentation. You can find it at [https://karateclub.readthedocs.io/en/latest/modules/root.html](https://karateclub.readthedocs.io/en/latest/modules/root.html).
    The thing that I love the most is that they cite the journal articles that were
    written about the models. For instance, if you look at the documentation for any
    of the algorithms, you will often find mention of the paper that was published
    about the model.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.9 – Karate club documentation reference](img/B17105_03_009.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.9 – Karate club documentation reference
  prefs: []
  type: TYPE_NORMAL
- en: As I’ve looked through several of the `Karate Club` models for work in this
    book, I’ve had the opportunity to read many of these papers, and that has brought
    me many hours of enjoyment. I love this so much.
  prefs: []
  type: TYPE_NORMAL
- en: 'And if you are working with `Karate Club` in code, you can also see mention
    of the paper in notebooks if you *Shift* + *Tab* into a function call:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.10 – Karate club code reference](img/B17105_03_010.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.10 – Karate club code reference
  prefs: []
  type: TYPE_NORMAL
- en: Not only is this library exciting to use but it’s also educational to learn
    from.
  prefs: []
  type: TYPE_NORMAL
- en: spaCy (revisited)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Yes, I’m mentioning `spaCy` again. Why? Because `spaCy` offers several language
    models, and in many different languages. This means that you can use the `spaCy`
    pre-trained machine learning models for your own purposes, for instance, for named-entity
    recognition. Their models have already been trained and can be directly imported
    for use. You will learn how to do so in this book, in the next few chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are other Python libraries that we will use in this book, but they will
    be explained in their relevant chapters. In this chapter, I wanted to describe
    the primary libraries we will use for our work. In order to get to the really
    experimental stuff that we cover in this book, a foundation needs to be in place.
  prefs: []
  type: TYPE_NORMAL
- en: For instance, you need to be able to read and analyze tabular (structured) data.
    You also need to be able to visualize data. With text, you need to be able to
    convert text into a format that is ready for analysis and use. For graphs, you
    need to be able to do the same. And finally, if you want to apply machine learning
    to networks or text, you should understand how to do that.
  prefs: []
  type: TYPE_NORMAL
- en: That is why the sections have been broken down into data analysis and processing,
    data visualization, natural language processing, network analysis and visualization,
    and machine learning. I hope the structure helps.
  prefs: []
  type: TYPE_NORMAL
- en: With these libraries installed and briefly explained, we are now ready to get
    our hands dirty with network science, social network analysis, and NLP, all in
    Python.
  prefs: []
  type: TYPE_NORMAL
- en: 'Part 2: Graph Construction and Cleanup'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Network data does not always exist for research that is interesting to an analyst.
    The chapters in this part show how to pull text data from various online resources
    and convert text data into networks that can be analyzed. These chapters also
    walk through data wrangling steps for cleaning networks for use in analysis and
    downstream processes.
  prefs: []
  type: TYPE_NORMAL
- en: 'This section includes the following chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 4*](B17105_04.xhtml#_idTextAnchor158)*, NLP and Network Synergy*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 5*](B17105_05.xhtml#_idTextAnchor179)*, Even Easier Scraping*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 6*](B17105_06.xhtml#_idTextAnchor228)*, Graph Construction and Cleaning*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
