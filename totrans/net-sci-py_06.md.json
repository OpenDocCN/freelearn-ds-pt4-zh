["```py\n    import pandas as pd\n    ```", "```py\n    import networkx as nx\n    ```", "```py\n    data = 'https://raw.githubusercontent.com/itsgorain/datasets/main/networks/alice/edgelist_alice_original.csv'\n    ```", "```py\n    network_df = pd.read_csv(data)\n    ```", "```py\n    network_df.head()\n    ```", "```py\nG = nx.from_pandas_edgelist(network_df)\n```", "```py\nG\n<networkx.classes.graph.Graph at 0x255e00fd5c8>\n```", "```py\nG = nx.from_pandas_edgelist(network_df)\n```", "```py\nG = nx.from_pandas_edgelist(network_df, create_using=nx.DiGraph)\n```", "```py\n<networkx.classes.digraph.DiGraph at 0x255e00fcb08>\n```", "```py\nG = nx.from_pandas_edgelist(network_df, create_using = nx.MultiGraph)\n```", "```py\n<networkx.classes.multigraph.MultiGraph at 0x255db7afa88>\n```", "```py\nG = nx.from_pandas_edgelist(network_df, create_using = nx.MultiDiGraph)\n```", "```py\n<networkx.classes.multidigraph.MultiDiGraph at 0x255e0105688>\n```", "```py\n    G = nx.from_pandas_edgelist(network_df)\n    ```", "```py\n    print(nx.info(G))\n    ```", "```py\nGraph with 68 nodes and 68 edges\n```", "```py\n    G.nodes\n    ```", "```py\nNodeView(('Rabbit', 'Alice', 'Longitude', 'New Zealand', \"Ma'am\", 'Australia', 'Fender', 'Ada', 'Mabel', 'Paris', 'Rome', 'London', 'Improve', 'Nile', 'William the Conqueror', 'Mouse', 'Lory', 'Eaglet', 'Northumbria', 'Edwin', 'Morcar', 'Stigand', 'Mercia', 'Canterbury', 'â\\x80\\x98it', 'William', 'Edgar Atheling', \"â\\x80\\x98I'll\", 'Said', 'Crab', 'Dinah', 'the White Rabbit', 'Bill', 'The Rabbit Sends', 'Mary Ann', 'Pat', 'Caterpillar', 'CHAPTER V.', 'William_', 'Pigeon', 'Fish-Footman', 'Duchess', 'Cheshire', 'Hare', 'Dormouse', 'Hatter', 'Time', 'Tillie', 'Elsie', 'Lacie', 'Treacle', 'Kings', 'Queens', 'Cat', 'Cheshire Cat', 'Somebody', 'Mystery', 'Seaography', 'Lobster Quadrille', 'France', 'England', 'â\\x80\\x98Keep', 'garden_.', 'Hm', 'Soup', 'Beautiful', 'Gryphon', 'Lizard'))\n```", "```py\n    def show_nodes(G):\n    ```", "```py\n        nodes = sorted(list(G.nodes()))\n    ```", "```py\n        return ', '.join(nodes)\n    ```", "```py\nshow_nodes(G)\n```", "```py\n\"Ada, Alice, Australia, Beautiful, Bill, CHAPTER V., Canterbury, Cat, Caterpillar, Cheshire, Cheshire Cat, Crab, Dinah, Dormouse, Duchess, Eaglet, Edgar Atheling, Edwin, Elsie, England, Fender, Fish-Footman, France, Gryphon, Hare, Hatter, Hm, Improve, Kings, Lacie, Lizard, Lobster Quadrille, London, Longitude, Lory, Ma'am, Mabel, Mary Ann, Mercia, Morcar, Mouse, Mystery, New Zealand, Nile, Northumbria, Paris, Pat, Pigeon, Queens, Rabbit, Rome, Said, Seaography, Somebody, Soup, Stigand, The Rabbit Sends, Tillie, Time, Treacle, William, William the Conqueror, William_, garden_., the White Rabbit, â\\x80\\x98I'll, â\\x80\\x98Keep, â\\x80\\x98it\"\n```", "```py\nG.edges\n```", "```py\nEdgeView([('Rabbit', 'Alice'), ('Rabbit', 'Mary Ann'), ('Rabbit', 'Pat'), ('Rabbit', 'Dinah'), ('Alice', 'Longitude'), ('Alice', 'Fender'), ('Alice', 'Mabel'), ('Alice', 'William the Conqueror'), ('Alice', 'Mouse'), ('Alice', 'Lory'), ('Alice', 'Mary Ann'), ('Alice', 'Dinah'), ('Alice', 'Bill'), ('Alice', 'Caterpillar'), ('Alice', 'Pigeon'), ('Alice', 'Fish-Footman'), ('Alice', 'Duchess'), ('Alice', 'Hare'), ('Alice', 'Dormouse'), ('Alice', 'Hatter'), ('Alice', 'Kings'), ('Alice', 'Cat'), ('Alice', 'Cheshire Cat'), ('Alice', 'Somebody'), ('Alice', 'Lobster Quadrille'), ('Alice', 'â\\x80\\x98Keep'), ('Alice', 'garden_.'), ('Alice', 'Hm'), ('Alice', 'Soup'), ('Alice', 'the White Rabbit'), ('New Zealand', \"Ma'am\"), ('New Zealand', 'Australia'), ('Ada', 'Mabel'), ('Paris', 'Rome'), ('Paris', 'London'), ('Improve', 'Nile'), ('Mouse', 'â\\x80\\x98it'), ('Mouse', 'William'), ('Lory', 'Eaglet'), ('Lory', 'Crab'), ('Lory', 'Dinah'), ('Northumbria', 'Edwin'), ('Northumbria', 'Morcar'), ('Morcar', 'Stigand'), ('Morcar', 'Mercia'), ('Morcar', 'Canterbury'), ('William', 'Edgar Atheling'), (\"â\\x80\\x98I'll\", 'Said'), ('the White Rabbit', 'Bill'), ('the White Rabbit', 'The Rabbit Sends'), ('Caterpillar', 'CHAPTER V.'), ('Caterpillar', 'William_'), ('Duchess', 'Cheshire'), ('Duchess', 'Cat'), ('Duchess', 'Lizard'), ('Hare', 'Hatter'), ('Hare', 'Lizard'), ('Dormouse', 'Hatter'), ('Dormouse', 'Tillie'), ('Dormouse', 'Elsie'), ('Dormouse', 'Lacie'), ('Dormouse', 'Treacle'), ('Hatter', 'Time'), ('Kings', 'Queens'), ('Mystery', 'Seaography'), ('France', 'England'), ('Soup', 'Beautiful'), ('Soup', 'Gryphon')])\n```", "```py\n    G.remove_node('â\\x80\\x98it')\n    ```", "```py\n    drop_nodes = ['Beautiful', 'CHAPTER V.', 'Hm', 'Improve', 'Longitude', 'Ma\\'am', 'Mystery', 'Said', 'Seaography', 'Somebody', 'Soup', 'Time', 'garden_.', 'â\\x80\\x98I\\'ll', 'â\\x80\\x98Keep']\n    ```", "```py\n    G.remove_nodes_from(drop_nodes)\n    ```", "```py\nshow_nodes(G)\n'Ada, Alice, Australia, Bill, Canterbury, Cat, Caterpillar, Cheshire, Cheshire Cat, Crab, Dinah, Dormouse, Duchess, Eaglet, Edgar Atheling, Edwin, Elsie, England, Fender, Fish-Footman, France, Gryphon, Hare, Hatter, Kings, Lacie, Lizard, Lobster Quadrille, London, Lory, Mabel, Mary Ann, Mercia, Morcar, Mouse, New Zealand, Nile, Northumbria, Paris, Pat, Pigeon, \nQueens, Rabbit, Rome, Stigand, The Rabbit Sends, Tillie, Treacle, William, William the Conqueror, William_, the White Rabbit'\n```", "```py\ndraw_graph(G, show_names=True, node_size=5, edge_width=1)\n```", "```py\ndrop_nodes = ['New Zealand', 'Australia', 'France', 'England', 'London', 'Paris', 'Rome', 'Nile', 'William_', 'Treacle', 'Fender', 'Canterbury', 'Edwin', 'Mercia', 'Morcar', 'Northumbria', 'Stigand']\nG.remove_nodes_from(drop_nodes)\n```", "```py\nfrom nltk.tokenize import sent_tokenize\ndef search_text(text, search_string):\n    sentences = sent_tokenize(text)\n    for sentence in sentences:\n        if search_string in sentence.lower():\n            print(sentence)\n            print()\n```", "```py\nsearch_text(text, 'queen')\n```", "```py\nAn invitation from the  Queen to play croquet.\"\"\nThe Frog-Footman repeated, in the same solemn  tone, only changing the order of the words a little, \"From the Queen.\n\"I must go and get ready to play  croquet with the Queen,\"\" and she hurried out of the room.\n\"Do you play croquet with the  Queen to-day?\"\"\n\"We  quarrelled last March just before _he_ went mad, you know \"\" (pointing  with his tea spoon at the March Hare,) \" it was at the great concert  given by the Queen of Hearts, and I had to sing    âTwinkle, twinkle, little bat!\n\"Well, I'd hardly finished the first verse,\"\" said the Hatter, \"when the  Queen jumped up and bawled out, âHe's murdering the time!\nThe Queen's Croquet-Ground      A large rose-tree stood near the entrance of the garden: the roses  growing on it were white, but there were three gardeners at it, busily  painting them red.\n\"I heard the Queen say only  yesterday you deserved to be beheaded!\"\"\n```", "```py\n    G.add_node('Queen of Hearts')\n    ```", "```py\n    add_nodes = ['Queen of Hearts', 'Frog-Footman', 'March Hare', 'Mad Hatter', 'Card Gardener #1', 'Card Gardener #2', 'Card Gardener #3', 'King of Hearts', 'Knave of Hearts', 'Mock Turtle']\n    ```", "```py\n    G.add_nodes_from(add_nodes)\n    ```", "```py\n    G.add_edge('Frog-Footman', 'Queen of Hearts')\n    ```", "```py\n    add_edges = [('Alice', 'Mock Turtle'), ('King of Hearts', 'Alice'), ('King of Hearts', 'Card Gardener #1'),\n    ```", "```py\n                 ('King of Hearts', 'Card Gardener #2'), ('King of Hearts', 'Card Gardener #3'),\n    ```", "```py\n                 ('King of Hearts', 'Dormouse'), ('King of Hearts', 'Frog-Footman'), ('King of Hearts', 'Kings'),\n    ```", "```py\n                 ('King of Hearts', 'Lizard'), ('King of Hearts', 'Mad Hatter'), ('King of Hearts', 'March Hare'),\n    ```", "```py\n                 ('King of Hearts', 'Mock Turtle'), ('King of Hearts', 'Queen of Hearts'), ('King of Hearts', 'Queens'),\n    ```", "```py\n                 ('King of Hearts', 'White Rabbit'), ('Knave of Hearts', 'King of Hearts'),\n    ```", "```py\n                 ('Knave of Hearts', 'Queen of Hearts'),\n    ```", "```py\n                 ('Queen of Hearts', 'Alice'), ('Queen of Hearts', 'Card Gardener #1'),\n    ```", "```py\n                 ('Queen of Hearts', 'Card Gardener #2'), ('Queen of Hearts', 'Card Gardener #3'),\n    ```", "```py\n                 ('Queen of Hearts', 'Dormouse'), ('Queen of Hearts', 'Frog-Footman'), ('Queen of Hearts', 'Kings'),\n    ```", "```py\n                 ('Queen of Hearts', 'Lizard'), ('Queen of Hearts', 'Mad Hatter'), ('Queen of Hearts', 'March Hare'),\n    ```", "```py\n                 ('Queen of Hearts', 'Mock Turtle'), ('Queen of Hearts', 'Queens'), ('Queen of Hearts', 'White Rabbit')]\n    ```", "```py\n    G.add_edges_from(add_edges)\n    ```", "```py\nsearch_text(text, 'gryphon')\n```", "```py\nadd_edges = [('Gryphon', 'Alice'), ('Gryphon', 'Queen of Hearts'), ('Gryphon', 'Mock Turtle')]\nG.add_edges_from(add_edges)\n```", "```py\nrelabel_mapping = {'Cheshire':'Cheshire Cat', 'Hatter':'Mad Hatter', 'Rabbit':'White Rabbit','William':'Father William', 'the White Rabbit':'White Rabbit', 'The Rabbit Sends':'White Rabbit', 'Bill':'Lizard Bill', 'Lizard':'Lizard Bill', 'Cat':'Cheshire Cat', 'Hare':'March Hare'}\nG = nx.relabel_nodes(G, relabel_mapping)\n```", "```py\nshow_nodes(G)\n'Ada, Alice, Card Gardener #1, Card Gardener #2, Card Gardener #3, Caterpillar, Cheshire Cat, Crab, Dinah, Dormouse, Duchess, Eaglet, Edgar Atheling, Elsie, Father William, Fish-Footman, Frog-Footman, Gryphon, King of Hearts, Kings, Knave of Hearts, Lacie, Lizard Bill, Lobster Quadrille, Lory, Mabel, Mad Hatter, March Hare, Mary Ann, Mock Turtle, Mouse, Pat, Pigeon, Queen of Hearts, Queens, Tillie, White Rabbit, William the Conqueror'\n```", "```py\n    G.remove_edge('Dormouse', 'Tillie')\n    ```", "```py\n    drop_edges = [('Dormouse', 'Tillie'), ('Dormouse', 'Elsie'), ('Dormouse', 'Lacie')]\n    ```", "```py\n    G.remove_edges_from(drop_edges)\n    ```", "```py\nadd_edges = [('Dormouse', 'Elsie'), ('Dormouse', 'Lacie'), ('Dormouse', 'Tillie')]\nG.add_edges_from(add_edges)\n```", "```py\noutfile = r'C:\\blah\\blah\\blah\\networks\\alice\\edgelist_alice_cleaned.csv'\nfinal_network_df = nx.to_pandas_edgelist(G)\nfinal_network_df.to_csv(outfile, header=True, index=False)\n```", "```py\n    drop_nodes = ['Alice', 'Dormouse', 'White Rabbit', 'Mad Hatter']\n    ```", "```py\n    G.remove_nodes_from(drop_nodes)\n    ```", "```py\n    components = list(nx.connected_components(G))\n    ```", "```py\n    main_component = components[4]\n    ```", "```py\n    G_sub = G.subgraph(main_component)\n    ```", "```py\n    draw_graph(G_sub, show_names=True, node_size=4, edge_width = 0.5)\n    ```"]