["```py\npip install <library name>\n```", "```py\npip install networkx\n```", "```py\n    import pandas as pd\n    ```", "```py\n    data = 'https://raw.githubusercontent.com/itsgorain/datasets/main/networks/kpop/kpop_edgelist.csv'\n    ```", "```py\n    df = pd.read_csv(data)\n    ```", "```py\n    df['source'] = df['source'].str[0:16]\n    ```", "```py\n    df['target'] = df['target'].str[0:16]\n    ```", "```py\n    df.head()\n    ```", "```py\n    df.shape[0]\n    ```", "```py\n    1286\n    ```", "```py\n    import networkx as nx\n    ```", "```py\n    G = nx.from_pandas_edgelist(df)\n    ```", "```py\n    G.remove_edges_from(nx.selfloop_edges(G))\n    ```", "```py\n    G.remove_node('@') # remove a junk node\n    ```", "```py\n    G\n    ```", "```py\n    <networkx.classes.graph.Graph at 0x217dc82b4c8>\n    ```", "```py\nnx.info(G)\n'Graph with 1163 nodes and 1237 edges'\n```", "```py\n    nx.average_clustering(G)\n    ```", "```py\n    0.007409464946430933\n    ```", "```py\n    from networkx.classes.function import density\n    ```", "```py\n    density(G)\n    ```", "```py\n    0.001830685967059492\n    ```", "```py\n    G_conn = nx.complete_graph(n=20)\n    ```", "```py\n    nx.info(G_conn)\n    ```", "```py\n    'Graph with 20 nodes and 190 edges'\n    ```", "```py\n    nx.average_clustering(G_conn)\n    ```", "```py\n    1.0\n    ```", "```py\n    density(G_conn)\n    ```", "```py\n    1.0\n    ```", "```py\n    draw_graph(G_conn, edge_width=0.3)\n    ```", "```py\ndraw_graph(G, node_size=1, show_names=False)\n```", "```py\ndraw_graph(nx.k_core(G, 2), node_size=1, show_names=False)\n```", "```py\ndegrees = dict(nx.degree(G))\ndegrees\n{'@kmg3445t': 1,\n '@code_kunst': 13,\n '@highgrnd': 1,\n '@youngjay_93': 1,\n '@sobeompark': 1,\n '@justhiseung': 1,\n '@hwajilla': 1,\n '@blobyblo': 4,\n '@minddonyy': 1,\n '@iuiive': 1,\n '@wgyenny': 1,\n ...\n }\n```", "```py\n    degree_df = pd.DataFrame(degrees, index=[0]).T\n    ```", "```py\n    degree_df.columns = ['degrees']\n    ```", "```py\n    degree_df.sort_values('degrees', inplace=True, ascending=False)\n    ```", "```py\n    degree_df.head()\n    ```", "```py\n    import matplotlib.pyplot as plt\n    ```", "```py\n    title = 'Top 20 Twitter Accounts by Degrees'\n    ```", "```py\n    _= degree_df[0:20].plot.barh(title=title, figsize=(12,7))\n    ```", "```py\n    plt.gca().invert_yaxis()\n    ```", "```py\n    degcent = nx.degree_centrality(G)\n    ```", "```py\n    degcent\n    ```", "```py\n    {'@kmg3445t': 0.0008605851979345956,\n    ```", "```py\n     '@code_kunst': 0.011187607573149742,\n    ```", "```py\n     '@highgrnd': 0.0008605851979345956,\n    ```", "```py\n     '@youngjay_93': 0.0008605851979345956,\n    ```", "```py\n     '@sobeompark': 0.0008605851979345956,\n    ```", "```py\n     '@justhiseung': 0.0008605851979345956,\n    ```", "```py\n     '@hwajilla': 0.0008605851979345956,\n    ```", "```py\n     '@blobyblo': 0.0034423407917383822,\n    ```", "```py\n     '@minddonyy': 0.0008605851979345956,\n    ```", "```py\n     '@iuiive': 0.0008605851979345956,\n    ```", "```py\n     ...\n    ```", "```py\n     }\n    ```", "```py\n    degcent_df = pd.DataFrame(degcent, index=[0]).T\n    ```", "```py\n    degcent_df.columns = ['degree_centrality']\n    ```", "```py\n    degcent_df.sort_values('degree_centrality', inplace=True, ascending=False)\n    ```", "```py\n    degcent_df.head()\n    ```", "```py\n    title = 'Top 20 Twitter Accounts by Degree Centrality'\n    ```", "```py\n    _= degcent_df[0:20].plot.barh(title=title, figsize=(12,7))\n    ```", "```py\n    plt.gca().invert_yaxis()\n    ```", "```py\n    betwcent = nx.betweenness_centrality(G)\n    ```", "```py\n    betwcent\n    ```", "```py\n    {'@kmg3445t': 0.0,\n    ```", "```py\n     '@code_kunst': 0.016037572215773392,\n    ```", "```py\n     '@highgrnd': 0.0,\n    ```", "```py\n     '@youngjay_93': 0.0,\n    ```", "```py\n     '@sobeompark': 0.0,\n    ```", "```py\n     '@justhiseung': 0.0,\n    ```", "```py\n     '@hwajilla': 0.0,\n    ```", "```py\n     '@blobyblo': 0.02836579219003866,\n    ```", "```py\n     '@minddonyy': 0.0,\n    ```", "```py\n     '@iuiive': 0.0,\n    ```", "```py\n     '@wgyenny': 0.0,\n    ```", "```py\n     '@wondergirls': 0.0013446180439736057,\n    ```", "```py\n     '@wg_lim': 0.0026862711087984274,\n    ```", "```py\n     ...\n    ```", "```py\n     }\n    ```", "```py\n    betwcent_df = pd.DataFrame(betwcent, index=[0]).T\n    ```", "```py\n    betwcent_df.columns = ['betweenness_centrality']\n    ```", "```py\n    betwcent_df.sort_values('betweenness_centrality', inplace=True, ascending=False)\n    ```", "```py\n    betwcent_df.head()\n    ```", "```py\n    title = 'Top 20 Twitter Accounts by Betweenness Centrality'\n    ```", "```py\n    _= betwcent_df[0:20].plot.barh(title=title, figsize=(12,7))\n    ```", "```py\n    plt.gca().invert_yaxis()\n    ```", "```py\n    closecent = nx.closeness_centrality(G)\n    ```", "```py\n    closecent\n    ```", "```py\n    {'@kmg3445t': 0.12710883458078617,\n    ```", "```py\n     '@code_kunst': 0.15176930794223495,\n    ```", "```py\n     '@highgrnd': 0.12710883458078617,\n    ```", "```py\n     '@youngjay_93': 0.12710883458078617,\n    ```", "```py\n     '@sobeompark': 0.12710883458078617,\n    ```", "```py\n     '@justhiseung': 0.12710883458078617,\n    ```", "```py\n     '@hwajilla': 0.12710883458078617,\n    ```", "```py\n     '@blobyblo': 0.18711010406907921,\n    ```", "```py\n     '@minddonyy': 0.12710883458078617,\n    ```", "```py\n     '@iuiive': 0.12710883458078617,\n    ```", "```py\n     '@wgyenny': 0.07940034854856182,\n    ```", "```py\n     ...\n    ```", "```py\n     }\n    ```", "```py\n    closecent_df = pd.DataFrame(closecent, index=[0]).T\n    ```", "```py\n    closecent_df.columns = ['closeness_centrality']\n    ```", "```py\n    closecent_df.sort_values('closeness_centrality', inplace=True, ascending=False)\n    ```", "```py\n    closecent_df.head()\n    ```", "```py\n    title = 'Top 20 Twitter Accounts by Closeness Centrality'\n    ```", "```py\n    _= closecent_df[0:20].plot.barh(title=title, figsize=(12,7))\n    ```", "```py\n    plt.gca().invert_yaxis()\n    ```", "```py\n    pagerank = nx.pagerank(G)\n    ```", "```py\n    pagerank\n    ```", "```py\n    {'@kmg3445t': 0.00047123124840596525,\n    ```", "```py\n     '@code_kunst': 0.005226313735064201,\n    ```", "```py\n     '@highgrnd': 0.00047123124840596525,\n    ```", "```py\n     '@youngjay_93': 0.00047123124840596525,\n    ```", "```py\n     '@sobeompark': 0.00047123124840596525,\n    ```", "```py\n     '@justhiseung': 0.00047123124840596525,\n    ```", "```py\n     '@hwajilla': 0.00047123124840596525,\n    ```", "```py\n     '@blobyblo': 0.0014007295303692594,\n    ```", "```py\n     '@minddonyy': 0.00047123124840596525,\n    ```", "```py\n     ...\n    ```", "```py\n     }\n    ```", "```py\n    pagerank_df = pd.DataFrame(pagerank, index=[0]).T\n    ```", "```py\n    pagerank_df.columns = ['pagerank']\n    ```", "```py\n    pagerank_df.sort_values('pagerank', inplace=True, ascending=False)\n    ```", "```py\n    pagerank_df.head()\n    ```", "```py\n    title = 'Top 20 Twitter Accounts by Page Rank'\n    ```", "```py\n    _= pagerank_df[0:20].plot.barh(title=title, figsize=(12,7))\n    ```", "```py\n    plt.gca().invert_yaxis()\n    ```", "```py\ncombined_importance_df = pd.concat([degree_df, degcent_df, betwcent_df, closecent_df, pagerank_df], axis=1)\ncombined_importance_df.head(10)\n```", "```py\ncombined_importance_df.sort_values('pagerank', ascending=False)[0:10]\n```", "```py\n    subgraph_nodes = pagerank_df[0:100].index.to_list()\n    ```", "```py\n    subgraph_nodes\n    ```", "```py\n    ['@b_hundred_hyun',\n    ```", "```py\n     '@zanelowe',\n    ```", "```py\n     '@haroobomkum',\n    ```", "```py\n     '@itzailee',\n    ```", "```py\n     '@spotifykr',\n    ```", "```py\n     '@shxx131bi131',\n    ```", "```py\n     '@thinktwicekpop',\n    ```", "```py\n     '@leehi_hi',\n    ```", "```py\n     '@bambam1a',\n    ```", "```py\n     '@bighitent',\n    ```", "```py\n     '@ericnamofficial',\n    ```", "```py\n     '@twicetly',\n    ```", "```py\n     ...\n    ```", "```py\n     ]\n    ```", "```py\n    G_sub = G.subgraph(subgraph_nodes)\n    ```", "```py\n    draw_graph(G_sub, node_size=3)\n    ```", "```py\ncomponents = list(nx.connected_components(G))\nlen(components)\n```", "```py\nfor i in range(len(components)):\n    component_node_count = len(components[i])\n    print('component {}: {}'.format(i, component_node_count))\n```", "```py\ncomponent 0: 909\ncomponent 1: 2\ncomponent 2: 3\ncomponent 3: 4\ncomponent 4: 2\ncomponent 5: 2\ncomponent 6: 80\ncomponent 7: 129\ncomponent 8: 3\ncomponent 9: 7\ncomponent 10: 4\ncomponent 11: 4\ncomponent 12: 2\ncomponent 13: 10\ncomponent 14: 2\n```", "```py\ndef draw_component(G, component, node_size=3, show_names=True)\n    check_component = components[component]\n    G_check = G.subgraph(check_component)\n    return draw_graph(G_check, show_names=show_names, node_size=node_size)\n```", "```py\ndraw_component(G, component=13, node_size=5)\n```", "```py\ndraw_component(G, 0, show_names=False, node_size=2)\n```", "```py\n    pip install python-louvain\n    ```", "```py\n    import community as community_louvain\n    ```", "```py\n    def draw_partition(G, partition):\n    ```", "```py\n        import matplotlib.cm as cm\n    ```", "```py\n        import matplotlib.pyplot as plt\n    ```", "```py\n        # draw the graph\n    ```", "```py\n        plt.figure(3,figsize=(12,12))\n    ```", "```py\n        pos = nx.spring_layout(G)\n    ```", "```py\n        # color the nodes according to their partition\n    ```", "```py\n        cmap = cm.get_cmap('flag', max(partition.values()) + 1)\n    ```", "```py\n        nx.draw_networkx_nodes(G, pos, partition.keys(), node_size=20, cmap=cmap, node_color=list(partition.values()))\n    ```", "```py\n        nx.draw_networkx_edges(G, pos, alpha=0.5, width=0.3)\n    ```", "```py\n        return plt.show()\n    ```", "```py\n    partition = community_louvain.best_partition(G, resolution=2)\n    ```", "```py\n    draw_partition(G, partition)\n    ```", "```py\n    community_df = pd.DataFrame(partition, index=[0]).T\n    ```", "```py\n    community_df.columns = ['community']\n    ```", "```py\n    community_df.head()\n    ```", "```py\n    community_df['community'].value_counts()\n    ```", "```py\n21    170\n10    133\n14    129\n16    104\n2      91\n3      85\n13     80\n23     70\n0      66\n15     55\n4      51\n22     48\n1      36\n17     10\n19      7\n9       4\n20      4\n5       4\n8       3\n18      3\n12      2\n11      2\n7       2\n6       2\n24      2\n```", "```py\n    def get_community_nodes(commmunity_df, partition):\n    ```", "```py\n        community_nodes = community_df[community_df['community']==partition].index.to_list()\n    ```", "```py\n        return community_nodes\n    ```", "```py\n    def draw_community(G, community_df, partition, node_size=3, show_names=False):\n    ```", "```py\n        community_nodes = get_community_nodes(community_df, partition)\n    ```", "```py\n        G_community = G.subgraph(community_nodes)\n    ```", "```py\n        return draw_graph(G_community, node_size=node_size, show_names=show_names)\n    ```", "```py\ndraw_community(G, community_df, 1, show_names=True)\n```", "```py\n    list(nx.bridges(G))\n    ```", "```py\n    [('@kmg3445t', '@code_kunst'),\n    ```", "```py\n     ('@code_kunst', '@highgrnd'),\n    ```", "```py\n     ('@code_kunst', '@youngjay_93'),\n    ```", "```py\n     ('@code_kunst', '@sobeompark'),\n    ```", "```py\n     ('@code_kunst', '@justhiseung'),\n    ```", "```py\n     ('@code_kunst', '@hwajilla'),\n    ```", "```py\n     ('@code_kunst', '@blobyblo'),\n    ```", "```py\n     ('@code_kunst', '@minddonyy'),\n    ```", "```py\n     ('@code_kunst', '@iuiive'),\n    ```", "```py\n     ('@code_kunst', '@eugenius887'),\n    ```", "```py\n     ...\n    ```", "```py\n    ]\n    ```", "```py\n    bridges = [s[0] for s in list(nx.bridges(G))]\n    ```", "```py\n    pd.Series(bridges).value_counts()[0:10]\n    ```", "```py\n    @b_hundred_hyun    127\n    ```", "```py\n    @zanelowe           90\n    ```", "```py\n    @haroobomkum        84\n    ```", "```py\n    @itzailee           78\n    ```", "```py\n    @spotifykr          60\n    ```", "```py\n    @shxx131bi131       57\n    ```", "```py\n    @thinktwicekpop     53\n    ```", "```py\n    @leehi_hi           53\n    ```", "```py\n    @bambam1a           49\n    ```", "```py\n    @bighitent          46\n    ```", "```py\n    cut_bridges = pd.Series(bridges).value_counts()[0:10].index.to_list()\n    ```", "```py\n    G_bridge_cut = G.copy()\n    ```", "```py\n    G_bridge_cut.remove_nodes_from(cut_bridges)\n    ```", "```py\n    draw_graph(G_bridge_cut, show_names=False)\n    ```", "```py\nG_core = nx.k_core(G, 2)\n```", "```py\ndraw_graph(G_core, show_names=True, node_size=3)\n```", "```py\nG_corona = nx.k_corona(G, 1)\n```", "```py\n    draw_graph(G_corona, show_names=False, node_size=2)\n    ```", "```py\n    G_corona = nx.k_corona(G, 1)\n    ```", "```py\n    G_corona = nx.k_core(G_corona, 1)\n    ```", "```py\ndraw_graph(G_corona, show_names=True, node_size=5, font_size=12)\n```", "```py\n    corona_nodes = list(G_corona.nodes)\n    ```", "```py\n    corona_nodes\n    ```", "```py\n['@day6official',\n '@9muses_',\n '@bol4_official',\n '@8_ohmygirl',\n '@withdrama',\n '@elris_official',\n '@hunus_elris',\n '@miiiiiner_misog',\n '@into__universe',\n '@shofarmusic']\n```", "```py\n    G_corona = nx.k_corona(G, 2)\n    ```", "```py\n    draw_graph(G_corona, show_names=True, node_size=3)\n    ```"]