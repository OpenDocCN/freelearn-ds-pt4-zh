["```py\npip install <library name>\n```", "```py\npip install networkx\n```", "```py\npip install python-louvain\n```", "```py\nfrom community import community_louvain\n```", "```py\n    import networkx as nx\n    ```", "```py\n    import pandas as pd\n    ```", "```py\n    G = nx.les_miserables_graph()\n    ```", "```py\n    df = nx.to_pandas_edgelist(G)[['source', 'target']]\n    ```", "```py\n    # dropping 'weight'\n    ```", "```py\n    G = nx.from_pandas_edgelist(df)\n    ```", "```py\nnx.info(G)\n'Graph with 77 nodes and 254 edges'\n```", "```py\n    def draw_graph(G, show_names=False, node_size=1, font_size=10, edge_width=0.5):\n    ```", "```py\n        import numpy as np\n    ```", "```py\n        from IPython.display import SVG\n    ```", "```py\n        from sknetwork.visualization import svg_graph\n    ```", "```py\n        from sknetwork.data import Bunch\n    ```", "```py\n        from sknetwork.ranking import PageRank\n    ```", "```py\n        adjacency = nx.to_scipy_sparse_matrix(G, nodelist= None, dtype=None, weight='weight', format='csr')\n    ```", "```py\n        names = np.array(list(G.nodes()))\n    ```", "```py\n        graph = Bunch()\n    ```", "```py\n        graph.adjacency = adjacency\n    ```", "```py\n        graph.names = np.array(names)\n    ```", "```py\n        pagerank = PageRank()\n    ```", "```py\n        scores = pagerank.fit_transform(adjacency)\n    ```", "```py\n        if show_names:\n    ```", "```py\n            image = svg_graph(graph.adjacency, font_size = font_size , node_size=node_size, names=graph.names, width=700, height=500, scores=scores, edge_width = edge_width)\n    ```", "```py\n        else:\n    ```", "```py\n            image = svg_graph(graph.adjacency, node_size = node_size, width=700, height=500, scores = scores, edge_width=edge_width)\n    ```", "```py\n        return SVG(image)\n    ```", "```py\n    draw_graph(G, font_size=12, show_names=True, node_size =4, edge_width=1)\n    ```", "```py\n    draw_graph(nx.k_core(G, 2), font_size=12, show_names=False, node_size=4, edge_width=0.5)\n    ```", "```py\n    G_copy = G.copy()\n    ```", "```py\n    G_copy.remove_nodes_from(['Valjean', 'Marius', 'Fantine', 'Cosette', 'Bamatabois'])\n    ```", "```py\n    draw_graph(G_copy, font_size=12, show_names=True, node_size=4, edge_width=1)\n    ```", "```py\n    components = list(nx.connected_components(G_copy))\n    ```", "```py\n    len(components)\n    ```", "```py\n    10\n    ```", "```py\n    G_copy = nx.k_core(G_copy, 1)\n    ```", "```py\n    components = list(nx.connected_components(G_copy))\n    ```", "```py\n    len(components)\n    ```", "```py\n    4\n    ```", "```py\n    community = components[0]\n    ```", "```py\n    G_community = G_copy.subgraph(community)\n    ```", "```py\n    draw_graph(G_community, show_names=True, node_size=5)\n    ```", "```py\n    community = components[1]\n    ```", "```py\n    G_community = G_copy.subgraph(community)\n    ```", "```py\n    draw_graph(G_community, show_names=True, node_size=4)\n    ```", "```py\n    community = components[2]\n    ```", "```py\n    G_community = G_copy.subgraph(community)\n    ```", "```py\n    draw_graph(G_community, show_names=True, node_size=4)\n    ```", "```py\n    community = components[3]\n    ```", "```py\n    G_community = G_copy.subgraph(community)\n    ```", "```py\n    draw_graph(G_community, show_names=True, node_size=4)\n    ```", "```py\n    import community as community_louvain\n    ```", "```py\n    def draw_partition(G, partition):\n    ```", "```py\n        import matplotlib.cm as cm\n    ```", "```py\n        import matplotlib.pyplot as plt\n    ```", "```py\n        # draw the graph\n    ```", "```py\n        plt.figure(3,figsize=(12,12))\n    ```", "```py\n        pos = nx.spring_layout(G)\n    ```", "```py\n        # color the nodes according to their partition\n    ```", "```py\n        cmap = cm.get_cmap('jet', max(partition.values()) + 1)\n    ```", "```py\n        nx.draw_networkx_nodes(G, pos, partition.keys(), node_size=40, cmap=cmap, node_color = list(partition.values()))\n    ```", "```py\n        nx.draw_networkx_edges(G, pos, alpha=0.5, width = 0.3)\n    ```", "```py\n        return plt.show()\n    ```", "```py\n    partition = community_louvain.best_partition(G, resolution=1)\n    ```", "```py\n    draw_partition(G, partition)\n    ```", "```py\n    partition\n    ```", "```py\n    {'Napoleon': 1,\n    ```", "```py\n     'Myriel': 1,\n    ```", "```py\n     'MlleBaptistine': 1,\n    ```", "```py\n     'MmeMagloire': 1,\n    ```", "```py\n     'CountessDeLo': 1,\n    ```", "```py\n     'Geborand': 1,\n    ```", "```py\n      …\n    ```", "```py\n     'Grantaire': 0,\n    ```", "```py\n     'Child1': 0,\n    ```", "```py\n     'Child2': 0,\n    ```", "```py\n     'BaronessT': 2,\n    ```", "```py\n     'MlleVaubois': 2,\n    ```", "```py\n     'MotherPlutarch': 0}\n    ```", "```py\n[node for node, community in partition.items() if community == 2]\n```", "```py\nfrom networkx.algorithms.community.label_propagation import label_propagation_communities\n```", "```py\n    communities = label_propagation_communities(G)\n    ```", "```py\n    communities = list(communities)\n    ```", "```py\n    communities[0]\n    ```", "```py\n    {'Champtercier',\n    ```", "```py\n     'Count',\n    ```", "```py\n     'CountessDeLo',\n    ```", "```py\n     'Cravatte',\n    ```", "```py\n     'Geborand',\n    ```", "```py\n     'Myriel',\n    ```", "```py\n     'Napoleon',\n    ```", "```py\n     'OldMan'}\n    ```", "```py\n    community = communities[1]\n    ```", "```py\n    G_community = G.subgraph(community)\n    ```", "```py\n    draw_graph(G_community, show_names=True, node_size=5)\n    ```", "```py\n    community = communities[2]\n    ```", "```py\n    G_community = G.subgraph(community)\n    ```", "```py\n    draw_graph(G_community, show_names=True, node_size=5)\n    ```", "```py\n    community = communities[3]\n    ```", "```py\n    G_community = G.subgraph(community)\n    ```", "```py\n    draw_graph(G_community, show_names=True, node_size=5)\n    ```", "```py\n    from networkx.algorithms.community import girvan_newman\n    ```", "```py\n    communities = girvan_newman(G)\n    ```", "```py\n    communities = list(communities)\n    ```", "```py\n    len(communities)\n    ```", "```py\n    76\n    ```", "```py\n    communities = communities[9]\n    ```", "```py\n    community = communities[0]\n    ```", "```py\n    G_community = G.subgraph(community)\n    ```", "```py\n    draw_graph(G_community, show_names=True, node_size=5)\n    ```", "```py\n    community = communities[1]\n    ```", "```py\n    G_community = G.subgraph(community)\n    ```", "```py\n    draw_graph(G_community, show_names=True, node_size=5)\n    ```", "```py\n    community = communities[2]\n    ```", "```py\n    G_community = G.subgraph(community)\n    ```", "```py\n    draw_graph(G_community, show_names=True, node_size=5)\n    ```", "```py\n    community = communities[3]\n    ```", "```py\n    G_community = G.subgraph(community)\n    ```", "```py\n    draw_graph(G_community, show_names=True, node_size=5)\n    ```", "```py\n    community = communities[4]\n    ```", "```py\n    G_community = G.subgraph(community)\n    ```", "```py\n    draw_graph(G_community, show_names=True, node_size=5)\n    ```"]