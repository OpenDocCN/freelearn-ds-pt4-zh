["```py\npip install <library name>\n```", "```py\npip install networkx\n```", "```py\n    import networkx as nx\n    ```", "```py\n    import pandas as pd\n    ```", "```py\n    G = nx.les_miserables_graph()\n    ```", "```py\n    df = nx.to_pandas_edgelist(G)[['source', 'target']] # dropping 'weight'\n    ```", "```py\n    G = nx.from_pandas_edgelist(df)\n    ```", "```py\n    draw_graph(G)\n    ```", "```py\ndegree_df = pd.DataFrame(G.degree)\ndegree_df.columns = ['person', 'degrees']\ndegree_df.set_index('person', inplace=True)\ndegree_df.head()\n```", "```py\nclustering_df = pd.DataFrame(nx.clustering(G), index=[0]).T\nclustering_df.columns = ['clustering']\nclustering_df.head()\n```", "```py\ntriangle_df = pd.DataFrame(nx.triangles(G), index=[0]).T\ntriangle_df.columns = ['triangles']\ntriangle_df.head()\n```", "```py\nbetw_cent_df = pd.DataFrame(nx.betweenness_centrality(G), index=[0]).T\nbetw_cent_df.columns = ['betw_cent']\nbetw_cent_df.head()\n```", "```py\nclose_cent_df = pd.DataFrame(nx.closeness_centrality(G), index=[0]).T\nclose_cent_df.columns = ['close_cent']\nclose_cent_df.head()\n```", "```py\npr_df = pd.DataFrame(nx.pagerank(G), index=[0]).T\npr_df.columns = ['pagerank']\npr_df.head()\n```", "```py\nadj_df = nx.to_pandas_adjacency(G)\nadj_df.columns = ['adj_' + c.lower() for c in adj_df.columns]\nadj_df.head()\n```", "```py\nclf_df = pd.DataFrame()\nclf_df = degree_df.merge(clustering_df, left_index=True, right_index=True)\nclf_df = clf_df.merge(triangle_df, left_index=True, right_index=True)\nclf_df = clf_df.merge(betw_cent_df, left_index=True, right_index=True)\nclf_df = clf_df.merge(close_cent_df, left_index=True, right_index=True)\nclf_df = clf_df.merge(pr_df, left_index=True, right_index=True)\nclf_df = clf_df.merge(adj_df, left_index=True, right_index=True)\nclf_df.head(10)\n```", "```py\nrevolutionaries = ['Bossuet', 'Enjolras', 'Bahorel', 'Gavroche', 'Grantaire',\n                   'Prouvaire', 'Courfeyrac', 'Feuilly', 'Mabeuf', 'Marius', 'Combeferre']\n# spot check\nclf_df[clf_df.index.isin(revolutionaries)]\n```", "```py\nclf_df['label'] = clf_df.index.isin(revolutionaries).astype(int)\n```", "```py\nclf_df[['label']].sort_index().head(10)\n```", "```py\n    clf_df['label'].value_counts()\n    ```", "```py\n    …\n    ```", "```py\n    0    66\n    ```", "```py\n    1    11\n    ```", "```py\n    Name: label, dtype: int64\n    ```", "```py\n    clf_df['label'].value_counts(normalize=True)\n    ```", "```py\n    …\n    ```", "```py\n    0    0.857143\n    ```", "```py\n    1    0.142857\n    ```", "```py\n    Name: label, dtype: float64\n    ```", "```py\n    X_cols = clf_df.columns[0:-1]\n    ```", "```py\n    X = clf_df[X_cols]\n    ```", "```py\n    y = clf_df['label'].values\n    ```", "```py\n    X.head()\n    ```", "```py\n    y[0:5]\n    ```", "```py\n    from sklearn.model_selection import train_test_split\n    ```", "```py\n    X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=1337, test_size=0.4)\n    ```", "```py\nfrom sklearn.ensemble import RandomForestClassifier\nclf = RandomForestClassifier(random_state=1337, n_jobs=-1, n_estimators=100)\nclf.fit(X_train, y_train)\ntrain_acc = clf.score(X_train, y_train)\ntest_acc = clf.score(X_test, y_test)\nprint('train_acc: {} - test_acc: {}'.format(train_acc, test_acc))\n```", "```py\ntrain_acc: 1.0 - test_acc: 0.9354838709677419\n```", "```py\npredictions = clf.predict(X_test)\npredictions\n…\narray([0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,1, 0, 0, 1, 0, 0, 1, 0, 1])\n```", "```py\nfrom sklearn.metrics import confusion_matrix, classification_report, plot_confusion_matrix\n```", "```py\nconfusion_matrix(y_test, predictions)\n …\narray([[26,  2],\n             [ 0,  3]], dtype=int64)\n```", "```py\nplot_confusion_matrix(clf, X_test, y_test)\n```", "```py\nreport = classification_report(y_test, predictions)\nprint(report)\n```", "```py\ncheck_df = X_test.copy()\ncheck_df['label'] = y_test\ncheck_df['prediction'] = predictions\ncheck_df = check_df[['label', 'prediction']]\ncheck_df.head()\n```", "```py\nmask = check_df['label'] != check_df['prediction']\ncheck_df[mask]\n```", "```py\nclf.feature_importances_\n```", "```py\nimportance_df = pd.DataFrame(clf.feature_importances_, index=X_test.columns)\nimportance_df.columns = ['value']\nimportance_df.sort_values('value', ascending=False, inplace=True)\nimportance_df.head()\n```", "```py\nimport matplotlib.pyplot as plt\nimportance_df[0:20].plot.barh(figsize=(10,8)).invert_yaxis()\n```"]