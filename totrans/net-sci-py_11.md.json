["```py\npip install <library name>\n```", "```py\npip install networkx\n```", "```py\nimport networkx as nx\nimport pandas as pd\nG = nx.les_miserables_graph()\ndf = nx.to_pandas_edgelist(G)[['source', 'target']] # dropping 'weight'\nG = nx.from_pandas_edgelist(df)\nG_named = G.copy()\nG = nx.convert_node_labels_to_integers(G, first_label=0, ordering='default', label_attribute=None)\nnodes = G_named.nodes\n```", "```py\ndraw_graph(G, node_size=4, edge_width=0.2)\n```", "```py\ntrain_data = 'data/clf_df.csv'\nclf_df = pd.read_csv(train_data).set_index('index')\n```", "```py\nclf_df.head()\n```", "```py\n    from karateclub.community_detection.non_overlapping.scd import SCD\n    ```", "```py\n    import numpy as np\n    ```", "```py\n    model = SCD()\n    ```", "```py\n    model.fit(G)\n    ```", "```py\n    clusters = model.get_memberships()\n    ```", "```py\n    {0: 34,\n    ```", "```py\n     1: 14,\n    ```", "```py\n     2: 14,\n    ```", "```py\n     3: 14,\n    ```", "```py\n     4: 33,\n    ```", "```py\n     5: 32,\n    ```", "```py\n     6: 31,\n    ```", "```py\n     7: 30,\n    ```", "```py\n     8: 29,\n    ```", "```py\n     9: 28,\n    ```", "```py\n     10: 11,\n    ```", "```py\n    …\n    ```", "```py\n    }\n    ```", "```py\n    clusters = np.array(list(clusters.values()))\n    ```", "```py\narray([34, 14, 14, 14, 33, 32, 31, 30, 29, 28, 11, 27, 13, 26, 25, 24,  7,\n       15, 15,  4, 15,  9, 11,  6, 23, 35, 11, 11, 11, 11, 11, 36,  9,  1,\n        4,  4,  1,  1,  1, 15, 15, 15, 15, 37,  7,  7,  7,  7,  7,  7,  7,\n        6, 15, 15, 22, 17, 21, 15,  4, 20, 17,  1,  1, 19, 19,  1,  1,  1,\n        1,  1,  1,  2,  2,  1,  0, 18, 16])\n```", "```py\n    cluster_df = pd.DataFrame({'node':nodes, 'cluster':clusters})\n    ```", "```py\n    cluster_df.head(10)\n    ```", "```py\n    title = 'Clusters by Node Count (SCD)'\n    ```", "```py\n    cluster_df['cluster'].value_counts()[0:10].plot.barh(title=title).invert_yaxis()\n    ```", "```py\n    check_cluster = 1\n    ```", "```py\n    community_nodes = cluster_df[cluster_df['cluster']==check_cluster]['node'].to_list()\n    ```", "```py\n    G_comm = G_named.subgraph(community_nodes)\n    ```", "```py\n    draw_graph(G_comm, show_names=True, node_size=5)\n    ```", "```py\n    check_cluster = 15\n    ```", "```py\n    community_nodes = cluster_df[cluster_df['cluster']==check_cluster]['node'].to_list()\n    ```", "```py\n    G_comm = G_named.subgraph(community_nodes)\n    ```", "```py\n    draw_graph(G_comm, show_names=True, node_size=5)\n    ```", "```py\n    check_cluster = 7\n    ```", "```py\n    community_nodes = cluster_df[cluster_df['cluster']==check_cluster]['node'].to_list()\n    ```", "```py\n    G_comm = G_named.subgraph(community_nodes)\n    ```", "```py\n    draw_graph(G_comm, show_names=True, node_size=5)\n    ```", "```py\n    from karateclub.community_detection.overlapping.ego_splitter import EgoNetSplitter\n    ```", "```py\n    model = EgoNetSplitter()\n    ```", "```py\n    model.fit(G)\n    ```", "```py\n    clusters = model.get_memberships()\n    ```", "```py\n    clusters = np.array(list(clusters.values()))\n    ```", "```py\n    clusters = [i[0] for i in clusters] # needed because put clusters into an array of arrays\n    ```", "```py\n    cluster_df = pd.DataFrame({'node':nodes, 'cluster':clusters})\n    ```", "```py\n    title = 'Clusters by Node Count (EgoNetSplitter)'\n    ```", "```py\n    cluster_df['cluster'].value_counts()[0:10].plot.barh(title=title).invert_yaxis()\n    ```", "```py\n    check_cluster = 7\n    ```", "```py\n    community_nodes = cluster_df[cluster_df['cluster']==check_cluster]['node'].to_list()\n    ```", "```py\n    G_comm = G_named.subgraph(community_nodes)\n    ```", "```py\n    draw_graph(G_comm, show_names=True, node_size=5)\n    ```", "```py\n    check_cluster = 1\n    ```", "```py\n    community_nodes = cluster_df[cluster_df['cluster']==check_cluster]['node'].to_list()\n    ```", "```py\n    G_comm = G_named.subgraph(community_nodes)\n    ```", "```py\n    draw_graph(G_comm, show_names=True, node_size=5)\n    ```", "```py\n    check_cluster = 5\n    ```", "```py\n    community_nodes = cluster_df[cluster_df['cluster']==check_cluster]['node'].to_list()\n    ```", "```py\n    G_comm = G_named.subgraph(community_nodes)\n    ```", "```py\n    draw_graph(G_comm, show_names=True, node_size=5)\n    ```", "```py\ndef draw_clustering(embeddings, nodes, title):\n    import plotly.express as px\n    from sklearn.decomposition import PCA\n    embed_df = pd.DataFrame(embeddings)\n    # dim reduction, two features; solely for visualization\n    model = PCA(n_components=2)\n    X_features = model.fit_transform(embed_df)\n    embed_df = pd.DataFrame(X_features)\n    embed_df.index = nodes\n    embed_df.columns = ['x', 'y']\n    fig = px.scatter(embed_df, x='x', y='y', text=embed_df.index)\n    fig.update_traces(textposition='top center')\n    fig.update_layout(height=800, title_text=title, font_size=11)\n    return fig.show()\n```", "```py\n    from karateclub.node_embedding.attributed.feathernode import FeatherNode\n    ```", "```py\n    model = FeatherNode()\n    ```", "```py\n    model.fit(G, clf_df)\n    ```", "```py\n    embeddings = model.get_embedding()\n    ```", "```py\n    title = 'Les Miserables Character Similarity (FeatherNode)'\n    ```", "```py\n    draw_clustering(embeddings, nodes, title)\n    ```", "```py\n    node = 'Feuilly'\n    ```", "```py\n    G_ego = nx.ego_graph(G_named, node)\n    ```", "```py\n    draw_graph(G_ego, show_names=True, node_size=3)\n    ```", "```py\n    node = 'Prouvaire'\n    ```", "```py\n    G_ego = nx.ego_graph(G_named, node)\n    ```", "```py\n    draw_graph(G_ego, show_names=True, node_size=3)\n    ```", "```py\n    node = 'MotherInnocent'\n    ```", "```py\n    G_ego = nx.ego_graph(G_named, node)\n    ```", "```py\n    draw_graph(G_ego, show_names=True, node_size=3)\n    ```", "```py\nnode = 'MmeMagloire'\nG_ego = nx.ego_graph(G_named, node)\ndraw_graph(G_ego, show_names=True, node_size=3)\n```", "```py\n    eb_df = pd.DataFrame(embeddings, index=nodes)\n    ```", "```py\n    eb_df['label'] = clf_df['label']\n    ```", "```py\n    eb_df.head(10)\n    ```", "```py\n    from sklearn.model_selection import train_test_split\n    ```", "```py\n    X_cols = [c for c in eb_df.columns if c != 'label']\n    ```", "```py\n    X = eb_df[X_cols]\n    ```", "```py\n    y = eb_df['label']\n    ```", "```py\n    X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=1337, test_size=0.3)\n    ```", "```py\n    from sklearn.ensemble import RandomForestClassifier\n    ```", "```py\n    clf = RandomForestClassifier(random_state=1337)\n    ```", "```py\n    clf.fit(X_train, y_train)\n    ```", "```py\n    train_acc = clf.score(X_train, y_train)\n    ```", "```py\n    test_acc = clf.score(X_test, y_test)\n    ```", "```py\n    print('train accuracy: {}\\ntest accuracy: {}'.format(train_acc, test_acc))\n    ```", "```py\ntrain accuracy: 0.9811320754716981\ntest accuracy: 1.0\n```", "```py\nimportances = pd.DataFrame(clf.feature_importances_, index=X_train.columns)\nimportances.columns = ['importance']\nimportances.sort_values('importance', ascending=False, inplace=True)\nimportances[0:10].plot.barh(figsize=(10,4)).invert_yaxis()\n```", "```py\n    from karateclub.node_embedding.neighbourhood.nodesketch import NodeSketch\n    ```", "```py\n    model = NodeSketch()\n    ```", "```py\n    model.fit(G)\n    ```", "```py\n    embeddings = model.get_embedding()\n    ```", "```py\n    title = 'Les Miserables Character Similarity (NodeSketch)'\n    ```", "```py\n    draw_clustering(embeddings, nodes, title)\n    ```", "```py\nnode = 'Eponine'\nG_ego = nx.ego_graph(G_named, node)\ndraw_graph(G_ego, show_names=True, node_size=3)\n```", "```py\n    node = 'Brujon'\n    ```", "```py\n    G_ego = nx.ego_graph(G_named, node)\n    ```", "```py\n    draw_graph(G_ego, show_names=True, node_size=3)\n    ```", "```py\n    eb_df = pd.DataFrame(embeddings, index=nodes)\n    ```", "```py\n    eb_df['label'] = clf_df['label']\n    ```", "```py\n    eb_df.head(10)\n    ```", "```py\nX_cols = [c for c in eb_df.columns if c != 'label']\nX = eb_df[X_cols]\ny = eb_df['label']\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=1337, test_size=0.3)\nclf = RandomForestClassifier(random_state=1337)\nclf.fit(X_train, y_train)\ntrain_acc = clf.score(X_train, y_train)\ntest_acc = clf.score(X_test, y_test)\nprint('train accuracy: {}\\ntest accuracy: {}'.format(train_acc, test_acc))\n```", "```py\ntrain accuracy: 0.9811320754716981\ntest accuracy: 1.0\n```", "```py\n    importances = pd.DataFrame(clf.feature_importances_, index=X_train.columns)\n    ```", "```py\n    importances.columns = ['importance']\n    ```", "```py\n    importances.sort_values('importance', ascending=False, inplace=True)\n    ```", "```py\n    importances[0:10].plot.barh(figsize=(10,4)).invert_yaxis()\n    ```", "```py\n    from karateclub.node_embedding.neighbourhood.randne import RandNE\n    ```", "```py\n    model = RandNE()\n    ```", "```py\n    model.fit(G)\n    ```", "```py\n    embeddings = model.get_embedding()\n    ```", "```py\n    title = 'Les Miserables Character Similarity (RandNE)'\n    ```", "```py\n    draw_clustering(embeddings, nodes, title)\n    ```", "```py\n    node = 'Marius'\n    ```", "```py\n    G_ego = nx.ego_graph(G_named, node)\n    ```", "```py\n    draw_graph(G_ego, show_names=True, node_size=3)\n    ```", "```py\n    node = 'MotherPlutarch'\n    ```", "```py\n    G_ego = nx.ego_graph(G_named, node)\n    ```", "```py\n    draw_graph(G_ego, show_names=True, node_size=3)\n    ```", "```py\neb_df = pd.DataFrame(embeddings, index=nodes)\neb_df['label'] = clf_df['label']\neb_df.head(10)\n```", "```py\n    X_cols = [c for c in eb_df.columns if c != 'label']\n    ```", "```py\n    X = eb_df[X_cols]\n    ```", "```py\n    y = eb_df['label']\n    ```", "```py\n    X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=1337, test_size=0.3)\n    ```", "```py\n    clf = RandomForestClassifier(random_state=1337)\n    ```", "```py\n    clf.fit(X_train, y_train)\n    ```", "```py\n    train_acc = clf.score(X_train, y_train)\n    ```", "```py\n    test_acc = clf.score(X_test, y_test)\n    ```", "```py\n    print('train accuracy: {}\\ntest accuracy: {}'.format(train_acc, test_acc))\n    ```", "```py\ntrain accuracy: 0.9811320754716981\ntest accuracy: 0.9166666666666666\n```", "```py\nfrom karateclub.node_embedding.neighbourhood.grarep import GraRep\nmodel = GraRep()\nmodel.fit(G)\nembeddings = model.get_embedding()\n```", "```py\nfrom karateclub.node_embedding.neighbourhood.deepwalk import DeepWalk\nmodel = DeepWalk()\nmodel.fit(G)\nembeddings = model.get_embedding()\n```", "```py\nfrom karateclub.node_embedding.neighbourhood.grarep import GraRep\nmodel = GraRep()\nmodel.fit(G)\nembeddings = model.get_embedding()\n```"]