["```py\nimport pandas as pd\nyelp_raw_data = pd.read_csv(\"yelp.csv\")\nyelp_raw_data.head()\n```", "```py\nyelp_raw_data.shape\n# (10000,10)\n```", "```py\ntype(yelp_raw_data)\n# pandas.core.frame.DataFrame\n```", "```py\nyelp_raw_data['business_id'] # grabs a single column of the Dataframe\n```", "```py\n9yKzy9PApeiPPOUJEtnvkg\nZRJwVLyzEJq1VAihDhYiow\n6oRAC4uyJCsJl1X0WZpVSA\n_1QQZuf4zZOyFCvXc0o6Vg\n6ozycU1RpktNG2-1BroVtw\n-yxfBYGB6SEqszmxJxd97A\n6zp713qNhx8d9KCJJnrw1xA\n```", "```py\ntype(yelp_raw_data['business_id'])\n# pandas.core.series.Series\n```", "```py\nyelp_raw_data['business_id'].describe()\n  # count\n10000\n  # unique\n4174\n  #\ntop\nntN85eu27C04nwyPa8IHtw\n  #\nfreq\n37\n```", "```py\nreview_id which is a unique identifier for each review.\n```", "```py\nyelp_raw_data['review_id'].describe()\n# count                            10000\n# unique                           10000\n#          Top                     M3jTv5NIipi_N4mgmZiIEg\n#          Freq                    1\n```", "```py\nyelp_raw_data['text'].describe()\ncount        10000\nunique       9998\ntop          This review is for the chain in general. The l...\nfreq         2\n```", "```py\nyelp_raw_data['text'].describe()['top']\n```", "```py\n\"This review is for the chain in general. The location we went to is new so it isn't in Yelp yet. Once it is I will put this review there as well.......\"\n```", "```py\nduplicate_text = yelp_raw_data['text'].describe()['top']\ntext_is_the_duplicate = yelp_raw_data['text'] == duplicate_text\n```", "```py\ntype(text_is_the_duplicate) # it is a Series of Trues and Falses\ntext_is_the_duplicate.head() # shows a few Falses out of the Series\n```", "```py\nsum(text_is_the_duplicate) # == 2\n```", "```py\nfiltered_dataframe = yelp_raw_data[text_is_the_duplicate] # the filtered Dataframe\n```", "```py\n# count               10000\n# unique              1\n#          top        Review\n#          freq       10000\nyelp_raw_data['type'].describe()\n```", "```py\nyelp_raw_data['user_id'].describe()\n# count               10000\n# unique              6403\n#          top        fczQCSmaWF78toLEmb0Zsw\n#          freq       38\n```", "```py\nyelp_raw_data['stars'].describe()\n# count     10000.000000\n# mean      3.777500\n# std       1.214636\n# min       1.000000\n# 25%       3.000000\n# 50%       4.000000\n# 75%       5.000000\n# max       5.000000\n```", "```py\nyelp_raw_data['stars'].value_counts()\n# 4             3526\n# 5             3337\n# 3             1461\n#       2       927\n#       1       749\n```", "```py\nimport datetime\ndates = yelp_raw_data['stars'].value_counts()\ndates.sort_values\ndates.plot(kind='bar')\n```", "```py\ntitanic = pd.read_csv('short_titanic.csv')\ntitanic.head()\n```", "```py\ntitanic.shape\n# (891, 5)\n```", "```py\nimport numpy as np\ntitanic['Sex'] = np.where(titanic['Sex']=='female', 1, 0)\n```", "```py\ntitanic['Sex']\n# 0         0\n# 1         1\n# 2         1\n# 3         1\n# 4         0\n# 5         0\n# 6         0\n# 7         0\n```", "```py\ntitanic.describe()\n```", "```py\ntitanic.isnull().sum()\nSurvived     0\nPclass       0\nName         0\nSex          0\nAge          0\n```", "```py\nprint sum(titanic['Age'].isnull()) # == 177 missing values average_age = titanic['Age'].mean() # get the average age\ntitanic['Age'].fillna(average_age, inplace = True) #use the fillna method to remove null values\nprint sum(titanic['Age'].isnull()) # == 0 missing values\n```", "```py\ntitanic.isnull().sum()\nSurvived       0\nPclass         0\nName           0\nSex            0\nAge            0\n```", "```py\ntitanic.head()\n```", "```py\ntitanic.groupby('Sex')['Age'].mean()\n```", "```py\nSex\n0    30.505824\n1    28.216730\n```"]