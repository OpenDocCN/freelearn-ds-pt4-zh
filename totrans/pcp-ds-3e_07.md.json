["```py\nresults = [ ['A', 1], ['B', 1], ['A', 0], ['A', 0] ... ]\n```", "```py\nusers_exposed_to_A = []\nusers_exposed_to_B = []\n# create two lists to hold the results of each individual website\n```", "```py\nfor website, converted in results: # iterate through the results\nwill look something like website == 'A' and converted == 0 if website == 'A':\nusers_exposed_to_A.append(converted) elif website == 'B':\nusers_exposed_to_B.append(converted)\n```", "```py\nlen(users_exposed_to_A) == 188 #number of people exposed to website A\nlen(users_exposed_to_B) == 158 #number of people exposed to website B\n```", "```py\nsum(users_exposed_to_A) == 54 # people converted from website A\nsum(users_exposed_to_B) == 48 # people converted from website B\n```", "```py\nlen(users_exposed_to_A) - sum(users_exposed_to_A) == 134 # did not convert from website A\nlen(users_exposed_to_B) - sum(users_exposed_to_B) == 110 # did not convert from website B\n```", "```py\nimport numpy as np\nnp.mean([11, 15, 17, 14]) == 14.25\n```", "```py\nnp.mean([11, 15, 17, 14, 31]) == 17.6\n```", "```py\nnp.median([11, 15, 17, 14]) == 14.5\nnp.median([11, 15, 17, 14, 31]) == 15\n```", "```py\nfriends = [109, 1017, 1127, 418, 625, 957, 89, 950, 946, 797, 981, 125, 455, 731, 1640, 485, 1309, 472, 1132, 1773, 906, 531, 742, 621]\nnp.mean(friends) == 789.1\n```", "```py\nnp.median(friends) == 769.5\n```", "```py\nnp.max(friends) - np.min(friends) == 1684\n```", "```py\nnp.std(friends) # == 425.2\n```", "```py\nimport matplotlib.pyplot as plt\nfriends = [109, 1017, 1127, 418, 625, 957, 89, 950, 946, 797, 981, 125, 455, 731, 1640, 485, 1309, 472, 1132, 1773, 906, 531, 742, 621]\ny_pos = range(len(friends))\nplt.bar(y_pos, friends)\nplt.plot((0, 25), (789, 789), 'b-')\nplt.plot((0, 25), (789+425, 789+425), 'g-')\nplt.plot((0, 25), (789-425, 789-425), 'r-')\n```", "```py\nz_scores = []\nm = np.mean(friends) # average friends on Facebook\ns = np.std(friends) # standard deviation friends on Facebook\nfor friend in friends:\nz = (friend - m)/s# z-score\nz_scores.append(z) # make a list of the scores for plotting\n```", "```py\nplt.bar(y_pos, z_scores)\n```", "```py\nplt.bar(y_pos, z_scores)\nplt.plot((0, 25), (1, 1), 'g-')\nplt.plot((0, 25), (0, 0), 'b-')\nplt.plot((0, 25), (-1, -1), 'r-')\n```", "```py\nfriends = [109, 1017, 1127, 418, 625, 957, 89, 950, 946, 797, 981, 125, 455, 731, 1640, 485, 1309, 472, 1132, 1773, 906, 531, 742, 621]\nhappiness = [.8, .6, .3, .6, .6, .4, .8, .5, .4, .3, .3, .6, .2, .8, 1, .6, .2, .7, .5, .3, .1, 0, .3, 1]\nimport pandas as pd\ndf = pd.DataFrame({'friends':friends, 'happiness':happiness})\ndf.head()\n```", "```py\nfrom sklearn import preprocessing\ndf_scaled = pd.DataFrame(preprocessing.scale(df), columns = ['friends_scaled', 'happiness_scaled'])\ndf_scaled.head()\n```", "```py\ndf_scaled.plot(kind='scatter', x = 'friends_scaled', y = 'happiness_scaled')\n```", "```py\ndf.corr(). # correlation between variables\n```", "```py\nfinding the percentage of people within one standard deviation of the mean\nwithin_1_std = df_scaled[(df_scaled['friends_scaled'] <= 1) & (df_scaled['friends_scaled'] >= -1)].shape[0] within_1_std / float(df_scaled.shape[0])\n0.75\nfinding the percentage of people within two standard deviations of the mean\nwithin_2_std = df_scaled[(df_scaled['friends_scaled'] <= 2) & (df_scaled['friends_scaled'] >= -2)].shape[0] within_2_std / float(df_scaled.shape[0])\n0.916\nfinding the percentage of people within three standard deviations of the mean\nwithin_3_std = df_scaled[(df_scaled['friends_scaled'] <= 3) & (df_scaled['friends_scaled'] >= -3)].shape[0] within_3_std / float(df_scaled.shape[0])\n1.0\n```"]