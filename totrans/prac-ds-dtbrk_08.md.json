["```py\n    import jsonevent_message = dbutils.widgets.get(\"event_message\")event_message_dict = json.loads(event_message)model_name = event_message_dict.get(\"model_name\")print(event_message_dict)print(model_name)\n    ```", "```py\n    import mlflowfrom mlflow.utils.rest_utils import http_requestimport jsondef client():    return mlflow.tracking.client.MlflowClient()host_creds = client()._tracking_client.store.get_host_creds()host = host_creds.hosttoken = host_creds.tokendef mlflow_endpoint(endpoint, method, body='{}'):    if method == 'GET':        response = http_request(            host_creds=host_creds, endpoint=\"/api/2.0/mlflow/{}\".format(endpoint), method=method, params=json.loads(body))    else:        response = http_request(            host_creds=host_creds, endpoint=\"/api/2.0/mlflow/{}\".format(endpoint), method=method, json=json.loads(body))    return response.json()\n    ```", "```py\n    import mlflowpyfunc_model = mlflow.pyfunc.load_model(model_uri=f\"models:/{model_name}/{version}\")\n    ```", "```py\n# Leave a comment for the ML engineer who will be reviewing the testscomment = \"This model passed all the tests\"\ncomment_body = {'name': model_name, 'version': version, 'comment': comment}\nmlflow_endpoint('comments/create', 'POST', json.dumps(comment_body))\n```", "```py\n    from databricks_registry_webhooks import RegistryWebhooksClient, JobSpecjob_spec = JobSpec(  job_id=\"<jobid>\",  workspace_url=\"https://\"+instance,  access_token=token)job_webhook = RegistryWebhooksClient().create_webhook(  model_name=model_name,  events=[\"TRANSITION_REQUEST_TO_STAGING_CREATED\"],  job_spec=job_spec,  description=\"Registering webhook to automate testing of a new candidate model for staging\")job_webhook\n    ```", "```py\n    import databricks.automlmodel = databricks.automl.classify(    new_data.select(features),    target_col=target_column,    primary_metric=\"f1\",    timeout_minutes=5,    max_trials=30,)\n    ```", "```py\n    import mlflowfrom mlflow.tracking.client import MlflowClientclient = MlflowClient()run_id = model.best_trial.mlflow_run_idmodel_uri = f\"runs:/{run_id}/model\"model_details = mlflow.register_model(model_uri, model_name)\n    ```", "```py\n    %run ./mlflow-util\n    ```", "```py\n    staging_request = {'name': model_name, 'version': model_details.version, 'stage': 'Staging', 'archive_existing_versions': 'false'}mlflow_endpoint('transition-requests/create', 'POST', json.dumps(staging_request))\n    ```", "```py\n    comment = \"This was the best model from the most recent AutoML run. Ready for testing\"comment_body = {'name': model_name, 'version': model_details.version, 'comment': comment}mlflow_endpoint('comments/create', 'POST', json.dumps(comment_body))\n    ```"]