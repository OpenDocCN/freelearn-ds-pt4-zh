["```py\nif (!requireNamespace(\"BiocManager\"))\n    install.packages(\"BiocManager\")\nBiocManager::install()\n```", "```py\ncount_dataframe <- readr::read_tsv(file.path(getwd(), \"datasets\", \"ch1\", \"modencodefly_count_table.txt\" ))\ngenes <- count_dataframe[['gene']]\ncount_dataframe[['gene']] <- NULL\ncount_matrix <- as.matrix(count_dataframe)\nrownames(count_matrix) <- genes\npheno_data <- readr::read_table2(file.path(getwd(), \"datasets\", \"ch1\", \"modencodefly_phenodata.txt\"))\n```", "```py\nexperiments_of_interest <- c(\"L1Larvae\", \"L2Larvae\")\ncolumns_of_interest <- which( pheno_data[['stage']] %in% experiments_of_interest ) \n```", "```py\nlibrary(magrittr)\ngrouping <- pheno_data[['stage']][columns_of_interest] %>% \nforcats::as_factor()\n```", "```py\ncounts_of_interest <-  count_matrix[,columns_of_interest]\n```", "```py\nlibrary(edgeR)\ncount_dge <- edgeR::DGEList(counts = counts_of_interest, group = grouping)\n```", "```py\ndesign <- model.matrix(~ grouping)\neset_dge <- edgeR::estimateDisp(eset_dge, design)\nfit <- edgeR::glmQLFit(eset_dge, design)\nresult <- edgeR::glmQLFTest(fit, coef=2)\ntopTags(result)\n```", "```py\nload(file.path(getwd(), \"datasets/ch1/modencodefly_eset.RData\"))\n```", "```py\nexperiments_of_interest <- c(\"L1Larvae\", \"L2Larvae\")\ncolumns_of_interest <- which( phenoData(modencodefly.eset)[['stage']] %in% experiments_of_interest )\n```", "```py\ngrouping <- droplevels(phenoData(modencodefly.eset)[['stage']][columns_of_interest] )\n```", "```py\ncounts_of_interest <- exprs(modencodefly.eset)[, columns_of_interest]\n```", "```py\neset_dge <- edgeR::DGEList(\n counts = counts_of_interest,\n group = grouping \n )\n```", "```py\ndesign <- model.matrix(~ grouping)\neset_dge <- edgeR::estimateDisp(eset_dge, design)\n\nfit <- edgeR::glmQLFit(eset_dge, design)\nresult <- edgeR::glmQLFTest(fit, coef=2)\ntopTags(result)\n```", "```py\nnumeric_groups <- c(1,1,1,2,2,2)\nletter_groups <- c(\"A\",\"A\",\"A\", \"B\",\"B\",\"B\")\n```", "```py\n ## Coefficient: groupingL2Larvae\n ## logFC logCPM F PValue FDR\n ## FBgn0027527 6.318665 11.14876 42854.72 1.132951e-41 1.684584e-37\n ## [ reached 'max' / getOption(\"max.print\") -- omitted 9 rows ]\n```", "```py\ncount_dataframe <- readr::read_tsv(file.path(getwd(), \"datasets\", \"ch1\", \"modencodefly_count_table.txt\" ))\ngenes <- count_dataframe[['gene']]\ncount_dataframe[['gene']] <- NULL\ncount_matrix <- as.matrix(count_dataframe)\nrownames(count_matrix) <- genes\npheno_data <- readr::read_table2(file.path(getwd(), \"datasets\", \"ch1\", \"modencodefly_phenodata.txt\"))\n```", "```py\nexperiments_of_interest <- c(\"L1Larvae\", \"L2Larvae\")\ncolumns_of_interest <- which( pheno_data[['stage']] %in% experiments_of_interest ) \n```", "```py\nlibrary(magrittr)\ngrouping <- pheno_data[['stage']][columns_of_interest] %>% \n forcats::as_factor()\n```", "```py\ncounts_of_interest <- count_matrix[,columns_of_interest]\n```", "```py\nlibrary(\"DESeq2\")\ndds <- DESeqDataSetFromMatrix(countData = counts_of_interest,\n colData = grouping,\n design = ~ stage)\n```", "```py\ndds <- DESeq(dds)\n```", "```py\nres <- results(dds, contrast=c(\"stage\",\"L2Larvae\",\"L1Larvae\"))\n```", "```py\nlibrary(SummarizedExperiment)\nload(file.path(getwd(), \"datasets/ch1/modencodefly_eset.RData\"))\nsumm_exp <- makeSummarizedExperimentFromExpressionSet(modencodefly.eset)\nddsSE <- DESeqDataSet(summ_exp, design= ~ stage)\n```", "```py\nddsSE <- DESeq(ddsSE)\nresSE <- results(ddsSE, contrast=c(\"stage\",\"L2Larvae\",\"L1Larvae\"))\n```", "```py\nbaseMean log2FoldChange lfcSE stat pvalue padj\n```", "```py\ninstall.packages(\"devtools\")\ndevtools::install_github(\"bvieth/powsimR\")\n\n```", "```py\nipak <- function(pkg, repository = c(\"CRAN\", \"Bioconductor\", \"github\")) {\n    new.pkg <- pkg[!(pkg %in% installed.packages()[, \"Package\"])]\n    # new.pkg <- pkg\n    if (length(new.pkg)) {\n        if (repository == \"CRAN\") {\n            install.packages(new.pkg, dependencies = TRUE)\n        }\n        if (repository == \"Bioconductor\") {\n            if (strsplit(version[[\"version.string\"]], \" \")[[1]][3] > \"3.5.0\") {\n                if (!requireNamespace(\"BiocManager\")) {\n                  install.packages(\"BiocManager\")\n                }\n                BiocManager::install(new.pkg, dependencies = TRUE, ask = FALSE)\n            }\n            if (strsplit(version[[\"version.string\"]], \" \")[[1]][3] < \"3.5.0\") {\n                source(\"https://bioconductor.org/biocLite.R\")\n                biocLite(new.pkg, dependencies = TRUE, ask = FALSE)\n            }\n        }\n        if (repository == \"github\") {\n            devtools::install_github(new.pkg, build_vignettes = FALSE, force = FALSE, \n                dependencies = TRUE)\n        }\n    }\n}\n\n# CRAN PACKAGES\ncranpackages <- c(\"broom\", \"cobs\", \"cowplot\", \"data.table\", \"devtools\", \"doParallel\", \n    \"dplyr\", \"drc\", \"DrImpute\", \"fastICA\", \"fitdistrplus\", \"foreach\", \"gamlss.dist\", \n    \"ggExtra\", \"ggplot2\", \"ggthemes\", \"grDevices\", \"glmnet\", \"grid\", \"gtools\", \n    \"Hmisc\", \"kernlab\", \"MASS\", \"MBESS\", \"matrixStats\", \"mclust\", \"methods\", \n    \"minpack.lm\", \"moments\", \"msir\", \"NBPSeq\", \"nonnest2\", \"parallel\", \"penalized\", \n    \"plyr\", \"pscl\", \"reshape2\", \"Rmagic\", \"rsvd\", \"Rtsne\", \"scales\", \"Seurat\", \n    \"snow\", \"stats\", \"tibble\", \"tidyr\", \"VGAM\", \"ZIM\")\n\nipak(cranpackages, repository = \"CRAN\")\n\n# BIOCONDUCTOR\nbiocpackages <- c(\"AnnotationDbi\", \"bayNorm\", \"baySeq\", \"Biobase\", \"BiocGenerics\", \n    \"BiocParallel\", \"DEDS\", \"DESeq2\", \"EBSeq\", \"edgeR\", \"IHW\", \"iCOBRA\", \"limma\", \n    \"Linnorm\", \"MAST\", \"monocle\", \"NOISeq\", \"qvalue\", \"ROTS\", \"RUVSeq\", \"S4Vectors\", \n    \"scater\", \"scDD\", \"scde\", \"scone\", \"scran\", \"SCnorm\", \"SingleCellExperiment\", \n    \"SummarizedExperiment\", \"zinbwave\")\nipak(biocpackages, repository = \"Bioconductor\")\n\n# GITHUB\ngithubpackages <- c(\"nghiavtr/BPSC\", \"cz-ye/DECENT\", \"mohuangx/SAVER\", \"statOmics/zingeR\")\nipak(githubpackages, repository = \"github\")\n```", "```py\ndevtools::install_github(\"bvieth/powsimR\", build_vignettes = TRUE, dependencies = FALSE)\nlibrary(\"powsimR\")\n```", "```py\narab_data <- readRDS(file.path(getwd(), \"datasets\", \"ch1\", \"arabidopsis.RDS\" ))\nmeans_mock <- rowMeans(arab_data[, c(\"mock1\", \"mock2\", \"mock3\")])\nmeans_hrcc <- rowMeans(arab_data[, c(\"hrcc1\", \"hrcc2\", \"hrcc3\")])\nlog2fc <- log2(means_hrcc / means_mock)\nprop_de <- sum(abs(log2fc) > 2) / length(log2fc) \n```", "```py\nfinite_log2fc <-log2fc[is.finite(log2fc)]\nplot(density(finite_log2fc))\nextRemes::qqnorm(finite_log2fc )\n```", "```py\nlibrary(powsimR)\n library(dplyr)\n\n params <- estimateParam(\n countData = arab_data,\n Distribution = \"NB\",\n RNAseq = \"bulk\",\n normalization = \"TMM\" # edgeR method, can be others\n )\n\n de_opts <- DESetup(ngenes=1000,\n nsims=25,\n p.DE = prop_de,\n pLFC= finite_log2fc,\n sim.seed = 58673\n )\n\n sim_opts <- SimSetup(\n desetup = de_opts,\n params = params\n )\n\n num_replicates <- c(2, 3, 5, 8, 12,15)\n```", "```py\n simDE <- simulateDE(n1 = num_replicates,\n n2 = num_replicates,\n sim.settings = sim_opts,\n DEmethod = \"edgeR-LRT\",\n normalization = \"TMM\",\n verbose = FALSE)\n```", "```py\n evalDE <- evaluateDE(simRes = simDE,\n alpha.type = 'adjusted',\n MTC = 'BH',\n alpha.nominal = 0.1,\n stratify.by = 'mean',\n filter.by = 'none',\n strata.filtered = 1,\n target.by = 'lfc',\n delta = 0)\n```", "```py\n plotEvalDE(evalRes = evalDE,\n rate='marginal',\n quick=FALSE, annot=TRUE)\n```", "```py\nprop_de\n## [1] 0.2001754\n```", "```py\nlog2fc_func <- function(x){ rnorm(x, 0, 2)} \nprop_de = 0.1\nde_opts <- DESetup(ngenes=1000,\n nsims=25,\n p.DE = prop_de,\n pLFC= log2fc_func,\n sim.seed = 58673\n )\n```", "```py\nget_annotated_regions_from_gff <- function(file_name) { \n    gff <- rtracklayer::import.gff(file_name) \n    as(gff, \"GRanges\") \n}\n```", "```py\nwhole_genome <- csaw::windowCounts( \n    file.path(getwd(), \"datasets\", \"ch1\", \"windows.bam\"),\n    bin = TRUE,\n    filter = 0,\n    width = 500,\n    param = csaw::readParam(\n        minq = 20,\n        dedup = TRUE,\n        pe = \"both\"\n    )\n)\ncolnames(whole_genome) <- c(\"small_data\")\n\nannotated_regions <- get_annotated_regions_from_gff(file.path(getwd(), \"datasets\", \"ch1\", \"genes.gff\"))\n```", "```py\nlibrary(IRanges)\nlibrary(SummarizedExperiment)\nwindows_in_genes <-IRanges::overlapsAny( SummarizedExperiment::rowRanges(whole_genome), annotated_regions ) \n```", "```py\nannotated_window_counts <- whole_genome[windows_in_genes,] \nnon_annotated_window_counts <- whole_genome[ ! windows_in_genes,] \n```", "```py\nassay(non_annotated_window_counts)\n```", "```py\nget_annotated_regions_from_bed <- function(file_name){ \n    bed <- rtracklayer::import.bed(file_name) \n    as(bed, \"GRanges\") \n}\n```", "```py\nlibrary(Rsamtools) \nlibrary(bumphunter) \npileup_df <- Rsamtools::pileup(file.path(getwd(), \"datasets\", \"ch1\", \"windows.bam\"))\n```", "```py\nclusters <- bumphunter::clusterMaker(pileup_df$seqnames, pileup_df$pos, maxGap = 100) \n```", "```py\nbumphunter::regionFinder(pileup_df$count, pileup_df$seqnames, pileup_df$pos, clusters, cutoff=1)\n```", "```py\ntable(clusters)\n## clusters\n##    1    2    3 \n## 1486 1552 1520\n```", "```py\n##    chr start  end     value  area cluster indexStart indexEnd    L\n## 3 Chr1  4503 5500 10.401974 15811       3       3039     4558 1520\n## 1 Chr1   502 1500  9.985868 14839       1          1     1486 1486\n## 2 Chr1  2501 3500  8.657216 13436       2       1487     3038 1552\n```", "```py\nlibrary(SummarizedExperiment) \narab_rse <- readRDS(file.path(getwd(), \"datasets\", \"ch1\", \"arabidopsis_rse.RDS\") ) \n\n make_tag <- function(grange_obj){\n     paste0( \n        grange_obj@seqnames, \n        \":\", \n        grange_obj@ranges@start, \n        \"-\", \n        (grange_obj@ranges@start + grange_obj@ranges@width) \n    ) \n}\n```", "```py\ncounts <- assay(arab_rse)\n\nif ( ! is.null(names(rowRanges(arab_rse))) ){\n  rownames(counts) <- names(rowRanges(arab_rse))\n} else {\n  rownames(counts) <- make_tag(rowRanges(arab_rse))\n}\n```", "```py\nhead(counts)\n##                  mock1 mock2 mock3 hrcc1 hrcc2 hrcc3\n## Chr1:3631-5900      35    77    40    46    64    60\n## Chr1:5928-8738      43    45    32    43    39    49\n## Chr1:11649-13715    16    24    26    27    35    20\n## Chr1:23146-31228    72    43    64    66    25    90\n## Chr1:31170-33154    49    78    90    67    45    60\n## Chr1:33379-37872     0    15     2     0    21     8\n```", "```py\nlibrary(sva)\narab <- readRDS(file.path(getwd(), \"datasets\", \"ch1\", \"arabidopsis.RDS\"))\n```", "```py\nkeep <- apply(arab, 1, function(x) { length(x[x>3])>=2 } )\narab_filtered <- arab[keep,]\n```", "```py\ngroups <- as.factor(rep(c(\"mock\", \"hrcc\"), each=3))\n```", "```py\ntest_model <- model.matrix(~groups)\nnull_model <- test_model[,1]\nsvar <- svaseq(arab_filtered, test_model, null_model, n.sv=1)\n```", "```py\ndesign <- cbind(test_model, svar$sv)\n```", "```py\nlibrary(AllelicImbalance)\nlibrary(VariantAnnotation)\n\nregion_of_interest <- GRanges(seqnames = c(\"17\"), ranges = IRanges(79478301, 79478361)) \nbam_folder <- file.path(getwd(), \"datasets\", \"ch1\", \"allele_expression\") \n```", "```py\nreads <- impBamGAL(bam_folder, region_of_interest, verbose = FALSE)\n\nvcf_file <-file.path( getwd(), \"datasets\", \"ch1\", \"allele_expression\",\"ERP000101.vcf\" )\nvariant_positions <- granges(VariantAnnotation::readVcf(vcf_file), \"hg19\" )\n\nallele_counts <- getAlleleCounts(reads, variant_positions, verbose=FALSE)\n```", "```py\nase.vcf <- ASEsetFromCountList(rowRanges = variant_positions, allele_counts)\n\nreference_sequence <- file.path(getwd(), \"datasets\", \"ch1\", \"allele_expression\", \"hg19.chr17.subset.fa\")\n\nref(ase.vcf) <- refAllele(ase.vcf,fasta=reference_sequence)\nalt(ase.vcf) <- inferAltAllele(ase.vcf)\n```", "```py\nbinom.test(ase.vcf, n=\"*\")\n```", "```py\n##               chr17_79478287 chr17_79478331 chr17_79478334\n## ERR009113.bam          0.500   1.000000e+00   1.000000e+00\n## ERR009115.bam         0.125   6.103516e-05   3.051758e-05\n```", "```py\nlibrary(DESeq2)\nlibrary(magrittr)\nlibrary(ggplot2)\n\ndds <- readRDS(\"~/Desktop/r_book/datasets/ch1/modencode_dds.RDS\")\n```", "```py\nplotCounts(dds, gene=\"FBgn0000014\", intgroup = \"stage\", returnData = TRUE) %>%\n  ggplot() + aes(stage, count) + geom_boxplot(aes(fill=stage)) + scale_y_log10() + theme_bw()\n```", "```py\nresult_df <- results(dds, contrast=c(\"stage\",\"L2Larvae\",\"L1Larvae\"), tidy= TRUE) %>%\n  dplyr::mutate(is_significant=padj<0.05)\n\nggplot(result_df) + aes(baseMean, log2FoldChange) + geom_point(aes(colour=is_significant)) + scale_x_log10() + theme_bw()\n```", "```py\nggplot(result_df) + aes(log2FoldChange, -1 * log10(pvalue))  + geom_point(aes(colour=is_significant)) + theme_bw()\n```"]