["```py\nif (!requireNamespace(\"BiocManager\"))\n    install.packages(\"BiocManager\")\nBiocManager::install()\n```", "```py\nletters[1:5]\n## a b c d e\n```", "```py\nlibrary(GenomicRanges)\nlibrary(gmapR)\nlibrary(rtracklayer)\nlibrary(VariantAnnotation)\nlibrary(VariantTools)\n```", "```py\nbam_folder <- file.path(getwd(), \"datasets\", \"ch2\")\nbam_folder_contents <- list.files(file.path(getwd(), \"datasets\", \"ch2\" ) )\nbam <- file.path( bam_folder, \"hg17_snps.bam\")\nfasta_file <- file.path(bam_folder,\"chr17.83k.fa\")\n```", "```py\nfa <- rtracklayer::FastaFile(fasta_file)\n\ngenome <- gmapR::GmapGenome(fa, create=TRUE)\n\nqual_params <- TallyVariantsParam(\n                   genome = genome,\n                   minimum_mapq = 20)\n\nvar_params <- VariantCallingFilters(read.count = 19,\n                                    p.lower = 0.01\n                                    )\n```", "```py\ncalled_variants <- callVariants(bam, qual_params, \n                                calling.filters = var_params\n                                )\n\nhead(called_variants)\n```", "```py\nget_annotated_regions_from_gff <- function(file_name) {\n  gff <- rtracklayer::import.gff(file_name) \n  as(gff, \"GRanges\")\n}\n\nget_annotated_regions_from_bed <- function(file_name){\n  bed <- rtracklayer::import.bed(file_name)\n  as(bed, \"GRanges\")\n}\n\ngenes <- get_annotated_regions_from_gff(file.path( bam_folder, \"chr17.83k.gff3\"))\n```", "```py\noverlaps <- GenomicRanges::findOverlaps(called_variants, genes) \noverlaps\n```", "```py\ngenes[subjectHits(overlaps)]\n```", "```py\n VRanges object with 6 ranges and 17 metadata columns:\n##           seqnames    ranges strand         ref              alt\n##              <Rle> <IRanges>  <Rle> <character> <characterOrRle>\n##   [1] NC_000017.10        64      *           G                T\n##   [2] NC_000017.10        69      *           G                T\n##   [3] NC_000017.10        70      *           G                T\n##   [4] NC_000017.10        73      *           T                A\n##   [5] NC_000017.10        77      *           T                A\n##   [6] NC_000017.10        78      *           G                T\n```", "```py\n## Hits object with 12684 hits and 0 metadata columns:\n##           queryHits subjectHits\n##           <integer>   <integer>\n##       [1]     35176           1\n##       [2]     35176           2\n##       [3]     35176           3\n##       [4]     35177           1\n```", "```py\n## GRanges object with 12684 ranges and 20 metadata columns:\n##               seqnames      ranges strand |   source       type     score\n##                  <Rle>   <IRanges>  <Rle> | <factor>   <factor> <numeric>\n##       [1] NC_000017.10 64099-76866      - |   havana ncRNA_gene      <NA>\n##       [2] NC_000017.10 64099-76866      - |   havana    lnc_RNA      <NA>\n##       [3] NC_000017.10 64099-65736      - |   havana       exon      <NA>\n```", "```py\nVariantAnnotation::sampleNames(called_variants) <- \"sample_name\"\nvcf <- VariantAnnotation::asVCF(called_variants)\nVariantAnnotation::writeVcf(vcf, \"hg17.vcf\")\n```", "```py\nlibrary(Biostrings)\nlibrary(systemPipeR)\n\ndna_object <- readDNAStringSet(file.path(getwd(), \"datasets\",\"ch2\", \"arabidopsis_chloroplast.fa\"))\n```", "```py\npredicted_orfs <- predORF(dna_object, n = 'all', type = 'gr', mode='ORF', strand = 'both', longest_disjoint = TRUE) \npredicted_orfs\n```", "```py\nbases <- c(\"A\", \"C\", \"T\", \"G\")\nraw_seq_string <- strsplit(as.character(dna_object), \"\")\n\nseq_length <- width(dna_object[1])\ncounts <- lapply(bases, function(x) {sum(grepl(x, raw_seq_string))}  )\nprobs <- unlist(lapply(counts, function(base_count){signif(base_count / seq_length, 2) }))\n```", "```py\nget_longest_orf_in_random_genome <- function(x,\n  length = 1000, \n  probs = c(0.25, 0.25, 0.25, 0.25), \n  bases = c(\"A\",\"C\",\"T\",\"G\")){\n\n  random_genome <- paste0(sample(bases, size = length, replace = TRUE, prob = probs), collapse = \"\")\n  random_dna_object <- DNAStringSet(random_genome)\n  names(random_dna_object) <- c(\"random_dna_string\")\n  orfs <- predORF(random_dna_object, n = 1, type = 'gr', mode='ORF', strand = 'both', longest_disjoint = TRUE)\n  return(max(width(orfs)))\n}\n```", "```py\nrandom_lengths <- unlist(lapply(1:10, get_longest_orf_in_random_genome, length = seq_length, probs = probs, bases = bases))\n```", "```py\nlongest_random_orf <- max(random_lengths)\n```", "```py\nkeep <- width(predicted_orfs) > longest_random_orf\norfs_to_keep <- predicted_orfs[keep]\norfs_to_keep\n```", "```py\n## GRanges object with 2501 ranges and 2 metadata columns:\n##           seqnames        ranges strand | subject_id inframe2end\n##              <Rle>     <IRanges>  <Rle> |  <integer>   <numeric>\n##      1 chloroplast   86762-93358      + |          1           2\n##   1162 chloroplast     2056-2532      - |          1           3\n##      2 chloroplast   72371-73897      + |          2           2\n##   1163 chloroplast   77901-78362      - |          2           1\n##      3 chloroplast   54937-56397      + |          3           3\n```", "```py\n## GRanges object with 10 ranges and 2 metadata columns:\n##         seqnames        ranges strand | subject_id inframe2end\n##            <Rle>     <IRanges>  <Rle> |  <integer>   <numeric>\n##    1 chloroplast   86762-93358      + |          1           2\n##    2 chloroplast   72371-73897      + |          2           2\n##    3 chloroplast   54937-56397      + |          3           3\n##    4 chloroplast   57147-58541      + |          4           1\n```", "```py\nextracted_orfs <- BSgenome::getSeq(dna_object, orfs_to_keep) \nnames(extracted_orfs) <- paste0(\"orf_\", 1:length(orfs_to_keep))\nwriteXStringSet(extracted_orfs, \"saved_orfs.fa\")\n```", "```py\nlibrary(karyoploteR)\nlibrary(GenomicRanges)\n```", "```py\ngenome_df <- data.frame( \n    chr = paste0(\"chr\", 1:5), \n    start = rep(1, 5), \n    end = c(34964571, 22037565, 25499034, 20862711, 31270811) \n    ) \ngenome_gr <- makeGRangesFromDataFrame(genome_df)\n```", "```py\nsnp_pos <- sample(1:1e7, 25)\nsnps <- data.frame(\n  chr = paste0(\"chr\", sample(1:5,25, replace=TRUE)),\n  start = snp_pos,\n  end = snp_pos\n)\nsnps_gr <- makeGRangesFromDataFrame(snps)\n```", "```py\nsnp_labels <- paste0(\"snp_\", 1:25)\n```", "```py\nplot.params <- getDefaultPlotParams(plot.type=1)\nplot.params$data1outmargin <- 600\n```", "```py\nkp <- plotKaryotype(genome=genome_gr, plot.type = 1, plot.params = plot.params)\nkpPlotMarkers(kp, snps_gr, labels = snp_labels)\n```", "```py\nnumeric_data <- data.frame(\n y = rnorm(100,mean = 1,sd = 0.5 ),\n chr = rep(\"chr4\", 100),\n start = seq(1,20862711, 20862711/100),\n end = seq(1,20862711, 20862711/100)\n)\nnumeric_data_gr <- makeGRangesFromDataFrame(numeric_data)\n```", "```py\nplot.params <- getDefaultPlotParams(plot.type=2)\nplot.params$data1outmargin <- 800\nplot.params$data2outmargin <- 800\nplot.params$topmargin <- 800\n```", "```py\nkp <- plotKaryotype(genome=genome_gr, plot.type = 2, plot.params = plot.params)\nkpPlotMarkers(kp, snps_gr, labels = snp_labels)\nkpLines(kp, numeric_data_gr, y = numeric_data$y, data.panel=2)\n```", "```py\nis_not_microsat <- function(x){ !grepl(\"microsat\", x, fixed = TRUE)}\n```", "```py\nprefilters <- FilterRules(list(microsat = is_not_microsat) )\n```", "```py\nmajor_alt <- function(x){\n af <- info(x)$AF \n result <- unlist(lapply(af, function(x){x[1] < 0.5}))\n return(result)\n}\n```", "```py\nfilters <- FilterRules(list(alt_is_major = major_alt))\n```", "```py\nvcf_file <- file.path(getwd(), \"datasets\", \"ch2\", \"sample.vcf.gz\")\nfilterVcf(vcf_file, \"hg17\", \"filtered.vcf\", prefilters = prefilters, filters = filters)\n```", "```py\nlibrary(GenomicRanges)\nlibrary(rtracklayer)\nlibrary(SummarizedExperiment)\n\nget_granges_from_gff <- function(file_name) {\n  gff <- rtracklayer::import.gff(file_name)\n  as(gff, \"GRanges\")\n}\n\nget_granges_from_bed <- function(file_name){\n  bed <- rtracklayer::import.bed(file_name)\n  as(bed, \"GRanges\")\n}\n\nget_granges_from_text <- function(file_name){\n  df <- readr::read_tsv(file_name, col_names = TRUE ) \n  GenomicRanges::makeGRangesFromDataFrame(df, keep.extra.columns = TRUE)\n}\n\n```", "```py\ngr_from_gff <- get_annotated_regions_from_gff(file.path(getwd(), \"datasets\", \"ch2\", \"arabidopsis_chr4.gff\"))\ngr_from_txt <- get_granges_from_text(file.path(getwd(), \"datasets\", \"ch2\", \"arabidopsis_chr4.txt\"))\n```", "```py\ngenes_on_chr4 <- gr_from_gff[ gr_from_gff$type == \"gene\" & seqnames(gr_from_gff) %in% c(\"Chr4\") ]  \n```", "```py\nregion_of_interest_gr <- GRanges(\n    seqnames = c(\"Chr4\"), \n    IRanges(c(10000), width= c(1000))\n)\n\n```", "```py\noverlap_hits <- findOverlaps(region_of_interest_gr, gr_from_gff)\nfeatures_in_region <- gr_from_gff[subjectHits(overlap_hits) ]\nfeatures_in_region\n```", "```py\n## GRanges object with 1 range and 10 metadata columns:\n##       seqnames     ranges strand |   source     type     score     phase\n##          <Rle>  <IRanges>  <Rle> | <factor> <factor> <numeric> <integer>\n##   [1]     Chr4 2895-10455      - |   TAIR10     gene      <NA>      <NA>\n##                ID        Name                Note          Parent\n##       <character> <character>     <CharacterList> <CharacterList>\n##   [1]   AT4G00020   AT4G00020 protein_coding_gene            <NA>\n##             Index Derives_from\n##       <character>  <character>\n##   [1]        <NA>         <NA>\n##   -------\n##   seqinfo: 1 sequence from an unspecified genome; no seqlengths\n```", "```py\nset.seed(4321)\nexperiment_counts <- matrix( runif(4308 * 6, 1, 100), 4308)\nsample_names <- c(rep(\"ctrl\",3), rep(\"test\",3) )\nse <- SummarizedExperiment::SummarizedExperiment(rowRanges = gr_from_txt, assays = list(experiment_counts), colData = sample_names)\n```", "```py\noverlap_hits <- findOverlaps(region_of_interest_gr, se)\ndata_in_region <- se[subjectHits(overlap_hits) ]\nassay(data_in_region)\n```", "```py\n##          [,1]     [,2]     [,3]     [,4]     [,5]     [,6]\n## [1,] 69.45349 90.44524 88.33501 60.87932 86.24007 45.64919\n```", "```py\nlibrary(VariantAnnotation)\nlibrary(rrBLUP)\nset.seed(1234)\nvcf_file <- file.path(getwd(), \"datasets\", \"ch2\", \"small_sample.vcf\")\nvcf <- readVcf(vcf_file, \"hg19\")\n```", "```py\ngts <- geno(vcf)$GT\n\nsamples <- samples(header(vcf))\nmarkers <- rownames(gts)\nchrom <- as.character(seqnames(rowRanges(vcf)))\npos <- as.numeric(start(rowRanges(vcf)))\n```", "```py\nconvert <- function(v){\n  v <- gsub(\"0/0\", 1, v)\n  v <- gsub(\"0/1\", 0, v)\n  v <- gsub(\"1/0\", 0, v)\n  v <- gsub(\"1/1\",-1, v)\n  return(v)\n}\n```", "```py\ngt_char<- apply(gts, convert, MARGIN = 2)\n\ngenotype_matrix <- matrix(as.numeric(gt_char), nrow(gt_char) )\ncolnames(genotype_matrix)<- samples\n```", "```py\nvariant_info <- data.frame(marker = markers,\n                           chrom = chrom,\n                           pos = pos)\n```", "```py\ngenotypes <-  cbind(variant_info, as.data.frame(genotype_matrix))\ngenotypes\n```", "```py\nphenotypes <- data.frame(\n  line = samples,\n  score = rnorm(length(samples))\n                         )\n\nphenotypes\n```", "```py\nGWAS(phenotypes, genotypes,plot=FALSE)\n```", "```py\n##           marker chrom     pos NA00001 NA00002 NA00003\n## 1      rs6054257    20   14370       1       0      -1\n## 2   20:17330_T/A    20   17330       1       0       1\n## 3 20:1230237_T/G    20 1230237       1       1       0\n```", "```py\n##      line     score\n## 1 NA00001 -1.2070657\n## 2 NA00002 0.2774292\n## 3 NA00003 1.0844412\n```", "```py\n## [1] \"GWAS for trait: score\"\n## [1] \"Variance components estimated. Testing markers.\"\n\n##           marker chrom     pos      score\n## 1      rs6054257    20   14370 0.3010543\n## 2   20:17330_T/A    20   17330 0.3010057\n## 3 20:1230237_T/G    20 1230237 0.1655498\n```", "```py\nlibrary(csaw)\nwhole_genome <- csaw::windowCounts( \n    file.path(getwd(), \"datasets\", \"ch2\", \"hg17_snps.bam\"), \n    bin = TRUE, \n    filter = 0, \n    width = 100, \n    param = csaw::readParam( minq = 20, dedup = TRUE, pe = \"both\" ) \n) \ncolnames(whole_genome) <- c(\"h17\") \n```", "```py\ncounts <- assay(whole_genome)[,1] \n```", "```py\nmin_count <- quantile(counts, 0.1)[[1]]\ncounts[counts < min_count] <- NA\n```", "```py\nn <- length(counts)\ndoubled_windows <- 10\n\nleft_pad <- floor( (n/2) - doubled_windows )\nright_pad <- n - left_pad -doubled_windows\nmultiplier <- c(rep(1, left_pad ), rep(2,doubled_windows), rep(1, right_pad) )\ncounts <- counts * multiplier\n```", "```py\n mean_cov <- mean(counts, na.rm=TRUE) \n ratio <- matrix(log2(counts / mean_cov), ncol = 1)\n plot(ratio)\n```", "```py\nse <- SummarizedExperiment(assays=list(ratio), rowRanges= rowRanges(whole_genome), colData = c(\"CoverageRatio\"))\n```", "```py\nregion_of_interest <- GRanges(\n  seqnames = c(\"NC_000017.10\"),\n  IRanges(c(40700), width = c(1500) )\n)\n\noverlap_hits <- findOverlaps(region_of_interest, se)\ndata_in_region <- se[subjectHits(overlap_hits)]\nassay(data_in_region)\n```", "```py\n##              [,1]\n##  [1,]  0.01725283\n##  [2,]  0.03128239\n##  [3,] -0.05748994\n##  [4,]  0.05893873\n##  [5,]  0.94251006\n##  [6,]  0.88186246\n##  [7,]  0.87927929\n##  [8,]  0.63780103\n##  [9,]  1.00308550\n## [10,]  0.75515798\n## [11,]  0.80228189\n## [12,]  1.05207419\n## [13,]  0.82393626\n## [14,]          NA\n## [15,]          NA\n## [16,] -0.16269298\n```"]