["```py\nif (!requireNamespace(\"BiocManager\"))\n    install.packages(\"BiocManager\")\nBiocManager::install()\n```", "```py\nletters[1:5]\n```", "```py\n## a b c d e\n```", "```py\nlibrary(universalmotif)\nlibrary(Biostrings)\n\nmotif <- read_matrix(file.path(getwd(), \"datasets\", \"ch3\",\"simple_motif.txt\"))\n```", "```py\nsequences <- readDNAStringSet(file.path(getwd(), \"datasets\", \"ch3\", \"promoters.fa\"))\n```", "```py\nmotif_hits <- scan_sequences(motif, sequences = sequences)\nmotif_hits\n```", "```py\nmotif_info <- enrich_motifs(motif, sequences, shuffle.k = 3, verbose = 0, progress = FALSE, RC = TRUE)\nmotif_info\n```", "```py\nmeme_path = \"/Users/macleand/miniconda2/bin/meme\"\nmeme_run <- run_meme(sequences, bin = meme_path, output = \"meme_out\", overwrite.dir = TRUE)\nmotifs <- read_meme(\"meme_out/meme.txt\")\nview_motifs(motifs)\n```", "```py\n##               motif  sequence start stop  score max.score score.pct \n## 1   YTTTYTTTTTYTTTY AT4G28150    73   87  7.531  22.45824  33.53335 \n## 2   YTTTYTTTTTYTTTY AT4G28150    75   89 10.949  22.45824  48.75270\n```", "```py\n##             motif total.seq.hits num.seqs.hit num.seqs.total\n## 1 YTTTYTTTTTYTTTY            916           50             50\n##   total.bkg.hits num.bkg.hit num.bkg.total   Pval.hits   Qval.hits\n## 1            265          48            50 4.75389e-85 4.75389e-85\n##     Eval.hits\n## 1 9.50778e-85\n```", "```py\ninstall.packages(\"devtools\")\nlibrary(devtools)\ninstall_bitbucket(\"Grantlab/bio3d\", subdir = \"ver_devel/bio3d/\")\n```", "```py\nlibrary(org.Hs.eg.db)\nkeytypes(org.Hs.eg.db)\n```", "```py\nk <- head(keys(org.Hs.eg.db, keytype = \"ENSEMBL\"), n = 3 )\n```", "```py\nresult <- select(org.Hs.eg.db, keys = k, keytype=\"ENSEMBL\", columns = c(\"PFAM\"))\nresult\n```", "```py\nlibrary(PFAM.db)\ndescriptions <- PFAMDE\n```", "```py\nall_ids <- mappedkeys(descriptions)\n```", "```py\nid_description_mapping <- as.data.frame(descriptions[all_ids])\n```", "```py\ndplyr::left_join(result, id_description_mapping, by = c(\"PFAM\" = \"ac\") )\n```", "```py\n##  [1] \"ACCNUM\"       \"ALIAS\"        \"ENSEMBL\"      \"ENSEMBLPROT\" \n##  [5] \"ENSEMBLTRANS\" \"ENTREZID\"     \"ENZYME\"       \"EVIDENCE\"    \n##  [9] \"EVIDENCEALL\"  \"GENENAME\"     \"GO\"           \"GOALL\"       \n## [13] \"IPI\"          \"MAP\"          \"OMIM\"         \"ONTOLOGY\"    \n## [17] \"ONTOLOGYALL\"  \"PATH\"         \"PFAM\"         \"PMID\"        \n## [21] \"PROSITE\"      \"REFSEQ\"       \"SYMBOL\"       \"UCSCKG\"     \n## [25] \"UNIGENE\"      \"UNIPROT\"\n```", "```py\n##           ENSEMBL    PFAM\n## 1 ENSG00000121410 PF13895\n## 2 ENSG00000175899 PF01835\n## 3 ENSG00000175899 PF07678\n## 4 ENSG00000175899 PF10569\n## 5 ENSG00000175899 PF07703\n## 6 ENSG00000175899 PF07677\n## 7 ENSG00000175899 PF00207\n## 8 ENSG00000256069    <NA>\n```", "```py\n##           ENSEMBL    PFAM                                       de\n## 1 ENSG00000121410 PF13895                    Immunoglobulin domain\n## 2 ENSG00000175899 PF01835                               MG2 domain\n## 3 ENSG00000175899 PF07678               A-macroglobulin TED domain\n## 4 ENSG00000175899 PF10569                                     <NA>\n## 5 ENSG00000175899 PF07703 Alpha-2-macroglobulin bait region domain\n## 6 ENSG00000175899 PF07677  A-macroglobulin receptor binding domain\n## 7 ENSG00000175899 PF00207             Alpha-2-macroglobulin family\n## 8 ENSG00000256069    <NA>                                     <NA>\n```", "```py\nlibrary(org.At.tair.db)\ncolumns(org.At.tair.db)\n```", "```py\nlibrary(org.EcK12.eg.db)\ncolumns(org.EcK12.eg.db)\n```", "```py\nsequence <- read.fasta(file.path(getwd(), \"datasets\", \"ch3\", \"ecoli_hsp.fa\") )\n# run pfamseq on protein\nresult <- hmmer(sequence, type=\"hmmscan\", db=\"pfam\")\nresult$hit.tbl\n```", "```py\n##   name        acc bias dcl desc  evalue flags hindex ndom nincluded\n## 1 GrpE PF01025.19  3.3 272 GrpE 1.4e-46     3   8846    1         1\n##   nregions nreported    pvalue score taxid     pdb.id bitscore mlog.evalue\n## 1        1         1 -115.4076 158.2     0 PF01025.19    158.2    105.5824\n```", "```py\nlibrary(ensembldb)\nlibrary(EnsDb.Rnorvegicus.v79)\nhasProteinData(EnsDb.Rnorvegicus.v79)\n```", "```py\ne <- EnsDb.Rnorvegicus.v79\nk <- head(keys(e, keytype = \"GENEID\"), n = 3 )\n```", "```py\nselect(e, keys = GeneIdFilter(k),\n       columns = c(\"TXBIOTYPE\", \"UNIPROTID\", \"PROTEINID\",\"INTERPROACCESSION\"))\n```", "```py\n## [1] TRUE\n```", "```py\n##         TXBIOTYPE UNIPROTID          PROTEINID INTERPROACCESSION  GENEID\n## 1  protein_coding    Q32KJ7 ENSRNOP00000052495         IPR017850  ENSRNOG00000000001\n## 2  protein_coding    Q32KJ7 ENSRNOP00000052495         IPR000917  ENSRNOG00000000001\n## 3  protein_coding    C9E895 ENSRNOP00000000008         IPR015424  ENSRNOG00000000007\n```", "```py\nlibrary(biomaRt)\nbiomart_athal <- useMart(biomart = \"plants_mart\", host = \"plants.ensembl.org\", dataset = \"athaliana_eg_gene\")\ngetBM( c(\"tair_locus\", \"interpro\"), filters=c(\"tair_locus\"), values = c(\"AT5G40950\", \"AT2G40510\"), mart = biomart_athal)\n```", "```py\n##   tair_locus  interpro\n## 1  AT2G40510 IPR000892\n## 2  AT2G40510 IPR038551\n## 3  AT5G40950 IPR001684\n## 4  AT5G40950 IPR018261\n```", "```py\nlibrary(msa)\nseqs <- readAAStringSet(file.path(getwd(), \"datasets\", \"ch3\", \"hglobin.fa\"))\nseqs\n```", "```py\nalignment <- msa(seqs, method = \"ClustalOmega\")\nalignment\n```", "```py\n## ClustalOmega 1.2.0 \n## \n## Call:\n##    msa(seqs, method = \"ClustalOmega\")\n## \n## MsaAAMultipleAlignment with 3 rows and 142 columns\n##     aln                                               names\n## [1] MVLSPADKTNVKAAWGKVGAHAG...PAVHASLDKFLASVSTVLTSKYR HBA_HUMAN\n## [2] MVLSGEDKSNIKAAWGKIGGHGA...PAVHASLDKFLASVSTVLTSKYR HBA_MOUSE\n## [3] MSLTRTERTIILSLWSKISTQAD...ADAHAAWDKFLSIVSGVLTEKYR HBAZ_CAPHI\n## Con MVLS??DKTNIKAAWGKIG?HA?...PAVHASLDKFLASVSTVLTSKYR Consensus\n```", "```py\nmsaPrettyPrint(alignment, output=\"pdf\", showNames=\"left\",\nshowLogo=\"none\", askForOverwrite=FALSE, verbose=FALSE, file=\"whole_align.pdf\")\n```", "```py\nmsaPrettyPrint(alignment, c(10,30), output=\"pdf\", showNames=\"left\",\nfile = \"zoomed_align.pdf\", showLogo=\"top\", askForOverwrite=FALSE, verbose=FALSE)\n```", "```py\n## A AAStringSet instance of length 3\n##     width seq                                          names               \n## [1]   142 MVLSPADKTNVKAAWGKVGAH...HASLDKFLASVSTVLTSKYR HBA_HUMAN\n## [2]   142 MVLSGEDKSNIKAAWGKIGGH...HASLDKFLASVSTVLTSKYR HBA_MOUSE\n## [3]   142 MSLTRTERTIILSLWSKISTQ...HAAWDKFLSIVSGVLTEKYR HBAZ_CAPHI\n```", "```py\n## ClustalOmega 1.2.0 \n## \n## Call:\n##    msa(seqs, method = \"ClustalOmega\")\n## \n## MsaAAMultipleAlignment with 3 rows and 142 columns\n##     aln                                               names\n## [1] MVLSPADKTNVKAAWGKVGAHAG...PAVHASLDKFLASVSTVLTSKYR HBA_HUMAN\n## [2] MVLSGEDKSNIKAAWGKIGGHGA...PAVHASLDKFLASVSTVLTSKYR HBA_MOUSE\n## [3] MSLTRTERTIILSLWSKISTQAD...ADAHAAWDKFLSIVSGVLTEKYR HBAZ_CAPHI\n## Con MVLS??DKTNIKAAWGKIG?HA?...PAVHASLDKFLASVSTVLTSKYR Consensus\n```", "```py\nlibrary(ape)\nlibrary(seqinr)\nalignment_seqinr <- msaConvert(alignment, type=\"seqinr::alignment\")\ndistances <- seqinr::dist.alignment(alignment_seqinr, \"identity\")\ntree <- ape::nj(distances)\nplot(tree, main=\"Phylogenetic Tree of HBA Sequences\")\n```", "```py\nlibrary(DECIPHER)\nlong_seqs <- readDNAStringSet(file.path(getwd(), \"datasets\", \"ch3\", \"plastid_genomes.fa\"))\nlong_seqs\n```", "```py\nSeqs2DB(long_seqs, \"XStringSet\", \"long_db\", names(long_seqs))\n```", "```py\nsynteny <- FindSynteny(\"long_db\")\npairs(synteny)\n```", "```py\nplot(synteny)\n```", "```py\nalignment <- AlignSynteny(synteny, \"long_db\")\n```", "```py\nblocks <- unlist(alignment[[1]])\nwriteXStringSet(blocks, \"genome_blocks_out.fa\")\n```", "```py\n## A DNAStringSet instance of length 5\n##      width seq                                         names               \n## [1] 130584 GGCATAAGCTATCTTCCCAA...GATTCAAACATAAAAGTCCT NC_018523.1 Sacch...\n## [2] 161592 ATGGGCGAACGACGGGAATT...AGAAAAAAAAATAGGAGTAA NC_022431.1 Ascle...\n## [3] 117672 ATGAGTACAACTCGAAAGTC...GATTTCATCCACAAACGAAC NC_022259.1 Nanno...\n## [4] 154731 TTATCCATTTGTAGATGGAA...TATACACTAAGACAAAAGTC NC_022417.1 Cocos...\n## [5] 156618 GGGCGAACGACGGGAATTGA...TTTTGTAGCGAATCCGTTAT NC_022459.1 Camel...\n```", "```py\nlibrary(kebabs)\nlibrary(Biostrings) \nseqs <- readAAStringSet(file.path(getwd(), \"datasets\", \"ch3\", \"ecoli_proteins.fa\")) \nclasses <- readr::read_csv(file.path(getwd(), \"datasets\", \"ch3\", \"ecoli_protein_classes.txt\"), col_names = TRUE)\nclasses <- classes$class\n```", "```py\nnum_seqs <- length(seqs) \ntraining_proportion <- 0.75 \ntraining_set_indices <- sample(1:num_seqs, training_proportion * num_seqs) \ntest_set_indices <- c(1:num_seqs)[-training_set_indices]\n```", "```py\nkernel <- gappyPairKernel(k=1, m=3) \nmodel <- kbsvm(x=seqs[training_set_indices], y=classes[training_set_indices], kernel=kernel, pkg=\"e1071\", svm=\"C-svc\", cost=15)\n```", "```py\npredictions <- predict(model, seqs[test_set_indices]) \nevaluatePrediction(predictions, classes[test_set_indices], allLabels=c(1,-1) )\n```", "```py\n##     1 -1\n## 1  36 23\n## -1 10 19\n## \n## Accuracy:              62.500% (55 of 88)\n## Balanced accuracy:     61.749% (36 of 46 and 19 of 42)\n## Matthews CC:            0.250\n## \n## Sensitivity:           78.261% (36 of 46)\n## Specificity:           45.238% (19 of 42)\n## Precision:             61.017% (36 of 59)\n```", "```py\nseq_to_test <- seqs[[1]][1:10]\nseq_to_test\n```", "```py\n## 10-letter \"AAString\" instance ## seq: MSFDIAKYPT\n```", "```py\nprediction_profile <-getPredictionProfile(seq_to_test, kernel, featureWeights(model), modelOffset(model) ) plot(prediction_profile)\n```", "```py\n##     1 -1\n## 1  36 23\n## -1 10 19\n## \n## Accuracy:              62.500% (55 of 88)\n## Balanced accuracy:     61.749% (36 of 46 and 19 of 42)\n## Matthews CC:            0.250\n## \n## Sensitivity:           78.261% (36 of 46)\n## Specificity:           45.238% (19 of 42)\n## Precision:             61.017% (36 of 59)\n```", "```py\nconda install -c bioconda muscle \n```", "```py\nconda install -c schrodinger pymol\n```", "```py\nlibrary(bio3d)\na <- read.pdb(file.path(getwd(), \"datasets\", \"ch3\" ,\"1xwc.pdb\"))\nb <- read.pdb(file.path(getwd(), \"datasets\", \"ch3\", \"3trx.pdb\"))\n```", "```py\npdbs <- pdbaln(list(\"1xwc\"=a,\"3trx\"=b), fit=TRUE, exefile=\"msa\")\n```", "```py\npymol_path = \"/Users/macleand/miniconda2/bin/pymol\"\npymol(pdbs, exefile = pymol_path, type = \"launch\", as=\"cartoon\")\n```"]