["```py\nif (!requireNamespace(\"BiocManager\"))\n    install.packages(\"BiocManager\")\n```", "```py\nBiocManager::install(\"package_name\")\n```", "```py\nlibrary(ggplot2)\nlibrary(ggridges)\n```", "```py\nggplot(airquality) + aes(Temp, Month, group = Month) + geom_density_ridges()\n```", "```py\nggplot(airquality) + aes(Temp, as.factor(Month) ) + geom_density_ridges()\n```", "```py\nggplot(airquality) + aes(Temp, Month, group = Month,  fill = ..x..) + \n  geom_density_ridges_gradient() + \n  scale_fill_viridis(option = \"C\", name = \"Temp\")\n```", "```py\nlibrary(tidyr)\nairquality %>%\n  gather(key = \"Measurement\", value = \"value\", Ozone, Solar.R, Wind, Temp ) %>%\n  ggplot() + aes(value, Month, group = Month) + \n  geom_density_ridges_gradient() +\n  facet_wrap( ~ Measurement, scales = \"free\")\n```", "```py\nheatmap(WorldPhones)\n```", "```py\nheatmap(WorldPhones, Rowv = NA, Colv = NA)\n```", "```py\ncc <- rainbow(ncol(WorldPhones), start = 0, end = .3)\n\nheatmap(WorldPhones, ColSideColors = cc)\n```", "```py\nlibrary(RColorBrewer)\nheatmap(WorldPhones, ColSideColors = cc, \n        col = colorRampPalette(brewer.pal(8, \"PiYG\"))(25))\n```", "```py\nheatmap(WorldPhones, ColSideColors = cc, scale = \"column\")\n```", "```py\nlibrary(ggraph)\nlibrary(magrittr)\n\ndf <- readr::read_delim(file.path(getwd(), \"datasets\", \"ch7\", \"bio-DM-LC.edges\"), \n                        delim = \" \", \n                        col_names = c(\"nodeA\", \"nodeB\", \"weight\")) %>% \n      dplyr::mutate(edge_type = c(\"A\",\"B\"), length(weight), replace = TRUE))\n```", "```py\ngraph <- igraph::graph_from_data_frame(df)\n\nggraph(graph, layout = \"kk\") + \n  geom_edge_link() + \n  geom_node_point() + \n  theme_void()\n```", "```py\nggraph(graph, layout = \"fr\") + \n  geom_edge_link(aes(colour = edge_type)) + \n  geom_node_point() + \n  theme_void()\n```", "```py\nigraph::V(graph)$category <- sample(c(\"Nucleus\", \"Mitochondrion\", \"Cytoplasm\"), length(igraph::V(graph)), replace = TRUE )\nigraph::V(graph)$degree <- igraph::degree(graph)\n\nggraph(graph, layout = \"fr\") + \n  geom_edge_link(aes(colour = edge_type)) + \n  geom_node_point(aes(size = degree, colour = category)) + \n  theme_void()\n\n```", "```py\nggraph(graph, 'hive', axis = 'category') +\n  geom_edge_hive(aes(colour = edge_type, alpha = ..index..)) + \n  geom_axis_hive(aes(colour = category)) + \n  theme_void()\n```", "```py\nlibrary(plotly)\nplot_ly(data = Orange, x = ~age, y = ~circumference)\n```", "```py\nplot_ly(data = Orange, x = ~age, y = ~ circumference,\n        color = ~Tree, size = ~age,\n        text = ~paste(\"Tree ID: \", Tree, \"<br>Age: \", age, \"Circ: \", circumference)\n        )\n```", "```py\ntrace_1 <- rnorm(35, mean = 120, sd = 10)\nnew_data <- data.frame(Orange, trace_1)\n\nplot_ly(data = new_data, x = ~age, y = ~ circumference,\n        color = ~Tree, size = ~age,\n        text = ~paste(\"Tree ID: \", Tree, \"<br>Age: \", age, \"Circ: \", circumference)\n\n)  %>% add_trace(y = ~trace_1, mode = 'lines' ) %>%\n  add_trace(y = ~circumference, mode = 'markers' )\n```", "```py\nplot_ly(data = Orange, x = ~age, y = ~ circumference,\n        color = ~Tree, size = ~age,\n        text = ~paste(\"Tree ID: \", Tree, \"<br>Age: \", age, \"Circ: \", circumference)\n\n)  %>%\n  add_trace(y = ~circumference, mode = 'marker' ) %>%\n  layout(\n    title = \"Plot with switchable trace\",\n      updatemenus = list(\n        list(\n          type = \"dropdown\",\n            y = 0.8,\n            buttons = list(\n              list(method = \"restyle\",\n                   args = list(\"mode\", \"markers\"),\n                   label = \"Marker\"\n              ),\n              list(method = \"restyle\",\n                   args = list(\"mode\", \"lines\"),\n                   label = \"Lines\"\n                   )\n\n            )\n          )\n      )\n  )\n```", "```py\nlibrary(plotly)\n\nd <- data.frame(\n  x <- seq(1,10, by = 0.5),\n  y <- seq(1,10, by = 0.5)\n)\n\nz <- matrix(rnorm(length(d$x) * length(d$y) ), nrow = length(d$x), ncol = length(d$y))\n```", "```py\nplot_ly(d, x = ~x , y = ~y, z = ~z) %>% \n  add_surface()\n```", "```py\nplot_ly(d, x = ~x , y = ~y, z = ~z) %>% \n  add_surface(\n    contours = list(\n    z = list(\n      show=TRUE,\n      usecolormap=TRUE,\n      highlightcolor=\"#ff0000\",\n      project=list(z=TRUE)\n      )\n    )\n  )\n```", "```py\nlibrary(circlize)\ndf <- readr::read_tsv(file.path( getwd(), \"datasets\", \"ch7\", \"arabidopsis.gff\"), col_names = FALSE) %>% \n  dplyr::select(X1, X4, X5)\n```", "```py\ncircos.genomicInitialize(df)\ncircos.link(\"Chr4\", c(9000000, 1200000), \n            \"Chr5\", c(12000000,15000000),\n            col = \"red\")\n```", "```py\ncircos.clear()\n\nsource_links <- read.delim(file.path(getwd(), \"datasets\", \"ch7\", \"arabidopsis_out_links.bed\"), header = FALSE) \ntarget_links <- read.delim(file.path(getwd(), \"datasets\", \"ch7\", \"arabidopsis_in_links.bed\"), header = FALSE)\n\ncircos.genomicInitialize(df)\ncircos.genomicLink(source_links, target_links, col = \"blue\")\n```", "```py\ncircos.clear()\n\ngene_positions <- read.delim(file.path(getwd(), \"datasets\", \"ch7\", \"arabidopsis_genes.bed\"), header = FALSE)\ncircos.genomicInitialize(df)\ncircos.genomicDensity(gene_positions, window.size = 1e6, col = \"#0000FF80\", track.height = 0.1)\n```", "```py\ncircos.clear()\n\nheatmap_data <- read.delim(file.path(getwd(), \"datasets\", \"ch7\", \"arabidopsis_quant_data.bed\"), header = FALSE)\n\ncol_fun = colorRamp2(c(10, 12, 15), c(\"green\", \"black\", \"red\"))\ncircos.genomicInitialize(df)\ncircos.genomicHeatmap(heatmap_data, col = col_fun, side = \"inside\", border = \"white\")\n```", "```py\ncircos.clear()\n\ncircos.genomicInitialize(df)\ncircos.genomicHeatmap(heatmap_data, col = col_fun, side = \"inside\", border = \"white\")\ncircos.genomicDensity(gene_positions, window.size = 1e6, col = \"#0000FF80\", track.height = 0.1)\ncircos.genomicLink(source_links, target_links, col = \"blue\")\n```"]