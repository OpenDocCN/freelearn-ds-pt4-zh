["```py\nif (!requireNamespace(\"BiocManager\"))\n    install.packages(\"BiocManager\")\n```", "```py\nBiocManager::install(\"package_name\")\n```", "```py\nlibrary(biomaRt)\nlistMarts(host = \"ensembl.gramene.org\")\n```", "```py\ngramene_connection <- useMart(biomart = \"ENSEMBL_MART_PLANT\", host = \"ensembl.gramene.org\")\n```", "```py\ndata_sets <-  listDatasets(gramene_connection)\nhead(data_sets)\n\ndata_set_connection <- useMart(\"atrichopoda_eg_gene\", biomart = \"ENSEMBL_MART_PLANT\", host = \"ensembl.gramene.org\")\n```", "```py\nattributes <- listAttributes(data_set_connection)\nhead(attributes)\n```", "```py\nchrom_names <- getBM(attributes = c(\"chromosome_name\"), mart = data_set_connection )\nhead(chrom_names)\n```", "```py\nfilters <- listFilters(data_set_connection)\nhead(filters)\n```", "```py\nfirst_chr <- chrom_names$chromosome_name[1]\ngenes <- getBM(attributes = c(\"ensembl_gene_id\", \"description\"), filters = c(\"chromosome_name\"), values = c(first_chr), mart = data_set_connection )head(genes)\nhead(genes)\n```", "```py\n## ensembl_gene_id           description\n## 1 AMTR_s00001p00009420    hypothetical protein \n## 2 AMTR_s00001p00015790    hypothetical protein \n## 3 AMTR_s00001p00016330    hypothetical protein \n## 4 AMTR_s00001p00017690    hypothetical protein \n## 5 AMTR_s00001p00018090    hypothetical protein \n## 6 AMTR_s00001p00019800    hypothetical protein\n```", "```py\nlibrary(biomaRt)\nlistMarts(host = \"ensembl.gramene.org\")\ngramene_connection <- useMart(biomart = \"ENSEMBL_MART_PLANT_SNP\", host = \"ensembl.gramene.org\")\ndata_sets <- listDatasets(gramene_connection)\nhead(data_sets)\ndata_set_connection <- useMart(\"athaliana_eg_snp\", biomart = \"ENSEMBL_MART_PLANT_SNP\", host = \"ensembl.gramene.org\")\n\nlistAttributes(data_set_connection)\nlistFilters(data_set_connection)\n```", "```py\nsnps <- getBM(attributes = c(\"refsnp_id\", \"chr_name\", \"chrom_start\", \"chrom_end\"), filters = c(\"chromosomal_region\"), values = c(\"1:200:200000:1\"), mart = data_set_connection )\nhead(snps)\n\n```", "```py\ndata_set_connection <- useMart(\"hsapiens_snp\", biomart = \"ENSEMBL_MART_SNP\")\nhuman_snps <- getBM(attributes = c(\"refsnp_id\", \"allele\", \"minor_allele\", \"minor_allele_freq\"), filters = c(\"chromosomal_region\"), value = c(\"1:200:20000:1\"), mart = data_set_connection)\n\n```", "```py\nlibrary(biomaRt)\n\nensembl_connection <- useMart(biomart = \"ENSEMBL_MART_ENSEMBL\")\n listDatasets(ensembl_connection)\n\ndata_set_connection <- useMart(\"hsapiens_gene_ensembl\", biomart = \"ENSEMBL_MART_ENSEMBL\")\n\natt <- listAttributes(data_set_connection)\nfil <- listFilters(data_set_connection)\n\n```", "```py\ngenes <- getBM(attributes = c(\"ensembl_gene_id\"), filters = c(\"chromosomal_region\"), value = c(\"1:200:2000000:1\"), mart = data_set_connection)\n\ngo_ids <- getBM(attributes = c(\"go_id\", \"goslim_goa_description\"), filters = c(\"ensembl_gene_id\"), values = genes$ensembl_gene_id, mart = data_set_connection )\n```", "```py\nlibrary(SRAdb)\nsqlfile <- file.path(system.file('extdata', package='SRAdb'), 'SRAmetadb_demo.sqlite')\nsra_con <- dbConnect(SQLite(),sqlfile)\n```", "```py\ndbGetQuery(sra_con, \"select study_accession, study_description from study where study_description like '%coli%' \")\n```", "```py\nsraConvert( c('ERP000350'), sra_con = sra_con )\n```", "```py\nlistSRAfile( c(\"ERR019652\",\"ERR019653\"), sra_con, fileType = 'sra' )\n```", "```py\ngetSRAfile( c(\"ERR019652\",\"ERR019653\"), sra_con, fileType = 'fastq', destDir = file.path(getwd(), \"datasets\", \"ch8\") )\n```", "```py\n## study_accession    study_description\n## ERP000350    Transcriptome sequencing of E.coli K12 in LB media in early exponential phase and transition to stationary phase\n\n```", "```py\n##    study submission    sample experiment       run\n## 1 ERP000350 ERA014184 ERS016116 ERX007970 ERR019652 \n## 2 ERP000350 ERA014184 ERS016115 ERX007969 ERR019653 \n```", "```py\n     run     study    sample experiment    ftp\n## 1 ERR019652 ERP000350 ERS016116 ERX007970 ftp://ftp-trace.ncbi.nlm.nih.gov/sra/sra-instant/reads/ByRun/sra/ERR/ERR019/ERR019652/ERR019652.sra \n## 2 ERR019653 ERP000350 ERS016115 ERX007969 ftp://ftp-trace.ncbi.nlm.nih.gov/sra/sra-instant/reads/ByRun/sra/ERR/ERR019/ERR019653/ERR019653.sra\n```", "```py\nlibrary(ShortRead)\nfastq_file <- readFastq(file.path(getwd(), \"datasets\", \"ch8\", \"ERR019652.fastq.gz\") )\n```", "```py\nqualities <- rowSums(as(quality(fastq_file), \"matrix\") <= 20) \nfastq_file <- fastq_file[qualities == 0] \n```", "```py\ncut_off_txt <- rawToChar(as.raw(40))\ntrimmed <- trimTails(fastq_file, k =2, a= cut_off_txt)\n```", "```py\ncustom_filter_1 <- nFilter(threshold=0)\ncustom_filter_2 <- polynFilter(threshold = 10, nuc = c(\"A\", \"T\", \"C\", \"G\"))\ncustom_filter <- compose(custom_filter_1, custom_filter_2)\npassing_rows <- custom_filter(trimmed)\ntrimmed <- trimmed[passing_rows]\n```", "```py\nwriteFastq(trimmed, file = file.path(getwd(), \"datasets\", \"ch8\", \"ERR019652.trimmed.fastq.gzip\"), compress = TRUE)\n```", "```py\nbwa <- \"/Users/macleand/miniconda2/bin/bwa\"\nsamtools <- \"/Users/macleand/miniconda2/bin/samtools\"\nreference <- file.path(getwd(), \"datasets\", \"ch8\", \"ecoli_genome.fa\")\n```", "```py\ncommand <- paste(bwa, \"index\", reference)\nsystem(command, wait = TRUE)\n```", "```py\nreads <- file.path(getwd(), \"datasets\", \"ch8\", \"ERR019653.fastq.gz\")\noutput <- file.path(getwd(), \"datasets\", \"ch8\", \"aln.bam\")\ncommand <- paste(bwa, \"mem\", reference, reads, \"|\", samtools, \"view -S -b >\", output)\nsystem(command, wait = TRUE)\n```", "```py\nlibrary(ramwas)\nparam <- ramwasParameters( dirbam = \".\", filebamlist = \"bam_list.txt\", \n                            dirproject = file.path(getwd(), \"datasets\", \"ch8\"), \n                            filebam2sample = \"sample_list.txt\")\n```", "```py\nramwas1scanBams(param)\nqc <- readRDS(file.path(getwd(), \"datasets\", \"ch8\", \"rds_qc\", \"ERR019652.small.qc.rds\")$qc\n```", "```py\nplot(qc$hist.score1)\nplot(qc$bf.hist.score1)\nplot(qc$hist.length.matched)\nplot(qc$bf.hist.length.matched)\n```"]