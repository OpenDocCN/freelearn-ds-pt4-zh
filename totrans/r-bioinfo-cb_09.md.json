["```py\nif (!requireNamespace(\"BiocManager\"))\n    install.packages(\"BiocManager\")\n```", "```py\nBiocManager::install(\"package_name\") \n```", "```py\nset.seed(1)\nrandom_number_t_test <- function(n){\n  x <- rnorm(10)\n  y <- rnorm(10)\n  return(t.test(x,y)$p.value)\n}\n\np_values <- sapply(1:10000, random_number_t_test )\n```", "```py\nsum(p_values <= 0.05)\n```", "```py\nadj_p_values <- p.adjust(p_values, method = \"holm\")\n```", "```py\nsum(adj_p_values <= 0.05)\n```", "```py\n## [1] 506\n```", "```py\n## [1] 0\n```", "```py\nlibrary(fakeR)\nfake_iris <- simulate_dataset(iris)\n```", "```py\nsample_mean <- mean(iris$Sepal.Length)\nsample_sd <- sd(iris$Sepal.Length)\nrandom_sepal_lengths <- rnorm(iris$Sepal.Length, mean = sample_mean, sd = sample_sd)\nhist( random_sepal_lengths)\n```", "```py\nlow_num <- 1\nhigh_num <- 6\nhist(runif(1500, low_num, high_num))\n```", "```py\nnumber_of_coins <- 1\np_heads <- 0.5\nhist(rbinom(1500, number_of_coins, p_heads ))\nnumber_of_coins <- 5\nhist(rbinom(1500, number_of_coins, p_heads ))\n```", "```py\nrandom_from_list <- sample(c(\"Low\", \"Medium\", \"High\"), 100, replace = TRUE, prob = c(0.2, 0.6, 0.2))\ntable(random_from_list)\n```", "```py\nstr(iris)\n## 'data.frame':    150 obs. of  5 variables:\n##  $ Sepal.Length: num  5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ...\n##  $ Sepal.Width : num  3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ...\n##  $ Petal.Length: num  1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ...\n##  $ Petal.Width : num  0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ...\n##  $ Species     : Factor w/ 3 levels \"setosa\",\"versicolor\",..: 1 1 1 1 1 1 1 1 1 1 ...\n\nstr(fake_iris)\n## 'data.frame':    150 obs. of  5 variables:\n##  $ Sepal.Length: num  5.26 6.69 5.63 5.21 5.28 6.45 6.8 5.71 6.01 6.44 ...\n##  $ Sepal.Width : num  2.84 2.78 2.83 2.44 2.19 3.87 3.14 2.58 2.78 3.25 ...\n##  $ Petal.Length: num  4.03 4.84 2.64 2.83 5.37 3.63 5.54 4.74 4.63 4.29 ...\n##  $ Petal.Width : num  1.63 1.33 0.7 0.61 2.03 1.17 2.05 1.6 1.57 1.32 ...\n##  $ Species     : Factor w/ 3 levels \"setosa\",\"versicolor\",..: 3 2 2 3 1 2 1 3 3 1 ...\n```", "```py\nset.seed(123)\nscaled_iris <- iris %>% mutate_if( is.numeric, .funs = scale)\nlabels <- scaled_iris$Species\nscaled_iris$Species <- NULL\n```", "```py\ntrain_rows <- sample(nrow(scaled_iris), 0.8 * nrow(scaled_iris), replace = FALSE)\ntrain_set <- scaled_iris[train_rows, ]\ntest_set <- scaled_iris[-train_rows, ]\ntrain_labels <- labels[train_rows]\ntest_set_labels <- labels[-train_rows]\n```", "```py\ntest_set_predictions <- knn(train = train_set, test = test_set, cl = train_labels, k = 10)\n```", "```py\ncaret::confusionMatrix(test_set_predictions,  test_set_labels)\n```", "```py\n##             Reference\n## Prediction   setosa versicolor virginica\n##   setosa          8          0         0\n##   versicolor      0          9         1\n##   virginica       0          0        12\n```", "```py\nlibrary(randomForest)\n\ntrain_rows <- sample(nrow(iris), 0.8 * nrow(iris), replace = FALSE)\ntrain_set <- iris[train_rows, ]\ntest_set <- iris[-train_rows, ]\n```", "```py\nmodel <- randomForest(Species ~ . , data = train_set, mtry = 2)\n```", "```py\ntest_set_predictions <- predict(model, test_set, type = \"class\")\ncaret::confusionMatrix(test_set_predictions,  test_set$Species)\n```", "```py\n##             Reference\n## Prediction   setosa versicolor virginica\n##   setosa         13          0         0\n##   versicolor      0          8         0\n##   virginica       0          0        9\n## \n```", "```py\nmodel <- randomForest(Sepal.Length ~ . , data = train_set, mtry = 2)\ntest_set_predictions <- predict(model, test_set)\n\nmean( (test_set$Sepal.Length - test_set_predictions )^2 ) \n```", "```py\nlibrary(e1071)\ntrain_rows <- sample(nrow(iris), 0.8 * nrow(iris), replace = FALSE)\n\ntrain_set <- iris[train_rows, ]\ntest_set <- iris[-train_rows, ]\n```", "```py\nmodel <- svm(Species~., data=train_set, type=\"C-classification\", kernel=\"radial\", gamma=0.25)\n```", "```py\ncols_to_hold <- c(\"Sepal.Length\", \"Sepal.Width\")\nheld_constant <- lapply(cols_to_hold, function(x){mean(train_set[[x]])})\nnames(held_constant) <- cols_to_hold\n\nplot(model, train_set, Petal.Width ~ Petal.Length, slice = held_constant)\n```", "```py\ntest_set_predictions <- predict(model, test_set, type = \"class\")\ncaret::confusionMatrix(test_set_predictions,  test_set$Species)\n```", "```py\nlibrary(factoextra)\nlibrary(Biobase)\n\nload(file.path(getwd(), \"datasets\", \"ch1\", \"modencodefly_eset.RData\") ) \nexpr_pca <- prcomp(exprs(modencodefly.eset), scale=TRUE, center=TRUE ) fviz_screeplot(expr_pca)\n```", "```py\nmain_components <- expr_pca$rotation[, 1:3]\nfviz_nbclust(main_components, kmeans, method = \"wss\")\n```", "```py\nkmean_clus <- kmeans(main_components, 5, nstart=25, iter.max=1000)\n\nfviz_cluster(kmean_clus, data = main_components,\n             palette = RColorBrewer::brewer.pal(5, \"Set2\"),\n             ggtheme = theme_minimal(),\n             main = \"k-Means Sample Clustering\"\n             )\n```", "```py\nmain_components <- expr_pca$x[, 1:3]\n```", "```py\nkmean_clus$cluster[1:5]\n\n## SRX007811 SRX008180 SRX008227 SRX008238 SRX008258 \n##         2         2         2         2         2\n```", "```py\nlibrary(randomForest)\n\ntrain_rows <- sample(nrow(iris), 0.8 * nrow(iris), replace = FALSE)\ntrain_set <- iris[train_rows, ]\ntest_set <- iris[-train_rows, ]\n```", "```py\nmodel <- randomForest(Species ~ . , data = train_set, mtry = 2, importance = TRUE)\nvarImpPlot(model)\n```", "```py\nlibrary(factoextra)\npca_result <- prcomp(iris[,-5], scale=TRUE, center=TRUE )\n```", "```py\nfviz_pca_var(pca_result, col.var=\"cos2\")\n```"]