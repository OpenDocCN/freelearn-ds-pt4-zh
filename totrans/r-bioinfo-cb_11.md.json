["```py\nSimpleGenome <- function( nchr=NA, lengths = NA){\n\n genome <- list(\n chromosome_count = nchr,\n chromosome_lengths = lengths\n )\n class(genome) <- append(class(genome), \"SimpleGenome\")\n return(genome)\n}\n```", "```py\necoli <- SimpleGenome(nchr = 1, lengths = c(4600000) )\nbakers_yeast <- SimpleGenome(nchr = 1, lengths=c(12100000))\n\n```", "```py\n> ecoli \n$chromosome_count \n[1] 1 \n$chromosome_lengths \n[1] 4600000 \nattr(,\"class\") \n[1] \"list\" \"SimpleGenome\"\n\n> bakers_yeast \n$chromosome_count \n[1] 1 \n$chromosome_lengths \n[1] 12100000 \nattr(,\"class\") \n[1] \"list\" \"SimpleGenome\" \n```", "```py\nplot.SimpleGenome <- function(x){\n barplot(x$chromosome_lengths, main = \"Chromosome Lengths\")\n}\n```", "```py\nathal <- SimpleGenome(nchr = 5, lengths = c(34964571, 22037565, 25499034, 20862711, 31270811 ) )\nplot(athal)\n```", "```py\ngenomeLength <- function(x){\n UseMethod(\"genomeLength\", x)\n}\n\ngenomeLength.SimpleGenome <- function(x){\n return(sum(x$chromosome_lengths))\n}\ngenomeLength(athal)\n```", "```py\nsome_data <- iris\nsummary(some_data)\nclass(some_data) <- c(\"my_new_class\", class(some_data) )\nclass(some_data)\n```", "```py\nsummary.my_new_class <- function(x){\n col_types <- sapply(x, class)\n return(paste0(\"object contains \", length(col_types), \" columns of classes:\", paste (col_types, sep =\",\", collapse = \",\" )))\n}\nsummary(some_data)\n```", "```py\n> genomeLength(athal)\n[1] 134634692\n```", "```py\n> summary(some_data) \nSepal.Length Sepal.Width Petal.Length Petal.Width Species \nMin. :4.300 Min. :2.000 Min. :1.000 Min. :0.100 setosa :50 \n1st Qu.:5.100 1st Qu.:2.800 1st Qu.:1.600 1st Qu.:0.300 versicolor:50\n```", "```py\n> class(some_data) \n[1] \"my_new_class\" \"data.frame\"\n```", "```py\n> summary(some_data) \n[1] \"object contains 5 columns of classes:numeric,numeric,numeric,numeric,factor\"\n```", "```py\nS4genome <- setClass(\"S4genome\", slots = list(chromosome_count = \"numeric\", chromosome_lengths = \"numeric\" ))\n```", "```py\nsetGeneric( \"chromosome_count\", \n function(x){ standardGeneric(\"chromosome_count\") }\n)\n```", "```py\nsetMethod( \"chromosome_count\", \"S4genome\", function(x){ slot(x, \"chromosome_count\")} )\n```", "```py\n## > ecoli <- S4genome(chromosome_count = 1, chromosome_lengths = c(4600000) ) \n## > ecoli An object of class \"S4genome\" \n## Slot \"chromosome_count\": [1] 1 \n## Slot \"chromosome_lengths\": [1] 4600000 \n```", "```py\nsource(file.path(getwd(), \"datasets\", \"ch11\", \"my_source_file.R\"))\nmy_sourced_function()\n```", "```py\nusethis::create_package(\"newpackage\")\n```", "```py\nmy_package_function <- function(x){\n return( c(\"I come from a package!\") )\n}\n```", "```py\ndevtools::load_all()\n```", "```py\ndevtools::install()\nlibrary(newpackage)\n```", "```py\nusethis::use_mit_license(name = \"Dan MacLean\")\nusethis::use_readme_rmd()\nusethis::use_lifecycle_badge(\"Experimental\")\nusethis::use_version()\n```", "```py\nusethis::use_package(\"ggplot2\")\n```", "```py\nusethis::use_git()\nusethis::browse_github_token() \nusethis::use_github()\n```", "```py\ndevtools::install_github(\"user/repo\")\n```", "```py\nusethis::use_testthat()\n```", "```py\nusethis::use_test(\"adds\")\n\ntest_that(\"addition works\", {\n expect_equal(1 + 1, 2)\n})\n```", "```py\ndevtools::test()\n```", "```py\nusethis::use_travis()\n```", "```py\nwarnings_are_errors: false\n```"]