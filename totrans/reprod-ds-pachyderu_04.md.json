["```py\n---\npipeline:\n  name: apply-photo-filter\ntransform:\n  cmd:\n  - python3\n  - \"/photo-filter.py\"\n  image: myregistry/filter\ninput:\n  pfs:\n    repo: photos\n    glob: \"/\"\n```", "```py\n---\npipeline:\n  name: image-classification\n```", "```py\n{\n  \"pipeline\": {\n    \"name\": \"image-classification\"\n  },\n```", "```py\ndescription: A pipeline that performs image classification by using scikit-learn.\n```", "```py\n\"description\": \"A pipeline that performs image classification by using scikit-learn.\",\n```", "```py\nmetadata:\n  annotations:\n    annotation: data\n```", "```py\n\"metadata\": {\n    \"annotations\": {\n        \"annotation\": \"data\"\n    }\n  },\n```", "```py\nmetadata:\n  labels:\n    label: object\n```", "```py\n\"metadata\": {\n     \"labels\": {\n        \"label\": \"object\"\n    }\n  },\n```", "```py\nmetadata:\n  labels:\n    label: object\n```", "```py\n\"transform\": {\n    \"image\": \"my-image\",\n```", "```py\ncmd:\n  - python3\n  - \"/test.py\"\n```", "```py\n\"transform\": {\n    \"cmd\": [ \"python3\", \"/test.py\" ],\n```", "```py\ncmd:\n  - python3\n```", "```py\n\"transform\": {\n    \"cmd\": [ \"python3\" ],\n```", "```py\ntransform:\n  image: my-image\n  cmd:\n  - tree\n  - \"/pfs\"\n  - \"&&\"\n  - python\n  - my-script.py\n  - \"--outdir\"\n  - \"/pfs/out\"\n  - \"--input\"\n  - \"/pfs/data \"\n```", "```py\n\"transform\": {\n    \"image\": \"my-image\",\n    \"cmd\": [\"tree\", \n        \"/pfs\", \n        \"&&\", \n        \"python\",\n        \"my-script.py\", \n        \"--outdir\", \"/pfs/out\",\n              \"--input\", \"/pfs/data \"] \n  },\n```", "```py\ntransform:\n  cmd:\n  - bash\n  stdin:\n  - for f in /pfs/data/*\n  - do\n  - filename=$(basename \"$f\")\n  - cp /pfs/data/* pfs/out/mypipeline/*\n  - done\n```", "```py\n\"transform\": {\n    \"cmd\": [\"bash\"],\n    \"stdin\": [\n        \"for f in /pfs/data/*\",\n        \"do\",\n        \"filename=$(basename \\\"$f\\\")\",\n        \"cp /pfs/data/* pfs/out/mypipeline/*\",\n        \"done\"]\n  },\n```", "```py\ntransform:\n  ...\n  err_cmd:\n  - bash\n  - \"/my-error-code.sh\"\n```", "```py\n\"transform\": {\n    ...\n    \"err_cmd\": [ \"bash\", \"/my-error-code.sh\"],\n```", "```py\ntransform:    \n    ...\n    err_cmd:\n    - bash\n    err_stdin:\n    - if\n    - \"[-a /pfs/repo1]\"\n    - then\n    - exit 0\n    - fi\n    - exit 1\n```", "```py\n\"transform\": {\n    ...\n    \"err_cmd\": [\n      \"bash\"\n    ],\n    \"err_stdin\": [\n      \"if\",\n      \"[-a /pfs/repo1]\",\n      \"then\",\n      \"exit 0\",\n      \"fi\",\n      \"exit 1\"\n    ]\n```", "```py\ntransform:    \n    ...\n    env:\n        AWS_REGION: us-west-2\n        S3_BUCKET: s3://my-bucket/\n```", "```py\n\"transform\": {\n    ...\n    \"env\": {\n             \"AWS_REGION\": \"us-west-2\",\n             \"S3_BUCKET\": \"s3://my-bucket/\"\n         }\n  },\n```", "```py\ntransform:    \n    ...\n    secrets:\n        name: my-ssh-key\n        mount_path: \"/path/to/file\"\n```", "```py\ntransform:    \n    ...\n    \"secrets\": {\n        \"name\": \"my-ssh-key\",\n        \"mount_path\": \"/path/to/file\"\n    }\n```", "```py\ntransform:    \n    ...\n    secrets:\n        name: my-ssh-key\n        env_var: MY_KEY\n        key: \"mykey\"\n```", "```py\n\"transform\": {\n    ...\n    \"secrets\": {\n        \"name\": \"my-ssh-key\",\n        \"env_var\": \"MY_KEY\",\n        \"key\": \"my_key\"\n    }\n```", "```py\ntransform:    \n    ...\n    image: my-private-docker-registry.com/my-project/my-image:latest\n    image_pull_secrets:\n      - my-secret\n```", "```py\n\"transform\": {\n    ...\n    \"image\": \"my-private-docker-registry.com/my-project/my-image\",        \n    \"image_pull_secrets\": [\"my-secret\"]\n```", "```py\ntransform:    \n    ...\n    accept_return_code:\n    - 256\n```", "```py\n\"transform\": {\n    ...\n    \"accept_return_code\": [256]\n```", "```py\ntransform:    \n    ...\n    debug: true\n```", "```py\n\"transform\": {\n    ...\n    \"debug\": true\n```", "```py\ntransform:    \n    ...\n    user: test-user\n```", "```py\n\"transform\": {\n    ...\n    \"user\": \"test-user\"\n```", "```py\ntransform:    \n    ...\n    working_dir: /usr/src/test\n```", "```py\n\"transform\": {\n    ...\n    \"working_dir\": \"/usr/src/test\"\n```", "```py\ntransform:    \n    ...\n    dockerfile: /path/to/dockerfile\n```", "```py\n\"transform\": {\n    ...\n    \"dockerfile\": \"/path/to/dockerfile \"\n```", "```py\nparallelism_spec:\n  coefficient: '1'\n```", "```py\n\"parallelism_spec\": {\n    \"coefficient\": \"1\"\n  },\n```", "```py\nparallelism_spec: until_success\n```", "```py\n\"parallelism_spec\": \"until_success\"\n```", "```py\nreprocess_spec:\n  constant: '1'\n```", "```py\n\"parallelism_spec\": {\n    \"constant\": \"1\"\n}\n```", "```py\ncache_size: 1G \n```", "```py\n\"cache_size\": \"1G\",\n```", "```py\nmax_queue_size: 5 \n```", "```py\n\"max_queue_size\": \"5\",\n```", "```py\nchunk_spec:\n  number: '10'\n```", "```py\n\"chunk_spec\": {\n    \"number\": \"10\"\n  },\n```", "```py\nchunk_spec:\n  size_bytes: '1210'\n```", "```py\n\"chunk_spec\": {\n    \"size_bytes\": \"1210\"\n  },\n```", "```py\nresource_limits:\n  cpu: 1\n  gpu:\n    type: nvidia.com/gpu\n    number: 1\n    memory: 16G\n```", "```py\n\"resource_limits\": {\n    \"cpu\": 1,\n    \"gpu\": {\n        \"type\": \"nvidia.com/gpu\",\n        \"number\": 1,\n    \"memory\": \"16G\"\n    }\n  },\n```", "```py\nscheduling_spec:\n  node_selector:\n    kubernetes.io/my-hostname: my-node\n```", "```py\n\"scheduling_spec\": {\n      \"node_selector\": {\"kubernetes.io/my-hostname\": \"my-node\"\n      }\n    }, \n```", "```py\nscheduling_spec:\n  priority_class: high-priority\n    kubernetes.io/my-hostname: my-node\n```", "```py\n\"scheduling_spec\": {\n      \"priority_class\": \"high-priority\"\n      }\n```", "```py\njob_timeout: 10m\n```", "```py\n\"job_timeout\": \"10m\"\n```", "```py\ndatum_tries: 1\n```", "```py\n\"datum_tries\": \"1\"\n```", "```py\nenable_stats: true\n```", "```py\n\"enable_stats\": true,\n```", "```py\npod_patch: '[{\"op\": \"add\",\"path\": \"spec/initContainers/0/resources/limits/my-volume\"}]'\n```", "```py\n\"pod_patch\": \"[{\\\"op\\\": \\\"add\\\",\\\"path\\\": \\\"spec/initContainers/0/resources/limits/my-volume\\\"}]\"\n```", "```py\ns3_out: true\n```", "```py\n\"s3_out\": true\n```", "```py\negress:\n  URL: gs://mystorage/mydir\n```", "```py\n\"egress\": {\n        \"URL\": \"gs://mystorage/mydir\"\n  },\n```", "```py\noutput_branch: test\n```", "```py\n\"output_branch\": \"test\",\n```"]