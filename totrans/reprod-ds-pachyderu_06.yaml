- en: '*Chapter 4*: Installing Pachyderm Locally'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapters, we learned about Pachyderm's architecture, the internals
    of the Pachyderm solution, and version control primitives such as repositories
    branches, and commits. We reviewed why reproducibility is essential and why it
    should be a part of a successful data science process. We also learned how to
    do this on all three major platforms – macOS, Linux, and Windows.
  prefs: []
  type: TYPE_NORMAL
- en: There are many ways and a variety of platforms that enable you to run your end-to-end
    **Machine Learning** (**ML**) workflows using Pachyderm. We will start with the
    most common and easy to configure local deployment method on your computer; then,
    in the following chapters, we will review the deployment process on cloud platforms.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will walk you through the process of installing Pachyderm locally
    so that you can get started quickly and test Pachyderm. This chapter will prepare
    you to run your first pipeline. We will provide an overview of the system requirements
    and guide you through the process of installing all the prerequisite software
    needed for Pachyderm to run smoothly.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing the required tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing minikube
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Docker Desktop
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing the Pachyderm **Command-Line Interface** (**CLI**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enabling autocompletion for Pachyderm
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preparing the Kubernetes environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying Pachyderm
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing the Pachyderm dashboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deleting an existing Pachyderm deployment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Whether you are on macOS, Windows, or Linux, you need to install the following
    tools:'
  prefs: []
  type: TYPE_NORMAL
- en: Homebrew
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Kubernetes `kubectl`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Helm
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: minikube
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Docker Desktop (as an alternative to minikube)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Pachyderm CLI; that is, via `pachctl`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Windows Subsystem for Linux** (**WSL**) for Windows installations'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will get into the specifics of installing and configuring these tools as
    we go through this chapter. If you already know how to do this, you can go ahead
    and set them up now.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the required tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will cover how to install the system tools that we will
    use to prepare our environment before installing Pachyderm.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Homebrew (macOS only)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While Linux distributions have many package management options, there is no
    default package manager for macOS users. `brew`) fills this gap and provides a
    great solution to easily install and manage software from the macOS Terminal and
    Linux shell as an alternative to **apt**, **yum**, or **flatpak**, which are available
    in Linux distributions.
  prefs: []
  type: TYPE_NORMAL
- en: Homebrew uses `/user/local/Cellar` directory. Another term you will hear often
    is **Tap**. Tap is a Git repository of Formulae.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will frequently use `brew` to install various software
    packages on macOS. Therefore, you need to install it if you are using macOS. The
    same `brew` commands we will use in this chapter run on Linux as well, but we
    will keep the use of brew for Linux optional:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the following command to install Homebrew on your computer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Execute the following command to verify that Homebrew has been installed, as
    well as to list the available commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following screenshot shows the system''s output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.1 – List of brew commands'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17085_04_001.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.1 – List of brew commands
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s learn about some of the useful Homebrew commands you may need in the
    future. You can update Homebrew itself by executing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Execute the following command to find any outdated formulae:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Execute the following command to upgrade all the outdated formulae:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now that you have installed the Homebrew package manager on your computer, let's
    install `kubectl`.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Windows Subsystem for Linux (for Windows only)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**WSL** is a tool that enables Windows users to run Linux commands and utilities
    natively in Windows. If you are using Windows, you can install WSL on your machine
    by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open PowerShell or the Windows Command Prompt.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Install WSL by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Important note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If you are on Windows, run all the Linux and Pachyderm commands described in
    this book from WSL.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: For more information, see the official Microsoft Windows documentation at https://docs.microsoft.com/en-us/windows/wsl/install.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the Kubernetes command-line tool
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before you create your first Kubernetes cluster, you need to install the Kubernetes
    command-line tool, `kubectl`, to execute commands against the cluster. Now, let's
    learn how to install `kubectl` on a computer.
  prefs: []
  type: TYPE_NORMAL
- en: 'See the official Kubernetes documentation for more information: https://kubernetes.io/docs/home/.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the following commands to download and install `kubectl` on your computer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you are using Linux, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'If you are on macOS (Intel), run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'If you are on Windows, the following command will do the trick:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify the version you are using and make sure that `kubectl` is installed
    by executing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here is an example of the system''s output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: To be able to perform the following commands, the `kubectl` version must be
    v1.19 or later.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have `kubectl` installed on your computer to execute commands against
    your Kubernetes cluster, let's install Helm.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Helm v3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Helm is a popular package manager for Kubernetes clusters. Before you deploy
    Pachyderm by using its Helm chart, you need to install the Helm binary on your
    environment to be able to manage the life cycle of your Helm chart. Follow these
    steps to install Helm on your computer:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the following command to download and install Helm on your computer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Verify the version you are using and make sure Helm is installed by executing
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here is an example of the system''s output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Next, you must install the necessary tools to prepare your local Kubernetes
    cluster environment before you can deploy Pachyderm. If you are familiar with
    containers in Linux, you must be familiar with these tools. If you are using Linux
    as your local machine, follow the instructions provided in the *Installing minikube*
    section to prepare your environment. If you are using macOS, follow the instructions
    provided in the *Installing Docker Desktop* section. Using Docker Desktop is recommended
    due to its simplicity.
  prefs: []
  type: TYPE_NORMAL
- en: Installing minikube
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Minikube** is a popular cross-platform and lightweight Kubernetes implementation
    that helps users quickly create a single-node local Kubernetes cluster. minikube
    supports multiple runtimes, including **CRI-O**, **container**, and **Docker**.
    It can be deployed as a **Virtual Machine** (**VM**), a container, or on bare
    metal. Since Pachyderm supports the Docker runtime only, we will cover how to
    use the Docker container runtime and deploy it as a container. For additional
    configuration details, you can refer to the official Docker documentation at https://minikube.sigs.k8s.io/docs/start/.
    Let''s install the latest version of minikube:'
  prefs: []
  type: TYPE_NORMAL
- en: Execute the following commands to install `minikube` on your computer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If are using Linux, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'If you are on Windows (Chocolatey package manager is required), run the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify the `minikube` version you are using and make sure that minikube has
    been installed by executing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following is an example of the command''s response:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Now that you have installed minikube installed, let's install Docker Desktop.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Docker Desktop
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Docker simplifies developing, delivering, and running applications by separating
    applications from the infrastructure and its dependencies. Pachyderm supports
    the Docker container runtime only; therefore, Docker tools must be installed before
    you deploy Pachyderm.
  prefs: []
  type: TYPE_NORMAL
- en: Docker runs as a native application using the macOS sandbox security model and
    installs all Docker tools on your macOS, including Docker Engine, the CLI, Docker
    Compose, Credential Helper, Notary, and Kubernetes.
  prefs: []
  type: TYPE_NORMAL
- en: If you do not have Docker Desktop already installed, you can follow the instructions
    provided in the next section to install it. Otherwise, you can skip to the *Preparing
    your Kubernetes environment* section. You can also refer to the official Docker
    documentation at https://docs.docker.com/get-docker/.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Docker Desktop for macOS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to install Docker Desktop on macOS. The latest version of
    Docker is supported on the last three versions of macOS. If your macOS version
    is older than the last three versions, you need to upgrade it to the latest version
    of macOS:'
  prefs: []
  type: TYPE_NORMAL
- en: Visit the Docker Hub download link at https://hub.docker.com/editions/community/docker-ce-desktop-mac/
    to download the Docker Desktop installer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the `Docker.dmg` file to your workstation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once the download has completed, double-click on the `Docker.dmg` file to open
    the image and drag the Docker icon from the window to the `Applications` folder
    to complete the installation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.2 – Docker Desktop installation screen on macOS'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17085_04_002.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.2 – Docker Desktop installation screen on macOS
  prefs: []
  type: TYPE_NORMAL
- en: In the **Applications** folder, double-click on the Docker icon to start Docker
    Desktop.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Confirm that you have privileged access to install Docker components on your
    workstation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you are using Docker for the first time, follow the quick tutorial. Otherwise,
    click **Skip Tutorial** to start Docker:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.3 – Docker Desktop graphical user interface'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17085_04_003.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.3 – Docker Desktop graphical user interface
  prefs: []
  type: TYPE_NORMAL
- en: Installing Docker Desktop on Windows
  prefs: []
  type: TYPE_NORMAL
- en: 'Install Docker Desktop on your Windows machine by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to https://docs.docker.com/desktop/windows/install/.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Docker Desktop for Windows**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Docker Desktop Installer.exe**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Follow the interactive prompts to install **Docker Desktop**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the **Configuration** page, make sure that you select **Install required
    Windows components for WSL 2**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you're done, click **Close**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start Docker Desktop by finding it in Windows Search and accept the terms and
    conditions. Docker will start automatically after that.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that you have installed Docker Desktop on your machine, let's install the
    Pachyderm CLI, called `pachctl`.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the Pachyderm command-line interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Pachyderm `pachctl`, is used to deploy and interact with Pachyderm clusters.
    Follow these steps to install `pachctl`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s get the latest release version tag of `pachctl` and keep it in a variable
    called `PACHYDERMVERSION`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Execute the following commands to install `pachctl` on your computer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you are using macOS, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'If you are using Debian Linux or WSL on Windows 10, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Execute the following command to verify that you have installed `pachctl`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following is an example of the system''s output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: With that, you have installed the prerequisites to run Pachyderm locally. Now,
    let's prepare our cluster and deploy Pachyderm on our local Kubernetes cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Enabling autocompletion for Pachyderm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Autocompletion is a functionality that's offered by Unix shell flavors to autofill
    parameters using the CLI. Depending on the type of shell that's used in your system,
    the autocompletion feature suggests or autocompletes the partially typed commands
    as you type, sometimes by pressing the *Tab* key. Pachyderm supports autocompletion
    for Bourne Again Shell (`bash`) and Z shell (`zsh`), an extended Bourne shell.
    `bash` and `zsh` are the most common Unix command-line interpreters that are used
    on macOS and Linux. In this section, you will learn how to enable the Pachyderm
    autocompletion feature and the parameters that are available from the `pachctl`
    command.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you don''t know which shell you are using, type the following command to
    find out:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'If you are using `bash`, the output of the preceding command should look as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'If you are using `zsh`, the output of the preceding command should look as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Since we now know which shell we are using, we can install Pachyderm autocompletion.
  prefs: []
  type: TYPE_NORMAL
- en: Enabling Pachyderm autocompletion for bash
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to enable Pachyderm autocompletion on your computer:'
  prefs: []
  type: TYPE_NORMAL
- en: Execute the following commands to enable `bash-completion`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you are using macOS or Linux with Homebrew, use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'If you are on Ubuntu Linux, use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'If you are using RHEL or CentOS Linux, use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Execute the following command to verify that `bash-completion` is enabled on
    your computer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you are on macOS, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'If you are using Linux, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Confirm that the path for `bash-completion` is pointing to the correct directory.
    Then, execute either of the following commands to enable Pachyderm `pachctl` autocompletion:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you are on macOS, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'If you are using Linux, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: With that, Pachyderm's command-line autocompletion has been enabled in your
    bash shell.
  prefs: []
  type: TYPE_NORMAL
- en: Enabling Pachyderm autocompletion for zsh
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`zsh` with macOS Catalina. Follow these steps to enable Pachyderm autocompletion
    on your computer:'
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: If you do not wish to enable autocompletion, you can try using `pachctl shell`
    instead. To enable this feature, type `pachctl shell`.
  prefs: []
  type: TYPE_NORMAL
- en: Execute the following commands to enable `zsh` autocompletion.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you are using macOS or Linux with Homebrew, use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'If you are on Linux, visit the [https://github.com/zsh-users/zsh-completions](https://github.com/zsh-users/zsh-completions)
    page and follow the instructions for your Linux distribution to enable `zsh` completion.
    As an example, for Ubuntu 19.10, this would look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Execute the following commandss to verify that `zsh` autocompletion is enabled
    on your computer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you are on macOS, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'If you are using Linux, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Confirm that the path for `zsh` autocompletion is pointing to the correct directory.
    Then, execute either of the following commands to enable Pachyderm `pachctl` autocompletion.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On macOS, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'If you are using Linux, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: With that, Pachyderm command-line autocompletion is now enabled in your `zsh`
    shell. Next, let's prepare the Kubernetes environment.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing the Kubernetes environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, you will provision a Kubernetes cluster by using the preferred
    tools that you deployed in the *Installing the required tools* section.
  prefs: []
  type: TYPE_NORMAL
- en: Enabling Kubernetes on Docker Desktop
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to enable Kubernetes if you''re using Docker Desktop as
    your container platform to deploy your Kubernetes cluster on both Windows and
    macOS:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the Docker UI.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the top-right corner of the Docker UI, click the **Settings** icon.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Switch to the Kubernetes settings panel and click the **Enable Kubernetes**
    button to start a single-node Kubernetes cluster with Docker Desktop. Apply these
    settings by clicking the **Apply & Restart** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.4 – Enabling Kubernetes in Docker Desktop'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17085_04_004.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.4 – Enabling Kubernetes in Docker Desktop
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a Terminal window and confirm that Kubernetes is running by executing
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following is an example of the system''s response:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: With that, you have a single-node Kubernetes cluster configured on Docker Desktop.
    Now, we are ready to deploy Pachyderm on our local Kubernetes environment.
  prefs: []
  type: TYPE_NORMAL
- en: Enabling Kubernetes using minikube
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to run Kubernetes locally when using minikube:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Make Docker the default driver for `minikube`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start a Kubernetes cluster:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Execute the following command to verify that your Kubernetes cluster is ready:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With that, your Kubernetes cluster has been configured using minikube. Now,
    we are ready to deploy Pachyderm on our local Kubernetes environment.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying Pachyderm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When running Pachyderm in production, it is recommended to start in an environment
    where resources can scale up to handle the computational needs of larger pipelines.
    Pachyderm can be installed on any Kubernetes cluster, including managed Kubernetes
    services provided by AWS, Google Cloud, Microsoft Azure, IBM Cloud, and OpenShift,
    as well as locally on your workstation. In this section, we are going to focus
    on a smaller test deployment; therefore, a local cluster is good enough to get
    started.
  prefs: []
  type: TYPE_NORMAL
- en: Pachyderm provides sample Helm charts to help you deploy Pachyderm to all major
    cloud platforms. You can read more about Helm Charts in [*Chapter 2*](B17085_02_Final_SB_Epub.xhtml#_idTextAnchor037),
    *Pachyderm Basics*. Because Helm charts are flexible, you can pick the components
    that you want to install. For example, you can install the Pachyderm in-browser
    interface called the Console.
  prefs: []
  type: TYPE_NORMAL
- en: The Pachyderm Console is the Pachyderm user interface and provides a birds-eye
    view of your pipelines through the **Direct Acyclic Graph** (**DAG**), as well
    as other useful features.
  prefs: []
  type: TYPE_NORMAL
- en: Some components, such as the Pachyderm Console, require an Enterprise license
    but are also available for testing with a free trial license for 30 days. You
    can request a free trial license at [https://www.pachyderm.com/trial/](https://www.pachyderm.com/trial/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to install Pachyderm on your local Kubernetes cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Deploying Pachyderm consists of multiple resources. The `helm` command helps
    manage complex Kubernetes applications'' life cycles and creates all the necessary
    components at once using a single command. You can learn more about the options
    for Helm charts in [*Chapter 5*](B17085_05_Final_SB_Epub.xhtml#_idTextAnchor123),
    *Installing Pachyderm on a Cloud Platform*. For now, let''s execute the following
    command to add Pachyderm Helm chart repositories to your local repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Execute the following command to get the latest chart information from the
    chart repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Execute the following command to deploy the latest version of Pachyderm on
    your cluster without the console:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you have an Enterprise key and you would like to deploy it with Pachyderm''s
    console user interface, create a file called `license.txt` and paste your Enterprise
    token into that file. Then, run the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Once the Console has been deployed successfully, follow the instructions provided
    in the *Accessing the Pachyderm Console* section to access the Console.
  prefs: []
  type: TYPE_NORMAL
- en: 'The preceding commands return the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.5 – Pachyderm Helm chart getting deployed on Kubernetes'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17085_04_005.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.5 – Pachyderm Helm chart getting deployed on Kubernetes
  prefs: []
  type: TYPE_NORMAL
- en: You can inspect the `values.yaml` file in the Helm Chart repository ([https://github.com/pachyderm/pachyderm/tree/master/etc/helm/pachyderm](https://github.com/pachyderm/pachyderm/tree/master/etc/helm/pachyderm))
    to learn more about the Kubernetes objects that are created by deploying the Chart.
    The Pachyderm Helm chart creates Kubernetes **service accounts**, **Services**,
    **Deployments**, PostgreSQL, and etcd instances, all of which are needed to run
    Pachyderm.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A Kubernetes Deployment is a controller that rolls out a ReplicaSet of Pods
    based on the requirements defined in your manifest file. A ReplicaSet is a group
    of the same service instances. Execute the following command to verify the state
    of the Deployments that have been created during the installation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output of the preceding command should look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.6 – List of Pachyderm Deployment objects'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17085_04_006.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.6 – List of Pachyderm Deployment objects
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the following command to verify that the installation was successful
    and view the Pods that were created as part of the Deployments:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output of the preceding command should look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.7 – List of Pachyderm Pods'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17085_04_007.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.7 – List of Pachyderm Pods
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the following commands to connect to your new Pachyderm instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Go to your browser and point it to `http://localhost:4000`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Authenticate with a mock user called `admin` and use `password` as your password.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go back to your terminal and enable authentication:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You'll be prompted to log into the UI again. Log in with the mock user called
    `admin` and use `password` as your password.
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the following command to verify that Pachyderm has been installed successfully:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output of the preceding command should look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have installed Pachyderm on our cluster, we are ready to create
    our first pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing the Pachyderm Console
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you have installed the Console with your Pachyderm cluster, you can access
    it and view your pipelines, repositories, and other Pachyderm objects in the UI.
    The Pachyderm Console is available as a free trial for 30 days. Follow these steps
    to access the Pachyderm Console:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the following command to verify the status of your Enterprise activation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output of the preceding command should look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'If port-forwarding is not running, execute the following command to start it.
    This step will forward the Pachyderm Console service on port `4000` to your local
    workstation on port `4000`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In a web browser, open [http://localhost:4000](http://localhost:4000).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Use the default credentials of `admin` and `password` on the login screen,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B17085_04_008.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.8 – Login screen of the Pachyderm Console
  prefs: []
  type: TYPE_NORMAL
- en: 'Upon clicking **Login** to access the Pachyderm Console, click the **View Project**
    button to view your repositories and pipelines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B17085_04_009.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.9 – Pachyderm dashboard
  prefs: []
  type: TYPE_NORMAL
- en: Because we have not created any Pachyderm objects, this page is empty.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have learned how to access the Pachyderm Console, you are ready
    to create your first pipeline in Pachyderm.
  prefs: []
  type: TYPE_NORMAL
- en: Deleting an existing Pachyderm deployment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Only perform the steps in this section if you want to delete your cluster. If
    you want to continue working on the examples in other chapters, then please skip
    this section.
  prefs: []
  type: TYPE_NORMAL
- en: If you need to delete your deployment and start afresh, you need to wipe out
    your environment and start over again from the steps provided in the *Preparing
    the Kubernetes environment* section. When you delete an existing Pachyderm deployment,
    all the components, except for the Helm repository and `pachctl`, are removed
    from your machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to delete your existing Pachyderm deployment:'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have used a different name for your Helm instance, then execute the
    following command to find the Pachyderm instance name that you deployed using
    the Helm chart:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output of the preceding command should look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Execute the following command using your Pachyderm instance name to remove
    the Pachyderm components from your cluster:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you''re using minikube, remove the entire Kubernetes cluster and redeploy
    before you deploy Pachyderm again:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With that, you have completely removed Pachyderm and the local Kubernetes cluster
    from your computer.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about the software prerequisites for getting Pachyderm
    up and running on your local computer for testing purposes.
  prefs: []
  type: TYPE_NORMAL
- en: We gained basic knowledge about minikube and Docker Desktop and learned how
    to install them on our local machine. We also learned how to install the Pachyderm
    CLI and enable autocompletion on different operating systems.
  prefs: []
  type: TYPE_NORMAL
- en: We then installed Helm and the Pachyderm Helm repository on our system. We learned
    about Helm charts and how to obtain a free trial Pachyderm license.
  prefs: []
  type: TYPE_NORMAL
- en: We deployed a single-node, local Kubernetes cluster by using the most popular
    options available based on our desktop operating system. Finally, we deployed
    Pachyderm and learned how to access the Pachyderm Console.
  prefs: []
  type: TYPE_NORMAL
- en: We also learned how to do so on all three major platforms – macOS, Linux, and
    Windows.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn about how to install Pachyderm via the cloud
    and explain the software requirements needed to run a Pachyderm cluster in production.
    We will also learn about **Pachyderm Hub**, the **Software-as-a-Service** (**SaaS**)
    version of Pachyderm that is great for both testing and production environments.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Please refer to the following links for more information about the topics that
    were covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Official Homebrew Documentation*: [https://docs.brew.sh/](https://docs.brew.sh/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Kubectl Cheat Sheet:* [https://kubernetes.io/docs/reference/kubectl/cheatsheet/](https://kubernetes.io/docs/reference/kubectl/cheatsheet/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Minikube Handbook*: [https://minikube.sigs.k8s.io/docs/handbook/](https://minikube.sigs.k8s.io/docs/handbook/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*The Official Docker Desktop Documentation*: https://docs.docker.com/desktop/'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Kubernetes in Production Best Practices*: [https://www.packtpub.com/product/kubernetes-in-production-best-practices/9781800202450](https://www.packtpub.com/product/kubernetes-in-production-best-practices/9781800202450)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Kubernetes and Docker – An Enterprise Guide*: [https://www.packtpub.com/product/kubernetes-and-docker-an-enterprise-guide/9781839213403](https://www.packtpub.com/product/kubernetes-and-docker-an-enterprise-guide/9781839213403)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Official Pachyderm pachctl Reference Guide*: [https://docs.pachyderm.com/latest/reference/pachctl/pachctl/](https://docs.pachyderm.com/latest/reference/pachctl/pachctl/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
