- en: '*Chapter 7*: Pachyderm Operations'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [*Chapter 6*](B17085_06_Final_SB_Epub.xhtml#_idTextAnchor156), *Creating
    Your First Pipeline*, we created our first pipeline, as well as learning how to
    create Pachyderm repositories, put data into a repository, create and run a pipeline,
    and view the results of the pipeline. We now know how to create a standard Pachyderm
    pipeline specification and include our scripts in it so that they can run against
    data in our input repository.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will review all the different ways to put data inside of
    Pachyderm and export it to outside systems. We will learn how to update the code
    that runs inside of your pipeline and what the process of updating the pipeline
    specification is. We will learn how to build a Docker container and test it locally
    before uploading it to a registry.
  prefs: []
  type: TYPE_NORMAL
- en: We will also look into the most common troubleshooting steps that you should
    perform when a pipeline fails.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Reviewing the standard Pachyderm workflow
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Executing data operations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Executing pipeline operations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running maintenance operations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should have already installed the following components.
  prefs: []
  type: TYPE_NORMAL
- en: 'For a local macOS installation, you need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: macOS Mojave, Catalina, Big Sur, or later
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Docker Desktop for Mac 10.14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`minikube` v1.9.0 or later'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pachctl` 2.0.x or later'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pachyderm 2.0.x or later
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For a local Windows installation, you need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Windows Pro 64-bit v10 or later
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Windows Subsystem for Linux** (**WSL**) 2 or later'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Microsoft PowerShell v6.2.1 or later
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hyper-V
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`minikube` v1.9.0 or later'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`kubectl` v1.18 or later'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pachctl` 2.0.x or later'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pachyderm 2.0.x or later
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For an **Amazon Elastic Kubernetes Service** (**Amazon EKS**) installation,
    you need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`kubectl` v.18 or later'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`eksctl`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`aws-iam-authenticator`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pachctl` 2.0.x or later'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pachyderm 2.0.x or later
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For a Microsoft **Azure Kubernetes Service** (**AKS**) cloud installation,
    you need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`kubectl` v.18 or later'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure CLI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pachctl` 2.0.x or later'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pachyderm 2.0.x or later
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jq` 1.5 or later'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For a **Google Kubernetes Engine** (**GKE**) cloud installation, you need the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: Google Cloud SDK v124.0.0\. or later
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`kubectl` v.18 or later'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pachctl` 2.0.x or later'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pachyderm 2.0.x or later
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In addition to this, you need to have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A Docker Hub account to be able to upload images
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Downloading the source files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'All the source files for this chapter are located in this repository: [https://github.com/PacktPublishing/Reproducible-Data-Science-with-Pachyderm/tree/main/Chapter07-Pachyderm-Operations](https://github.com/PacktPublishing/Reproducible-Data-Science-with-Pachyderm/tree/main/Chapter07-Pachyderm-Operations).'
  prefs: []
  type: TYPE_NORMAL
- en: Reviewing the standard Pachyderm workflow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As you probably noticed when you were creating a pipeline, there is a certain
    workflow that you will need to follow when working with Pachyderm. Depending on
    your automation tools, your team processes, and the software that you use, it
    might differ, but in general, it boils down to the following common steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Add your data to Pachyderm.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a pipeline or pipelines.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add more data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Modify the parameters.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Modify your pipeline or pipelines.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Output the result to an output repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat *Steps 3–6* as many times as needed or continuously.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Serve your model or package your library and make it available for use.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following diagram demonstrates this process:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.1 – Pachyderm workflow'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17085_07_001.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.1 – Pachyderm workflow
  prefs: []
  type: TYPE_NORMAL
- en: Depending on whether you keep your code in a Docker image, in the pipeline itself,
    or you use a build pipeline with your Python code, you need to rebuild your Docker
    image every time you make changes to the code. There is a lightweight workflow
    for Python pipelines only that uses a base Docker image and a special build pipeline.
    You can read about this approach in the Pachyderm official documentation at [https://docs.pachyderm.com](https://docs.pachyderm.com).
    For any other language, you likely will need to build Docker images regularly.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we know what the typical workflow is, let's dive into data operations
    and learn about all the ways you can upload your data to Pachyderm.
  prefs: []
  type: TYPE_NORMAL
- en: Executing data operations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you have probably already noticed, to get started working with Pachyderm,
    you need to put data into it. Then, data is transformed through a number of transformation
    steps. After that, you can export your data and models to an outside source in
    a form of libraries, binaries, packages, tables, dashboards, or any other format
    for further use. In this section, we will review the ways to upload and download
    data to and from Pachyderm and all the native Pachyderm modifications that can
    be applied during this process.
  prefs: []
  type: TYPE_NORMAL
- en: Let's begin with uploading data to Pachyderm.
  prefs: []
  type: TYPE_NORMAL
- en: Uploading data to Pachyderm
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can divide data sources that ingest data into Pachyderm into the following
    categories:'
  prefs: []
  type: TYPE_NORMAL
- en: From a local filesystem
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: From a URL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A remote object or block storage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A streaming or messaging platform
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In this section, you will likely mostly use your local filesystem to upload
    data to Pachyderm repositories. This can be done with a simple Pachyderm command:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To upload data from a local filesystem, you use the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The repository must exist.
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, to upload the data stored in a remote location, you can use the
    same command by specifying the correct URL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The same applies to the files stored in an object store. For example, if you
    are using an object store on Google Cloud Platform, you use the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The preceding commands put the files in the root of the repo, but you could
    also put them in any subdirectory by specifying the path to them, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'To upload a whole directory, use the `-r` flag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run `pachctl put file --help` to view more examples.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to automatically upload data from a messaging queue to Pachyderm,
    you need to create a special type of pipeline called a **spout**. The main thing
    a spout does is that it connects a data stream from a messaging platform to Pachyderm
    and puts it into a specified Pachyderm repository. You could also specify some
    code to categorize data into folders according to the preferred pattern. Here
    is an example of a spout pipeline:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now that we know how we can put data into Pachyderm, let's take a look at data
    provenance and data lineage in Pachyderm.
  prefs: []
  type: TYPE_NORMAL
- en: About data lineage
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If your system relies on data, you need to ensure that the data you use in your
    decision-making process is accurate and credible. Failure to provide a traceable
    data footprint may result in negative consequences for your organization. As more
    and more data-based systems are used in all aspects of our lives, wrong decisions
    based on erroneous data can have devastating impacts on people's lives.
  prefs: []
  type: TYPE_NORMAL
- en: That's why being able to go back in time and trace the data to its origins is
    a crucial part of any data management system. The ability to track the changes
    that happened to the data through the multiple transformation steps back to its
    origin is called data lineage or data provenance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Typically, data lineage is visualized in the form of a **Direct Acyclic Graph**
    (**DAG**). Here is an example of the DAG representation in the Pachyderm UI:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.2 – Pachyderm DAG'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17085_07_002.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.2 – Pachyderm DAG
  prefs: []
  type: TYPE_NORMAL
- en: Each container represents either an input or output repository or a pipeline.
    The preceding example is very simple. In a workflow with more steps, the DAG might
    look more complex.
  prefs: []
  type: TYPE_NORMAL
- en: 'Why is data lineage so important? Here are a few important points to consider:'
  prefs: []
  type: TYPE_NORMAL
- en: With topics such as privacy and equality being widely discussed on all levels,
    providing an audit trail for governance is becoming a necessity.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With data science being widely productized, implementing a system that offers
    the ability to roll back and correct errors in data and algorithms is crucial.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Trustworthiness of the data is another aspect that can be verified through data
    lineage.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In [*Chapter 1*](B17085_01_Final_SB_Epub.xhtml#_idTextAnchor015), *The Problem
    of Reproducibility*, we discussed many examples where the lack of a proper data
    management system can have a devastating impact on people's lives, as well as
    harming your businesses.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have discussed the importance of data lineage, let's take a look at
    how you can explore data lineage in Pachyderm.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring data lineage
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Data provenance** or **data lineage** is the most important feature of Pachyderm
    that ensures that your changes are preserved and can be traced to the beginning
    of the pipeline''s existence.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To demonstrate this functionality, we will use the same pipeline we used in
    [*Chapter 6*](B17085_06_Final_SB_Epub.xhtml#_idTextAnchor156), *Creating Your
    First Pipeline*. If you have not downloaded the files yet, go to [https://github.com/PacktPublishing/Reproducible-Data-Science-with-Pachyderm/tree/main/Chapter06-Creating-Your-First-Pipeline](https://github.com/PacktPublishing/Reproducible-Data-Science-with-Pachyderm/tree/main/Chapter06-Creating-Your-First-Pipeline)
    and download them from there:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the Pachyderm `photos` repository, put the `brown_vase.png` file in
    it, and create the contour and histogram pipelines by running the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The following command shows how you can view the lineage of your data and pipelines.
    First, we need to get a commit number for the desired data change:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output should look similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we only have one output commit with the `3d42e6385854478fbd2c9212c3afdab2`
    hash.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we can run the `inspect commit` command to get the provenance information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The preceding command returns the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: This output shows you that the commit is created in the `photos` repository.
    It has the `AUTO` type because it was generated when the data was uploaded to
    the `photos` repository. You can also see that it has created a child commit,
    `dfff764bd1dd41b9bf3613af86d6e45c`, for which you can run the same command. The
    child commit will have the `ALIAS` type since it is connected to the original
    commit in the `photos` repository. Over time, as new data arrives, this list will
    grow.
  prefs: []
  type: TYPE_NORMAL
- en: 'The preceding command tells us what the predecessors of the commit in the `contour`
    repository were. We can also use the `wait commit` command with a commit ID to
    track commits as they land in the output repository. For example, if we want to
    watch the changes that the `3e16201310374944b48ed73f83be2be7` commit lands in
    downstream pipelines, we can run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Provenance** is a powerful feature of Pachyderm. It is especially useful
    when you need to find an audit trail to find out what made your pipeline biased.'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have learned how to explore data provenance in Pachyderm, let's
    look into how to mount your Pachyderm repository to a local filesystem.
  prefs: []
  type: TYPE_NORMAL
- en: Mounting a Pachyderm repository to a local filesystem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can mount your Pachyderm system to your local computer by using the **Filesystem
    in Userspace** (**FUSE**) interface to access your Pachyderm repositories as you
    typically would access local files. FUSE is supported on all major platforms,
    such as Microsoft Windows, Linux, and macOS. By default, you can mount your Pachyderm
    repositories with read-only access but write access can also be enabled. You need
    to understand that modifying the files in these mounts leads to broken provenance
    and should not generally be used. Use this functionality to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: View the results of your pipeline runs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Give third-party applications access to Pachyderm output repositories for further
    processing.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To mount a Pachyderm repository to your local computer filesystem, complete
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install FUSE on your machine. If you are on macOS, run the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you are on Linux, run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'On Windows, run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Use the `pachctl mount` command to mount a Pachyderm repository. For example,
    to mount a `contour` repository, run the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This command will run continuously in your terminal until you interrupt it with
    *Ctrl* + *C*.
  prefs: []
  type: TYPE_NORMAL
- en: 'To access your files, go to your file browser. For example, if you are on macOS,
    use Finder. You should see the `~/Documents/contour` folder mounted like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.3 – Mounted Pachyderm repository'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17085_07_003.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.3 – Mounted Pachyderm repository
  prefs: []
  type: TYPE_NORMAL
- en: From here, you can view the files as needed.
  prefs: []
  type: TYPE_NORMAL
- en: 'To mount a repository with write access, run the same command with the `--write`
    flag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Use this functionality with caution as modifying files in output repositories
    breaks the provenance.
  prefs: []
  type: TYPE_NORMAL
- en: 'To mount multiple repositories, specify the list of the repositories each with
    a `--repos` flag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following screenshot shows how the `data`, `contour`, `histogram`, and
    `photos` repositories are mounted on your machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.4 – Mounted Pachyderm repositories'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17085_07_004.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.4 – Mounted Pachyderm repositories
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we learned how to perform the most common Pachyderm data operations,
    including uploading data to Pachyderm, exploring provenance, and mounting Pachyderm
    repositories to your local machine, as well as splitting data while uploading
    it to Pachyderm. Next, we'll look into the most common pipeline operations that
    you will have to perform while working with Pachyderm.
  prefs: []
  type: TYPE_NORMAL
- en: Executing pipeline operations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Apart from creating and deleting pipelines, you likely will need to update your
    pipelines with new code changes. If changes are made to the pipeline specification
    itself, such as increasing the number of Pachyderm workers, input repository,
    glob pattern, or similar, you only need to do it in the YAML or JSON file and
    update the version of your pipeline spec. However, if the changes are in your
    code and your code is in your Docker image, you need to rebuild the Docker image.
    Let's go through each of these use cases.
  prefs: []
  type: TYPE_NORMAL
- en: Updating your pipeline specification
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The pipeline specification enables you to control various Pachyderm parameters,
    such as controlling from which repository your pipeline consumes data, how many
    workers are started, and how many resources are available to your pipeline. You
    can also specify your code in the pipeline itself through the `stdin` field. Such
    a pipeline can use a basic Docker image that you won''t have to ever update. If
    this is your case and you need to make changes in your pipeline spec or the code
    in the `stdin` field, here is what you need to do:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Make the needed changes in the YAML or JSON file that has your pipeline specification.
    For example, if you want to change a glob pattern in your `contour.yaml` pipeline
    from `glob: "/"` to `glob: "/*"`, you just make these changes directly in the
    YAML file and save it.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, you need to update the version of the already running pipeline by specifying
    this YAML file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Verify that the pipeline version is updated:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If the previous version of your pipeline was `1`, it should change to `2`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The new pipeline will not process the data that has already been processed unless
    you explicitly specify it by using the `--reprocess` flag.
  prefs: []
  type: TYPE_NORMAL
- en: 'To run the updated pipeline against the already processed data, use the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the output, you should see that the version was updated again:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'By default, if you run `pachctl list pipeline`, Pachyderm shows information
    about the latest pipeline only. If you run this command with the `--history` flag,
    you can see all previous versions as well:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here is what the output should look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: You can see that the version 3 pipeline ran three times.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s check that the third version of the pipeline output a commit in
    the `contour` repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This command should return similar output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Now that we know how to update a pipeline without changes to the code, let's
    see the workflow when your code is in a Docker image, and you need to update that
    code.
  prefs: []
  type: TYPE_NORMAL
- en: Updating your code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If your code is specified in a file that is embedded in a Docker image, you
    need to rebuild this Docker image every time you make changes to it, upload it
    to the Docker registry with a new version, update the version of the image inside
    of your pipeline specification, and then run the `pachctl update pipeline` command.
  prefs: []
  type: TYPE_NORMAL
- en: Let's modify the `contour.py` file in the contour pipeline that we created in
    [*Chapter 6*](B17085_06_Final_SB_Epub.xhtml#_idTextAnchor156), *Creating Your
    First Pipeline*. You need to have an account in a Docker registry to complete
    this section. If you do not have an account, you can create a free account on
    Docker Hub. All images referenced in this book are stored in Docker Hub and we
    will use Docker Hub as an example. If you are using any other Docker image registry,
    follow that registry's documentation to log in and upload images.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will also need the Dockerfile for this pipeline to build new images:'
  prefs: []
  type: TYPE_NORMAL
- en: If you have not done so yet, download the Dockerfile from [https://github.com/PacktPublishing/Reproducible-Data-Science-with-Pachyderm/tree/main/Chapter06-Creating-Your-First-Pipeline](https://github.com/PacktPublishing/Reproducible-Data-Science-with-Pachyderm/tree/main/Chapter06-Creating-Your-First-Pipeline).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure your Docker Hub account by signing up at [https://hub.docker.com/](https://hub.docker.com/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When logged in to Docker Hub, click **Create Repository**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Name your repository and write a short description. For this example, we will
    be using a public registry, but Pachyderm supports private registries as well:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.5 – Creating a Docker Hub registry'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17085_07_005.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.5 – Creating a Docker Hub registry
  prefs: []
  type: TYPE_NORMAL
- en: Click **Create**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go to the terminal on your machine and run the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Provide your Docker Hub credentials to log in to Docker Hub. You should see
    the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the `contour.py` file for editing.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s make a very small change in our code—on *line 18*, change `linewidth`
    to `1`. Here is how it should look:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save your changes and exit.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For these changes to take effect in our Pachyderm pipeline, we need to build
    a new Docker image. You need to have the Dockerfile in the current directory for
    the next command to work. Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Replace `<your-registry>` with the name of your Docker Hub repository that
    you have created by following the preceding steps. You should see output similar
    to the following text:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: The first time you build a Docker image, it might take some time. Note that
    in `Step 9` in the preceding output, Docker adds your updated `contour.py` script.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step is to upload your image to your Docker registry. You could also
    first mount your Docker image locally and test it before uploading. To mount your
    Docker image locally, run the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This command takes some time to run, but it is very handy when you need to test
    something without constantly pushing new images to Docker Hub. We recommend that
    you mount your image locally, run your pipeline, and when ready, upload it to
    Docker Hub.
  prefs: []
  type: TYPE_NORMAL
- en: 'Or, if uploading directly to Docker Hub, run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'After you load your image, you need to update your pipeline specification with
    the new version of your pipeline. Assign a new version number every time you build
    a new image so that you keep track of your changes. To update the image version
    in the pipeline specification, open the `contour.yaml` file and change the following
    online number `9`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, you can run your updated pipeline with the new code. Let''s run the `update`
    command with the `--reprocess` flag to see how our changes have affected the result:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the following screenshot, you can see the comparison between the two versions.
    We have the first version on the left with a visibly thicker contour than the
    new version on the right:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.6 – Comparing the results of the pipeline version'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17085_07_006.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.6 – Comparing the results of the pipeline version
  prefs: []
  type: TYPE_NORMAL
- en: We have learned how to update Pachyderm pipelines. This method works for any
    language or framework. Pachyderm also provides built-in `Docker build` and `Docker
    push` commands that you could use. However, we suggest that you follow the process
    described previously as it seems to be more familiar to the majority of engineers,
    as well as more transparent.
  prefs: []
  type: TYPE_NORMAL
- en: Running maintenance operations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Like with every system or tool, Pachyderm might require periodic maintenance,
    upgrades, and troubleshooting. In the following sections, we will discuss the
    most important aspects of pipeline maintenance.
  prefs: []
  type: TYPE_NORMAL
- en: Troubleshooting your pipeline
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, you will learn how to troubleshoot your pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: 'Your pipelines might fail for the following reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Error in your code**: This type of error occurs when something in your code
    is incorrect, such as a resource is not available or an incorrect value is specified.
    Fixing this type of error involves troubleshooting your code. You could try to
    do it locally before testing it inside Pachyderm.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Pipeline specification error**: This type of error occurs when something
    is incorrect in the pipeline specification; for example, a pipeline cannot pull
    the Docker image. This often happens when a wrong image version is specified or
    there is a network issue.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Resource-related error**: This type of error occurs when your cluster runs
    out of memory or has a similar resource constraint issue.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pachyderm provides built-in functionality for pipeline troubleshooting through
    the `pachctl logs` command and you could also use Kubernetes-native tools to troubleshoot
    your pipelines. Since each Pachyderm pipeline is a Kubernetes Pod, you can use
    Kubernetes logging and debugging tools to troubleshoot them.
  prefs: []
  type: TYPE_NORMAL
- en: 'To detect and troubleshoot Pachyderm pipeline errors, complete the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'When a pipeline fails, you should see it in the pipeline status:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here is an example output of a failed pipeline:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'To troubleshoot this pipeline, we need to view the logs for the pipeline or
    the job. To view the logs for the pipeline, run the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following is an example response:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, the failure is pretty clear—the pipeline failed to
    pull the Docker image. This could be due to the wrong image version specified
    in the pipeline spec or a network issue. Verifying that the pipeline spec is correct
    will likely solve the problem.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following text is an example of another common code error in the pipeline:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding example, the pipeline was not able to find a specified file.
    This is likely because the path to the file was specified incorrectly in the `pos-tag.py`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: 'In some cases, you won''t be able to see the job logs because the pipeline
    crashed before kicking off a job. However, in most cases, you should be able to
    view the logs for a job. To view the job logs, first get the hash of the job:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here is an example output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: When you have a pipeline error, such as in the preceding output, the progress
    bar is yellow instead of green. This indicator gives you a clue that something
    is wrong in your code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the job hash to view more information about the failure in the job logs:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The output should give you more information about the failure.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, you can use `kubectl` to analyze possible errors in your pipeline.
    Get the name of your pipeline Pod by running the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You should see a similar response to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: You need to get logs for the pipeline Pod.
  prefs: []
  type: TYPE_NORMAL
- en: 'Get the Pod logs by running the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Important note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The **Events** part of the Pod logs typically provides information about any
    issues. Read more about Kubernetes debugging and troubleshooting in the Kubernetes
    documentation at [https://kubernetes.io/docs/tasks/debug-application-cluster/](https://kubernetes.io/docs/tasks/debug-application-cluster/).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'This is an example output that you will see:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: In this section, we have discussed basic troubleshooting operations. The best
    strategy is to get as many logs as possible, categorize the problem, and then
    troubleshoot accordingly. If the problem is in the user code, you likely will
    want to test your code locally before running it in Pachyderm. One limitation
    that has been recently introduced in Pachyderm is the limit of the number of pipelines
    that you can run in the free tier. You won't be able to run more than 16 pipelines
    and 8 workers unless you upgrade to a paid version.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we'll look into how to upgrade your cluster from one version to another.
  prefs: []
  type: TYPE_NORMAL
- en: Upgrading your Pachyderm cluster
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Pachyderm releases minor version upgrades on a regular basis. Upgrading between
    minor versions and patches, such as from version 1.13.0 to 1.13.1 or 1.12.4\.
    to 1.13.0, is pretty straightforward, but moving between major versions, such
    as 1.13.0 to 2.0, might be a bit more disruptive. Let's review the process for
    each of these use cases. Upgrades to major versions do not happen often. Typically,
    Pachyderm releases a major version once every few years. Those types of upgrades
    involve breaking changes and likely will have specific instructions. Refer to
    the Pachyderm documentation for steps to perform a major upgrade.
  prefs: []
  type: TYPE_NORMAL
- en: Upgrading between patches and minor versions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When you are upgrading your Pachyderm cluster, you need to make sure you back
    up your data and pipelines, upgrade the version of `pachctl`, and then redeploy
    your cluster. If you are upgrading locally in a `minikube` environment, you might
    not need to use your backup, but create one for safety reasons. If you are redeploying
    into the same namespace, all your data should still be available. If you are using
    a cloud environment, then you'll need to redeploy in a new namespace.
  prefs: []
  type: TYPE_NORMAL
- en: 'To upgrade from one patch or a minor version to another, complete the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Stop all pipelines that are currently running in your cluster:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s stop the `contour` pipeline:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Verify that the pipeline is suspended:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: If you have any other pipelines running, stop them as well.
  prefs: []
  type: TYPE_NORMAL
- en: You need to make sure that all external data loading operations are suspended
    as well, if you have any automated services uploading data to Pachyderm.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Just in case, save your `pachd`, `etcd`, and `console` service manifests to
    separate YAML files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If your upgrade goes wrong, you should be able to restore from these manifests
    manually.
  prefs: []
  type: TYPE_NORMAL
- en: 'Back up your cluster:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding example, we have specified the `--no-auth` and `--no-enterprise`
    flags. If you are using an enterprise version of Pachyderm or have enabled authentication,
    run this command without these flags.
  prefs: []
  type: TYPE_NORMAL
- en: 'Verify that the `values.yaml` file has updated values. Specifically, verify
    that the following autogenerated values are correct:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Upgrade your `pachctl` version, as in the following example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Use the package manager in your system to upgrade.
  prefs: []
  type: TYPE_NORMAL
- en: 'Verify that the Pachyderm version was upgraded:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You should see the upgraded version in the output. In this case, it is `2.0.0`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Use the `helm upgrade` command to redeploy your cluster:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run `kubectl get pod` until you see the Pachyderm Pods running like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Check that `pachd` is running:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This command should return an output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'If you are in a cloud environment, use the following command to restore your
    configuration from the backup that you have created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Check that your pipelines and repositories are in place:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The system response should look similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: We have successfully restored our repositories and pipelines in our newly deployed
    cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Cleaning up
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'After you are done experimenting, you might want to clean up your cluster so
    that you start your next experiment with a fresh install. To clean up the environment,
    run the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Delete all pipelines and repositories:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Verify that no repositories and pipelines exist in your cluster:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: You have successfully cleaned up your cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have learned about some of the most important Pachyderm
    operations that you will need to perform during the lifetime of your Pachyderm
    cluster. We learned about the various ways to load data into Pachyderm, including
    how to do it with a messaging system. We learned how to update your pipelines,
    build Docker images, and mount them locally or upload them to a Docker image registry.
    Finally, we learned about some basic troubleshooting techniques and upgrading
    between patches and minor versions.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will implement an end-to-end machine learning workflow
    and learn more about deploying more complex multi-step Pachyderm pipelines.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Docker Hub Quickstart: [https://docs.docker.com/docker-hub/](https://docs.docker.com/docker-hub/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Kubernetes monitoring, logging, and debugging: [https://kubernetes.io/docs/tasks/debug-application-cluster/](https://kubernetes.io/docs/tasks/debug-application-cluster/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Pachyderm build pipelines: [https://docs.pachyderm.com/latest/how-tos/developer-workflow/build-pipelines/](https://docs.pachyderm.com/latest/how-tos/developer-workflow/build-pipelines/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Dua, D. and Graff, C. (2019). *UCI Machine Learning Repository* ([http://archive.ics.uci.edu/ml](http://archive.ics.uci.edu/ml)).
    Irvine, CA: University of California, School of Information and Computer Science.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
