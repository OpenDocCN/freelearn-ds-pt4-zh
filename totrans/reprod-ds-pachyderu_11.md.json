["```py\n---\n pipeline:\n   name: data-explore\n description: A pipeline that performs exploratory analysis.\n input:\n   pfs:\n     glob: \"/*\"\n     repo: data\n transform:\n   cmd:\n   - python3\n   - \"/data-explore.py\"\n   image: svekars/hyperparameter-example:1.0\n```", "```py\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n```", "```py\nplt.subplots(figsize=(20,15))\n data = pd.read_csv(\"/pfs/data/housing-train.csv\", delimiter=',')\n dataset = data.corr().round(2)\n plt.subplots(figsize=(20,15))\n my_plot = sns.heatmap(dataset, annot=True,cmap='YlGnBu', linecolor='white')\n fig = my_plot.get_figure()\n fig.savefig('/pfs/out/heatmap.png', dpi=400)\n```", "```py\ndata_types = data.dtypes.to_frame('dtypes').reset_index()\ndata_types.to_csv('/pfs/out/data-types.csv', index=False)\n```", "```py\ncols_no_data = data.isnull().sum() / data.shape[0] * 100.00\nno_data = pd.DataFrame({'Column': data.columns, 'Percentage Missing': cols_no_data})\nno_data.sort_values(by=['Percentage Missing'], inplace=True, ascending=False)\nheader = [\"Column\", \"Percentage Missing\"]\nno_data.to_csv('/pfs/out/no-data.csv', columns = header, index=False)\n```", "```py\n    pachctl version\n    ```", "```py\nCOMPONENT           VERSION\npachctl             2.0.0\npachd               2.0.0\n```", "```py\n    pachctl create repo data\n    ```", "```py\n    pachctl put file data@master -f housing-train.csv\n    ```", "```py\nhousing-train.csv 460.68KB / 460.68 KB [=========] 0s 0.00 b/s\n```", "```py\n    pachctl list file data@master\n    ```", "```py\nNAME               TYPE SIZE\n/housing-train.csv file 449.9KiB\n```", "```py\n    pachctl create pipeline -f data-explore.yaml \n    ```", "```py\n    pachctl list pipeline \n    ```", "```py\nNAME      VERSION INPUT   CREATED  STATE / LAST JOB   DESC\ndata-explore 1    data:/* 34 seconds ago running / running A pipeline that performs exploratory data analysis.\n```", "```py\n    pachctl list repo\n    ```", "```py\nNAME         CREATED        SIZE (MASTER) DESCRIPTION\ndata-explore 46 seconds ago 3.361MiB      Output repo for pipeline data-explore.\ndata         26 minutes ago 449.9KiB \n```", "```py\n    pachctl list file data-explore@master\n    ```", "```py\nNAME            TYPE SIZE\n/data-types.csv file 1.37KiB\n/heatmap.png    file 3.359MiB\n/no-data.csv    file 1.447KiB\n```", "```py\n    pachctl get file data-explore@master:/data-types.csv \n    ```", "```py\nindex,dtypes\nId,int64\nMSSubClass,int64\nMSZoning,object\nLotFrontage,float64\n...\n```", "```py\n    pachctl get file data-explore@master:/no-data.csv\n    ```", "```py\npachctl get file data-explore@master:/no-data.csv | open -f -a \"Numbers\"\n```", "```py\n    pachctl get file data-explore@master:/heatmap.png | open -f -a \"Preview.app\"\n    ```", "```py\n---\n pipeline:\n   name: data-clean\n description: A pipeline that removes empty cells from the CSV.\n input:\n   pfs:\n     glob: \"/\"\n     repo: data\n transform:\n   cmd:\n   - python3\n   - \"/data-clean.py\"\n   image: svekars/hyperparameter-example:1.0\n```", "```py\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom pandas import Series\n```", "```py\ndata = pd.read_csv(\"/pfs/data/housing-train.csv\", delimiter=',')\ncol_drop = set(data.count()[data.count()<0.60*max(data.count())].index.tolist())\npd.Series(list(col_drop)).to_csv('/pfs/out/col_drop.csv', index=False)\n```", "```py\ndata = data.drop((col_drop), axis=1)\ncorr = data.corr()\nr_var = corr.SalePrice[(corr.SalePrice > 0.5)]\nr_col = list(r_var.index.values)\nnew_corr = data[r_col].corr()\nplt.subplots(figsize=(20,15))\nmy_plot2 = sns.heatmap(new_corr, annot=True,cmap='YlGnBu', linecolor='white')\nfig = my_plot2.get_figure()\nfig.savefig('/pfs/out/heatmap2.png', dpi=400)\n```", "```py\nnew_data = data.loc[:, data.columns.intersection(r_col)]\nnew_data.to_csv('/pfs/out/cleaned-data.csv', index=True)\n```", "```py\n    pachctl version\n    ```", "```py\nCOMPONENT           VERSION\npachctl             2.0.0\npachd               2.0.0\n```", "```py\n    pachctl create pipeline -f data-clean.yaml \n    ```", "```py\n    pachctl list pipeline \n    ```", "```py\nNAME         VERSION INPUT   CREATED       STATE / LAST JOB  DESCRIPTION\ndata-clean   1       data:/ 6 seconds ago running / running A pipeline that removes empty cells from the CSV.\ndata-explore 1       data:/* 4 minutes ago running / success A pipeline that performs exploratory analysis.\n```", "```py\n    pachctl list repo\n    ```", "```py\nNAME         CREATED        SIZE (MASTER) DESCRIPTION\ndata-clean   42 seconds ago ≤ 780.4KiB    Output repo for pipeline data-clean.\ndata-explore 3 minutes ago  ≤ 3.361MiB    Output repo for pipeline data-explore.\ndata         12 minutes ago ≤ 449.9KiB \n```", "```py\n    pachctl list file data-clean@master\n    ```", "```py\nNAME            TYPE SIZE\n/cleaned-data.csv file 67.14KiB\n/col_drop.csv     file 45B\n/heatmap2.png     file 713.2KiB\n```", "```py\n    pachctl get file data-clean@master:/col_drop.csv\n    ```", "```py\n0\nPoolQC\nAlley\nFireplaceQu\nMiscFeature\nFence\n```", "```py\n    pachctl get file data-clean@master:/heatmap2.png | open -f -a \"Preview.app\"\n    ```", "```py\n---\n pipeline:\n   name: remove-outliers\n description: A pipeline that removes outliers from the dataset.\n input:\n   pfs:\n     glob: \"/\"\n     repo: data-clean\n transform:\n   cmd:\n   - python3\n   - \"/outliers.py\"\n   image: svekars/hyperparameter-example:1.0\n```", "```py\ndata = pd.read_csv(\"/pfs/data-clean/cleaned-data.csv\", delimiter=',', encoding='utf-8')\nmy_plot=sns.boxplot(x=data['SalePrice'])\nfig = my_plot.get_figure()\nfig.savefig('/pfs/out/histogram.png', dpi=400)\nq1 = data['SalePrice'].quantile(0.25)\nq3 = data['SalePrice'].quantile(0.75)\niqr = q3-q1\nlw = q1 - 1.5*iqr\nuw = q3 + 1.5*iqr\ndataset = data[(data['SalePrice']>lw)&(data['SalePrice']<uw)]\nplt.figure(figsize=(20,10))\nmy_plot2 = sns.histplot(data=dataset, x=\"SalePrice\", color=\"orange\", element=\"poly\")\nfig = my_plot2.get_figure()\nfig.savefig('/pfs/out/histogram-outliers.png', dpi=400)\ndataset.to_csv('/pfs/out/removed-outliers-data.csv', index=True)\n```", "```py\n    pachctl version\n    ```", "```py\nCOMPONENT           VERSION\npachctl             2.0.0\npachd               2.0.0\n```", "```py\n    pachctl create pipeline -f remove-outliers.yaml \n    ```", "```py\n    pachctl list pipeline \n    ```", "```py\nNAME            VERSION INPUT         CREATED       STATE / LAST JOB   DESCRIPTION\nremove-outliers 1       data-clean:/ 5 seconds ago running / starting A pipeline that removes outliers from the dataset.\ndata-clean      1       data:/       4 minutes ago running / success  A pipeline that removes empty cells from the CSV.\ndata-explore    1       data:/*       8 minutes ago running / success  A pipeline that performs exploratory analysis.\n```", "```py\n    pachctl list repo\n    ```", "```py\nNAME            CREATED            SIZE (MASTER) DESCRIPTION\nremove-outliers About a minute ago 413.7KiB      Output repo for pipeline remove-outliers.\ndata-clean      49 minutes ago     780.4KiB      Output repo for pipeline data-clean.\ndata-explore    53 minutes ago     3.361MiB      Output repo for pipeline data-explore.\ndata            About an hour ago  449.9KiB\n```", "```py\n    pachctl list file remove-outliers@master\n    ```", "```py\nNAME                       TYPE SIZE\n/histogram-outliers.png    file 290.8KiB\n/histogram.png             file 52.8KiB\n/removed-outliers-data.csv file 70.04KiB\n```", "```py\n    pachctl get file remove-outliers@master:/histogram.png | open -f -a \"Preview.app\"\n    ```", "```py\n    pachctl get file remove-outliers@master:/histogram-outliers.png | open -f -a \"Preview.app\"\n    ```", "```py\n---\n pipeline:\n   name: train\n description: A pipeline that trains the model with a selected estimator.\n input:\n   pfs:\n     glob: \"/\"\n     repo: remove-outliers\n transform:\n   cmd:\n   - python3\n   - \"/train.py\"\n   image: svekars/hyperparameter-example:1.0\n```", "```py\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics\nimport pandas as pd\nfrom sklearn.metrics import r2_score, mean_squared_error, make_scorer\nfrom sklearn.linear_model import Ridge\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom contextlib import redirect_stdout\n```", "```py\ndata = pd.read_csv(\"/pfs/remove-outliers/removed-outliers-data.csv\", delimiter=',')\nX=data.drop('SalePrice', axis=1)\ny=data['SalePrice']\ntrain_X, test_X, train_y, test_y = train_test_split(X,y,test_size=0.4, random_state=0)\n```", "```py\nestimator = Ridge(alpha=1).fit(train_X, train_y)\nprediction = estimator.predict(test_X)\nwith open('/pfs/out/r_squared_mse.txt', 'w', encoding='utf-8') as f:\n     with redirect_stdout(f):\n         print('R-squared:', metrics.r2_score(test_y, prediction))\n         print('MSE:', np.sqrt(metrics.mean_squared_error(test_y, prediction)))\n```", "```py\nplt.figure(figsize=(20,10))\nmyplot1 = sns.distplot(test_y, hist=True, kde=False)\nmyplot2 = sns.distplot(prediction, hist=True, kde=False)\nplt.legend(labels=['Real Price', 'Predicted Price'])\nplt.xlim(0,)\nfig1 = myplot1.get_figure()\nfig1.savefig('/pfs/out/prediction.png', dpi=400)\n```", "```py\n    pachctl version\n    ```", "```py\nCOMPONENT           VERSION\npachctl             2.0.0\npachd               2.0.0\n```", "```py\n    pachctl create pipeline -f train.yaml \n    ```", "```py\n    pachctl list pipeline \n    ```", "```py\nNAME            VERSION INPUT         CREATED       STATE / LAST JOB   DESCRIPTION\ntrain           1       remove-outliers:/ 34 seconds ago running / success A pipeline that trains the model with a selected estimator.\nremove-outliers 1       data-clean:/ 5 seconds ago running / starting A pipeline that removes outliers from the dataset.\ndata-clean      1       data:/       4 minutes ago running / success  A pipeline that removes empty cells from the CSV.\ndata-explore    1       data:/*       8 minutes ago running / success  A pipeline that performs exploratory analysis.\n```", "```py\n    pachctl list repo\n    ```", "```py\nNAME            CREATED            SIZE (MASTER) DESCRIPTION\ntrain           2 minutes ago 186.3KiB      Output repo for pipeline train.\nremove-outliers About a minute ago 413.7KiB      Output repo for pipeline remove-outliers.\ndata-clean      49 minutes ago     780.4KiB      Output repo for pipeline data-clean.\ndata-explore    53 minutes ago     3.361MiB      Output repo for pipeline data-explore.\ndata            About an hour ago  449.9KiB\n```", "```py\n    pachctl list file train@master\n    ```", "```py\nNAME               TYPE SIZE\n/prediction.png    file 186.2KiB\n/r_squared_mse.txt file 54B\n```", "```py\n    pachctl get file train@master:/r_squared_mse.txt\n    ```", "```py\nR-squared: 0.7803812645495943\nMSE: 29521.138357806965\n```", "```py\n    pachctl get file train@master:/prediction.png | open -f -a \"Preview.app\"\n    ```", "```py\n---\n pipeline:\n   name: evaluate\n description: A pipeline that evaluates the performance of the model.\n input:\n   pfs:\n     glob: \"/\"\n     repo: remove-outliers\n transform:\n   cmd:\n   - python3\n   - \"/grid-search.py\"\n   image: svekars/hyperparameter-example:1.0\n```", "```py\nestimator = Ridge(alpha=10)\nscoring={'R_squared':'r2','MSE':'neg_mean_squared_error'}\nparams = {'alpha':[1,0.1,0.01,0.001,0.0001,0,10,100,1000]}\n```", "```py\nwith open('/pfs/out/best_score.txt', 'w', encoding='utf-8') as f:\n      with redirect_stdout(f):\n          for i, v in scoring.items():\n             grid = GridSearchCV(estimator, params, cv=10, scoring= \"r2\")\n             grid.fit(train_X, train_y)\n             print(i)\n             print('Best params:', grid.best_params_)\n             if grid.best_score_ > 0:\n                 print('Best score:', grid.best_score_)\n             else:\n                 print('Best score:', np.sqrt(abs(grid.best_score_)))\n             print()\n joblib.dump(estimator, '/pfs/out/my_model.pkl', compress =1)\n```", "```py\n    pachctl version\n    ```", "```py\nCOMPONENT           VERSION\npachctl             2.0.0\npachd               2.0.0\n```", "```py\n    pachctl create pipeline -f evaluate.yaml \n    ```", "```py\n    pachctl list pipeline \n    ```", "```py\nNAME            VERSION INPUT         CREATED       STATE / LAST JOB   DESCRIPTION\nevaluate        1       remove-outliers:/ 5 seconds ago  running / running A pipeline that evaluates the performance of the model.\ntrain           1       remove-outliers:/ 34 seconds ago running / success A pipeline that trains the model with a selected estimator.\nremove-outliers 1       data-clean:/* 5 seconds ago running / starting A pipeline that removes outliers from the dataset.\ndata-clean      1       data:/*       4 minutes ago running / success  A pipeline that removes empty cells from the CSV.\ndata-explore    1       data:/*       8 minutes ago running / success  A pipeline that performs exploratory analysis.\n```", "```py\n    pachctl list repo\n    ```", "```py\nNAME            CREATED            SIZE (MASTER) DESCRIPTION\nevaluate        2 minutes ago  121KiB        Output repo for pipeline evaluate.\ntrain           2 minutes ago 186.3KiB      Output repo for pipeline train.\nremove-outliers About a minute ago 413.7KiB      Output repo for pipeline remove-outliers.\ndata-clean      49 minutes ago     780.4KiB      Output repo for pipeline data-clean.\ndata-explore    53 minutes ago     3.361MiB      Output repo for pipeline data-explore.\ndata            About an hour ago  449.9KiB\n```", "```py\n    pachctl list file evaluate@master\n    ```", "```py\nNAME               TYPE SIZE\n/best_score.txt       file 132B\n/my_model.pkl         file 187B\n/performance-plot.png file 120.7KiB\n```", "```py\n    pachctl get file evaluate@master:/best_score.txt\n    ```", "```py\nR_squared\nBest params: {'alpha': 10}\nBest score: 0.7040913319322766\nMSE\nBest params: {'alpha': 10}\nBest score: 0.7040913319322766\n```", "```py\n    pachctl get file evaluate@master:/performance-plot.png | open -f -a \"Preview.app\"\n    ```", "```py\n    pachctl delete pipeline –all && pachctl delete repo --all\n    ```", "```py\n    pachctl list repo && pachctl list pipeline\n    ```", "```py\nNAME CREATED SIZE (MASTER) DESCRIPTION\nNAME VERSION INPUT CREATED STATE / LAST JOB DESCRIPTION\n```"]