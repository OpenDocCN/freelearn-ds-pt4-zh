- en: '*Chapter 10*: Pachyderm Language Clients'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In previous chapters, we have learned how to use Pachyderm through the `pachctl`
    `pachctl`. We briefly looked into the Pachyderm **User Interface** (**UI**)—or
    the dashboard—as well, although we did not use it extensively. The Pachyderm CLI
    enables you to perform all Pachyderm management operations and, in general, provides
    more functionality than the Pachyderm UI.
  prefs: []
  type: TYPE_NORMAL
- en: However, many users may decide to take Pachyderm even further by using Pachyderm
    `pachctl` or the dashboard. Many Pachyderm users develop scripts and call the
    Pachyderm API directly from these scripts. As of today, Pachyderm provides two
    official Pachyderm programming language clients, **Golang** (**Go**) and Python,
    to enable advanced users to extend Pachyderm functionality further.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, if you are familiar with `pps.proto` file to access Pachyderm through
    such languages as C, C++, and Java.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will learn how to use both Python and Go Pachyderm clients.
    You will learn how to run basic operations by using both of these clients, including
    how to create repositories and pipelines.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter is intended to demonstrate how to use official Pachyderm language
    clients.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Using the Pachyderm Go client
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cloning the Pachyderm source repository
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Pachyderm Python client
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should have already installed the components listed next.
  prefs: []
  type: TYPE_NORMAL
- en: 'For a local macOS installation, you will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: macOS Mojave, Catalina, Big Sur, or later
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Docker Desktop for Mac 10.14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`minikube` v1.9.0 or later'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pachctl` 2.0.0 or later'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pachyderm 2.0.0 or later
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For a local Windows installation, you will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Windows Pro 64-bit v10 or later
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Windows Subsystem for Linux** (**WSL**) 2 or later'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Microsoft PowerShell v6.2.1 or later
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hyper-V
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`minikube` v1.9.0 or later'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`kubectl` v1.18 or later'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pachctl` 2.0.0 or later'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pachyderm 2.0.0 or later
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For an **Amazon Elastic Kubernetes Service** (**Amazon EKS**) installation,
    you will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`kubectl` v1.18 or later'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`eksctl`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`aws-iam-authenticator`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pachctl` 2.0.0 or later'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pachyderm 2.0.0 or later
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For a Microsoft **Azure Kubernetes Service** (**AKS**) cloud installation,
    you will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`kubectl` v1.18 or later'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Azure CLI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pachctl` 2.0.0 or later'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pachyderm 2.0.0 or later
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jq` 1.5 or later'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For a **Google Kubernetes Engine** (**GKE**) cloud installation, you will need
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Google Cloud **Software Development kit** (**SDK**) v124.0.0 or later
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`kubectl` v1.18 or later'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pachctl` 2.0.0 or later'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pachyderm 2.0.0 or later
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Downloading the source files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All scripts for this chapter are available at [https://github.com/PacktPublishing/Reproducible-Data-Science-with-Pachyderm/tree/main/Chapter10-Pachyderm-Language-Clients](https://github.com/PacktPublishing/Reproducible-Data-Science-with-Pachyderm/tree/main/Chapter10-Pachyderm-Language-Clients).
  prefs: []
  type: TYPE_NORMAL
- en: 'We will use the image processing example that we had in [*Chapter 6*](B17085_06_Final_SB_Epub.xhtml#_idTextAnchor156),
    *Creating Your First Pipeline*. If you do not have them already, download the
    files for this example from here: [https://github.com/PacktPublishing/Reproducible-Data-Science-with-Pachyderm/tree/main/Chapter06-Creating-Your-First-Pipeline](https://github.com/PacktPublishing/Reproducible-Data-Science-with-Pachyderm/tree/main/Chapter06-Creating-Your-First-Pipeline).'
  prefs: []
  type: TYPE_NORMAL
- en: Using the Pachyderm Go client
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Pachyderm Go client enables you to communicate with Pachyderm through the
    Go API. Go is a popular programming language that has been developed by Google
    and has become widely popular among the developer community in recent years. In
    this chapter, we will learn how to enable the Pachyderm Go client and how to run
    basic Pachyderm operations using the Go client.
  prefs: []
  type: TYPE_NORMAL
- en: 'The main source files that you can use for reference are located in the [https://github.com/pachyderm/pachyderm/tree/master/src/client](https://github.com/pachyderm/pachyderm/tree/master/src/client)
    directory of the Pachyderm source repository. These files include all the methods
    that you can use to communicate with Pachyderm objects and primitives—specifically,
    the following files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/pachyderm/pachyderm/blob/master/src/client/client.go](https://github.com/pachyderm/pachyderm/blob/master/src/client/client.go)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/pachyderm/pachyderm/blob/master/src/client/pfs.go](https://github.com/pachyderm/pachyderm/blob/master/src/client/pfs.go)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/pachyderm/pachyderm/blob/master/src/client/pps.go](https://github.com/pachyderm/pachyderm/blob/master/src/client/pps.go)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These files include most of the important Pachyderm methods and the ones that
    we will use in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Go on your computer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get started, we need to verify that we have a valid Go installation in our
    environment. Go is supported in all major operating systems, including Microsoft
    Windows, Linux, and macOS. Check that you have Go installed on your computer by
    running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see an output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'If you do not have Go installed on your machine, follow these next steps to
    install it:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://golang.org/doc/install](https://golang.org/doc/install) and download
    the version of Go for your operating system.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the downloaded package and follow the prompts to install Go in your system.
    You should see the following screen when you are done:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.1 – Go installation'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17085_10_001.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.1 – Go installation
  prefs: []
  type: TYPE_NORMAL
- en: Follow the instructions for your operating system to verify that Go was installed
    as described in [https://golang.org/doc/install](https://golang.org/doc/install).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Restart your Terminal and run `go version` again to verify your installation.
    You should see an output similar to this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now that we have Go installed, let's configure `$GOPATH`.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring $GOPATH
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you have never used Go before, you need to make sure that you have your
    `$GOPATH` directory properly set up; otherwise, none of the scripts described
    in this section will work. When you installed Go, it might have already been configured.
    However, you might still want to configure the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Verify that you have the following in either `~/.bash_profile`, `~/.profile`,
    or `~/.zsh_profile` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If your respective shell configuration file did not have this configuration,
    add it, and then source your shell configuration file, like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Check your `$GOPATH` directory by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This command prints your Go environment configuration. If you are on macOS,
    your `$GOPATH` directory should be `` `GOPATH="/Users/<username>/go"`. ``
  prefs: []
  type: TYPE_NORMAL
- en: 'If you don''t have it already, create a `src` directory under your `$GOPATH`
    directory, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Under `$GOPATH/src`, create a `github.com` directory, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You will need to clone the Pachyderm repository into this directory, as described
    in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Update to the latest version of `grpc`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: After you have configured `$GOPATH`, you need to clone the Pachyderm source
    repository.
  prefs: []
  type: TYPE_NORMAL
- en: Cloning the Pachyderm source repository
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before you can use Pachyderm language clients, you need to have a copy of the
    Pachyderm source repository on your machine to be able to use the APIs. You will
    run the client methods against an existing Pachyderm cluster. The Pachyderm repository
    is stored in GitHub at [https://github.com/pachyderm/pachyderm](https://github.com/pachyderm/pachyderm).
    In addition, you need to make sure that you switch to the branch and tag that
    matches your `pachd` and `pachctl` version. In this section, we will learn how
    to clone the Pachyderm repository and how to switch to the required branch and
    tag.
  prefs: []
  type: TYPE_NORMAL
- en: To be able to run Go modules used in the scripts in this section, you need to
    clone the Pachyderm repository under the `$GOPATH` directory on your computer.
    On Mac, Go is installed under `/Users/<username>/go`, and you can clone the Pachyderm
    repository at `/ Users/<username>/go/src/github.com/`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To clone the Pachyderm repository, complete the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://github.com/pachyderm/pachyderm](https://github.com/pachyderm/pachyderm).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the **Code** tab, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.2 – Pachyderm source repository'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17085_10_002.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.2 – Pachyderm source repository
  prefs: []
  type: TYPE_NORMAL
- en: In the drop-down menu, select an option to clone with **HTTPS** or **SSH**,
    and click the **Clone** icon.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Important note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If you decide to clone with **Secure Shell** (**SSH**) and this is your first
    time cloning from GitHub, you will likely need to configure an SSH key pair. For
    more information, see [https://docs.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh](https://docs.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Go to your terminal and run the `git clone` command with the **HyperText Transfer
    Protocol Secure** (**HTTPS**) or SSH address you copied in *Step 3*, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You should see an output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The Pachyderm source code will be cloned to the `pachyderm` directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the `pachyderm` directory by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Check the branch you are on by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Get a list of tags by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Verify the version of `pachctl` and `pachd` that you are using by running the
    following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Your output might look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Check out the tag that corresponds to the version of `pachctl` and `pachd`
    that you are using. In this example, we need to check out the `2.0.1` tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Check that you have switched to the correct version by running the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: We now have valid Pachyderm source code that we will use to access our Pachyderm
    cluster. Next, let's connect to Pachyderm with the Go client.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting to Pachyderm with the Go client
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You must have a running Pachyderm cluster to be able to use the Go API client.
    If you have followed previous sections, you likely have one running on a cloud
    platform of your choice or locally. If not, go back to [*Chapter 4*](B17085_04_Final_SB_Epub.xhtml#_idTextAnchor096),
    *Installing Pachyderm Locally*, or [*Chapter 5*](B17085_05_Final_SB_Epub.xhtml#_idTextAnchor123),
    *Installing Pachyderm on a Cloud Platform*, and deploy a cluster.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will use the `access.go` script to access Pachyderm. Let''s look at the
    script to understand how it works. The first part of the script imports the required
    components, as we can see here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The second part of the script defines a `main` function. You must use the `main`
    function with Go; otherwise, it won''t work. The `main` function defines the `localhost`
    or `127.0.0.1`. `30650` is the `pachd` port:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The third part of the script, shown here, gets the version of your cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: To connect to a Pachyderm cluster, you need to know the IP address of your cluster.
    If running these examples on a local machine, `grpc://localhost:30650` should
    work.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s run the script. Follow these next steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Unless you have a load balancer deployed that enables access to your cluster,
    you also need to make sure that you run Pachyderm port-forwarding all the time
    you are accessing your cluster through the API. To start Pachyderm port-forwarding,
    run the following command in a separate terminal window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the `access.go` script, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This is an example response that you should get:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: We have successfully accessed our cluster through the Go API. Our cluster is
    running version 2.0.1\. Your version might be different.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's use the Go API to create a Pachyderm repository.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a repository with the Go client
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we know how to connect to Pachyderm, let's create a repository with
    the code we have in the `create-repo.go` script.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is what the script imports:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'The next part of the script defines a `main` function that performs the following
    operations:'
  prefs: []
  type: TYPE_NORMAL
- en: Connects to the Pachyderm cluster.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creates a repository called `photos`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Lists the repositories on this cluster.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here is how it looks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: You must run port-forwarding and make sure you replace the IP address listed
    in the script with the IP address of your cluster. If you are running the cluster
    in `minikube`, you probably don't need to change anything.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the `create-repo.go` script, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This command returns the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have created a repository, let's put some data into it.
  prefs: []
  type: TYPE_NORMAL
- en: Putting data into a Pachyderm repository with the Go client
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the previous section, we created a Pachyderm repository called `photos`.
    Let''s add the files that we have used in [*Chapter 6*](B17085_06_Final_SB_Epub.xhtml#_idTextAnchor156),
    *Creating Your First Pipeline,* to this repository. We will use the `put-files.go`
    script to add the files. Here is what the script imports:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: The next part of the script connects to the Pachyderm cluster and adds the `landscape.png`,
    `red_vase.png`, and `hand.png` files to the `master` branch of the `photos` repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the part that connects to the repository. Make sure you replace the
    IP address with the address of your cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'This part adds the files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'And the last part, shown here, lists the files in the master branch of the
    `photos` repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s run this script with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'This script returns the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Great! We have a repository with data in it. Now, let's learn how to create
    a pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: Creating pipelines with the Go client
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Finally, we can create pipelines for our example from [*Chapter 6*](B17085_06_Final_SB_Epub.xhtml#_idTextAnchor156),
    *Creating Your First Pipeline*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is what the `create-pipeline.go` script imports:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'The second part of the script connects to the Pachyderm cluster by using the
    `pachd` IP address, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'The next part of the script creates a `contour` pipeline. You can see that
    the script uses the `svekars/contour-histogram:1.0` image and gets the data from
    the `photos` repository with the `/` glob pattern. One important thing to note
    in the example shown here is that you need to specify the `parallelism_spec` for
    all pipelines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, the script creates a `histogram` pipeline, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'And finally, the script lists all the created pipelines, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is an example response:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: You can see that the script has created two of our pipelines, as intended. We
    have the whole example uploaded in one file called `contour-go-example.go` in
    the chapter's GitHub repository. Now that you have learned how to do it, you can
    just run that one script to create a whole contour pipeline example from one command.
    Next, we'll learn how to clean up our cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Cleaning up the cluster with the Go client
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `cleanup.go` script cleans up your cluster and deletes all the pipelines,
    data, and repositories. Only run it if you do not want to preserve the data anymore.
  prefs: []
  type: TYPE_NORMAL
- en: 'This script only needs to import the client from the Pachyderm repository.
    For this, the following code is required:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'The next part of the script deletes all the repositories and pipelines. We
    set the `force` flag to `true` for all pipelines and repositories so that Pachyderm
    does not interrupt deletion due to downstream pipeline dependencies. The code
    is illustrated in the following snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'And the final part of the script returns empty lists since we delete all the
    pipelines and repositories, as illustrated in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'This command returns the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: In this section, we have learned how to use the Go client to create Pachyderm
    pipelines and repositories. Next, let's learn how to do this with the Pachyderm
    Python client.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Pachyderm Python client
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Python is probably one of the most popular languages within the software engineering
    and data science community. Pachyderm provides an officially supported Python
    client through the `python-pachyderm` package. You can find the Python Pachyderm
    source repository on GitHub at [https://github.com/pachyderm/python-pachyderm](https://github.com/pachyderm/python-pachyderm)
    and on the **Python Package Index** (**PyPI**) at [https://pypi.org/project/python-pachyderm/](https://pypi.org/project/python-pachyderm/).
  prefs: []
  type: TYPE_NORMAL
- en: 'The main files that you can use as a Python client reference are located in
    the [https://github.com/pachyderm/python-pachyderm/tree/master/src/python_pachyderm/mixin](https://github.com/pachyderm/python-pachyderm/tree/master/src/python_pachyderm/mixin)
    directory of the Pachyderm source repository—most notably, the following files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/pachyderm/python-pachyderm/blob/master/src/python_pachyderm/client.py](https://github.com/pachyderm/python-pachyderm/blob/master/src/python_pachyderm/client.py)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/pachyderm/python-pachyderm/blob/master/src/python_pachyderm/mixin/pfs.py](https://github.com/pachyderm/python-pachyderm/blob/master/src/python_pachyderm/mixin/pfs.py)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/pachyderm/python-pachyderm/blob/master/src/python_pachyderm/mixin/pps.py](https://github.com/pachyderm/python-pachyderm/blob/master/src/python_pachyderm/mixin/pps.py)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Before you proceed, you must have the following components configured on your
    machine:'
  prefs: []
  type: TYPE_NORMAL
- en: A copy of the Pachyderm repository (see the *Cloning the Pachyderm source repository*
    section). With Python Pachyderm, you can clone your repository to any directory
    on your machine. It does not have to be `$GOPATH`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python 3.6 or later installed on your machine.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Access to an active Pachyderm cluster. If it's a local installation, you need
    to have Pachyderm port-forwarding running all the time you work with the repository
    through the APIs. If it's a cloud installation, you need to either have a load
    balancer running to enable access to your cluster, or you might be able to use
    Pachyderm port-forwarding as well.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have reviewed the prerequisites for this section. Now, let's install the
    `python-pachyderm` client.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the Pachyderm Python client
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before you can start using the Pachyderm Python client, you need to install
    it on your machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install the Python Pachyderm client, complete the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open a terminal window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you are on macOS or Linux, run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Your version of the `python-pachyderm` package might be different.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have `python-pachyderm` installed, let's connect to Pachyderm by
    using `python-pachyderm`.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting to your Pachyderm cluster with the Python client
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get started, let''s use the `access.py` script to connect to your cluster.
    Make sure port-forwarding is running on your machine. Here is the script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: This script connects to `pachd`, which runs on [https://localhost:30650](https://localhost:30650),
    by using the `python_pachyderm.Client()` invocation and prints the version of
    Pachyderm that you are running.
  prefs: []
  type: TYPE_NORMAL
- en: Let's run this script and see what output it returns.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the `access.py` script with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: This output means that we are on version 2.0.1\. Your output might be different.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we know how to access the cluster, let's go ahead and create a Pachyderm
    repository.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Pachyderm repository with the Python client
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will use the `create-repo.py` script to create a Pachyderm repository called
    `photos`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the code of the script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the `create-repo.py` script with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is an example output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have a repository created, let's put some data into it.
  prefs: []
  type: TYPE_NORMAL
- en: Putting data into a Pachyderm repository with the Python client
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will put the same files we used in [*Chapter 6*](B17085_06_Final_SB_Epub.xhtml#_idTextAnchor156),
    *Creating Your First Pipeline,* to the `photos` repository we have just created.
    Here is the script that we will use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: The script uses the `client.commit` method to start a commit to the master branch
    of the `photos` repository, and the `client.put_file_bytes` adds three files to
    the repository. Note that `client.list_file` needs to be a `list` and not a `string`
    for the command to work correctly.
  prefs: []
  type: TYPE_NORMAL
- en: Let's run this script.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the `put-files.py` script with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the system response that you should get:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: The preceding output is truncated. You should see the same output for each file
    that we added to the repository.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have added the files, let's create pipelines for this example.
  prefs: []
  type: TYPE_NORMAL
- en: Creating pipelines with the Pachyderm Python client
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we have a repository and files uploaded to it, let's use the `create-pipeline.py`
    script to create two pipelines from the example we had in [*Chapter 6*](B17085_06_Final_SB_Epub.xhtml#_idTextAnchor156),
    *Creating Your First Pipeline*.
  prefs: []
  type: TYPE_NORMAL
- en: '`python-pachyderm` provides two methods to create pipelines, as outlined here:'
  prefs: []
  type: TYPE_NORMAL
- en: '`create_pipeline`: This method is for all languages and is equivalent to the
    `pachctl create pipeline` method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`create_python_pipeline`: This pipeline is designed to be run with Python code
    and provides a slightly different **User Experience** (**UX**). You can read more
    about this method in the Pachyderm documentation, at [https://docs.pachyderm.com](https://docs.pachyderm.com).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will use the standard `create_pipeline` method to create this pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first part of the script creates a `contour` pipeline, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'The second part of the script creates a `histogram` pipeline, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'And the last part of the script returns a list of pipelines that were created,
    as illustrated in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: Let's run this script.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the `create-pipeline.py` script with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is a fragment of the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: In this section, we have learned how to create pipelines by using the `python-pachyderm`
    client. Next, let's clean up our cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Cleaning up the cluster with the Python client
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have successfully recreated our contour and histogram pipeline example. The
    whole example is available as one file called `contour-histogram-example.py` in
    the GitHub repository. You can download it at [https://github.com/PacktPublishing/Reproducible-Data-Science-with-Pachyderm/tree/main/Chapter10-Pachyderm-Language-Clients](https://github.com/PacktPublishing/Reproducible-Data-Science-with-Pachyderm/tree/main/Chapter10-Pachyderm-Language-Clients)
    and recreate it as many times as needed.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we will clean up our cluster so that we have a clean installation
    for [*Chapter 11*](B17085_11_Final_SB_Epub.xhtml#_idTextAnchor241), *Using Pachyderm
    Notebooks*. We will use the `cleanup.py` script for that, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: This script uses the `delete_all_pipelines` method, which deletes all pipelines
    in the cluster. You can also use `delete_all` to delete all objects and primitives
    in the cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Let's run this script.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the `cleanup.py` script with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'This command should return the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: That's it! We have successfully cleaned up our cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we've learned about how to use the two officially supported
    Pachyderm language clients—the Pachyderm Go client and the Python client. We've
    learned how to clone the Pachyderm repository and switch to the correct branch
    and tag. We've learned how to connect, create repositories, put files into repositories,
    and create pipelines, as well as delete all the objects after we are done. There
    is much more that you can do with these two language clients, but the examples
    in this chapter give you a general idea about how to use them.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn how to integrate Pachyderm with JupyterHub,
    a popular data science `python-pachyderm` client.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Setting up Ingress with Traefik to access the Pachyderm UI: [https://docs.pachyderm.com/latest/deploy-manage/deploy/ingress/pach-ui-ingress/#traefik-ingress-controller-on-pachyderm-uis-cluster-in-one-diagram](https://docs.pachyderm.com/latest/deploy-manage/deploy/ingress/pach-ui-ingress/#traefik-ingress-controller-on-pachyderm-uis-cluster-in-one-diagram)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Connecting to GitHub with SSH*: [https://docs.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh](https://docs.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Go documentation: [https://golang.org/doc/](https://golang.org/doc/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Python 3 documentation: [https://docs.python.org/3/](https://docs.python.org/3/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Python Pachyderm client documentation: [https://python-pachyderm.readthedocs.io/en/stable/](https://python-pachyderm.readthedocs.io/en/stable/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
