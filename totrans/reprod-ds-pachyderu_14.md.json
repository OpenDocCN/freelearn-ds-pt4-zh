["```py\n    pachctl version\n    ```", "```py\nCOMPONENT           VERSION\npachctl             2.0.1\npachd               2.0.1\n```", "```py\n    pachctl config get active-context\n    ```", "```py\n    pachctl version\n    ```", "```py\n    import python_pachyderm\n    client = python_pachyderm.Client()\n    print(client.get_remote_version())\n    print(list(client.list_repo()))\n    ```", "```py\n    client.create_repo(\"data\")\n    print(list(client.list_repo()))\n    ```", "```py\n    with client.commit('data', 'master') as i:\n        client.put_file_url(i, 'total_vaccinations_dec_2020_24-31.csv', 'https://raw.githubusercontent.com/PacktPublishing/Reproducible-Data-Science-with-Pachyderm/main/Chapter11-Using-Pachyderm-Notebooks/total_vaccinations_dec_2020_24-31.csv')\n    print(list(client.list_file((\"data\", \"master\"), \"\")))\n    ```", "```py\n    import pandas as pd\n    pd.read_csv(client.get_file((\"data\", \"master\"), \"total_vaccinations_dec_2020_24-31.csv\"))\n    ```", "```py\n    import pandas as pd\n    df = pd.read_csv(client.get_file((\"data\", \"master\"), \"total_vaccinations_dec_2020_24-31.csv\"))\n    data_top = df.head() \n    print(data_top)\n    ```", "```py\n     from python_pachyderm.service import pps_proto\n    client.create_pipeline(\n         pipeline_name=\"find-vaccinations\",\n         transform=pps_proto.Transform(\n             cmd=[\"python3\"],\n             stdin=[\n                 \"import pandas as pd\",\n                 \"df = pd.read_csv('/pfs/data/total_vaccinations_dec_2020_24-31.csv')\",\n                 \"max_vac = df['total_vaccinations'].idxmax()\",\n                 \"row = df.iloc[[max_vac]]\",\n                 \"row.to_csv('/pfs/out/max_vaccinations.csv', header=None, index=None, sep=' ', mode='a')\",\n             ],\n             image=\"amancevice/pandas\",\n         ),\n         input=pps_proto.Input(\n             pfs=pps_proto.PFSInput(glob=\"/\", repo=\"data\")\n         ),\n    )\n    print(list(client.list_pipeline()))\n    ```", "```py\n    client.get_file((\"find-vaccinations\", \"master\"), \"/max_vaccinations.csv\").read() \n    ```", "```py\n    client.delete_repo(\"data\", force=True)\n    client.delete_pipeline(\"find-vaccinations\")\n    print(list(client.list_repo()))\n    print(list(client.list_pipeline()))\n    ```", "```py\n    #                        text\n0  3  \"She believed she could, so she did.\" #interna...\n1  4  Knocking it out of the park again is\\r\\n@marya...\n2  5  Happy International Women's Day! Today we are ...\n3  6  Happy #InternationalWomensDay You're all power...\n4  7  Listen to an experimental podcast recorded by ...\n```", "```py\nfrom textblob import TextBlob\ntext = '''Here is the most simple example of a sentence. The rest of the text is autogenerated. This gives the program some time to perform its computations and then tries to find the shortest possible   possible sentence. Finally, let's look at the output that is used for the rest of the process.'''\nblob = TextBlob(text)\nblob.tags\nblob.noun_phrases\nfor i in blob.sentences:\n    print(i.sentiment.polarity)\n```", "```py\n    pip install textblob && python -m textblob.download_corpora\n    ```", "```py\nimport nltk\nimport pandas as pd\nfrom nltk.corpus import stopwords\nfrom nltk.tokenize import word_tokenize\nnltk.download('wordnet')\nnltk.download('punkt')\nimport re\n```", "```py\nstopwords = stopwords.words(\"english\")\ndata = pd.read_csv(\"/pfs/data/data.csv\", delimiter=\",\")\ntokens = data['text'].apply(word_tokenize)\nremove_stopwords = tokens.apply(lambda x: [w for w in x if w not in stopwords and w.isalpha()])\nremove_urls = remove_stopwords.apply(lambda x: re.split('https:\\/\\/.*', str(x))[0])\nremove_urls.to_csv('/pfs/out/cleaned-data.csv', index=True)\n```", "```py\nfrom textblob import TextBlob\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom contextlib import redirect_stdout\n```", "```py\ndata = pd.read_csv('/pfs/data-clean/cleaned-data.csv', delimiter=',')\ndata = data[['text']]\ndata[\"polarity_score\"] = data[\"text\"].apply(lambda data: TextBlob(data).sentiment.polarity)\ndata['sentiment'] = data['polarity_score'].apply(lambda x: 'Positive' if x >= 0.1 else ('Negative' if x <= -0.1 else 'Neutral'))\nprint(data.head(10))\ndata.to_csv('/pfs/out/polarity.csv', index=True)\n```", "```py\npositive = [ data for index, t in enumerate(data['text']) if data['polarity_score'][index] > 0]\nneutral = [ data for index, tweet in enumerate(data['text']) if data['polarity_score'][index] == 0]\nnegative = [ data for index, t in enumerate(data['text']) if data['polarity_score'][index] < 0]\nwith open('/pfs/out/number_of_tweets.txt', 'w') as file:\n      with redirect_stdout(file):\n          print(\"Number of Positive tweets:\", len(positive))\n          print(\"Number of Neutral tweets:\", len(neutral))\n          print(\"Number of Negative tweets:\", len(negative))\n```", "```py\ncolors = ['#9b5de5','#f15bb5','#fee440']\nfigure = pd.DataFrame({'percentage': [len(positive), len(negative), len(neutral)]},\n                       index=['Positive', 'Negative', 'Neutral'])\nplot = figure.plot.pie(y='percentage', figsize=(5, 5), autopct='%1.1f%%', colors=colors)\ncircle = plt.Circle((0,0),0.70,fc='white')\nfig = plt.gcf()\nfig.gca().add_artist(circle)\nplot.axis('equal')\nplt.tight_layout()\nplot.figure.savefig(\"/pfs/out/plot.png\")\n```", "```py\n    import python_pachyderm\n    client = python_pachyderm.Client()\n    client.create_repo(\"data\")\n    print(list(client.list_repo()))\n    ```", "```py\n    with client.commit('data', 'master') as i:\n         client.put_file_url(i, 'data.csv', 'https://raw.githubusercontent.com/PacktPublishing/Reproducible-Data-Science-with-Pachyderm/main/Chapter11-Using-Pachyderm-Notebooks/data.csv')\n    print(list(client.list_file((\"data\", \"master\"), \"\"))) \n    ```", "```py\n    list(client.list_file((\"data\", \"master\"), \"\"))\n    ```", "```py\n    from python_pachyderm.service import pps_proto\n    client.create_pipeline(\n         pipeline_name=\"data-clean\",\n         transform=pps_proto.Transform(\n             cmd=[\"python3\", \"data-clean.py\"],\n             image=\"svekars/pachyderm-ide:1.0\",\n         ),\n         input=pps_proto.Input(\n             pfs=pps_proto.PFSInput(glob=\"/\", repo=\"data\")\n         ),\n    )\n    client.create_pipeline(\n         pipeline_name=\"sentiment\",\n         transform=pps_proto.Transform(\n             cmd=[\"python3\", \"sentiment.py\"],\n             image=\"svekars/pachyderm-ide:1.0\",\n         ),\n         input=pps_proto.Input(\n             pfs=pps_proto.PFSInput(glob=\"/\", repo=\"data-clean\")\n         ),\n    )\n    print(list(client.list_pipeline()))\n    ```", "```py\n    import pandas as pd\n    pd.read_csv(client.get_file((\"data-clean\", \"master\"), \"cleaned-data.csv\"), nrows=10)\n    ```", "```py\n    list(client.list_file((\"sentiment\",\"master\"), \"\"))\n    ```", "```py\n    pd.read_csv(client.get_file((\"sentiment\",\"master\"), \"polarity.csv\"), nrows=10)\n    ```", "```py\n    client.get_file((\"sentiment\", \"master\"),\"number_of_tweets.txt\").read() \n    ```", "```py\n    from IPython.display import display\n    from PIL import Image\n    display(Image.open(client.get_file((\"sentiment\", \"master\"), \"/plot.png\")))\n    ```"]