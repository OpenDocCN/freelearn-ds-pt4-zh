["```py\nimport pandas as pd\nimport numpy as np\nimport datetime as dt\n```", "```py\ndt1 = dt.datetime(2021,1,1)\ndt2 = pd.Timestamp('2021-1-1')\ndt3 = pd.to_datetime('2021-1-1')\n```", "```py\nprint(dt1)\nprint(dt2)\nprint(dt3)\n>>\n2021-01-01 00:00:00\n2021-01-01 00:00:00\n2021-01-01 00:00:00\n```", "```py\nprint(type(dt1))\nprint(type(dt2))\nprint(type(dt3))\n>>\n<class 'datetime.datetime'>\n<class 'pandas._libs.tslibs.timestamps.Timestamp'>\n<class 'pandas._libs.tslibs.timestamps.Timestamp'>\n```", "```py\ndt1 == dt2 == dt3\n>> True\nisinstance(dt2, dt.datetime)\n>> True   \nisinstance(dt2, pd.Timestamp)\n>> True\nisinstance(dt1, pd.Timestamp)\n>> False\n```", "```py\nissubclass(pd.Timestamp, dt.datetime)\n>> True\n```", "```py\ndates = ['2021-1-1', '2021-1-2']\npd_dates = pd.to_datetime(dates)\nprint(pd_dates)\nprint(type(pd_dates))\n>>\nDatetimeIndex(['2021-01-01', '2021-01-02'], dtype='datetime64[ns]', freq=None)\n<class 'pandas.core.indexes.datetimes.DatetimeIndex'>\n```", "```py\nprint(pd_dates[0])\nprint(type(pd_dates[0]))\n>>\n2021-01-01 00:00:00\n<class 'pandas._libs.tslibs.timestamps.Timestamp'>\n```", "```py\ndates = ['2021-01-01',\n         '2/1/2021',\n         '03-01-2021',\n         'April 1, 2021',\n         '20210501',\n          np.datetime64('2021-07-01'), # numpy datetime64\n          datetime.datetime(2021, 8, 1), # python datetime\n          pd.Timestamp(2021,9,1) # pandas Timestamp\n          ]\n```", "```py\nparsed_dates = pd.to_datetime(\n                 dates,\n                 infer_datetime_format=True,\n                 errors='coerce'\n                 )\nprint(parsed_dates)\n>>\nDatetimeIndex(['2021-01-01', '2021-02-01', '2021-03-01', '2021-04-01', '2021-05-01', '2021-07-01', '2021-08-01', '2021-09-01'],\n              dtype='datetime64[ns]', freq=None)\n```", "```py\npd.DatetimeIndex(dates)\n```", "```py\nprint(f'Name of Day : {parsed_dates.day_name()}')\nprint(f'Month : {parsed_dates.month}')\nprint(f'Month Name: {parsed_dates.month_name()}')\nprint(f'Year : {parsed_dates.year}')\nprint(f'Days in Month : {parsed_dates.days_in_month}')\nprint(f'Quarter {parsed_dates.quarter}')\nprint(f'Is Quarter Start : {parsed_dates.is_quarter_start}')\nprint(f'Days in Month: {parsed_dates.days_in_month}')\nprint(f'Is Leap Year : {parsed_dates.is_leap_year}')\nprint(f'Is Month Start : {parsed_dates.is_month_start}')\nprint(f'Is Month End : {parsed_dates.is_month_end}')\nprint(f'Is Year Start : {parsed_dates.is_year_start}')\n```", "```py\nName of Day : Index(['Friday', 'Monday', 'Monday', 'Thursday', 'Saturday', 'Thursday',\n       'Sunday', 'Wednesday'],\n      dtype='object')\nMonth : Index([1, 2, 3, 4, 5, 7, 8, 9], dtype='int32')\nMonth Name: Index(['January', 'February', 'March', 'April', 'May', 'July', 'August',\n       'September'],\n      dtype='object')\nYear : Index([2021, 2021, 2021, 2021, 2021, 2021, 2021, 2021], dtype='int32')\nDays in Month : Index([31, 28, 31, 30, 31, 31, 31, 30], dtype='int32')\nQuarter Index([1, 1, 1, 2, 2, 3, 3, 3], dtype='int32')\nIs Quarter Start : [ True False False  True False  True False False]\nDays in Month: Index([31, 28, 31, 30, 31, 31, 31, 30], dtype='int32')\nIs Leap Year : [False False False False False False False False]\nIs Month Start : [ True  True  True  True  True  True  True  True]\nIs Month End : [False False False False False False False False]\nIs Year Start : [ True False False False False False False False]\n```", "```py\npd.to_datetime(\n                 dates,\n                 infer_datetime_format=True,\n                 errors='coerce'\n                 )\n```", "```py\npd.to_datetime(['something 2021', 'Jan 1, 2021'],\n               errors='ignore')\n>> Index(['something 2021', 'Jan 1, 2021'], dtype='object')\n```", "```py\npd.date_range(start=‘2021-01-01’, periods=3, freq=‘D’)\n>>\nDatetimeIndex([‘2021-01-01’, ‘2021-01-02’, ‘2021-01-03’], dtype=‘datetime64[ns]’, freq=‘D’)\n```", "```py\nValueError: Of the four parameters: start, end, periods, and freq, exactly three must be specified\n```", "```py\npd.date_range(start=‘2021-01-01’,\n               end=‘2021-01-03’,\n               freq=‘D’)\n>>\nDatetimeIndex([‘2021-01-01’, ‘2021-01-02’, ‘2021-01-03’], dtype=‘datetime64[ns]’, freq=‘D’)\n```", "```py\npd.date_range(start=‘2021-01-01’,\n               end=‘2021-01-03’,\n               periods=2)\n>>\nDatetimeIndex([‘2021-01-01’, ‘2021-01-03’], dtype=‘datetime64[ns]’, freq=None)\npd.date_range(start=‘2021-01-01’,\n               end=‘2021-01-03’,\n               periods=4)\n>>\nDatetimeIndex([‘2021-01-01 00:00:00’, ‘2021-01-01 16:00:00’,\n               ’2021-01-02 08:00:00’, ‘2021-01-03 00:00:00’],\n              dtype=‘datetime64[ns]’, freq=None)\n```", "```py\npd.date_range(end=‘2021-01-01’, periods=3, freq=‘D’)\nDatetimeIndex([‘2020-12-30’, ‘2020-12-31’, ‘2021-01-01’], dtype=‘datetime64[ns]’, freq=‘D’)\n```", "```py\npd.date_range(start=‘2021-01-01’,\n               end=‘2021-01-03’)\n>>\nDatetimeIndex([‘2021-01-01’, ‘2021-01-02’, ‘2021-01-03’], dtype=‘datetime64[ns]’, freq=‘D’)\n```", "```py\npd.date_range(start=‘2021-01-01’,\n               periods=3)\n>>\nDatetimeIndex([‘2021-01-01’, ‘2021-01-02’, ‘2021-01-03’], dtype=‘datetime64[ns]’, freq=‘D’)\n```", "```py\npd.date_range(start=‘2021-01-01’,\n               freq=‘D’)\n>>\nValueError: Of the four parameters: start, end, periods, and freq, exactly three must be specified\n```", "```py\ndf = pd.DataFrame(pd.date_range(start=‘2021-01-01’,\n               periods=5), columns=[‘Date’])\ndf[‘days_in_month’] = df[‘Date’].dt.days_in_month\ndf[‘day_name’] = df[‘Date’].dt.day_name()\ndf[‘month’] = df[‘Date’].dt.month\ndf[‘month_name’] = df[‘Date’].dt.month_name()\ndf[‘year’] = df[‘Date’].dt.year\ndf[‘days_in_month’] = df[‘Date’].dt.days_in_month\ndf[‘quarter’] = df[‘Date’].dt.quarter\ndf[‘is_quarter_start’] = df[‘Date’].dt.is_quarter_start\ndf[‘days_in_month’] = df[‘Date’].dt.days_in_month\ndf[‘is_leap_year’] = df[‘Date’].dt.is_leap_year\ndf[‘is_month_start’] = df[‘Date’].dt.is_month_start\ndf[‘is_month_end’] = df[‘Date’].dt.is_month_end\ndf[‘is_year_start’] = df[‘Date’].dt.is_year_start\ndf\n```", "```py\ndt.datetime.strptime('1/1/2022', '%m/%d/%Y')\ndt.datetime.strptime('1 January, 2022', '%d %B, %Y')\ndt.datetime.strptime('1-Jan-2022', '%d-%b-%Y')\ndt.datetime.strptime('Saturday, January 1, 2022', '%A, %B %d, %Y')\n>>\ndatetime.datetime(2022, 1, 1, 0, 0)\n```", "```py\ndt.datetime.strptime('1/1/2022', '%m/%d/%Y').date()\n>>\ndatetime.date(2022, 1, 1)\n```", "```py\ndt_1 = dt.datetime.strptime('1/1/2022', '%m/%d/%Y')\nprint(dt_1)\n>>\n2022-01-01 00:00:00\n```", "```py\npd.to_datetime('1/1/2022', format='%m/%d/%Y')\npd.to_datetime('1 January, 2022', format='%d %B, %Y')\npd.to_datetime('1-Jan-2022', format='%d-%b-%Y')\npd.to_datetime('Saturday, January 1, 2022', format='%A, %B %d, %Y')\n>>\nTimestamp('2022-01-01 00:00:00')\n```", "```py\ndt_2 = pd.to_datetime('1/1/2022', format='%m/%d/%Y')\nprint(dt_2)\n>>\n2022-01-01 00:00:00\n```", "```py\npd.to_datetime('Saturday, January 1, 2022')\npd.to_datetime('1-Jan-2022')\n>>\nTimestamp('2022-01-01 00:00:00')\n```", "```py\ndf = pd.DataFrame(\n        {'Date': ['January 1, 2022', 'January 2, 2022', 'January 3, 2022'],\n         'Sales': [23000, 19020, 21000]}\n            )\ndf\n>>\nDate  Sales\n0     January 1, 2022   23000\n1     January 2, 2022   19020\n2     January 3, 2022   21000\ndf.info()\n>>\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 3 entries, 0 to 2\nData columns (total 2 columns):\n #   Column  Non-Null Count  Dtype\n---  ------  --------------  -----\n 0   Date    3 non-null      object\n 1   Sales   3 non-null      int64\ndtypes: int64(1), object(1)\nmemory usage: 176.0+ bytes\n```", "```py\ndf['Date'] = pd.to_datetime(df['Date'])\ndf.set_index('Date', inplace=True)\ndf.info()\n>>\n<class 'pandas.core.frame.DataFrame'>\nDatetimeIndex: 3 entries, 2022-01-01 to 2022-01-03\nData columns (total 1 columns):\n #   Column  Non-Null Count  Dtype\n---  ------  --------------  -----\n 0   Sales   3 non-null      int64\ndtypes: int64(1)\nmemory usage: 48.0 bytes\n```", "```py\nimport time\nepoch_time = time.time()\nprint(epoch_time)\nprint(type(epoch_time))\n>>\n1700596942.589581\n<class 'float'>\n```", "```py\nimport pandas as pd\nt = pd.to_datetime(1700596942.589581, unit='s')\nprint(t)\n>>\n2023-11-21 20:02:22.589581056\n```", "```py\nt.tz_localize('UTC').tz_convert('US/Pacific')\n>>\nTimestamp(2023-11-21 12:02:22.589581056-0800', tz='US/Pacific')\n```", "```py\ndf = pd.DataFrame(\n        {'unix_epoch': [1641110340,  1641196740, 1641283140, 1641369540],\n                'Sales': [23000, 19020, 21000, 17030]}\n                )\ndf\n>>\n      unix_epoch  Sales\n0     1641110340  23000\n1     1641196740  19020\n2     1641283140  21000\n3     1641369540  17030\n```", "```py\ndf['Date'] = pd.to_datetime(df['unix_epoch'], unit='s')\ndf['Date'] = df['Date'].dt.tz_localize('UTC').dt.tz_convert('US/Pacific')\ndf.set_index('Date', inplace=True)\ndf\n>>                            unix_epoch  Sales\nDate       \n2022-01-01 23:59:00-08:00     1641110340  23000\n2022-01-02 23:59:00-08:00     1641196740  19020\n2022-01-03 23:59:00-08:00     1641283140  21000\n2022-01-04 23:59:00-08:00     1641369540  17030\n```", "```py\ndf.index.date\n>>\narray([datetime.date(2022, 1, 1), datetime.date(2022, 1, 2), datetime.date(2022, 1, 3), datetime.date(2022, 1, 4)], dtype=object)\n```", "```py\npd.to_datetime(1635220133.855169, unit='s', origin='unix')\n>>\nTimestamp('2021-10-26 03:48:53.855169024')\n```", "```py\npd.to_datetime(45, unit='D', origin='2023-1-1')\n>>\nTimestamp('2023-02-15 00:00:00')\n```", "```py\ndf = pd.DataFrame(\n        {'Date': pd.date_range('01-01-2022', periods=5),\n        'order' : range(5)}\n                 )\ndf\n>>\n      Date        order\n0     2022-01-01    0\n1     2022-01-02    1\n2     2022-01-03    2\n3     2022-01-04    3\n4     2022-01-05    4\n```", "```py\ndf['Unix Time'] = (df['Date'] -  pd.Timestamp(\"1970-01-01\")) // pd.Timedelta(\"1s\")\ndf\n>>\n      Date        order Unix Time\n0     2022-01-01    0       1640995200\n1     2022-01-02    1       1641081600\n2     2022-01-03    2       1641168000\n3     2022-01-04    3       1641254400\n4     2022-01-05    4       1641340800\n```", "```py\ndf = pd.DataFrame(\n        {      \n        'item': ['item1', 'item2', 'item3', 'item4', 'item5', 'item6'],\n        'purchase_dt': pd.date_range('2021-01-01', periods=6, freq='D', tz='UTC')\n        }\n)\ndf\n```", "```py\ndf['expiration_dt'] = df['purchase_dt'] + pd.Timedelta(days=30)\ndf\n```", "```py\ndf['extended_dt'] = df['purchase_dt'] +\\\n                pd.Timedelta('35 days 12 hours 30 minutes')\ndf\n```", "```py\ndf.iloc[:,1:] = df.iloc[: ,1:].apply(\n            lambda x: x.dt.tz_convert('US/Pacific')\n                )\ndf\n```", "```py\ndf['exp_ext_diff'] = (\n         df['extended_dt'] - df['expiration_dt']\n        )\ndf\n```", "```py\nimport datetime as dt\nimport pandas as pd\npd.Timedelta(days=1) == dt.timedelta(days=1)\n>> True\n```", "```py\nissubclass(pd.Timedelta, dt.timedelta)\n>> True\ndt_1 = pd.Timedelta(days=1)\ndt_2 = dt.timedelta(days=1)\nisinstance(dt_1, dt.timedelta)\n>> True\nisinstance(dt_1, pd.Timedelta)\n>> True\n```", "```py\npd.Timedelta(days=1, hours=12, minutes=55)\n>> Timedelta('1 days 12:55:00')\npd.Timedelta('1 day 12 hours 55 minutes')\n>> Timedelta('1 days 12:55:00')\npd.Timedelta('1D 12H 55T')\n>> Timedelta('1 days 12:55:00')\n```", "```py\nweek_td = pd.Timedelta('1W')\npd.to_datetime('1 JAN 2022') + week_td\n>> Timestamp('2022-01-08 00:00:00')\n```", "```py\npd.to_datetime('1 JAN 2022') + 2*week_td\n>> Timestamp('2022-01-15 00:00:00')\n```", "```py\nimport pandas as pd\ndf = pd.DataFrame(\n        {      \n        'item': ['item1', 'item2', 'item3', 'item4', 'item5', 'item6'],\n        'purchase_dt': pd.date_range('2021-01-01', periods=6, freq='D', tz='UTC')\n        }\n)\n```", "```py\ndf['1 week'] = pd.Timedelta('1W')\ndf['1_week_more'] = df['purchase_dt'] + df['1 week']\ndf['1_week_less'] = df['purchase_dt'] - df['1 week']\ndf\n```", "```py\ndf.info()\n>>\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 6 entries, 0 to 5\nData columns (total 5 columns):\n #   Column       Non-Null Count  Dtype             \n---  ------       --------------  -----             \n 0   item         6 non-null      object            \n 1   purchase_dt  6 non-null      datetime64[ns, UTC]\n 2   1 week       6 non-null      timedelta64[ns]   \n 3   1_week_more  6 non-null      datetime64[ns, UTC]\n 4   1_week_less  6 non-null      datetime64[ns, UTC]\ndtypes: datetime64[ns, UTC](3), object(1), timedelta64[ns](1)\nmemory usage: 368.0+ bytes\n```", "```py\ndf = pd.DataFrame(\n        {      \n        'item': ['item1', 'item2', 'item3', 'item4', 'item5'],\n        'purchase_dt': pd.date_range('2021-01-01', periods=5, freq='D', tz='UTC'),\n        'time_deltas': pd.timedelta_range('1W 2 days 6 hours', periods=5)\n        }\n)\ndf\n```", "```py\ndf = pd.DataFrame(\n        {      \n        'Location': ['Los Angeles',\n                     'New York',\n                     'Berlin',\n                     'New Delhi',\n                     'Moscow',\n                     'Tokyo',\n                     'Dubai'],\n        'tz': ['US/Pacific',\n               'US/Eastern',\n               'Europe/Berlin',\n               'Asia/Kolkata',\n               'Europe/Moscow',\n               'Asia/Tokyo',\n               'Asia/Dubai'],\n        'visit_dt': pd.date_range(start='22:00',periods=7, freq='45min'),\n        }).set_index('visit_dt')\ndf\n```", "```py\ndf = df.tz_localize('UTC')\n```", "```py\ndf_hq = df.tz_convert('Asia/Tokyo')\ndf_hq\n```", "```py\nTypeError: index is not a valid DatetimeIndex or PeriodIndex\n```", "```py\ndf['local_dt'] = df.index\ndf['local_dt'] = df.apply(lambda x: pd.Timestamp.tz_convert(x['local_dt'], x['tz']), axis=1)\ndf\n```", "```py\ndf.tz_localize('UTC').tz_convert('Asia/Tokyo')\n```", "```py\nTypeError: Already tz-aware, use tz_convert to convert\n```", "```py\ndf = pd.DataFrame(\n        {      \n        'Location': ['Los Angeles',\n                     'New York',\n                     'Berlin',\n                     'New Delhi',\n                     'Moscow',\n                     'Tokyo',\n                     'Dubai'],\n        'tz': ['US/Pacific',\n               'US/Eastern',\n               'Europe/Berlin',\n               'Asia/Kolkata',\n               'Europe/Moscow',\n               'Asia/Tokyo',\n               'Asia/Dubai'],\n        'visit_dt': pd.date_range(start='22:00',periods=7, freq='45min'),\n        }).set_index('visit_dt').tz_localize('UTC').tz_convert('Asia/Tokyo')\n```", "```py\ndf.index = df.index.strftime('%Y-%m-%d %H:%M %p')\ndf\n```", "```py\nnp.random.seed(10)\ndf = pd.DataFrame(\n        {      \n        'purchase_dt': pd.date_range('2021-01-01', periods=6, freq='D'),\n        'production' : np.random.randint(4, 20, 6)\n        }).set_index('purchase_dt')\ndf\n>>\n             production\npurchase_dt           \n2021-01-01           13\n2021-01-02           17\n2021-01-03            8\n2021-01-04           19\n2021-01-05            4\n2021-01-06            5\n```", "```py\ndf['day'] = df.index.day_name()\ndf\n>>\n             production        day\npurchase_dt                      \n2021-01-01           13     Friday\n2021-01-02           17   Saturday\n2021-01-03            8     Sunday\n2021-01-04           19     Monday\n2021-01-05            4    Tuesday\n2021-01-06            5  Wednesday\n```", "```py\ndf['BusinessDay'] = df.index + pd.offsets.BDay(0)\ndf['BDay Name'] = df['BusinessDay'].dt.day_name()\ndf\n>>\n             production        day BusinessDay  BDay Name\npurchase_dt                                          \n2021-01-01           13     Friday  2021-01-01     Friday\n2021-01-02           17   Saturday  2021-01-04     Monday\n2021-01-03            8     Sunday  2021-01-04     Monday\n2021-01-04           19     Monday  2021-01-04     Monday\n2021-01-05            4    Tuesday  2021-01-05    Tuesday\n2021-01-06            5  Wednesday  2021-01-06  Wednesday\n```", "```py\ndf.groupby(['BusinessDay', 'BDay Name']).sum()\n>>\n                       production\nBusinessDay BDay Name           \n2021-01-01  Friday             137\n2021-01-04  Monday             44\n2021-01-05  Tuesday             4\n2021-01-06  Wednesday           5\n```", "```py\ndf['QuarterEnd'] = df.index + pd.offsets.QuarterEnd(0)\ndf['MonthEnd'] = df.index + pd.offsets.MonthEnd(0)\ndf['BusinessDay'] = df.index + pd.offsets.BDay(0)\n>>\n             production QuarterEnd   MonthEnd BusinessDay\npurchase_dt                                         \n2021-01-01           13 2021-03-31 2021-01-31  2021-01-01\n2021-01-02           17 2021-03-31 2021-01-31  2021-01-04\n2021-01-03            8 2021-03-31 2021-01-31  2021-01-04\n2021-01-04           19 2021-03-31 2021-01-31  2021-01-04\n2021-01-05            4 2021-03-31 2021-01-31  2021-01-05\n2021-01-06            5 2021-03-31 2021-01-31  2021-01-06\n```", "```py\ndf.index + pd.offsets.BDay()\ndf.index - pd.offsets.BDay()\n```", "```py\nimport pandas as pd\nfrom pandas.tseries.holiday import (\n    USFederalHolidayCalendar\n)\ndf = pd.DataFrame(\n        {      \n        'purchase_dt': pd.date_range('2021-01-01', periods=6, freq='D'),\n        'production' : np.random.randint(4, 20, 6)\n        }).set_index('purchase_dt')\n```", "```py\nUSFederalHolidayCalendar.rules\n>>\n[Holiday: New Years Day (month=1, day=1, observance=<function nearest_workday at 0x7fedf3ec1a60>),\n Holiday: Martin Luther King Jr. Day (month=1, day=1, offset=<DateOffset: weekday=MO(+3)>),\n Holiday: Presidents Day (month=2, day=1, offset=<DateOffset: weekday=MO(+3)>),\n Holiday: Memorial Day (month=5, day=31, offset=<DateOffset: weekday=MO(-1)>),\n Holiday: July 4th (month=7, day=4, observance=<function nearest_workday at 0x7fedf3ec1a60>),\n Holiday: Labor Day (month=9, day=1, offset=<DateOffset: weekday=MO(+1)>),\n Holiday: Columbus Day (month=10, day=1, offset=<DateOffset: weekday=MO(+2)>),\n Holiday: Veterans Day (month=11, day=11, observance=<function nearest_workday at 0x7fedf3ec1a60>),\n Holiday: Thanksgiving (month=11, day=1, offset=<DateOffset: weekday=TH(+4)>),\n Holiday: Christmas (month=12, day=25, observance=<function nearest_workday at 0x7fedf3ec1a60>)]\n```", "```py\ndf['USFederalHolidays'] = df.index + pd.offsets.CDay(calendar=USFederalHolidayCalendar())\ndf\n```", "```py\nfrom pandas.tseries.holiday import (\n    Holiday,\n    nearest_workday,\n    USFederalHolidayCalendar\n)\nnewyears = Holiday(\"New Years\",\n                   month=1,\n                   day=1,\n                   observance=nearest_workday)\nnewyears\n>>\nHoliday: New Years (month=1, day=1, observance=<function nearest_workday at 0x7fedf3ec1a60>)\n```", "```py\ndf['NewYearsHoliday'] = df.index + pd.offsets.CDay(calendar=newyears)\ndf\n```", "```py\nnearest_workday(pd.to_datetime('2021-1-3'))\n>>\nTimestamp('2021-01-04 00:00:00')\nnearest_workday(pd.to_datetime('2021-1-2'))\n>>\nTimestamp('2021-01-01 00:00:00')\n```", "```py\nimport pandas as pd\nfrom pandas.tseries.holiday import AbstractHolidayCalendar, Holiday\nfrom pandas.tseries.offsets import CustomBusinessDay\njordan_workdays = \"Sun Mon Tue Wed Thu\"\n```", "```py\nclass JordanHolidayCalendar(AbstractHolidayCalendar):\n    rules = [\n        Holiday('Jordan Independence Day', month=5, day=25)\n    ]\n```", "```py\njordan_bday = CustomBusinessDay(\n    holidays=JordanHolidayCalendar().holidays(),\n    weekmask=jordan_workdays)\n```", "```py\njordan_bday.holidays[53]\n>>\nnumpy.datetime64('2023-05-25')\njordan_bday.weekmask\n>>\n'Sun Mon Tue Wed Thu'\n```", "```py\ndf = pd.DataFrame({'Date': pd.date_range('12-1-2021', periods=10, freq=dubai_uae_bday )})\n```", "```py\ndf['Day_name'] = df.Date.dt.day_name()\ndf\n```", "```py\njordan_bday = CustomBusinessDay(\n    holidays=JordanHolidayCalendar().holidays(),\n    weekmask=jordan_workdays\n)\n```", "```py\njordan_bday = pd.offsets.CustomBusinessDay(\n    holidays=JordanHolidayCalendar().holidays(),\n    weekmask=jordan_workdays,\n)\n```", "```py\njordan_bhour = pd.offsets.CustomBusinessHour(\n    start=\"8:30\",\n    end=\"15:30\",\n    holidays=JordanHolidayCalendar().holidays(),\n    weekmask=jordan_workdays)\n```", "```py\nstart_datetime = '2023-05-24 08:00'\nend_datetime = '2023-05-24 16:00'\nbusiness_hours = pd.date_range(start=start_datetime, end=end_datetime, freq=jordan_bhour)\nprint(business_hours)\n>>\nDatetimeIndex(['2023-05-24 08:30:00', '2023-05-24 09:30:00',\n               '2023-05-24 10:30:00', '2023-05-24 11:30:00',\n               '2023-05-24 12:30:00', '2023-05-24 13:30:00',\n               '2023-05-24 14:30:00'],\n              dtype='datetime64[ns]', freq='CBH')\n```"]