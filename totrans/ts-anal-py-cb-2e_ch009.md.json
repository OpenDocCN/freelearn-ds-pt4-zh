["```py\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nplt.rcParams[“figure.figsize”] = [16, 3]\n```", "```py\nfile = Path(“../../datasets/Ch8/nyc_taxi.csv”)\nnyc_taxi = pd.read_csv(folder / file,\n                     index_col=‘timestamp’,\n                     parse_dates=True)\nnyc_taxi.index.freq = ‘30T’\n```", "```py\nnyc_dates =  [\n        ”2014-11-01”,\n        ”2014-11-27”,\n        ”2014-12-25”,\n        ”2015-01-01”,\n        ”2015-01-27”\n]\n```", "```py\nnyc_taxi.plot(title=“NYC Taxi”, alpha=0.6)\n```", "```py\ndef plot_outliers(outliers, data, method=‘KNN’,\n                 halignment = ‘right’,\n                 valignment = ‘bottom’,\n                 labels=False):\n    ax = data.plot(alpha=0.6)\n\n    if labels:\n        for I in outliers’'valu’'].items():\n            plt.plot(i[0], i[1],’'r’')\n            plt.text(i[0], i[1], ‘'{i[0].date()’',\n                         horizontalalignment=halignment,\n                         verticalalignment=valignment)\n    else:\n        data.loc[outliers.index].plot(ax=ax, style’'r’')\n\n    plt.title(‘'NYC Taxi–- {method’')\n    plt.xlabel’'dat’'); plt.ylabel’'# of passenger’')\n    plt.legend(‘'nyc tax’'‘'outlier’'])\n    plt.show()\n```", "```py\nnyc_taxi.head()\n>>\n            value\ntimestamp   \n2014-07-01 00:00:00    10844\n2014-07-01 00:30:00    8127\n2014-07-01 01:00:00    6210\n2014-07-01 01:30:00    4656\n2014-07-01 02:00:00    3820\n```", "```py\ndf_downsampled = nyc_taxi.resample('D').mean()\ndf_downsampled.head()\n>>\n            value\ntimestamp   \n2014-07-01    15540.979167\n2014-07-02    15284.166667\n2014-07-03    14794.625000\n2014-07-04    11511.770833\n2014-07-05    11572.291667\n```", "```py\ndf_downsampled.index[0]\n>>\nTimestamp('2014-07-01 00:00:00', freq='D')\n```", "```py\ndf_downsampled.index.freq\n>>\n<Day>\n```", "```py\ndf_downsampled.shape\n>>\n(215, 1)\n```", "```py\ndf_downsampled = nyc_taxi.resample('3D').sum()\ndf_downsampled.head()\n>>\n            value\ntimestamp   \n2014-07-01   15540.979167\n2014-07-02   15284.166667\n2014-07-03   14794.625000\n2014-07-04   11511.770833\n2014-07-05   11572.291667\n```", "```py\ndf_downsampled.index.freq\n>>\n<3 * Days>\n```", "```py\ndf_downsampled = nyc_taxi.resample('3B').sum()\ndf_downsampled.head()\n>>\n             value\ntimestamp   \n2014-07-01  745967\n2014-07-04  1996347\n2014-07-09  3217427\n2014-07-14  3747009\n2014-07-17  2248113\n```", "```py\ndf_upsampled = nyc_taxi.resample('15T').mean()\ndf_upsampled.head()\n>>\n                     value\ntimestamp   \n2014-07-01 00:00:00    10844.0\n2014-07-01 00:15:00    NaN\n2014-07-01 00:30:00    8127.0\n2014-07-01 00:45:00    NaN\n2014-07-01 01:00:00    6210.0\n```", "```py\ndf_upsampled = nyc_taxi.resample('15T').ffill()\ndf_upsampled.head()\n>>\n                    value\ntimestamp   \n2014-07-01 00:00:00    10844\n2014-07-01 00:15:00    10844\n2014-07-01 00:30:00    8127\n2014-07-01 00:45:00    8127\n2014-07-01 01:00:00    6210\n```", "```py\nnyc_taxi.resample('M').agg(['mean', 'min',\n                            'max', 'median', 'sum'])\n```", "```py\npip install seaborn\n```", "```py\nconda install seaborn\n```", "```py\nImport seaborn as sns\nsns.__version__\n>> '0.13.1'\n```", "```py\ntx = nyc_taxi.resample('D').mean()\n```", "```py\nknown_outliers= tx.loc[nyc_dates]\nplot_outliers(known_outliers, tx, 'Known Outliers')\n```", "```py\nsns.histplot(tx)\n```", "```py\nsns.displot(tx, kind='hist', height=3, aspect=4)\n```", "```py\nsns.boxplot(tx['value'], orient='h')\n```", "```py\nsns.boxplot(tx['value'], orient='h', whis=1.5)\n```", "```py\nsns.boxenplot(tx['value'], orient='h')\n```", "```py\nfor k in [\"tukey\", \"proportion\", \"trustworthy\", \"full\"]:\n    sns.boxenplot(tx['value'], orient='h', k_depth=k, orient='h')\n    plt.title(k)\n    plt.show()\n```", "```py\nsns.violinplot(tx['value'], orient='h')\n```", "```py\nsns.histplot(tx, kde=True)\nsns.displot(tx, kind='hist', height=3, aspect=4, kde=True)\n```", "```py\nfrom pandas.plotting import lag_plot\nlag_plot(tx)\n```", "```py\ny = tx[1:].values.reshape(-1)\nx = tx[:-1].values.reshape(-1)\nsns.scatterplot(x=x, y=y)\n```", "```py\npercentiles = [0, 0.05, .10, .25, .5, .75, .90, .95, 1]\ntx.describe(percentiles= percentiles)\n```", "```py\npercentiles = [0, 5, 10, 25, 50, 75, 90, 95, 100]\nnp.percentile(tx, percentiles)\n>>\narray([ 4834.54166667, 11998.18125   , 13043.85416667, 14205.19791667,\n       15299.9375    , 16209.42708333, 17279.3       , 18321.61666667,\n       20553.5       ])\n```", "```py\ndef iqr_outliers(data):\n    q1, q3 = np.percentile(data, [25, 75])\n    IQR = q3 - q1\n    lower_fence = q1 - (1.5 * IQR)\n    upper_fence = q3 + (1.5 * IQR)\n    return data[(data.value > upper_fence) | (data.value < lower_fence)]\n```", "```py\noutliers = iqr_outliers(tx)\noutliers\n>>    \n                  value\ntimestamp              \n2014-11-01  20553.500000\n2014-11-27  10899.666667\n2014-12-25   7902.125000\n2014-12-26  10397.958333\n2015-01-26   7818.979167\n2015-01-27   4834.541667 \n```", "```py\nplot_outliers(outliers, tx, \"Outliers using IQR with Tukey's Fences\")\n```", "```py\ndef iqr_outliers(data, p):\n    q1, q3 = np.percentile(data, [25, 75])\n    IQR = q3 - q1\n    lower_fence = q1 - (p * IQR)\n    upper_fence = q3 + (p * IQR)\n    return data[(data.value > upper_fence) | (data.value < lower_fence)]\n```", "```py\nfor p in [1.3, 1.5, 2.0, 2.5,  3.0]:\n    print(f'with p={p}')\n    print(iqr_outliers(tx, p))\n    print('-'*15)\n>>\nwith p=1.3\n                   value\ntimestamp              \n2014-07-04  11511.770833\n2014-07-05  11572.291667\n2014-07-06  11464.270833\n2014-09-01  11589.875000\n2014-11-01  20553.500000\n2014-11-08  18857.333333\n2014-11-27  10899.666667\n2014-12-25   7902.125000\n2014-12-26  10397.958333\n2015-01-26   7818.979167\n2015-01-27   4834.541667\n---------------\nwith p=1.5\n                   value\ntimestamp              \n2014-11-01  20553.500000\n2014-11-27  10899.666667\n2014-12-25   7902.125000\n2014-12-26  10397.958333\n2015-01-26   7818.979167\n2015-01-27   4834.541667\n---------------\nwith p=2.0\n                   value\ntimestamp              \n2014-11-01  20553.500000\n2014-12-25   7902.125000\n2015-01-26   7818.979167\n2015-01-27   4834.541667\n---------------\nwith p=2.5\n                  value\ntimestamp             \n2014-12-25  7902.125000\n2015-01-26  7818.979167\n2015-01-27  4834.541667\n---------------\nwith p=3.0\n                  value\ntimestamp             \n2014-12-25  7902.125000\n2015-01-26  7818.979167\n2015-01-27  4834.541667\n---------------\n```", "```py\ndef zscore(df, degree=3):\n    data = df.copy()\n    data['zscore'] = (data - data.mean())/data.std()\n    outliers = data[(data['zscore'] <= -degree) | (data['zscore'] >= degree)]\n\n    return outliers['value'], data\n```", "```py\nthreshold = 2.5\noutliers, transformed = zscore(tx, threshold)\n```", "```py\ntransformed.hist()\n```", "```py\nprint(outliers)\n>>\ntimestamp\n2014-11-01    20553.500000\n2014-12-25     7902.125000\n2015-01-26     7818.979167\n2015-01-27     4834.541667\nName: value, dtype: float64\n```", "```py\nplot_outliers(outliers, tx, \"Outliers using Z-score\")\n```", "```py\ndef plot_zscore(data, d=3):\n    n = len(data)\n    plt.figure(figsize=(8,8))\n    plt.plot(data,'k^')\n    plt.plot([0,n],[d,d],'r--')\n    plt.plot([0,n],[-d,-d],'r--')\n```", "```py\ndata = transformed['zscore'].values\nplot_zscore(data, d=2.5)\n```", "```py\nfrom statsmodels.stats.diagnostic import kstest_normal\ndef test_normal(df):\n    t_test, p_value = kstest_normal(df)\n    if p_value < 0.05:\n        print(\"Reject null hypothesis. Data is not normal\")\n    else:\n        print(\"Fail to reject null hypothesis. Data is normal\")\n```", "```py\ntest_normal(tx)\n>>\nReject null hypothesis. Data is not normal\n```", "```py\nimport scipy.stats as stats\nstats.norm.ppf(0.75)\n>>\n0.6744897501960817\n```", "```py\ndef modified_zscore(df, degree=3):\n    data = df.copy()\n    s = stats.norm.ppf(0.75)\n    numerator = s*(data - data.median())\n    MAD = np.abs(data - data.median()).median()\n    data['m_zscore'] = numerator/MAD\n    outliers = data[(data['m_zscore'] > degree) | (data['m_zscore'] < -degree)]\n\n    return outliers['value'], data \n```", "```py\nthreshold = 3\noutliers, transformed = modified_zscore (tx, threshold)\n```", "```py\ntransformed.hist()\n```", "```py\nprint(outliers)\n>>\ntimestamp\n2014-11-01    20553.500000\n2014-11-27    10899.666667\n2014-12-25     7902.125000\n2014-12-26    10397.958333\n2015-01-26     7818.979167\n2015-01-27     4834.541667\nName: value, dtype: float64\n```", "```py\nplot_outliers(outliers, tx, \"Outliers using Modified  Z-score\")\n```", "```py\ndef plot_m_zscore(data, d=3):\n    n = len(data)\n    plt.figure(figsize=(8,8))\n    plt.plot(data,'k^')\n    plt.plot([0,n],[d,d],'r--')\n    plt.plot([0,n],[-d,-d],'r--')\n```", "```py\ndata = transformed['m_zscore'].values\nplot_m_zscore(data, d=3)\n```", "```py\nimport scipy\nimport matplotlib.pyplot as plt\nres = scipy.stats.probplot(tx.values.reshape(-1), plot=plt)\n```", "```py\nfrom statsmodels.graphics.gofplots import qqplot\nqqplot(tx.values.reshape(-1), line='s')\nplt.show()\n```"]