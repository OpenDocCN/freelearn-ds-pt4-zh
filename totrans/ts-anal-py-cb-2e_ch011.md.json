["```py\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport warnings\nfrom statsmodels.tsa.api import (kpss, adfuller,\n                              seasonal_decompose, STL)\nfrom statsmodels.tools.eval_measures import rmspe, rmse\nfrom sklearn.metrics import mean_absolute_percentage_error as mape\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf\nfrom itertools import product\nfrom pathlib import Path\nwarnings.filterwarnings('ignore')\nplt.rcParams[\"figure.figsize\"] = [12, 5]\nplt.style.use('grayscale')\nwarnings.filterwarnings('ignore')\n```", "```py\nlife_file = Path('../../datasets/Ch10/life_expectancy_birth.csv')\nmilk_file = Path('../../datasets/Ch10/milk_production.csv')\nlife = pd.read_csv(life_file,\n                   index_col='year',\n                   parse_dates=True,\n                  skipfooter=1)\nmilk = pd.read_csv(milk_file,\n                   index_col='month',\n                   parse_dates=True)\n```", "```py\nfig, ax = plt.subplots(2, 1, figsize=(16, 12))\nlife.plot(title='Annual Life Expectancy',\n                        legend=False, ax=ax[0])\nmilk.plot(title='Monthly Milk Production',\n                        legend=False, ax=ax[1]);Â­\n```", "```py\n def split_data(data, test_split):\n    l = len(data)\n    t_idx = round(l*(1-test_split))\n    train, test = data[ : t_idx], data[t_idx : ]\n    print(f'train: {len(train)} , test: {len(test)}')\n    return train, test\n```", "```py\ntest_split = 0.15\nmilk_train, milk_test = split_data(milk, test_split)\nlife_train, life_test = split_data(life, test_split)\n>>\ntrain: 143 , test: 25\ntrain: 50 , test: 9\n```", "```py\ndef check_stationarity(df):\n    results = adfuller(df)[1:3]\n    s = 'Non-Stationary'\n    if results[0] < 0.05:\n        s = 'Stationary'\n    print(f\"'{s}\\t p-value:{results[0]} \\t lags:{results[1]}\")\n    return (s, results[0])\n```", "```py\ndef get_top_models_df(scores, criterion='AIC', top_n=5):\n    sorted_scores = sorted(scores.items(),\n                           key=lambda item: item[1][criterion])\n\n    top_models = sorted_scores[:top_n]\n    data = [v for k, v in top_models]\n    df = pd.DataFrame(data)\n\n    df['model_id'] = [k for k, v in top_models]\n    df.set_index('model_id', inplace=True)\n    return df\n```", "```py\ndef plot_forecast(model, start, train, test):\n    forecast = pd.DataFrame(model.forecast(test.shape[0]),\n                            index=test.index)\n    ax = train.loc[start:].plot(style='--')\n    test.plot(ax=ax)\n    forecast.plot(ax=ax, style = '-.')\n    ax.legend(['orig_train', 'orig_test', 'forecast'])\n    plt.show()\n```", "```py\ndef combinator(items):\n    combo = [i for i in product(*items)]\n    return combo\n```", "```py\nlife_diff = life.diff().dropna()\nfig, ax = plt.subplots(2,1, figsize=(12,8))\nplot_acf(life_diff, zero=False, ax=ax[0])\nplot_pacf(life_diff, zero=False, ax=ax[1]);\n```", "```py\nfig, ax = plt.subplots(2,1, figsize=(12,8))\nplot_acf(life_diff, lags=25, zero=False, ax=ax[0])\nplot_pacf(life_diff, lags=25,  zero=False, ax=ax[1]);\n```", "```py\nmilk_diff_12 = milk.diff(12).dropna()\n```", "```py\ncheck_stationarity(milk_diff_12)\n>> 'Non-Stationary     p-value:0.16079880527711382      lags:12\n```", "```py\nmilk_diff_12_1 = milk.diff(12).diff(1).dropna()\ncheck_stationarity(milk_diff_12_1)\n>> 'Stationary     p-value:1.865423431878876e-05     \nlags:11\n```", "```py\nfig, ax = plt.subplots(1,2)\nplot_acf(milk_diff_12_1, zero=False, ax=ax[0], lags=36)\nplot_pacf(milk_diff_12_1, zero=False, ax=ax[1], lags=36);\n```", "```py\nfrom statsmodels.tsa.statespace.sarimax import SARIMAX\nmodel = SARIMAX(milk, order=(0,1,1),\n                seasonal_order=(0,1,1, 12)).fit(disp=False)\nplot_acf(model.resid, zero=False, lags=36);\n```", "```py\nmodel.plot_diagnostics(figsize=(12,7), lags=36);\n```", "```py\nplot_acf(model.standardized_forecasts_error.ravel(), lags=36,\n         title='Standardized Residuals ACF Plot');\n```", "```py\npd.DataFrame(model.standardized_forecasts_error.ravel(),\n             index=milk.index).plot(title='Standardized Residuals Plot',\n                                    legend=False);\n```", "```py\nfrom statsmodels.tsa.api import (ExponentialSmoothing,\n                                SimpleExpSmoothing,\n                                Holt)\n```", "```py\nfrom statsmodels.tsa.api import ExponentialSmoothing\n```", "```py\ntrend = ['add', 'mul']\ndamped = [True, False]\nlife_ex_comb = combinator([trend, damped])\nlife_ex_comb\n[('add', True), ('add', False), ('mul', True), ('mul', False)]\n```", "```py\ntrain = life_train.values.ravel()\ny = life_test.values.ravel()\nscore = {}\nfor i, (t, dp) in enumerate(life_ex_comb):\n    exp = ExponentialSmoothing(train,\n                     trend=t,\n                     damped_trend=dp,\n                     seasonal=None)\n    model = exp.fit(use_brute=True, optimized=True)   \n    y_hat = model.forecast(len(y))\n    score[i] = {'trend':t,\n                'damped':dp,\n                'AIC':model.aic,\n                'BIC':model.bic,\n                'AICc':model.aicc,\n                'RMSPE': rmspe(y, y_hat),\n                'RMSE' : rmse(y, y_hat),\n                'MAPE' : mape(y, y_hat),\n                'model': model}\n```", "```py\nmodel_eval = get_top_models_df(score, 'AIC', top_n=5)\n```", "```py\nmodel_eval.iloc[:, 0:-1]\n```", "```py\ntop_model = model_eval.iloc[0,-1]\n```", "```py\ntop_model.summary()\n```", "```py\nplot_forecast(life_best_model, '2000', life_train, life_test)\n```", "```py\ntrend , damped= ['add', 'mul'], [True, False]\nseasonal, periods = ['add' , 'mul'], [4, 6, 12]\nmilk_exp_comb = combinator([trend, damped, seasonal, periods])\n```", "```py\ntrain = milk_train.values.ravel()\ny = milk_test.values.ravel()\nmilk_model_scores = {}\nfor i, (t, dp, s, sp) in enumerate(milk_exp_comb):\n    exp = ExponentialSmoothing(train,\n                        trend=t,\n                        damped_trend=dp,\n                        seasonal=s,\n                        seasonal_periods=sp)\n    model = exp.fit(use_brute=True, optimized=True)   \n    y_hat = model.forecast(len(y))\n    score[i] = {'trend':t,\n                'damped':dp,\n                'AIC':model.aic,\n                'BIC':model.bic,\n                'AICc': model.aicc,\n                'RMSPE': rmspe(y, y_hat),\n                'RMSE' : rmse(y, y_hat),\n                'MAPE' : mape(y, y_hat),\n                'model': model}\n```", "```py\nmodel_eval = get_top_models_df(score, 'AIC', top_n=5)\nmodel_eval.iloc[:, 0:-1]\n```", "```py\ntop_model = model_eval.iloc[0,-1]\ntop_model.summary()\n```", "```py\nplot_forecast(top_model, '1969', milk_train, milk_test);\n```", "```py\npip install darts\n```", "```py\nconda install -c conda-forge -c pytorch u8darts-all\n```", "```py\nfrom darts.models import ExponentialSmoothing\nfrom darts import TimeSeries\n```", "```py\nmodel = ExponentialSmoothing(seasonal_periods=12)\nts = TimeSeries.from_dataframe(milk.reset_index(),\n                                    time_col='month', value_cols='production', freq='MS')\n```", "```py\ntrain, test = split_data(ts, 0.15)\nmodel.fit(train)\nforecast = model.predict(len(test), num_samples=100)\ntrain.plot()\nforecast.plot(label='forecast', low_quantile=0.05, high_quantile=0.95)\n```", "```py\nmodel.model.summary()\n```", "```py\nfrom darts.models import StatsForecastAutoETS\nmodelets = StatsForecastAutoETS(season_length=12)\nmodelets.fit(train)\netsforecast = modelets.predict(len(test))\ntrain.plot()\netsforecast.plot(label='AutoETS');\n```", "```py\nforecast.plot(label='ExponentialSmoothing')\netsforecast.plot(label='StatsForecastAutoETS');\n```", "```py\nfrom statsmodels.tsa.arima.model import ARIMA\nfrom statsmodels.stats.diagnostic import acorr_ljungbox\n```", "```py\ndecomposed = seasonal_decompose(life)\ndecomposed.plot();\n```", "```py\ncheck_stationarity(life)\n>>\nNon-Stationary   p-value:0.6420882853800064      lags:2\nlife_df1 = life.diff().dropna()\ncheck_stationarity(life_df1)\n>>\nStationary     p-value:1.5562189676003248e-14      lags:1\n```", "```py\nlife_df1.plot();\n```", "```py\nfig, ax = plt.subplots(1,2)\nplot_acf(life_df1, ax=ax[0])\nplot_pacf(life_df1, ax=ax[1]);\n```", "```py\nmodel = ARIMA(life_train, order=(0,1,1))\nresults = model.fit()\nresults.summary()\n```", "```py\n(acorr_ljungbox(results.resid,\n                lags=25,\n                return_df=True) < 0.05)['lb_pvalue'].sum()\n>> 0\n```", "```py\nplot_acf(results.resid, zero=False);\n```", "```py\nresults.plot_diagnostics();plt.show()\n```", "```py\nplot_forecast(results, '1998', life_train, life_test)\n```", "```py\npv, dv, qv = [list(range(3))]*3\nvals = combinator([pv, dv, qv ])\nscore = {}\nfor i, (p, d, q) in enumerate(vals):\n    m = ARIMA(life_train, order=(p,d,q))\n    res = m.fit()\n    y = life_train.values.ravel()\n    y_hat = res.forecast(steps=len(y))\n    score[i] = {'order': (p,d,q),\n                'AIC':res.aic,\n                'RMSPE': rmspe(y, y_hat),\n                'BIC': res.bic,\n                'AICc':res.aicc,\n                'RMSE' : rmse(y, y_hat),\n                'MAPE' : mape(y, y_hat),\n                'model': res}\nget_top_models_df(score, 'AIC')\n```", "```py\nbest_m = get_top_models_df(score, 'AIC').iloc[0,-1]\n```", "```py\nplot_forecast(best_m, '1998', life_train, life_test);\n```", "```py\npv, dv, qv = [list(range(3))]*3\nvals = combinator([pv, dv, qv])\nscore = {}\nfor i, (p, d, q) in enumerate(vals):\n    m = ARIMA(milk_train, order=(p,d,q))\n    res = m.fit()\n    y = milk_test.values.ravel()\n    y_hat = res.forecast(steps=len(y))\n    score[i] = {'order': (p,d,q),\n                'AIC':res.aic,\n                'BIC': res.bic,\n                'AICc':res.aicc,\n                'RMSPE': rmspe(y, y_hat),\n                'RMSE' : rmse(y, y_hat),\n                'MAPE' : mape(y, y_hat),\n                'model': res}\nmodel = get_top_models_df(score, 'AIC').iloc[0,-1]\nplot_forecast(model, '1971', milk_train, milk_test);\n```", "```py\nfrom statsmodels.tsa.statespace.sarimax import SARIMAX\n```", "```py\nplot_acf(milk, lags=40, zero=False);\n```", "```py\nplot_acf(milk.diff(1).dropna(), lags=40, zero=False);\n```", "```py\ndecomposed = seasonal_decompose(milk, period=12, model='multiplicative')\nmilk_s = decomposed.seasonal\nplot_acf(milk_s, zero=False, lags=40);\n```", "```py\nmilk_dif_12 = milk.diff(12).dropna()\nmilk_dif_12_1 = milk.diff(12).diff(1).dropna()\nsets = [milk, milk_dif_12, milk_dif_12_1]\ndesc = ['Original', 'Deseasonalize (Difference Once)', 'Differencing Twice']\nfig, ax = plt.subplots(2,2, figsize=(20,10))\nindex, l = milk.index, milk.shape[0]\nfor i, (d_set, d_desc) in enumerate(zip(sets, desc)):\n    v, r = i // 2, i % 2\n    outcome, pval = check_stationarity(d_set)\n    d_set.plot(ax= ax[v,r], title=f'{d_desc}: {outcome}', legend=False)\n    pd.Series(d_set.mean().values.tolist()*l, index=index).plot(ax=ax[v,r])\n    ax[v,r].title.set_size(20)\nax[1,1].set_visible(False)\nplt.show()\n```", "```py\nfig, ax = plt.subplots(1,2)\nplot_acf(milk_dif_12_1, zero=False, lags=36, ax=ax[0], title=f'ACF - {d_desc}')\nplot_pacf(milk_dif_12_1, zero=False, lags=36, ax=ax[1], title=f'PACF - {d_desc}')\nplt.show()\n```", "```py\nsarima_model = SARIMAX(milk_train,\n                       order=(0,1,1),\n                       seasonal_order=(0,1,1,12))\nmodel = sarima_model.fit(disp=0)\n```", "```py\nmodel.plot_diagnostics(figsize=(15,7));\n```", "```py\nmodel.summary()\n```", "```py\nplot_acf(model.resid[1:])\n```", "```py\nplot_forecast(model, '1971', milk_train, milk_test);\n```", "```py\nP_ns, D_ns, Q_ns = [list(range(3))]*3\nP_s, D_s, Q_s = [list(range(2))]*3\nvals = combinator([P_ns, D_ns, Q_ns, P_s, D_s, Q_s])\nscore = {}\nfor i, (p, d, q, P, D, Q) in enumerate(vals):\n    if i%15 == 0:\n        print(f'Running model #{i} using SARIMA({p},{d},{q})({P},{D},{Q},12)')\n    m = SARIMAX(milk_train,\n                order=(p,d,q),\n                seasonal_order=(P, D, Q, 12),\n                enforce_stationarity=False)\n    res = m.fit(disp=0)\n    y = milk_test.values.ravel()\n    y_hat = res.forecast(steps=len(y))\n    score[i] = {'non-seasonal order': (p,d,q),\n                'seasonal order': (P, D, Q),\n                'AIC':res.aic,\n                'AICc': res.aicc,\n                'BIC': res.bic,\n                'RMSPE': rmspe(y, y_hat),\n                'RMSE' : rmse(y, y_hat),\n                'MAPE' : mape(y, y_hat),\n                'model': res}\n```", "```py\nRunning model #0 using SARIMA(0,0,0)(0,0,0,12)\nRunning model #15 using SARIMA(0,0,1)(1,1,1,12)\nRunning model #30 using SARIMA(0,1,0)(1,1,0,12)\nRunning model #45 using SARIMA(0,1,2)(1,0,1,12)\nRunning model #60 using SARIMA(0,2,1)(1,0,0,12)\nRunning model #75 using SARIMA(1,0,0)(0,1,1,12)\nRunning model #90 using SARIMA(1,0,2)(0,1,0,12)\nRunning model #105 using SARIMA(1,1,1)(0,0,1,12)\nRunning model #120 using SARIMA(1,2,0)(0,0,0,12)\nRunning model #135 using SARIMA(1,2,1)(1,1,1,12)\nRunning model #150 using SARIMA(2,0,0)(1,1,0,12)\nRunning model #165 using SARIMA(2,0,2)(1,0,1,12)\nRunning model #180 using SARIMA(2,1,1)(1,0,0,12)\nRunning model #195 using SARIMA(2,2,0)(0,1,1,12)\nRunning model #210 using SARIMA(2,2,2)(0,1,0,12)\n```", "```py\nget_top_models_df(score, 'AIC')\n```", "```py\nget_top_models_df(score, 'BIC')\n```", "```py\nbest_model = get_top_models_df(score, BIC).iloc[0,-1]\n```", "```py\nplot_forecast(best_model, '1962', milk_train, milk_test);\n```", "```py\npip install pmdarima\n```", "```py\nconda install -c conda-forge pmdarima\n```", "```py\nimport pmdarima as pm\n```", "```py\nauto_model = pm.auto_arima(milk_train,\n                           seasonal=True,\n                           m=12,\n                           test='adf',\n                           stepwise=True)\nauto_model.summary()\n```", "```py\nauto_model = pm.auto_arima(milk_train,\n                           seasonal=True,\n                           m=12,\n                           test='adf',\n                           stepwise=True,\n                           trace=True)\n```", "```py\nauto_model = pm.auto_arima(milk_train,\n                           seasonal=True,\n                           m=12,\n                           test='adf',\n                           information_criterion='bic',\n                           stepwise=True,\n                           trace=True)\n```", "```py\nauto_model.plot_diagnostics(figsize=(15,7));\n```", "```py\nn = milk_test.shape[0]\nindex = milk_test.index\nax = milk_test.plot(style='--', alpha=0.6, figsize=(12,4))\npd.Series(auto_model.predict(n_periods=n),\n          index=index).plot(style='-', ax=ax)\nplt.legend(['test', 'forecast']);\n```", "```py\nn = milk_test.shape[0]\nforecast, conf_interval = auto_model.predict(n_periods=n,\n                                             return_conf_int=True,\n                                            alpha=0.05)\nlower_ci, upper_ci  = zip(*conf_interval)\nindex = milk_test.index\nax = milk_test.plot(style='--', alpha=0.6, figsize=(12,4))\npd.Series(forecast, index=index).plot(style='-', ax=ax)\nplt.fill_between(index, lower_ci, upper_ci, alpha=0.2)\nplt.legend(['test', 'forecast']);\n```", "```py\nsum(forecast) == sum(conf_interval.mean(axis=1))\n>> True\n```", "```py\nfrom pmdarima.arima.utils import ndiffs, nsdiffs\nn_adf = ndiffs(milk, test='adf')\n# KPSS test (the default in auto_arima):\nn_kpss = ndiffs(milk, test='kpss')\nn_pp = ndiffs(milk, test='pp') \nn_ch = nsdiffs(milk, test='ocsb', m=10, max_D=12,)\nn_ocsb = nsdiffs(milk, test='ch' , m=10, max_D=12,)\n```", "```py\nmodel = pm.auto_arima(milk_train,\n                      seasonal=True,\n                      with_intercept=True,\n                      d=1,\n                      max_d=2,\n                      start_p=0, max_p=2,\n                      start_q=0, max_q=2,\n                      m=12,\n                      D=1,\n                      max_D=2,\n                      start_P=0, max_P=2,\n                      start_Q=0, max_Q=2,\n                      information_criterion='aic',\n                      stepwise=False,\n                      out_of_sample_siz=25,\n                      test = 'kpss',\n                      score='mape',\n                      trace=True) \n```", "```py\nmodel = AutoARIMA(seasonal=True,\n                           m=12,\n                 stepwise=True)\nts = TimeSeries.from_dataframe(milk_train.reset_index(),\n                                    time_col='month', value_cols='production', freq='MS')\ndarts_arima = model.fit(ts)\ndarts_forecast = model.predict(len(milk_test))\nts.plot(label='Training')\ndarts_forecast.plot(label='Forecast', linestyle='--');\n```", "```py\nfrom darts.models import StatsForecastAutoARIMA\nmodel = StatsForecastAutoARIMA(season_length=12)\nmodel.fit(ts)\npred = model.predict(len(milk_test))\nts.plot(label='Training')\ndarts_forecast.plot(label='AutoArima', linestyle='--');\npred.plot(label='StatsforecstsAutoArima');\n```"]