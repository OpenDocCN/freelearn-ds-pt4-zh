["```py\npip install pyod\n```", "```py\nconda install -c conda-forge pyod\n```", "```py\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport warnings\nwarnings.filterwarnings('ignore')\nplt.rcParams[\"figure.figsize\"] = [16, 3]\n```", "```py\nfile = Path(\"../../datasets/Ch14/nyc_taxi.csv\")\nnyc_taxi_2 = pd.read_csv(file,\n                     index_col='timestamp',\n                     parse_dates=True)\nnyc_taxi_2.index.freq = '30T'\n```", "```py\nnyc_dates =  [\n        \"2014-11-01\",\n        \"2014-11-27\",\n        \"2014-12-25\",\n        \"2015-01-01\",\n        \"2015-01-27\"]\n```", "```py\ndef plot_outliers(outliers, data, method='KNN',\n                 halignment = 'right',\n                 valignment = 'top',\n                 labels=False):\n    ax = data.plot(alpha=0.6)\n\n    if labels:\n        for i in outliers['value'].items():\n            plt.plot(i[0], i[1], 'v', markersize=8, markerfacecolor='none', markeredgecolor='k')\n            plt.text(i[0], i[1]-(i[1]*0.04), f'{i[0].strftime(\"%m/%d\")}',\n                         horizontalalignment=halignment,\n                         verticalalignment=valignment)\n    else:\n        data.loc[outliers.index].plot(ax=ax, style='rX', markersize=9)       \n    plt.title(f'NYC Taxi - {method}')\n    plt.xlabel('date'); plt.ylabel('# of passengers')\n    plt.legend(['nyc taxi','outliers'])\n    plt.show()\n```", "```py\ntx = nyc_taxi.resample('D').mean()\nknown_outliers = tx.loc[nyc_dates]\nplot_outliers(known_outliers, tx, 'Known Outliers')\n```", "```py\nfrom pyod.models.knn import KNN\n```", "```py\nknn = KNN(contamination=0.03,\n          method='mean',\n          n_neighbors=5)\nknn.fit(tx)\n>>\nKNN(algorithm='auto', contamination=0.05, leaf_size=30, method='mean',\n  metric='minkowski', metric_params=None, n_jobs=1, n_neighbors=5, p=2,\n  radius=1.0)\n```", "```py\npredicted = pd.Series(knn.predict(tx),\n                      index=tx.index)\nprint('Number of outliers = ', predicted.sum())\n>>\nNumber of outliers =  6\n```", "```py\noutliers = predicted[predicted == 1]\noutliers = tx.loc[outliers.index]\noutliers\n>> \nTimestamp  value\n2014-11-01  20553.500000\n2014-11-27  10899.666667\n2014-12-25  7902.125000\n2014-12-26  10397.958333\n2015-01-26  7818.979167\n2015-01-27  4834.541667\n```", "```py\nplot_outliers(outliers, tx, 'KNN')\n```", "```py\nplot_outliers(outliers, tx, 'KNN', labels=True)\n```", "```py\nknn_scores = knn.decision_scores_\n```", "```py\nknn_scores_df = (pd.DataFrame(scores,\n             index=tx.index,\n             columns=['score']))\nknn_scores_df\n```", "```py\nknn.threshold_\n>> 225.0179166666657\n```", "```py\nknn_scores_df[knn_scores_df['score'] >= knn.threshold_].sort_values('score', ascending=False)\n```", "```py\nn = int(len(tx)*0.03)\nknn_scores_df.nlargest(n, 'score')\n```", "```py\nknn_proba = knn.predict_proba(tx, method='linear')\nknn_proba_df = (pd.DataFrame(np.round(knn_proba * 100, 3),\n            index=tx.index,\n            columns=['Proba_Normal', 'Proba_Anomaly']))\nknn_proba_df.nlargest(n, 'Proba_Anomaly')\n```", "```py\nfrom joblib import dump, load\n# save the knn model\ndump(knn, 'knn_outliers.joblib')\n# load the knn model\nknn = load('knn_outliers.joblib')\n```", "```py\nknn = KNN(contamination=0.03,\n          method='mean',\n          n_neighbors=5)\n```", "```py\ndef knn_anomaly(df, method='mean', contamination=0.05, k=5):\n    knn = KNN(contamination=contamination,\n              method=method,\n              n_neighbors=5)\n    knn.fit(df)   \n    decision_score = pd.DataFrame(knn.decision_scores_,\n                          index=df.index, columns=['score'])\n    n = int(len(df)*contamination)\n    outliers = decision_score.nlargest(n, 'score')\n    return outliers, knn.threshold_\n```", "```py\nfor method in ['mean', 'median', 'largest']:\n    o, t = knn_anomaly(tx, method=method)\n    print(f'Method= {method}, Threshold= {t}')\n    print(o)\n```", "```py\nfrom pyod.models.lof import LOF\n```", "```py\nlof = LOF(contamination=0.03, n_neighbors=5)\nlof.fit(tx)\n>>\nLOF(algorithm='auto', contamination=0.03, leaf_size=30, metric='minkowski',\n  metric_params=None, n_jobs=1, n_neighbors=5, novelty=True, p=2)\n```", "```py\npredicted = pd.Series(lof.predict(tx),\n                      index=tx.index)\nprint('Number of outliers = ', predicted.sum())\n>>\nNumber of outliers = 6\n```", "```py\noutliers = predicted[predicted == 1]\noutliers = tx.loc[outliers.index]\noutliers\n>>       \nTimestamp    value\n2014-10-31  17473.354167\n2014-11-01  20553.500000\n2014-12-25  7902.125000\n2014-12-26  10397.958333\n2015-01-26  7818.979167\n2015-01-27  4834.541667\n```", "```py\nplot_outliers(outliers, tx, 'LOF')\n```", "```py\nplot_outliers(outliers, tx, 'LOF', labels=True)\n```", "```py\ntimestamp  score\n2014-11-01  14.254309\n2015-01-27  5.270860\n2015-01-26  3.988552\n2014-12-25  3.952827\n2014-12-26  2.295987\n2014-10-31  2.158571\n```", "```py\nfrom pyod.models.cblof import CBLOF\ncblof = CBLOF(n_clusters=4, contamination=0.03)\ncblof.fit(tx)\npredicted = pd.Series(lof.predict(tx),\n                      index=tx.index)\noutliers = predicted[predicted == 1]\noutliers = tx.loc[outliers.index]\nplot_outliers(outliers, tx, 'CBLOF')\n```", "```py\nfrom pyod.models.iforest import IForest\n```", "```py\niforest = IForest(contamination=0.03,\n                 n_estimators=100,\n                 random_state=0)\niforest.fit(nyc_daily)\n>>\nIForest(behaviour='old', bootstrap=False, contamination=0.03,\n    max_features=1.0, max_samples='auto', n_estimators=100, n_jobs=1,\n    random_state=0, verbose=0)\n```", "```py\npredicted = pd.Series(iforest.predict(tx),\n                      index=tx.index)\nprint('Number of outliers = ', predicted.sum())\n>>\nNumber of outliers =  7\n```", "```py\nFilter the predicted Series to only show the outlier values:\noutliers = predicted[predicted == 1]\noutliers = tx.loc[outliers.index]\noutliers\n>>     \ntimestamp  value\n2014-11-01  20553.500000\n2014-11-08  18857.333333\n2014-11-27  10899.666667\n2014-12-25  7902.125000\n2014-12-26  10397.958333\n2015-01-26  7818.979167\n2015-01-27  4834.541667\n```", "```py\nplot_outliers(outliers, tx, 'IForest')\n```", "```py\nplot_outliers(outliers, tx, 'IForest', labels=True)\n```", "```py\nfrom sklearn.ensemble import IsolationForest\nsk_iforest = IsolationForest(contamination=0.03)\nsk_prediction = pd.Series(sk_iforest.fit_predict(tx),\n                      index=tx.index)\nsk_outliers = sk_prediction[sk_prediction == -1]\nsk_outliers = tx.loc[sk_outliers.index]\nsk_outliers\n>> \ntimestamp   value\n2014-11-01  20553.500000\n2014-11-08  18857.333333\n2014-11-27  10899.666667\n2014-12-25  7902.125000\n2014-12-26  10397.958333\n2015-01-26  7818.979167\n2015-01-27  4834.541667\n```", "```py\nfrom pyod.models.ocsvm import OCSVM\n```", "```py\nocsvm = OCSVM(contamination=0.03, kernel='rbf')\nocsvm.fit(tx)\n>>\nOCSVM(cache_size=200, coef0=0.0, contamination=0.03, degree=3, gamma='auto',\n   kernel='rbf', max_iter=-1, nu=0.5, shrinking=True, tol=0.001,\n   verbose=False)\n```", "```py\npredicted = pd.Series(ocsvm.predict(tx),\n                      index=tx.index)\nprint('Number of outliers = ', predicted.sum())\n>>\nNumber of outliers =  5\n```", "```py\noutliers = predicted[predicted == 1]\noutliers = tx.loc[outliers.index]\noutliers\n>> \ntimestamp  value\n2014-08-09  15499.708333\n2014-11-18  15499.437500\n2014-11-27  10899.666667\n2014-12-24  12502.000000\n2015-01-05  12502.750000\n```", "```py\nplot_outliers(outliers, tx, 'OCSVM')\n```", "```py\nfrom pyod.utils.utility import standardizer\nscaled = standardizer(tx)\npredicted = pd.Series(ocsvm.fit_predict(scaled),\n                      index=tx.index)\noutliers = predicted[predicted == 1]\noutliers = tx.loc[outliers.index]\noutliers\n>>\ntimestamp  value\n2014-07-06  11464.270833\n2014-11-01  20553.500000\n2014-11-27  10899.666667\n2014-12-25  7902.125000\n2014-12-26  10397.958333\n2015-01-26  7818.979167\n2015-01-27  4834.541667\n```", "```py\nplot_outliers(outliers, tx, 'OCSVM Scaled'))\n```", "```py\nfor kernel in ['linear', 'poly', 'rbf', 'sigmoid']:\n    ocsvm = OCSVM(contamination=0.03, kernel=kernel)\n    predict = pd.Series(ocsvm.fit_predict(scaled),\n                      index=tx.index, name=kernel)\n    outliers = predict[predict == 1]\n    outliers = tx.loc[outliers.index]\n    plot_outliers(outliers, tx, kernel, labels=True)\n```", "```py\nfrom pyod.models.copod import COPOD\n```", "```py\ncopod = COPOD(contamination=0.03)\ncopod.fit(tx)\n>>\nCOPOD(contamination=0.03, n_jobs=1)\n```", "```py\npredicted = pd.Series(copod.predict(tx),\n                      index=tx.index)\nprint('Number of outliers = ', predicted.sum())\n>>\nNumber of outliers =  7\n```", "```py\noutliers = predicted[predicted == 1]\noutliers = tx.loc[outliers.index]\noutliers\n>>           \ntimestamp  value\n2014-07-04  11511.770833\n2014-07-06  11464.270833\n2014-11-27  10899.666667\n2014-12-25  7902.125000\n2014-12-26  10397.958333\n2015-01-26  7818.979167\n2015-01-27  4834.541667\n```", "```py\nplot_outliers(outliers, tx, 'COPOD')\n```", "```py\nplot_outliers(outliers, tx, 'COPOD', labels=True)\n```", "```py\nfrom pyod.models.mad import MAD\nmad = MAD(threshold=3)\npredicted = pd.Series(mad.fit_predict(tx),\n                      index=tx.index)\noutliers = predicted[predicted == 1]\noutliers = tx.loc[outliers.index]\noutliers\n>> \ntimestamp  value\n2014-11-01  20553.500000\n2014-11-27  10899.666667\n2014-12-25  7902.125000\n2014-12-26  10397.958333\n2015-01-26  7818.979167\n2015-01-27  4834.541667\n```", "```py\n>> conda create -n pycaret python=3.8 -y\n>> conda activate pycaret\n>> pip install \"pycaret[full]\"\n```", "```py\npython -m ipykernel install --user --name pycaret --display-name \"PyCaret\"\n```", "```py\nfrom pycaret.anomaly import *\nsetup = setup(tx, session_id = 1, normalize=True)\n```", "```py\nmodels()\n```", "```py\nlist_of_models = models().index.tolist()[0:8]\nlist_of_models\n>>\n['abod', 'cluster', 'cof', 'iforest', 'histogram', 'knn', 'lof', 'svm']\n```", "```py\nresults = {}\nfor model in list_of_models:\n    cols = ['value', 'Anomaly_Score']\n    outlier_model = create_model(model, fraction=0.03)\n    print(outlier_model)\n    outliers = predict_model(outlier_model, data=tx)\n    outliers = outliers[outliers['Anomaly'] == 1][cols]\n    outliers.sort_values('Anomaly_Score', ascending=False, inplace=True)\n    results[model] = {'data': outliers, 'model': outlier_model}\n```", "```py\nfor model in results:\n    print(f'Model: {model}')\n    print(results[model]['data'], '\\n')\n```", "```py\nModel: abod\n                   value  Anomaly_Score\ntimestamp                             \n2014-11-01  20553.500000      -0.002301\n2015-01-27   4834.541667      -0.007914\n2014-12-26  10397.958333      -3.417724\n2015-01-26   7818.979167    -116.341395\n2014-12-25   7902.125000    -117.582752\n2014-11-27  10899.666667    -122.169590\n2014-10-31  17473.354167   -2239.318906\nModel: cluster\n                   value  Anomaly_Score\ntimestamp                             \n2015-01-27   4834.541667       3.657992\n2015-01-26   7818.979167       2.113955\n2014-12-25   7902.125000       2.070939\n2014-11-01  20553.500000       0.998279\n2014-12-26  10397.958333       0.779688\n2014-11-27  10899.666667       0.520122\n2014-11-28  12850.854167       0.382981\n```"]