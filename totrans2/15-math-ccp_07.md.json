["```py\n import pandas as pd\nimport matplotlib.pyplot as plt\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf\ndf_unemployment = pd.read_csv(\"../Data/uk_unemployment_rate_monthly.csv\")\n```", "```py\n plot_acf(df_unemployment['Unemployment'], auto_ylims=True)\nplt.title('ACF vs lag', fontsize=24)\nplt.xlabel(r'lag $k$', fontsize=20)\nplt.ylabel('ACF', fontsize=20)\nplt.xticks(fontsize=14)\nplt.yticks(fontsize=14)\nplt.show()\n```", "```py\n plot_pacf(df_unemployment['Unemployment'], \n          method='ywm', auto_ylims=True)\nplt.title('PACF vs lag', fontsize=24)\nplt.xlabel(r'lag $k$', fontsize=20)\nplt.ylabel('PACF', fontsize=20)\nplt.xticks(fontsize=14)\nplt.yticks(fontsize=14) plt.show()\n```", "```py\n from statsmodels.tsa.stattools import adfuller, kpss\nadf_test = adfuller(my_time_series)\nkpss_test = kpss(my_time_series)\n```", "```py\n import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf\nfrom statsmodels.tsa.arima.model import ARIMA\nfrom pmdarima.arima import auto_arima\n# Read in the de-seasonalized and centered sun activity data\ndf_sunactivity = pd.read_csv('../Data/sunactivity_deseasonalized.csv')\n# We'll split the data into a training segment and a hold-out period \n# at the end, which we'll forecast using our ARIMA model\ny = df_sunactivity['sunactivity_deseasonalized'].to_numpy()\n# Set the number of forecast steps\nn_steps = 6\n# Calculate the length of the training data and extract\nn_train = y.shape[0] - n_steps\ny_train = y[0:n_train]\n```", "```py\n plot_acf(y_train, auto_ylims=True)\nplt.title('SUN ACTIVITY ACF ', fontsize=24)\nplt.xlabel(r'lag $k$', fontsize=20)\nplt.ylabel('ACF', fontsize=20)\nplt.xticks(fontsize=14)\nplt.yticks(fontsize=14)\nplt.show()\n```", "```py\n plot_pacf(y_train, method='ldb', auto_ylims=True)\nplt.title('SUN ACTIVITY PACF ', fontsize=24)\nplt.xlabel(r'lag $k$', fontsize=20)\nplt.ylabel('PACF', fontsize=20)\nplt.xticks(fontsize=14)\nplt.yticks(fontsize=14)\nplt.show()\n```", "```py\n # Run the auto_arima function\n# auto_arima(y_train)\n```", "```py\n ARIMA(3,0,0)(0,0,0)[0], scoring_args={}, suppress_warnings=True,\n      with_intercept=False)\n```"]