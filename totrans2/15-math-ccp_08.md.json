["```py\n import pandas as pd\nimport numpy as np\nfrom scipy.stats import ttest_ind\n# Read in t-test example dataset\ndf_simple_example = pd.read_csv(\"../Data/hypothesis_test_example.csv\")\n```", "```py\n # Extract summary statistics of the data\ndf_simple_example.describe()\n```", "```py\n x_A         x_B\ncount  100.000000 100.000000\nmean   0.529000   0.176000\nstd    0.938470   0.983872\nmin   -1.036634  -1.957430\n25%   -0.241617  -0.448830\n50%    0.544784   0.250698\n75%    1.108813   0.676324\nmax    3.126451   2.612088\n```", "```py\n # We pass in the two columns of data. We are assuming\n# the underlying population variances are the same in each group. ttest_ind(df_simple_example['x_A'], df_simple_example['x_B'])\n```", "```py\n Ttest_indResult(statistic=2.5961983095998966, pvalue=0.010132851609223453, df=198.0)\n```", "```py\n import numpy as np\nnp.random.seed(1869)\n```", "```py\n # Set a large, but reasonable number of permutations to run. # In this case I've chosen to generate 100000 permuted datasets. # This may take a couple of minutes to run. n_permutations = 100000\n# First I'll combine the original data into a single array. This makes \n# performing the permutation easier. x_All = np.concatenate((df_simple_example['x_A'].to_numpy(), \n                        df_simple_example['x_B'].to_numpy()))\n## Next I'll calculate the observed test-statistic value and store it\n## in a variable called t_observed\n# Create arrays to hold the indices of the datapoints\n# belonging to the A group and the B group. To start, the\n# A group datapoints are at indices 0:99\\. The B group datapoints\n# are at indices 100:199\nnA = df_simple_example.shape[0]\nnB = nA\nA_indices = np.arange(0, nA)\nB_indices = np.arange(nA, (nA+nB))\n# Calculate the mean of each sample group\nm_A = np.mean(x_All[A_indices])\nm_B = np.mean(x_All[B_indices])\n# Calculate the sample variances of each sample group\n# The ddof=1 means we are using unbiased estimators for\n# the sample variance calculations\ns2_A = np.var(x_All[A_indices], ddof=1)\ns2_B = np.var(x_All[B_indices], ddof=1)\n# Calculate the t-value test-statistic for the original data\nsigma2_observed = (((nA-1)*s2_A) + ((nB-1)*s2_B))/(nA+nB-2)\nt_observed = (m_A - m_B)/ (np.sqrt(sigma2_observed) * np.sqrt(2.0/nA))\nprint(\"Observed t-value is = \", t_observed)\n```", "```py\n # Set our p-value estimate count to zero\np_count = 0.0\n# Loop over the permutations\nfor i in range(n_permutations):\n    #Generate the permutation\n    permuted_indices = np.random.permutation(nA+nB)\n    A_indices = permuted_indices[0:nA]\n    B_indices = permuted_indices[nA:(nA+nB)]\n    # Calculate the mean of each sample group\n    # for the permuted dataset\n    m_A = np.mean(x_All[A_indices])\n    m_B = np.mean(x_All[B_indices])\n    # Calculate the sample variances of each sample group\n    # for the permuted dataset\n    s2_A = np.var(x_All[A_indices], ddof=1)\n    s2_B = np.var(x_All[B_indices], ddof=1)\n    # Calculate the t-value for the permuted dataset\n    sigma2_permuted = (((nA-1)*s2_A) + ((nB-1)*s2_B))/(nA+nB-2)\n    t_permuted = (m_A - m_B)/ (\n        np.sqrt(sigma2_permuted) * np.sqrt(2.0/nA))\n    # Update our count if the t-value for the permuted dataset\n    # exceeds (in magnitude) that for the real dataset\n    if np.abs(t_permuted) >= np.abs(t_observed):\n        p_count += 1.0\n# Now estimate the p-value\np_value_permutation = (1.0+p_count)/(1.0+n_permutations)\nprint(\"Permutation estimated p-value = \", p_value_permutation)\n```", "```py\n Observed t-value is =  2.5961983095998966\nPermutation estimated p-value =  0.01032989670103299\n```", "```py\n from statsmodels.stats.weightstats import DescrStatsW, CompareMeans\nmean_comparison = CompareMeans(DescrStatsW(df_simple_example['x_A']), \n                               DescrStatsW(df_simple_example['x_B']))\n```", "```py\n mean_difference_95CI = mean_comparison.tconfint_diff()\nmean_difference_95CI\n```", "```py\n (0.0848686453568156, 0.6211313546431837)\n```", "```py\n from statsmodels.stats.power import TTestIndPower\nprint(\"Sample size required = \", TTestIndPower().solve_power(\n    effect_size=0.5, nobs1=None, alpha=0.05, power=0.8, \n    ratio=1.0, alternative='two-sided'))\n```", "```py\n Sample size required =  63.765610587854034\n```"]